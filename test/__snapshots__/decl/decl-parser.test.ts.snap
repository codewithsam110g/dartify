// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`AST Parsers to IR > parseClass() > should parse a simple class with properties and a constructor 1`] = `
{
  "constructors": [],
  "extends": undefined,
  "getAccessors": [],
  "implements": [],
  "isAbstract": false,
  "kind": "class",
  "methods": [],
  "name": "ApiClient",
  "properties": [
    {
      "isOptional": false,
      "isReadonly": false,
      "isStatic": false,
      "name": "endpoint",
      "type": {
        "isNullable": false,
        "kind": "string",
        "name": "string",
      },
    },
  ],
  "setAccessors": [],
  "typeParams": [],
}
`;

exports[`AST Parsers to IR > parseEnum() > should parse a numeric enum 1`] = `
{
  "kind": "enum",
  "members": [
    {
      "name": "Up",
      "value": undefined,
    },
    {
      "name": "Down",
      "value": undefined,
    },
    {
      "name": "Left",
      "value": undefined,
    },
    {
      "name": "Right",
      "value": undefined,
    },
  ],
  "name": "Direction",
}
`;

exports[`AST Parsers to IR > parseFunction() > should parse a function declaration with parameters 1`] = `
{
  "kind": "function",
  "name": "getUser",
  "parameters": [
    {
      "isOptional": false,
      "isRest": false,
      "name": "id",
      "type": {
        "isNullable": false,
        "kind": "number",
        "name": "number",
      },
    },
  ],
  "returnType": {
    "genericArgs": [],
    "isNullable": false,
    "kind": "typeReference",
    "name": "User",
  },
}
`;

exports[`AST Parsers to IR > parseInterface() > should parse a simple interface 1`] = `
{
  "constructors": [],
  "extends": [],
  "getAccessors": [],
  "indexSignatures": [],
  "kind": "interface",
  "methods": [],
  "name": "User",
  "properties": [
    {
      "isOptional": false,
      "isReadonly": false,
      "isStatic": false,
      "name": "id",
      "type": {
        "isNullable": false,
        "kind": "number",
        "name": "number",
      },
    },
    {
      "isOptional": false,
      "isReadonly": false,
      "isStatic": false,
      "name": "name",
      "type": {
        "isNullable": false,
        "kind": "string",
        "name": "string",
      },
    },
  ],
  "setAccessors": [],
}
`;

exports[`AST Parsers to IR > parseInterface() > should parse an interface with optional and readonly members 1`] = `
{
  "constructors": [],
  "extends": [],
  "getAccessors": [],
  "indexSignatures": [],
  "kind": "interface",
  "methods": [],
  "name": "Config",
  "properties": [
    {
      "isOptional": false,
      "isReadonly": true,
      "isStatic": false,
      "name": "host",
      "type": {
        "isNullable": false,
        "kind": "string",
        "name": "string",
      },
    },
    {
      "isOptional": true,
      "isReadonly": false,
      "isStatic": false,
      "name": "port",
      "type": {
        "isNullable": false,
        "kind": "number",
        "name": "number",
      },
    },
  ],
  "setAccessors": [],
}
`;

exports[`AST Parsers to IR > parseTypeAlias() > should parse a type alias for a union type 1`] = `
{
  "kind": "typeAlias",
  "name": "StringOrNumber",
  "type": {
    "isNullable": false,
    "kind": "union",
    "name": "union",
    "unionTypes": [
      {
        "isNullable": false,
        "kind": "string",
        "name": "string",
      },
      {
        "isNullable": false,
        "kind": "number",
        "name": "number",
      },
    ],
  },
}
`;

exports[`AST Parsers to IR > parseVariableStmt() > should parse a variable statement 1`] = `
[
  {
    "isConst": true,
    "isReadonly": false,
    "kind": "variable",
    "name": "PI",
    "type": {
      "isNullable": false,
      "kind": "numberLiteral",
      "literalValue": 3.14159,
      "name": "double",
    },
  },
]
`;
