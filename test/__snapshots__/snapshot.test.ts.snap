// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`TypeScript Definition Files Snapshot Tests > should transpile axios.d.ts correctly > axios.dart 1`] = `
"// Generated from axios.d.ts
// Do not edit directly

@JS()
library axios;
import 'package:js/js.dart';


typedef AxiosHeaderValue = dynamic /* AxiosHeaders|String|List<String>|num|bool */;
@JS()
@anonymous
abstract class RawAxiosHeaders{}
extension RawAxiosHeadersExtension on RawAxiosHeaders {
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
typedef MethodsHeaders = Partial<dynamic>;
typedef AxiosHeaderMatcher = dynamic /* String|RegExp|bool Function(AxiosHeaders, String, String) */;
typedef AxiosHeaderParser = dynamic Function(AxiosHeaders, AxiosHeaderValue, String);
@JS("AxiosHeaders")
class AxiosHeaders {
  external factory AxiosHeaders([dynamic /* RawAxiosHeaders|AxiosHeaders|String */ headers]);
  @JS("set")
  external AxiosHeaders set_1([String headerName, AxiosHeaderValue value, dynamic /* bool|AxiosHeaderMatcher */ rewrite]);
  @JS("set")
  external AxiosHeaders set_2([dynamic /* RawAxiosHeaders|AxiosHeaders|String */ headers, bool rewrite]);
  @JS("get")
  external RegExpExecArray? get_1(String headerName, RegExp parser);
  @JS("get")
  external AxiosHeaderValue get_2(String headerName, [dynamic /* bool|AxiosHeaderParser */ matcher]);
  external bool has(String header, [AxiosHeaderMatcher matcher]);
  external bool delete(dynamic /* String|List<String> */ header, [AxiosHeaderMatcher matcher]);
  external bool clear([AxiosHeaderMatcher matcher]);
  external AxiosHeaders normalize(bool format);
  @JS("concat")
  external AxiosHeaders concat_1([/* rest */ Array targets]);
  @JS("concat")
  external static AxiosHeaders concat_2([/* rest */ Array targets]);
  external RawAxiosHeaders toJSON([bool asStrings]);
  external static AxiosHeaders from([dynamic /* AxiosHeaders|RawAxiosHeaders|String */ thing]);
  external static AxiosHeaders accessor(dynamic /* String|List<String> */ header);
  external AxiosHeaders setContentType(ContentType value, [dynamic /* bool|AxiosHeaderMatcher */ rewrite]);
  @JS("getContentType")
  external RegExpExecArray? getContentType_1([RegExp parser]);
  @JS("getContentType")
  external AxiosHeaderValue getContentType_2([AxiosHeaderMatcher matcher]);
  external bool hasContentType([AxiosHeaderMatcher matcher]);
  external AxiosHeaders setContentLength(AxiosHeaderValue value, [dynamic /* bool|AxiosHeaderMatcher */ rewrite]);
  @JS("getContentLength")
  external RegExpExecArray? getContentLength_1([RegExp parser]);
  @JS("getContentLength")
  external AxiosHeaderValue getContentLength_2([AxiosHeaderMatcher matcher]);
  external bool hasContentLength([AxiosHeaderMatcher matcher]);
  external AxiosHeaders setAccept(AxiosHeaderValue value, [dynamic /* bool|AxiosHeaderMatcher */ rewrite]);
  @JS("getAccept")
  external RegExpExecArray? getAccept_1([RegExp parser]);
  @JS("getAccept")
  external AxiosHeaderValue getAccept_2([AxiosHeaderMatcher matcher]);
  external bool hasAccept([AxiosHeaderMatcher matcher]);
  external AxiosHeaders setUserAgent(AxiosHeaderValue value, [dynamic /* bool|AxiosHeaderMatcher */ rewrite]);
  @JS("getUserAgent")
  external RegExpExecArray? getUserAgent_1([RegExp parser]);
  @JS("getUserAgent")
  external AxiosHeaderValue getUserAgent_2([AxiosHeaderMatcher matcher]);
  external bool hasUserAgent([AxiosHeaderMatcher matcher]);
  external AxiosHeaders setContentEncoding(AxiosHeaderValue value, [dynamic /* bool|AxiosHeaderMatcher */ rewrite]);
  @JS("getContentEncoding")
  external RegExpExecArray? getContentEncoding_1([RegExp parser]);
  @JS("getContentEncoding")
  external AxiosHeaderValue getContentEncoding_2([AxiosHeaderMatcher matcher]);
  external bool hasContentEncoding([AxiosHeaderMatcher matcher]);
  external AxiosHeaders setAuthorization(AxiosHeaderValue value, [dynamic /* bool|AxiosHeaderMatcher */ rewrite]);
  @JS("getAuthorization")
  external RegExpExecArray? getAuthorization_1([RegExp parser]);
  @JS("getAuthorization")
  external AxiosHeaderValue getAuthorization_2([AxiosHeaderMatcher matcher]);
  external bool hasAuthorization([AxiosHeaderMatcher matcher]);
  external List<String> getSetCookie();
  external IterableIterator [Symbol.iterator]();
}
typedef CommonRequestHeadersList = String;
typedef ContentType = dynamic /* AxiosHeaderValue|String|String|String|String|String|String */;
typedef RawAxiosRequestHeaders = Partial<dynamic>;
typedef AxiosRequestHeaders = dynamic;
typedef CommonResponseHeadersList = String;
typedef RawCommonResponseHeaders = dynamic;
typedef RawAxiosResponseHeaders = Partial<dynamic>;
typedef AxiosResponseHeaders = dynamic;
@JS()
@anonymous
abstract class AxiosRequestTransformer{}
extension AxiosRequestTransformerExtension on AxiosRequestTransformer {
}
@JS()
@anonymous
abstract class AxiosResponseTransformer{}
extension AxiosResponseTransformerExtension on AxiosResponseTransformer {
}
@JS()
@anonymous
abstract class AxiosAdapter{}
extension AxiosAdapterExtension on AxiosAdapter {
}
@JS()
@anonymous
abstract class AxiosBasicCredentials{}
extension AxiosBasicCredentialsExtension on AxiosBasicCredentials {
  external String get username;
  external set username(String value);
  external String get password;
  external set password(String value);
}
@JS()
@anonymous
abstract class AxiosProxyConfig{}
extension AxiosProxyConfigExtension on AxiosProxyConfig {
  external String get host;
  external set host(String value);
  external num get port;
  external set port(num value);
  external AxiosBasicCredentials get auth;
  external set auth(AxiosBasicCredentials value);
  external String get protocol;
  external set protocol(String value);
}
@JS("HttpStatusCode")
class HttpStatusCode{}
@JS("HttpStatusCode")
extension HttpStatusCodeEnum on HttpStatusCode{
  external static String get Continue;
  external static String get SwitchingProtocols;
  external static String get Processing;
  external static String get EarlyHints;
  external static String get Ok;
  external static String get Created;
  external static String get Accepted;
  external static String get NonAuthoritativeInformation;
  external static String get NoContent;
  external static String get ResetContent;
  external static String get PartialContent;
  external static String get MultiStatus;
  external static String get AlreadyReported;
  external static String get ImUsed;
  external static String get MultipleChoices;
  external static String get MovedPermanently;
  external static String get Found;
  external static String get SeeOther;
  external static String get NotModified;
  external static String get UseProxy;
  external static String get Unused;
  external static String get TemporaryRedirect;
  external static String get PermanentRedirect;
  external static String get BadRequest;
  external static String get Unauthorized;
  external static String get PaymentRequired;
  external static String get Forbidden;
  external static String get NotFound;
  external static String get MethodNotAllowed;
  external static String get NotAcceptable;
  external static String get ProxyAuthenticationRequired;
  external static String get RequestTimeout;
  external static String get Conflict;
  external static String get Gone;
  external static String get LengthRequired;
  external static String get PreconditionFailed;
  external static String get PayloadTooLarge;
  external static String get UriTooLong;
  external static String get UnsupportedMediaType;
  external static String get RangeNotSatisfiable;
  external static String get ExpectationFailed;
  external static String get ImATeapot;
  external static String get MisdirectedRequest;
  external static String get UnprocessableEntity;
  external static String get Locked;
  external static String get FailedDependency;
  external static String get TooEarly;
  external static String get UpgradeRequired;
  external static String get PreconditionRequired;
  external static String get TooManyRequests;
  external static String get RequestHeaderFieldsTooLarge;
  external static String get UnavailableForLegalReasons;
  external static String get InternalServerError;
  external static String get NotImplemented;
  external static String get BadGateway;
  external static String get ServiceUnavailable;
  external static String get GatewayTimeout;
  external static String get HttpVersionNotSupported;
  external static String get VariantAlsoNegotiates;
  external static String get InsufficientStorage;
  external static String get LoopDetected;
  external static String get NotExtended;
  external static String get NetworkAuthenticationRequired;
}
typedef Method = String;
typedef ResponseType = String;
typedef responseEncoding = String;
@JS()
@anonymous
abstract class TransitionalOptions{}
extension TransitionalOptionsExtension on TransitionalOptions {
  external bool get silentJSONParsing;
  external set silentJSONParsing(bool value);
  external bool get forcedJSONParsing;
  external set forcedJSONParsing(bool value);
  external bool get clarifyTimeoutError;
  external set clarifyTimeoutError(bool value);
}
@JS()
@anonymous
abstract class GenericAbortSignal{}
extension GenericAbortSignalExtension on GenericAbortSignal {
  external bool get aborted;
  external dynamic Function([dynamic])? get onabort;
  external set onabort(dynamic Function([dynamic])? value);
  external dynamic Function([dynamic]) get addEventListener;
  external set addEventListener(dynamic Function([dynamic]) value);
  external dynamic Function([dynamic]) get removeEventListener;
  external set removeEventListener(dynamic Function([dynamic]) value);
}
@JS()
@anonymous
abstract class FormDataVisitorHelpers{}
extension FormDataVisitorHelpersExtension on FormDataVisitorHelpers {
  external SerializerVisitor get defaultVisitor;
  external set defaultVisitor(SerializerVisitor value);
  external dynamic Function(dynamic) get convertValue;
  external set convertValue(dynamic Function(dynamic) value);
  external bool Function(dynamic) get isVisitable;
  external set isVisitable(bool Function(dynamic) value);
}
@JS()
@anonymous
abstract class SerializerVisitor{}
extension SerializerVisitorExtension on SerializerVisitor {
}
@JS()
@anonymous
abstract class SerializerOptions{}
extension SerializerOptionsExtension on SerializerOptions {
  external SerializerVisitor get visitor;
  external set visitor(SerializerVisitor value);
  external bool get dots;
  external set dots(bool value);
  external bool get metaTokens;
  external set metaTokens(bool value);
  external bool? get indexes;
  external set indexes(bool? value);
}
@JS()
@anonymous
abstract class FormSerializerOptions{}
extension FormSerializerOptionsExtension on FormSerializerOptions {
}
@JS()
@anonymous
abstract class ParamEncoder{}
extension ParamEncoderExtension on ParamEncoder {
}
@JS()
@anonymous
abstract class CustomParamsSerializer{}
extension CustomParamsSerializerExtension on CustomParamsSerializer {
}
@JS()
@anonymous
abstract class ParamsSerializerOptions{}
extension ParamsSerializerOptionsExtension on ParamsSerializerOptions {
  external ParamEncoder get encode;
  external set encode(ParamEncoder value);
  external CustomParamsSerializer get serialize;
  external set serialize(CustomParamsSerializer value);
}
typedef MaxUploadRate = num;
typedef MaxDownloadRate = num;
typedef BrowserProgressEvent = dynamic;
@JS()
@anonymous
abstract class AxiosProgressEvent{}
extension AxiosProgressEventExtension on AxiosProgressEvent {
  external num get loaded;
  external set loaded(num value);
  external num get total;
  external set total(num value);
  external num get progress;
  external set progress(num value);
  external num get bytes;
  external set bytes(num value);
  external num get rate;
  external set rate(num value);
  external num get estimated;
  external set estimated(num value);
  external bool get upload;
  external set upload(bool value);
  external bool get download;
  external set download(bool value);
  external BrowserProgressEvent get event;
  external set event(BrowserProgressEvent value);
  external bool get lengthComputable;
  external set lengthComputable(bool value);
}
typedef Milliseconds = num;
typedef AxiosAdapterName = dynamic /* String|String|String|dynamic */;
typedef AxiosAdapterConfig = dynamic /* AxiosAdapter|AxiosAdapterName */;
typedef AddressFamily = num?;
@JS()
@anonymous
abstract class LookupAddressEntry{}
extension LookupAddressEntryExtension on LookupAddressEntry {
  external String get address;
  external set address(String value);
  external AddressFamily get family;
  external set family(AddressFamily value);
}
typedef LookupAddress = dynamic /* String|LookupAddressEntry */;
@JS()
@anonymous
abstract class AxiosRequestConfig{}
extension AxiosRequestConfigExtension on AxiosRequestConfig {
  external String get url;
  external set url(String value);
  external dynamic /* Method|String */ get method;
  external set method(dynamic /* Method|String */ value);
  external String get baseURL;
  external set baseURL(String value);
  external bool get allowAbsoluteUrls;
  external set allowAbsoluteUrls(bool value);
  external dynamic /* AxiosRequestTransformer|List<AxiosRequestTransformer> */ get transformRequest;
  external set transformRequest(dynamic /* AxiosRequestTransformer|List<AxiosRequestTransformer> */ value);
  external dynamic /* AxiosResponseTransformer|List<AxiosResponseTransformer> */ get transformResponse;
  external set transformResponse(dynamic /* AxiosResponseTransformer|List<AxiosResponseTransformer> */ value);
  external dynamic /* dynamic|AxiosHeaders */ get headers;
  external set headers(dynamic /* dynamic|AxiosHeaders */ value);
  external dynamic get params;
  external set params(dynamic value);
  external dynamic /* ParamsSerializerOptions|CustomParamsSerializer */ get paramsSerializer;
  external set paramsSerializer(dynamic /* ParamsSerializerOptions|CustomParamsSerializer */ value);
  external D get data;
  external set data(D value);
  external Milliseconds get timeout;
  external set timeout(Milliseconds value);
  external String get timeoutErrorMessage;
  external set timeoutErrorMessage(String value);
  external bool get withCredentials;
  external set withCredentials(bool value);
  external dynamic /* AxiosAdapterConfig|List<AxiosAdapterConfig> */ get adapter;
  external set adapter(dynamic /* AxiosAdapterConfig|List<AxiosAdapterConfig> */ value);
  external AxiosBasicCredentials get auth;
  external set auth(AxiosBasicCredentials value);
  external ResponseType get responseType;
  external set responseType(ResponseType value);
  external dynamic /* responseEncoding|String */ get responseEncoding;
  external set responseEncoding(dynamic /* responseEncoding|String */ value);
  external String get xsrfCookieName;
  external set xsrfCookieName(String value);
  external String get xsrfHeaderName;
  external set xsrfHeaderName(String value);
  external void Function(AxiosProgressEvent) get onUploadProgress;
  external set onUploadProgress(void Function(AxiosProgressEvent) value);
  external void Function(AxiosProgressEvent) get onDownloadProgress;
  external set onDownloadProgress(void Function(AxiosProgressEvent) value);
  external num get maxContentLength;
  external set maxContentLength(num value);
  external bool Function(num)? get validateStatus;
  external set validateStatus(bool Function(num)? value);
  external num get maxBodyLength;
  external set maxBodyLength(num value);
  external num get maxRedirects;
  external set maxRedirects(num value);
  external dynamic /* num|List<dynamic> */ get maxRate;
  external set maxRate(dynamic /* num|List<dynamic> */ value);
  external void Function(Record<String, dynamic>, dynamic) get beforeRedirect;
  external set beforeRedirect(void Function(Record<String, dynamic>, dynamic) value);
  external String? get socketPath;
  external set socketPath(String? value);
  external dynamic get transport;
  external set transport(dynamic value);
  external dynamic get httpAgent;
  external set httpAgent(dynamic value);
  external dynamic get httpsAgent;
  external set httpsAgent(dynamic value);
  external dynamic /* AxiosProxyConfig|bool */ get proxy;
  external set proxy(dynamic /* AxiosProxyConfig|bool */ value);
  external CancelToken get cancelToken;
  external set cancelToken(CancelToken value);
  external bool get decompress;
  external set decompress(bool value);
  external TransitionalOptions get transitional;
  external set transitional(TransitionalOptions value);
  external GenericAbortSignal get signal;
  external set signal(GenericAbortSignal value);
  external bool get insecureHTTPParser;
  external set insecureHTTPParser(bool value);
  external dynamic get env;
  external set env(dynamic value);
  external FormSerializerOptions get formSerializer;
  external set formSerializer(FormSerializerOptions value);
  external AddressFamily get family;
  external set family(AddressFamily value);
  external dynamic /* void Function(String, dynamic, void Function(Error?, dynamic /* LookupAddress|List<LookupAddress> */, [AddressFamily]))|Future<dynamic /* List<dynamic>|LookupAddress */> Function(String, dynamic) */ get lookup;
  external set lookup(dynamic /* void Function(String, dynamic, void Function(Error?, dynamic /* LookupAddress|List<LookupAddress> */, [AddressFamily]))|Future<dynamic /* List<dynamic>|LookupAddress */> Function(String, dynamic) */ value);
  external dynamic /* bool|bool? Function(InternalAxiosRequestConfig) */ get withXSRFToken;
  external set withXSRFToken(dynamic /* bool|bool? Function(InternalAxiosRequestConfig) */ value);
  external dynamic /* Omit<RequestInit, String>|Record<String, dynamic> */ get fetchOptions;
  external set fetchOptions(dynamic /* Omit<RequestInit, String>|Record<String, dynamic> */ value);
}
typedef RawAxiosRequestConfig = AxiosRequestConfig<D>;
@JS()
@anonymous
abstract class InternalAxiosRequestConfig{}
extension InternalAxiosRequestConfigExtension on InternalAxiosRequestConfig {
  external AxiosRequestHeaders get headers;
  external set headers(AxiosRequestHeaders value);
}
@JS()
@anonymous
abstract class HeadersDefaults{}
extension HeadersDefaultsExtension on HeadersDefaults {
  external RawAxiosRequestHeaders get common;
  external set common(RawAxiosRequestHeaders value);
  external RawAxiosRequestHeaders get delete;
  external set delete(RawAxiosRequestHeaders value);
  external RawAxiosRequestHeaders get get;
  external set get(RawAxiosRequestHeaders value);
  external RawAxiosRequestHeaders get head;
  external set head(RawAxiosRequestHeaders value);
  external RawAxiosRequestHeaders get post;
  external set post(RawAxiosRequestHeaders value);
  external RawAxiosRequestHeaders get put;
  external set put(RawAxiosRequestHeaders value);
  external RawAxiosRequestHeaders get patch;
  external set patch(RawAxiosRequestHeaders value);
  external RawAxiosRequestHeaders get options;
  external set options(RawAxiosRequestHeaders value);
  external RawAxiosRequestHeaders get purge;
  external set purge(RawAxiosRequestHeaders value);
  external RawAxiosRequestHeaders get link;
  external set link(RawAxiosRequestHeaders value);
  external RawAxiosRequestHeaders get unlink;
  external set unlink(RawAxiosRequestHeaders value);
}
@JS()
@anonymous
abstract class AxiosDefaults{}
extension AxiosDefaultsExtension on AxiosDefaults {
  external HeadersDefaults get headers;
  external set headers(HeadersDefaults value);
}
@JS()
@anonymous
abstract class CreateAxiosDefaults{}
extension CreateAxiosDefaultsExtension on CreateAxiosDefaults {
  external dynamic /* RawAxiosRequestHeaders|AxiosHeaders|Partial<HeadersDefaults> */ get headers;
  external set headers(dynamic /* RawAxiosRequestHeaders|AxiosHeaders|Partial<HeadersDefaults> */ value);
}
@JS()
@anonymous
abstract class AxiosResponse{}
extension AxiosResponseExtension on AxiosResponse {
  external T get data;
  external set data(T value);
  external num get status;
  external set status(num value);
  external String get statusText;
  external set statusText(String value);
  external dynamic /* RawAxiosResponseHeaders|AxiosResponseHeaders */ get headers;
  external set headers(dynamic /* RawAxiosResponseHeaders|AxiosResponseHeaders */ value);
  external InternalAxiosRequestConfig<D> get config;
  external set config(InternalAxiosRequestConfig<D> value);
  external dynamic get request;
  external set request(dynamic value);
}
@JS("AxiosError")
class AxiosError {
  external factory AxiosError([String message, String code, InternalAxiosRequestConfig config, dynamic request, AxiosResponse response]);
  external InternalAxiosRequestConfig<D> get config;
  external set config(InternalAxiosRequestConfig<D> value);
  external String get code;
  external set code(String value);
  external dynamic get request;
  external set request(dynamic value);
  external AxiosResponse<T, D> get response;
  external set response(AxiosResponse<T, D> value);
  external bool get isAxiosError;
  external set isAxiosError(bool value);
  external num get status;
  external set status(num value);
  external dynamic Function() get toJSON;
  external set toJSON(dynamic Function() value);
  external Error get cause;
  external set cause(Error value);
  external static dynamic get ERR_FR_TOO_MANY_REDIRECTS;
  external static dynamic get ERR_BAD_OPTION_VALUE;
  external static dynamic get ERR_BAD_OPTION;
  external static dynamic get ERR_NETWORK;
  external static dynamic get ERR_DEPRECATED;
  external static dynamic get ERR_BAD_RESPONSE;
  external static dynamic get ERR_BAD_REQUEST;
  external static dynamic get ERR_NOT_SUPPORT;
  external static dynamic get ERR_INVALID_URL;
  external static dynamic get ERR_CANCELED;
  external static dynamic get ECONNABORTED;
  external static dynamic get ETIMEDOUT;
  external static AxiosError from(dynamic /* Error|dynamic */ error, [String code, InternalAxiosRequestConfig config, dynamic request, AxiosResponse response, dynamic customProps]);
}
@JS("CanceledError")
class CanceledError {
}
typedef AxiosPromise = Future<AxiosResponse<T>>;
@JS()
@anonymous
class CancelStatic{
  external factory CancelStatic([String message]);
}
extension CancelStaticExtension on CancelStatic {
}
@JS()
@anonymous
abstract class Cancel{}
extension CancelExtension on Cancel {
  external String? get message;
  external set message(String? value);
}
@JS()
@anonymous
abstract class Canceler{}
extension CancelerExtension on Canceler {
}
@JS()
@anonymous
class CancelTokenStatic{
  external factory CancelTokenStatic(void Function(Canceler) executor);
}
extension CancelTokenStaticExtension on CancelTokenStatic {
  external CancelTokenSource source();
}
@JS()
@anonymous
abstract class CancelToken{}
extension CancelTokenExtension on CancelToken {
  external Future<Cancel> get promise;
  external set promise(Future<Cancel> value);
  external Cancel get reason;
  external set reason(Cancel value);
  external void throwIfRequested();
}
@JS()
@anonymous
abstract class CancelTokenSource{}
extension CancelTokenSourceExtension on CancelTokenSource {
  external CancelToken get token;
  external set token(CancelToken value);
  external Canceler get cancel;
  external set cancel(Canceler value);
}
@JS()
@anonymous
abstract class AxiosInterceptorOptions{}
extension AxiosInterceptorOptionsExtension on AxiosInterceptorOptions {
  external bool get synchronous;
  external set synchronous(bool value);
  external bool Function(InternalAxiosRequestConfig) get runWhen;
  external set runWhen(bool Function(InternalAxiosRequestConfig) value);
}
typedef AxiosRequestInterceptorUse = num Function([dynamic /* T|Future<T> */ Function(T)?, dynamic Function(dynamic)?, AxiosInterceptorOptions]);
typedef AxiosResponseInterceptorUse = num Function([dynamic /* T|Future<T> */ Function(T)?, dynamic Function(dynamic)?]);
@JS()
@anonymous
abstract class AxiosInterceptorManager{}
extension AxiosInterceptorManagerExtension on AxiosInterceptorManager {
  external dynamic get use;
  external set use(dynamic value);
  external void eject(num id);
  external void clear();
}
@JS("Axios")
class Axios {
  external factory Axios([AxiosRequestConfig config]);
  external AxiosDefaults get defaults;
  external set defaults(AxiosDefaults value);
  external dynamic get interceptors;
  external set interceptors(dynamic value);
  external String getUri([AxiosRequestConfig config]);
  external Promise request(AxiosRequestConfig config);
  external Promise get(String url, [AxiosRequestConfig config]);
  external Promise delete(String url, [AxiosRequestConfig config]);
  external Promise head(String url, [AxiosRequestConfig config]);
  external Promise options(String url, [AxiosRequestConfig config]);
  external Promise post(String url, [D data, AxiosRequestConfig config]);
  external Promise put(String url, [D data, AxiosRequestConfig config]);
  external Promise patch(String url, [D data, AxiosRequestConfig config]);
  external Promise postForm(String url, [D data, AxiosRequestConfig config]);
  external Promise putForm(String url, [D data, AxiosRequestConfig config]);
  external Promise patchForm(String url, [D data, AxiosRequestConfig config]);
}
@JS()
@anonymous
abstract class AxiosInstance{}
extension AxiosInstanceExtension on AxiosInstance {
  external dynamic get defaults;
  external set defaults(dynamic value);
  external AxiosInstance create([CreateAxiosDefaults config]);
}
@JS()
@anonymous
abstract class GenericFormData{}
extension GenericFormDataExtension on GenericFormData {
  external dynamic append(String name, dynamic value, [dynamic options]);
}
@JS()
@anonymous
abstract class GenericHTMLFormElement{}
extension GenericHTMLFormElementExtension on GenericHTMLFormElement {
  external String get name;
  external set name(String value);
  external String get method;
  external set method(String value);
  external void submit();
}
@JS("getAdapter")
external AxiosAdapter getAdapter(dynamic /* AxiosAdapterConfig|List<AxiosAdapterConfig> */ adapters);
@JS("toFormData")
external GenericFormData toFormData(dynamic sourceObj, [GenericFormData targetFormData, FormSerializerOptions options]);
@JS("formToJSON")
external dynamic formToJSON(dynamic /* GenericFormData|GenericHTMLFormElement */ form);
@JS("isAxiosError")
external dynamic isAxiosError(dynamic payload);
@JS("spread")
external R Function(List<T>) spread(R Function([List<T>]) callback);
@JS("isCancel")
external dynamic isCancel(dynamic value);
@JS("all")
external Promise all(Array values);
@JS("mergeConfig")
external AxiosRequestConfig mergeConfig(AxiosRequestConfig config1, AxiosRequestConfig config2);
@JS()
@anonymous
abstract class AxiosStatic{}
extension AxiosStaticExtension on AxiosStatic {
  external CancelStatic get Cancel;
  external set Cancel(CancelStatic value);
  external CancelTokenStatic get CancelToken;
  external set CancelToken(CancelTokenStatic value);
  external dynamic get Axios;
  external set Axios(dynamic value);
  external dynamic get AxiosError;
  external set AxiosError(dynamic value);
  external dynamic get HttpStatusCode;
  external set HttpStatusCode(dynamic value);
  external String get VERSION;
  external dynamic get isCancel;
  external set isCancel(dynamic value);
  external dynamic get all;
  external set all(dynamic value);
  external dynamic get spread;
  external set spread(dynamic value);
  external dynamic get isAxiosError;
  external set isAxiosError(dynamic value);
  external dynamic get toFormData;
  external set toFormData(dynamic value);
  external dynamic get formToJSON;
  external set formToJSON(dynamic value);
  external dynamic get getAdapter;
  external set getAdapter(dynamic value);
  external dynamic get CanceledError;
  external set CanceledError(dynamic value);
  external dynamic get AxiosHeaders;
  external set AxiosHeaders(dynamic value);
  external dynamic get mergeConfig;
  external set mergeConfig(dynamic value);
}
@JS("axios")
external AxiosStatic axios;"
`;

exports[`TypeScript Definition Files Snapshot Tests > should transpile event.d.ts correctly > event.dart 1`] = `
"// Generated from event.d.ts
// Do not edit directly

@JS()
library event;
import 'package:js/js.dart';


typedef Listener = void Function([List<dynamic>]);
@JS("EventEmitter")
class EventEmitter {
  external static num get defaultMaxListeners;
  external static set defaultMaxListeners(num value);
  @JS("listenerCount")
  external static num listenerCount_1(EventEmitter emitter, dynamic /* String|num */ type);
  @JS("listenerCount")
  external num listenerCount_2(dynamic /* String|num */ type);
  external Array eventNames();
  external dynamic setMaxListeners(num n);
  external num getMaxListeners();
  external bool emit(dynamic /* String|num */ type, [/* rest */ List<dynamic> args]);
  external dynamic addListener(dynamic /* String|num */ type, Listener listener);
  external dynamic on(dynamic /* String|num */ type, Listener listener);
  external dynamic once(dynamic /* String|num */ type, Listener listener);
  external dynamic prependListener(dynamic /* String|num */ type, Listener listener);
  external dynamic prependOnceListener(dynamic /* String|num */ type, Listener listener);
  external dynamic removeListener(dynamic /* String|num */ type, Listener listener);
  external dynamic off(dynamic /* String|num */ type, Listener listener);
  external dynamic removeAllListeners([dynamic /* String|num */ type]);
  external List<Listener> listeners(dynamic /* String|num */ type);
  external List<Listener> rawListeners(dynamic /* String|num */ type);
}"
`;

exports[`TypeScript Definition Files Snapshot Tests > should transpile h3.d.ts correctly > h3.dart 1`] = `
"// Generated from h3.d.ts
// Do not edit directly

@JS()
library h3;
import 'package:js/js.dart';


@JS("h3.h3IndexToSplitLong")
external SplitLong h3IndexToSplitLong(H3IndexInput h3Index);
@JS("h3.splitLongToH3Index")
external H3Index splitLongToH3Index(num lower, num upper);
@JS("h3.isValidCell")
external bool isValidCell(H3IndexInput h3Index);
@JS("h3.isPentagon")
external bool isPentagon(H3IndexInput h3Index);
@JS("h3.isResClassIII")
external bool isResClassIII(H3IndexInput h3Index);
@JS("h3.getBaseCellNumber")
external num getBaseCellNumber(H3IndexInput h3Index);
@JS("h3.getIcosahedronFaces")
external List<num> getIcosahedronFaces(H3IndexInput h3Index);
@JS("h3.getResolution")
external num getResolution(H3IndexInput h3Index);
@JS("h3.latLngToCell")
external H3Index latLngToCell(num lat, num lng, num res);
@JS("h3.cellToLatLng")
external CoordPair cellToLatLng(H3IndexInput h3Index);
@JS("h3.cellToBoundary")
external List<CoordPair> cellToBoundary(H3IndexInput h3Index, [bool formatAsGeoJson]);
@JS("h3.cellToParent")
external H3Index cellToParent(H3IndexInput h3Index, num res);
@JS("h3.cellToChildren")
external List<H3Index> cellToChildren(H3IndexInput h3Index, num res);
@JS("h3.cellToChildrenSize")
external num cellToChildrenSize(H3IndexInput h3Index, num res);
@JS("h3.cellToCenterChild")
external H3Index cellToCenterChild(H3IndexInput h3Index, num res);
@JS("h3.cellToChildPos")
external num cellToChildPos(H3IndexInput h3Index, num parentRes);
@JS("h3.childPosToCell")
external H3Index childPosToCell(num childPos, H3IndexInput h3Index, num childRes);
@JS("h3.gridDisk")
external List<H3Index> gridDisk(H3IndexInput h3Index, num ringSize);
@JS("h3.gridDiskDistances")
external List<List<H3Index>> gridDiskDistances(H3IndexInput h3Index, num ringSize);
@JS("h3.gridRing")
external List<H3Index> gridRing(H3IndexInput h3Index, num ringSize);
@JS("h3.gridRingUnsafe")
external List<H3Index> gridRingUnsafe(H3IndexInput h3Index, num ringSize);
@JS("h3.polygonToCells")
external List<H3Index> polygonToCells(dynamic /* List<List<num>>|List<List<List<num>>> */ coordinates, num res, [bool isGeoJson]);
@JS("h3.polygonToCellsExperimental")
external List<H3Index> polygonToCellsExperimental(dynamic /* List<List<num>>|List<List<List<num>>> */ coordinates, num res, String flags, [bool isGeoJson]);
@JS("h3.cellsToMultiPolygon")
external List<List<List<CoordPair>>> cellsToMultiPolygon(List<H3IndexInput> h3Indexes, [bool formatAsGeoJson]);
@JS("h3.compactCells")
external List<H3Index> compactCells(List<H3IndexInput> h3Set);
@JS("h3.uncompactCells")
external List<H3Index> uncompactCells(List<H3IndexInput> compactedSet, num res);
@JS("h3.areNeighborCells")
external bool areNeighborCells(H3IndexInput origin, H3IndexInput destination);
@JS("h3.cellsToDirectedEdge")
external H3Index cellsToDirectedEdge(H3IndexInput origin, H3IndexInput destination);
@JS("h3.getDirectedEdgeOrigin")
external H3Index getDirectedEdgeOrigin(H3IndexInput edgeIndex);
@JS("h3.getDirectedEdgeDestination")
external H3Index getDirectedEdgeDestination(H3IndexInput edgeIndex);
@JS("h3.isValidDirectedEdge")
external bool isValidDirectedEdge(H3IndexInput edgeIndex);
@JS("h3.directedEdgeToCells")
external List<H3Index> directedEdgeToCells(H3IndexInput edgeIndex);
@JS("h3.originToDirectedEdges")
external List<H3Index> originToDirectedEdges(H3IndexInput h3Index);
@JS("h3.directedEdgeToBoundary")
external List<CoordPair> directedEdgeToBoundary(H3IndexInput edgeIndex, [bool formatAsGeoJson]);
@JS("h3.gridDistance")
external num gridDistance(H3IndexInput origin, H3IndexInput destination);
@JS("h3.gridPathCells")
external List<H3Index> gridPathCells(H3IndexInput origin, H3IndexInput destination);
@JS("h3.cellToLocalIj")
external CoordIJ cellToLocalIj(H3IndexInput origin, H3IndexInput destination);
@JS("h3.localIjToCell")
external H3Index localIjToCell(H3IndexInput origin, CoordIJ coords);
@JS("h3.greatCircleDistance")
external num greatCircleDistance(List<num> latLng1, List<num> latLng2, String unit);
@JS("h3.cellArea")
external num cellArea(H3IndexInput h3Index, String unit);
@JS("h3.edgeLength")
external num edgeLength(H3IndexInput edge, String unit);
@JS("h3.getHexagonAreaAvg")
external num getHexagonAreaAvg(num res, String unit);
@JS("h3.getHexagonEdgeLengthAvg")
external num getHexagonEdgeLengthAvg(num res, String unit);
@JS("h3.cellToVertex")
external H3Index cellToVertex(H3IndexInput h3Index, num vertexNum);
@JS("h3.cellToVertexes")
external List<H3Index> cellToVertexes(H3IndexInput h3Index);
@JS("h3.vertexToLatLng")
external CoordPair vertexToLatLng(H3IndexInput h3Index);
@JS("h3.isValidVertex")
external bool isValidVertex(H3IndexInput h3Index);
@JS("h3.getNumCells")
external num getNumCells(num res);
@JS("h3.getRes0Cells")
external List<H3Index> getRes0Cells();
@JS("h3.getPentagons")
external List<H3Index> getPentagons(num res);
@JS("h3.degsToRads")
external num degsToRads(num deg);
@JS("h3.radsToDegs")
external num radsToDegs(num rad);
@JS("h3.UNITS.m")
external String m;
@JS("h3.UNITS.m2")
external String m2;
@JS("h3.UNITS.km")
external String km;
@JS("h3.UNITS.km2")
external String km2;
@JS("h3.UNITS.rads")
external String rads;
@JS("h3.UNITS.rads2")
external String rads2;
@JS("h3.POLYGON_TO_CELLS_FLAGS.containmentCenter")
external String containmentCenter;
@JS("h3.POLYGON_TO_CELLS_FLAGS.containmentFull")
external String containmentFull;
@JS("h3.POLYGON_TO_CELLS_FLAGS.containmentOverlapping")
external String containmentOverlapping;
@JS("h3.POLYGON_TO_CELLS_FLAGS.containmentOverlappingBbox")
external String containmentOverlappingBbox;
typedef H3Index = String;
typedef H3IndexInput = dynamic /* String|List<num> */;
typedef CoordIJ = dynamic;
typedef H3Error = dynamic;
typedef CoordPair = List<num>;
typedef SplitLong = List<num>;"
`;

exports[`TypeScript Definition Files Snapshot Tests > should transpile hard_types.d.ts correctly > hard_types.dart 1`] = `
"// Generated from hard_types.d.ts
// Do not edit directly

@JS()
library hard_types;
import 'package:js/js.dart';


@JS()
@anonymous
abstract class Result{}
extension ResultExtension on Result {
  external bool get success;
  external set success(bool value);
  external T get data;
  external set data(T value);
  external String? get error;
  external set error(String? value);
}
@JS("getListOfStrings")
external Promise getListOfStrings();
typedef StringMap = Record<String, V>;
@JS("getComplexMap")
external Promise getComplexMap();
typedef StringOrNumber = dynamic /* String|num */;
typedef ID = dynamic /* String|num */;
typedef Shape = dynamic;
@JS()
@anonymous
abstract class HasId{}
extension HasIdExtension on HasId {
  external num get id;
  external set id(num value);
}
@JS()
@anonymous
abstract class HasName{}
extension HasNameExtension on HasName {
  external String get name;
  external set name(String value);
}
typedef UserName = dynamic;
@JS("processUserName")
external void processUserName(UserName user);
typedef StringToNumber = dynamic;
@JS("useConditionalType")
external StringToNumber useConditionalType(T input);
typedef DeepReadonly = dynamic;
@JS()
@anonymous
abstract class Config{}
extension ConfigExtension on Config {
  external String get host;
  external set host(String value);
  external num get port;
  external set port(num value);
}
typedef ReadonlyConfig = DeepReadonly<Config>;
typedef ConfigKey = dynamic;
@JS("getConfigValue")
external dynamic getConfigValue(ConfigKey key);
@JS()
@anonymous
abstract class StringFormatter{}
extension StringFormatterExtension on StringFormatter {
}
@JS()
@anonymous
abstract class EventManager{}
extension EventManagerExtension on EventManager {
  external void Function(String, void Function(dynamic)) get addListener;
  external set addListener(void Function(String, void Function(dynamic)) value);
  external bool Function(String) get removeListener;
  external set removeListener(bool Function(String) value);
}
@JS("createAdder")
external num Function(num) createAdder(num amountToAdd);
@JS()
@anonymous
abstract class TreeNode{}
extension TreeNodeExtension on TreeNode {
  external String get value;
  external set value(String value);
  external List<TreeNode> get children;
  external set children(List<TreeNode> value);
}
typedef JsonValue = dynamic /* String|num|bool|List<JsonValue>|dynamic */;
@JS("parseJson")
external JsonValue parseJson(String input);"
`;

exports[`TypeScript Definition Files Snapshot Tests > should transpile leaflet.d.ts correctly > leaflet.dart 1`] = `
"// Generated from leaflet.d.ts
// Do not edit directly

@JS()
library leaflet;
import 'package:js/js.dart';


@JS("version")
external String version;
@JS("Class")
class Class {
  external static dynamic extend(dynamic props);
  external static dynamic include(dynamic props);
  external static dynamic mergeOptions(dynamic props);
  @JS("addInitHook")
  external static dynamic addInitHook_1(void Function() initHookFn);
  @JS("addInitHook")
  external static dynamic addInitHook_2(String methodName, [/* rest */ List<dynamic> args]);
  external static void callInitHooks();
}
@JS("Transformation")
class Transformation {
  external factory Transformation(num a, num b, num c, num d);
  external Point transform(Point point, [num scale]);
  external Point untransform(Point point, [num scale]);
}
@JS("transformation")
external Transformation transformation(List<num> coefficients);
@JS("LineUtil.simplify")
external List<Point> simplify(List<Point> points, num tolerance);
@JS("LineUtil.pointToSegmentDistance")
external num pointToSegmentDistance(Point p, Point p1, Point p2);
@JS("LineUtil.closestPointOnSegment")
external Point closestPointOnSegment(Point p, Point p1, Point p2);
@JS("LineUtil.isFlat")
external bool isFlat(List<LatLngExpression> latlngs);
@JS("LineUtil.clipSegment")
external dynamic /* List<Point>|bool */ clipSegment(Point a, Point b, Bounds bounds, [bool useLastCode, bool round]);
@JS("LineUtil.polylineCenter")
external LatLng polylineCenter(List<LatLngExpression> latlngs, CRS crs);
@JS("PolyUtil.clipPolygon")
external List<Point> clipPolygon(List<Point> points, BoundsExpression bounds, [bool round]);
@JS("PolyUtil.polygonCenter")
external LatLng polygonCenter(List<LatLngExpression> latlngs, CRS crs);
@JS("DomUtil.get")
external HTMLElement? get(dynamic /* String|HTMLElement */ element);
@JS("DomUtil.getStyle")
external String? getStyle(HTMLElement el, String styleAttrib);
@JS("DomUtil.create")
external HTMLElement create(String tagName, [String className, HTMLElement container]);
@JS("DomUtil.remove")
external void remove(HTMLElement el);
@JS("DomUtil.empty")
external void empty(HTMLElement el);
@JS("DomUtil.toFront")
external void toFront(HTMLElement el);
@JS("DomUtil.toBack")
external void toBack(HTMLElement el);
@JS("DomUtil.hasClass")
external bool hasClass(HTMLElement el, String name);
@JS("DomUtil.addClass")
external void addClass(HTMLElement el, String name);
@JS("DomUtil.removeClass")
external void removeClass(HTMLElement el, String name);
@JS("DomUtil.setClass")
external void setClass(HTMLElement el, String name);
@JS("DomUtil.getClass")
external String getClass(HTMLElement el);
@JS("DomUtil.setOpacity")
external void setOpacity(HTMLElement el, num opacity);
@JS("DomUtil.testProp")
external dynamic /* String|bool */ testProp(List<String> props);
@JS("DomUtil.setTransform")
external void setTransform(HTMLElement el, Point offset, [num scale]);
@JS("DomUtil.setPosition")
external void setPosition(HTMLElement el, Point position);
@JS("DomUtil.getPosition")
external Point getPosition(HTMLElement el);
@JS("DomUtil.getScale")
external dynamic getScale(HTMLElement el);
@JS("DomUtil.getSizedParentNode")
external HTMLElement getSizedParentNode(HTMLElement el);
@JS("DomUtil.disableTextSelection")
external void disableTextSelection();
@JS("DomUtil.enableTextSelection")
external void enableTextSelection();
@JS("DomUtil.disableImageDrag")
external void disableImageDrag();
@JS("DomUtil.enableImageDrag")
external void enableImageDrag();
@JS("DomUtil.preventOutline")
external void preventOutline(HTMLElement el);
@JS("DomUtil.restoreOutline")
external void restoreOutline();
@JS("DomUtil.TRANSFORM")
external String TRANSFORM;
@JS("DomUtil.TRANSITION")
external String TRANSITION;
@JS("DomUtil.TRANSITION_END")
external String TRANSITION_END;
@JS("PosAnimation")
class PosAnimation {
  external void run(HTMLElement el, Point newPos, [num duration, num easeLinearity]);
  external void stop();
}
@JS()
@anonymous
abstract class CRS{}
extension CRSExtension on CRS {
  external String? get code;
  external set code(String? value);
  external List<num>? get wrapLng;
  external set wrapLng(List<num>? value);
  external List<num>? get wrapLat;
  external set wrapLat(List<num>? value);
  external bool get infinite;
  external set infinite(bool value);
  external Point latLngToPoint(LatLngExpression latlng, num zoom);
  external LatLng pointToLatLng(PointExpression point, num zoom);
  external Point project(dynamic /* LatLng|LatLngLiteral */ latlng);
  external LatLng unproject(PointExpression point);
  external num scale(num zoom);
  external num zoom(num scale);
  external Bounds getProjectedBounds(num zoom);
  external num distance(LatLngExpression latlng1, LatLngExpression latlng2);
  external LatLng wrapLatLng(dynamic /* LatLng|LatLngLiteral */ latlng);
}
@JS("CRS.EPSG3395")
external CRS EPSG3395;
@JS("CRS.EPSG3857")
external CRS EPSG3857;
@JS("CRS.EPSG4326")
external CRS EPSG4326;
@JS("CRS.EPSG900913")
external CRS EPSG900913;
@JS("CRS.Earth")
external CRS Earth;
@JS("CRS.Simple")
external CRS Simple;
@JS()
@anonymous
abstract class Projection{}
extension ProjectionExtension on Projection {
  external Bounds get bounds;
  external set bounds(Bounds value);
  external Point project(dynamic /* LatLng|LatLngLiteral */ latlng);
  external LatLng unproject(PointExpression point);
}
@JS("Projection.LonLat")
external Projection LonLat;
@JS("Projection.Mercator")
external Projection Mercator;
@JS("Projection.SphericalMercator")
external Projection SphericalMercator;
@JS("LatLng")
class LatLng {
  external factory LatLng(num latitude, num longitude, [num altitude]);
  external num get lat;
  external set lat(num value);
  external num get lng;
  external set lng(num value);
  external num? get alt;
  external set alt(num? value);
  external bool equals(LatLngExpression otherLatLng, [num maxMargin]);
  external String toString();
  external num distanceTo(LatLngExpression otherLatLng);
  external LatLng wrap();
  external LatLngBounds toBounds(num sizeInMeters);
  external LatLng clone();
}
@JS()
@anonymous
abstract class LatLngLiteral{}
extension LatLngLiteralExtension on LatLngLiteral {
  external num get lat;
  external set lat(num value);
  external num get lng;
  external set lng(num value);
  external num get alt;
  external set alt(num value);
}
typedef LatLngTuple = List<dynamic>;
typedef LatLngExpression = dynamic /* LatLng|LatLngLiteral|LatLngTuple */;
@JS("latLng")
external LatLng latLng(dynamic /* LatLngTuple|List<num>|LatLngLiteral|dynamic */ coords);
@JS("LatLngBounds")
class LatLngBounds {
  external factory LatLngBounds(LatLngExpression southWest, LatLngExpression northEast);
  external factory LatLngBounds(List<LatLngExpression> latlngs);
  external dynamic extend(dynamic /* LatLngExpression|LatLngBoundsExpression */ latlngOrBounds);
  external LatLngBounds pad(num bufferRatio);
  external LatLng getCenter();
  external LatLng getSouthWest();
  external LatLng getNorthEast();
  external LatLng getNorthWest();
  external LatLng getSouthEast();
  external num getWest();
  external num getSouth();
  external num getEast();
  external num getNorth();
  external bool contains(dynamic /* LatLngBoundsExpression|LatLngExpression */ otherBoundsOrLatLng);
  external bool intersects(LatLngBoundsExpression otherBounds);
  external bool overlaps(LatLngBoundsExpression otherBounds);
  external String toBBoxString();
  external bool equals(LatLngBoundsExpression otherBounds, [num maxMargin]);
  external bool isValid();
}
typedef LatLngBoundsLiteral = List<LatLngTuple>;
typedef LatLngBoundsExpression = dynamic /* LatLngBounds|LatLngBoundsLiteral */;
@JS("latLngBounds")
external LatLngBounds latLngBounds(List<LatLngExpression> latlngs);
typedef PointTuple = List<num>;
@JS("Point")
class Point {
  external factory Point(num x, num y, [bool round]);
  external num get x;
  external set x(num value);
  external num get y;
  external set y(num value);
  external Point clone();
  external Point add(PointExpression otherPoint);
  external Point subtract(PointExpression otherPoint);
  external Point divideBy(num num);
  external Point multiplyBy(num num);
  external Point scaleBy(PointExpression scale);
  external Point unscaleBy(PointExpression scale);
  external Point round();
  external Point floor();
  external Point ceil();
  external Point trunc();
  external num distanceTo(PointExpression otherPoint);
  external bool equals(PointExpression otherPoint);
  external bool contains(PointExpression otherPoint);
  external String toString();
}
@JS()
@anonymous
abstract class Coords{}
extension CoordsExtension on Coords {
  external num get z;
  external set z(num value);
}
typedef PointExpression = dynamic /* Point|PointTuple */;
@JS("point")
external Point point(dynamic /* PointTuple|dynamic */ coords);
typedef BoundsLiteral = List<PointTuple>;
@JS("Bounds")
class Bounds {
  external factory Bounds(PointExpression topLeft, PointExpression bottomRight);
  external factory Bounds([dynamic /* List<Point>|BoundsLiteral */ points]);
  external Point? get min;
  external set min(Point? value);
  external Point? get max;
  external set max(Point? value);
  @JS("extend")
  external dynamic extend_1(PointExpression point);
  @JS("extend")
  external dynamic extend_2(BoundsExpression otherBounds);
  external Point getCenter([bool round]);
  external Point getBottomLeft();
  external Point getBottomRight();
  external Point getTopLeft();
  external Point getTopRight();
  external Point getSize();
  external bool contains(dynamic /* BoundsExpression|PointExpression */ pointOrBounds);
  external bool intersects(BoundsExpression otherBounds);
  external bool overlaps(BoundsExpression otherBounds);
  external bool isValid();
  external Bounds pad(num bufferRatio);
  external bool equals(BoundsExpression otherBounds);
}
typedef BoundsExpression = dynamic /* Bounds|BoundsLiteral */;
@JS("bounds")
external Bounds bounds(dynamic /* List<Point>|BoundsLiteral */ points);
typedef LeafletEventHandlerFn = void Function(LeafletEvent);
typedef LayersControlEventHandlerFn = void Function(LayersControlEvent);
typedef LayerEventHandlerFn = void Function(LayerEvent);
typedef ResizeEventHandlerFn = void Function(ResizeEvent);
typedef PopupEventHandlerFn = void Function(PopupEvent);
typedef TooltipEventHandlerFn = void Function(TooltipEvent);
typedef ErrorEventHandlerFn = void Function(ErrorEvent);
typedef LocationEventHandlerFn = void Function(LocationEvent);
typedef LeafletMouseEventHandlerFn = void Function(LeafletMouseEvent);
typedef LeafletKeyboardEventHandlerFn = void Function(LeafletKeyboardEvent);
typedef ZoomAnimEventHandlerFn = void Function(ZoomAnimEvent);
typedef DragEndEventHandlerFn = void Function(DragEndEvent);
typedef TileEventHandlerFn = void Function(TileEvent);
typedef TileErrorEventHandlerFn = void Function(TileErrorEvent);
@JS()
@anonymous
abstract class LeafletEventHandlerFnMap{}
extension LeafletEventHandlerFnMapExtension on LeafletEventHandlerFnMap {
  external LayersControlEventHandlerFn? get baselayerchange;
  external set baselayerchange(LayersControlEventHandlerFn? value);
  external LayersControlEventHandlerFn? get overlayadd;
  external set overlayadd(LayersControlEventHandlerFn? value);
  external LayersControlEventHandlerFn? get overlayremove;
  external set overlayremove(LayersControlEventHandlerFn? value);
  external LayerEventHandlerFn? get layeradd;
  external set layeradd(LayerEventHandlerFn? value);
  external LayerEventHandlerFn? get layerremove;
  external set layerremove(LayerEventHandlerFn? value);
  external LeafletEventHandlerFn? get zoomlevelschange;
  external set zoomlevelschange(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get unload;
  external set unload(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get viewreset;
  external set viewreset(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get load;
  external set load(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get zoomstart;
  external set zoomstart(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get movestart;
  external set movestart(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get zoom;
  external set zoom(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get move;
  external set move(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get zoomend;
  external set zoomend(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get moveend;
  external set moveend(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get autopanstart;
  external set autopanstart(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get dragstart;
  external set dragstart(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get drag;
  external set drag(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get add;
  external set add(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get remove;
  external set remove(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get loading;
  external set loading(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get error;
  external set error(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get update;
  external set update(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get down;
  external set down(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get predrag;
  external set predrag(LeafletEventHandlerFn? value);
  external ResizeEventHandlerFn? get resize;
  external set resize(ResizeEventHandlerFn? value);
  external PopupEventHandlerFn? get popupopen;
  external set popupopen(PopupEventHandlerFn? value);
  external PopupEventHandlerFn? get popupclose;
  external set popupclose(PopupEventHandlerFn? value);
  external TooltipEventHandlerFn? get tooltipopen;
  external set tooltipopen(TooltipEventHandlerFn? value);
  external TooltipEventHandlerFn? get tooltipclose;
  external set tooltipclose(TooltipEventHandlerFn? value);
  external ErrorEventHandlerFn? get locationerror;
  external set locationerror(ErrorEventHandlerFn? value);
  external LocationEventHandlerFn? get locationfound;
  external set locationfound(LocationEventHandlerFn? value);
  external LeafletMouseEventHandlerFn? get click;
  external set click(LeafletMouseEventHandlerFn? value);
  external LeafletMouseEventHandlerFn? get dblclick;
  external set dblclick(LeafletMouseEventHandlerFn? value);
  external LeafletMouseEventHandlerFn? get mousedown;
  external set mousedown(LeafletMouseEventHandlerFn? value);
  external LeafletMouseEventHandlerFn? get mouseup;
  external set mouseup(LeafletMouseEventHandlerFn? value);
  external LeafletMouseEventHandlerFn? get mouseover;
  external set mouseover(LeafletMouseEventHandlerFn? value);
  external LeafletMouseEventHandlerFn? get mouseout;
  external set mouseout(LeafletMouseEventHandlerFn? value);
  external LeafletMouseEventHandlerFn? get mousemove;
  external set mousemove(LeafletMouseEventHandlerFn? value);
  external LeafletMouseEventHandlerFn? get contextmenu;
  external set contextmenu(LeafletMouseEventHandlerFn? value);
  external LeafletMouseEventHandlerFn? get preclick;
  external set preclick(LeafletMouseEventHandlerFn? value);
  external LeafletKeyboardEventHandlerFn? get keypress;
  external set keypress(LeafletKeyboardEventHandlerFn? value);
  external LeafletKeyboardEventHandlerFn? get keydown;
  external set keydown(LeafletKeyboardEventHandlerFn? value);
  external LeafletKeyboardEventHandlerFn? get keyup;
  external set keyup(LeafletKeyboardEventHandlerFn? value);
  external ZoomAnimEventHandlerFn? get zoomanim;
  external set zoomanim(ZoomAnimEventHandlerFn? value);
  external DragEndEventHandlerFn? get dragend;
  external set dragend(DragEndEventHandlerFn? value);
  external TileEventHandlerFn? get tileunload;
  external set tileunload(TileEventHandlerFn? value);
  external TileEventHandlerFn? get tileloadstart;
  external set tileloadstart(TileEventHandlerFn? value);
  external TileEventHandlerFn? get tileload;
  external set tileload(TileEventHandlerFn? value);
  external TileEventHandlerFn? get tileabort;
  external set tileabort(TileEventHandlerFn? value);
  external TileErrorEventHandlerFn? get tileerror;
  external set tileerror(TileErrorEventHandlerFn? value);
}
@JS("Events")
class Events {
  @JS("on")
  external dynamic on_1(String type, LayersControlEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_2(String type, LayerEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_3(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_4(String type, ResizeEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_5(String type, PopupEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_6(String type, TooltipEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_7(String type, ErrorEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_8(String type, LocationEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_9(String type, LeafletMouseEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_10(String type, LeafletKeyboardEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_11(String type, ZoomAnimEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_12(String type, DragEndEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_13(String type, TileEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_14(String type, TileErrorEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_15(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_16(LeafletEventHandlerFnMap eventMap);
  @JS("off")
  external dynamic off_1(String type, [LayersControlEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_2(String type, [LayerEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_3(String type, [LeafletEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_4(String type, [ResizeEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_5(String type, [PopupEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_6(String type, [TooltipEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_7(String type, [ErrorEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_8(String type, [LocationEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_9(String type, [LeafletMouseEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_10(String type, [LeafletKeyboardEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_11(String type, [ZoomAnimEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_12(String type, [DragEndEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_13(String type, [TileEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_14(String type, [TileErrorEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_15(String type, [LeafletEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_16(LeafletEventHandlerFnMap eventMap);
  @JS("off")
  external dynamic off_17();
  external dynamic fire(String type, [dynamic data, bool propagate]);
  @JS("listens")
  external bool listens_1(String type, [bool propagate]);
  @JS("listens")
  external bool listens_2(String type, LayersControlEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_3(String type, LayerEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_4(String type, LeafletEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_5(String type, ResizeEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_6(String type, PopupEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_7(String type, TooltipEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_8(String type, ErrorEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_9(String type, LocationEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_10(String type, LeafletMouseEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_11(String type, LeafletKeyboardEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_12(String type, ZoomAnimEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_13(String type, DragEndEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_14(String type, TileEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_15(String type, TileEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_16(String type, LeafletEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("once")
  external dynamic once_1(String type, LayersControlEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_2(String type, LayerEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_3(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_4(String type, ResizeEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_5(String type, PopupEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_6(String type, TooltipEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_7(String type, ErrorEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_8(String type, LocationEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_9(String type, LeafletMouseEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_10(String type, LeafletKeyboardEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_11(String type, ZoomAnimEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_12(String type, DragEndEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_13(String type, TileEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_14(String type, TileEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_15(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_16(LeafletEventHandlerFnMap eventMap);
  external dynamic addEventParent(Evented obj);
  external dynamic removeEventParent(Evented obj);
  @JS("addEventListener")
  external dynamic addEventListener_1(String type, LayersControlEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_2(String type, LayerEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_3(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_4(String type, ResizeEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_5(String type, PopupEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_6(String type, TooltipEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_7(String type, ErrorEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_8(String type, LocationEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_9(String type, LeafletMouseEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_10(String type, LeafletKeyboardEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_11(String type, ZoomAnimEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_12(String type, DragEndEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_13(String type, TileEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_14(String type, TileErrorEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_15(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_16(LeafletEventHandlerFnMap eventMap);
  @JS("removeEventListener")
  external dynamic removeEventListener_1(String type, [LayersControlEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_2(String type, [LayerEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_3(String type, [LeafletEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_4(String type, [ResizeEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_5(String type, [PopupEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_6(String type, [TooltipEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_7(String type, [ErrorEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_8(String type, [LocationEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_9(String type, [LeafletMouseEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_10(String type, [LeafletKeyboardEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_11(String type, [ZoomAnimEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_12(String type, [DragEndEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_13(String type, [TileEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_14(String type, [TileErrorEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_15(String type, [LeafletEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_16(LeafletEventHandlerFnMap eventMap);
  external dynamic clearAllEventListeners();
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_1(String type, LayersControlEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_2(String type, LayerEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_3(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_4(String type, ResizeEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_5(String type, PopupEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_6(String type, TooltipEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_7(String type, ErrorEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_8(String type, LocationEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_9(String type, LeafletMouseEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_10(String type, LeafletKeyboardEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_11(String type, ZoomAnimEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_12(String type, DragEndEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_13(String type, TileEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_14(String type, TileErrorEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_15(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_16(LeafletEventHandlerFnMap eventMap);
  external dynamic fireEvent(String type, [dynamic data, bool propagate]);
  external bool hasEventListeners(String type);
}
@JS("MixinType")
class MixinType {
  external Events get Events;
  external set Events(Events value);
}
@JS("Mixin")
external MixinType Mixin;
@JS("Evented")
class Evented {
  @JS("on")
  external dynamic on_1(String type, LayersControlEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_2(String type, LayerEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_3(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_4(String type, ResizeEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_5(String type, PopupEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_6(String type, TooltipEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_7(String type, ErrorEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_8(String type, LocationEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_9(String type, LeafletMouseEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_10(String type, LeafletKeyboardEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_11(String type, ZoomAnimEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_12(String type, DragEndEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_13(String type, TileEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_14(String type, TileErrorEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_15(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_16(LeafletEventHandlerFnMap eventMap);
  @JS("off")
  external dynamic off_1(String type, [LayersControlEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_2(String type, [LayerEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_3(String type, [LeafletEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_4(String type, [ResizeEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_5(String type, [PopupEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_6(String type, [TooltipEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_7(String type, [ErrorEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_8(String type, [LocationEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_9(String type, [LeafletMouseEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_10(String type, [LeafletKeyboardEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_11(String type, [ZoomAnimEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_12(String type, [DragEndEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_13(String type, [TileEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_14(String type, [TileErrorEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_15(String type, [LeafletEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_16(LeafletEventHandlerFnMap eventMap);
  @JS("off")
  external dynamic off_17();
  external dynamic fire(String type, [dynamic data, bool propagate]);
  @JS("listens")
  external bool listens_1(String type, [bool propagate]);
  @JS("listens")
  external bool listens_2(String type, LayersControlEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_3(String type, LayerEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_4(String type, LeafletEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_5(String type, ResizeEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_6(String type, PopupEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_7(String type, TooltipEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_8(String type, ErrorEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_9(String type, LocationEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_10(String type, LeafletMouseEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_11(String type, LeafletKeyboardEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_12(String type, ZoomAnimEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_13(String type, DragEndEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_14(String type, TileEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_15(String type, TileEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_16(String type, LeafletEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("once")
  external dynamic once_1(String type, LayersControlEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_2(String type, LayerEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_3(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_4(String type, ResizeEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_5(String type, PopupEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_6(String type, TooltipEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_7(String type, ErrorEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_8(String type, LocationEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_9(String type, LeafletMouseEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_10(String type, LeafletKeyboardEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_11(String type, ZoomAnimEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_12(String type, DragEndEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_13(String type, TileEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_14(String type, TileEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_15(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_16(LeafletEventHandlerFnMap eventMap);
  external dynamic addEventParent(Evented obj);
  external dynamic removeEventParent(Evented obj);
  @JS("addEventListener")
  external dynamic addEventListener_1(String type, LayersControlEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_2(String type, LayerEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_3(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_4(String type, ResizeEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_5(String type, PopupEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_6(String type, TooltipEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_7(String type, ErrorEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_8(String type, LocationEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_9(String type, LeafletMouseEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_10(String type, LeafletKeyboardEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_11(String type, ZoomAnimEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_12(String type, DragEndEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_13(String type, TileEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_14(String type, TileErrorEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_15(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_16(LeafletEventHandlerFnMap eventMap);
  @JS("removeEventListener")
  external dynamic removeEventListener_1(String type, [LayersControlEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_2(String type, [LayerEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_3(String type, [LeafletEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_4(String type, [ResizeEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_5(String type, [PopupEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_6(String type, [TooltipEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_7(String type, [ErrorEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_8(String type, [LocationEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_9(String type, [LeafletMouseEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_10(String type, [LeafletKeyboardEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_11(String type, [ZoomAnimEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_12(String type, [DragEndEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_13(String type, [TileEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_14(String type, [TileErrorEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_15(String type, [LeafletEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_16(LeafletEventHandlerFnMap eventMap);
  external dynamic clearAllEventListeners();
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_1(String type, LayersControlEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_2(String type, LayerEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_3(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_4(String type, ResizeEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_5(String type, PopupEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_6(String type, TooltipEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_7(String type, ErrorEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_8(String type, LocationEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_9(String type, LeafletMouseEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_10(String type, LeafletKeyboardEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_11(String type, ZoomAnimEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_12(String type, DragEndEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_13(String type, TileEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_14(String type, TileErrorEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_15(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_16(LeafletEventHandlerFnMap eventMap);
  external dynamic fireEvent(String type, [dynamic data, bool propagate]);
  external bool hasEventListeners(String type);
}
@JS()
@anonymous
abstract class DraggableOptions{}
extension DraggableOptionsExtension on DraggableOptions {
  external num get clickTolerance;
  external set clickTolerance(num value);
}
@JS("Draggable")
class Draggable {
  external factory Draggable(HTMLElement element, [HTMLElement dragStartTarget, bool preventOutline, DraggableOptions options]);
  external void enable();
  external void disable();
  external void finishDrag();
}
@JS()
@anonymous
abstract class LayerOptions{}
extension LayerOptionsExtension on LayerOptions {
  external String? get pane;
  external set pane(String? value);
  external String? get attribution;
  external set attribution(String? value);
}
@JS()
@anonymous
abstract class InteractiveLayerOptions{}
extension InteractiveLayerOptionsExtension on InteractiveLayerOptions {
  external bool? get interactive;
  external set interactive(bool? value);
  external bool? get bubblingMouseEvents;
  external set bubblingMouseEvents(bool? value);
}
@JS("Layer")
class Layer {
  external factory Layer([LayerOptions options]);
  external Map get _map;
  external set _map(Map value);
  external LayerOptions get options;
  external set options(LayerOptions value);
  external dynamic addTo(dynamic /* Map|LayerGroup */ map);
  external dynamic remove();
  external dynamic removeFrom(Map map);
  external HTMLElement? getPane([String name]);
  external dynamic addInteractiveTarget(HTMLElement targetEl);
  external dynamic removeInteractiveTarget(HTMLElement targetEl);
  external dynamic bindPopup(dynamic /* Content Function(Layer)|Content|Popup */ content, [PopupOptions options]);
  external dynamic unbindPopup();
  external dynamic openPopup([LatLngExpression latlng]);
  external dynamic closePopup();
  external dynamic togglePopup();
  external bool isPopupOpen();
  external dynamic setPopupContent(dynamic /* Content|Popup */ content);
  external Popup? getPopup();
  external dynamic bindTooltip(dynamic /* Content Function(Layer)|Tooltip|Content */ content, [TooltipOptions options]);
  external dynamic unbindTooltip();
  external dynamic openTooltip([LatLngExpression latlng]);
  external dynamic closeTooltip();
  external dynamic toggleTooltip();
  external bool isTooltipOpen();
  external dynamic setTooltipContent(dynamic /* Content|Tooltip */ content);
  external Tooltip? getTooltip();
  external dynamic onAdd(Map map);
  external dynamic onRemove(Map map);
  external dynamic getEvents();
  external String? getAttribution();
  external dynamic beforeAdd(Map map);
}
@JS()
@anonymous
abstract class GridLayerOptions{}
extension GridLayerOptionsExtension on GridLayerOptions {
  external dynamic /* num|Point */ get tileSize;
  external set tileSize(dynamic /* num|Point */ value);
  external num? get opacity;
  external set opacity(num? value);
  external bool? get updateWhenIdle;
  external set updateWhenIdle(bool? value);
  external bool? get updateWhenZooming;
  external set updateWhenZooming(bool? value);
  external num? get updateInterval;
  external set updateInterval(num? value);
  external num? get zIndex;
  external set zIndex(num? value);
  external LatLngBoundsExpression? get bounds;
  external set bounds(LatLngBoundsExpression? value);
  external num? get minZoom;
  external set minZoom(num? value);
  external num? get maxZoom;
  external set maxZoom(num? value);
  external num? get maxNativeZoom;
  external set maxNativeZoom(num? value);
  external num? get minNativeZoom;
  external set minNativeZoom(num? value);
  external bool? get noWrap;
  external set noWrap(bool? value);
  external String? get pane;
  external set pane(String? value);
  external String? get className;
  external set className(String? value);
  external num? get keepBuffer;
  external set keepBuffer(num? value);
}
typedef DoneCallback = void Function([Error, HTMLElement]);
@JS()
@anonymous
abstract class InternalTiles{}
extension InternalTilesExtension on InternalTiles {
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("GridLayer")
class GridLayer {
  external factory GridLayer([GridLayerOptions options]);
  external InternalTiles get _tiles;
  external set _tiles(InternalTiles value);
  external num? get _tileZoom;
  external set _tileZoom(num? value);
  external dynamic bringToFront();
  external dynamic bringToBack();
  external HTMLElement? getContainer();
  external dynamic setOpacity(num opacity);
  external dynamic setZIndex(num zIndex);
  external bool isLoading();
  external dynamic redraw();
  external Point getTileSize();
  external HTMLElement createTile(Coords coords, DoneCallback done);
  external String _tileCoordsToKey(Coords coords);
  external Coords _wrapCoords(Coords parameter);
}
@JS("gridLayer")
external GridLayer gridLayer([GridLayerOptions options]);
@JS()
@anonymous
abstract class TileLayerOptions{}
extension TileLayerOptionsExtension on TileLayerOptions {
  external String? get id;
  external set id(String? value);
  external dynamic /* String|List<String> */ get subdomains;
  external set subdomains(dynamic /* String|List<String> */ value);
  external String? get errorTileUrl;
  external set errorTileUrl(String? value);
  external num? get zoomOffset;
  external set zoomOffset(num? value);
  external bool? get tms;
  external set tms(bool? value);
  external bool? get zoomReverse;
  external set zoomReverse(bool? value);
  external bool? get detectRetina;
  external set detectRetina(bool? value);
  external dynamic /* CrossOrigin|bool */ get crossOrigin;
  external set crossOrigin(dynamic /* CrossOrigin|bool */ value);
  external dynamic /* ReferrerPolicy|bool */ get referrerPolicy;
  external set referrerPolicy(dynamic /* ReferrerPolicy|bool */ value);
}
@JS("TileLayer")
class TileLayer {
  external factory TileLayer(String urlTemplate, [TileLayerOptions options]);
  external TileLayerOptions get options;
  external set options(TileLayerOptions value);
  external dynamic setUrl(String url, [bool noRedraw]);
  external String getTileUrl(Coords coords);
  external void _tileOnLoad(DoneCallback done, HTMLElement tile);
  external void _tileOnError(DoneCallback done, HTMLElement tile, Error e);
  external void _abortLoading();
  external num _getZoomForUrl();
}
@JS("tileLayer")
external TileLayer tileLayer(String urlTemplate, [TileLayerOptions options]);
@JS("TileLayer.WMS")
class WMS {
  external factory WMS(String baseUrl, WMSOptions options);
  external WMSParams get wmsParams;
  external set wmsParams(WMSParams value);
  external WMSOptions get options;
  external set options(WMSOptions value);
  external dynamic setParams(WMSParams params, [bool noRedraw]);
}
@JS()
@anonymous
abstract class WMSOptions{}
extension WMSOptionsExtension on WMSOptions {
  external String? get layers;
  external set layers(String? value);
  external String? get styles;
  external set styles(String? value);
  external String? get format;
  external set format(String? value);
  external bool? get transparent;
  external set transparent(bool? value);
  external String? get version;
  external set version(String? value);
  external CRS? get crs;
  external set crs(CRS? value);
  external bool? get uppercase;
  external set uppercase(bool? value);
}
@JS()
@anonymous
abstract class WMSParams{}
extension WMSParamsExtension on WMSParams {
  external String? get format;
  external set format(String? value);
  external String get layers;
  external set layers(String value);
  external String? get request;
  external set request(String? value);
  external String? get service;
  external set service(String? value);
  external String? get styles;
  external set styles(String? value);
  external String? get version;
  external set version(String? value);
  external bool? get transparent;
  external set transparent(bool? value);
  external num? get width;
  external set width(num? value);
  external num? get height;
  external set height(num? value);
}
@JS("tileLayer.wms")
external WMS wms(String baseUrl, [WMSOptions options]);
typedef CrossOrigin = String;
typedef ReferrerPolicy = String;
@JS()
@anonymous
abstract class ImageOverlayOptions{}
extension ImageOverlayOptionsExtension on ImageOverlayOptions {
  external num? get opacity;
  external set opacity(num? value);
  external String? get alt;
  external set alt(String? value);
  external bool? get interactive;
  external set interactive(bool? value);
  external dynamic /* CrossOrigin|bool */ get crossOrigin;
  external set crossOrigin(dynamic /* CrossOrigin|bool */ value);
  external String? get errorOverlayUrl;
  external set errorOverlayUrl(String? value);
  external num? get zIndex;
  external set zIndex(num? value);
  external String? get className;
  external set className(String? value);
}
@JS()
@anonymous
abstract class ImageOverlayStyleOptions{}
extension ImageOverlayStyleOptionsExtension on ImageOverlayStyleOptions {
  external num get opacity;
  external set opacity(num value);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("ImageOverlay")
class ImageOverlay {
  external factory ImageOverlay(String imageUrl, LatLngBoundsExpression bounds, [ImageOverlayOptions options]);
  external ImageOverlayOptions get options;
  external set options(ImageOverlayOptions value);
  external dynamic bringToFront();
  external dynamic bringToBack();
  external dynamic setUrl(String url);
  external dynamic setBounds(LatLngBounds bounds);
  external dynamic setZIndex(num value);
  external dynamic setOpacity(num opacity);
  external dynamic setStyle(ImageOverlayStyleOptions styleOpts);
  external LatLngBounds getBounds();
  external Point getCenter();
  external HTMLImageElement? getElement();
}
@JS("imageOverlay")
external ImageOverlay imageOverlay(String imageUrl, LatLngBoundsExpression bounds, [ImageOverlayOptions options]);
typedef SVGOverlayStyleOptions = ImageOverlayStyleOptions;
@JS("SVGOverlay")
class SVGOverlay {
  external factory SVGOverlay(dynamic /* String|SVGElement */ svgImage, LatLngBoundsExpression bounds, [ImageOverlayOptions options]);
  external ImageOverlayOptions get options;
  external set options(ImageOverlayOptions value);
  external dynamic bringToFront();
  external dynamic bringToBack();
  external dynamic setUrl(String url);
  external dynamic setBounds(LatLngBounds bounds);
  external dynamic setZIndex(num value);
  external dynamic setOpacity(num opacity);
  external dynamic setStyle(SVGOverlayStyleOptions styleOpts);
  external LatLngBounds getBounds();
  external Point getCenter();
  external SVGElement? getElement();
}
@JS("svgOverlay")
external SVGOverlay svgOverlay(dynamic /* String|SVGElement */ svgImage, LatLngBoundsExpression bounds, [ImageOverlayOptions options]);
@JS()
@anonymous
abstract class VideoOverlayOptions{}
extension VideoOverlayOptionsExtension on VideoOverlayOptions {
  external bool? get autoplay;
  external set autoplay(bool? value);
  external bool? get loop;
  external set loop(bool? value);
  external bool? get keepAspectRatio;
  external set keepAspectRatio(bool? value);
  external bool? get muted;
  external set muted(bool? value);
  external bool? get playsInline;
  external set playsInline(bool? value);
}
@JS("VideoOverlay")
class VideoOverlay {
  external factory VideoOverlay(dynamic /* String|List<String>|HTMLVideoElement */ video, LatLngBoundsExpression bounds, [VideoOverlayOptions options]);
  external VideoOverlayOptions get options;
  external set options(VideoOverlayOptions value);
  external dynamic bringToFront();
  external dynamic bringToBack();
  external dynamic setUrl(String url);
  external dynamic setBounds(LatLngBounds bounds);
  external dynamic setZIndex(num value);
  external dynamic setOpacity(num opacity);
  external dynamic setStyle(SVGOverlayStyleOptions styleOpts);
  external LatLngBounds getBounds();
  external Point getCenter();
  external HTMLVideoElement? getElement();
}
@JS("videoOverlay")
external VideoOverlay videoOverlay(dynamic /* String|List<String>|HTMLVideoElement */ video, LatLngBoundsExpression bounds, [VideoOverlayOptions options]);
typedef LineCapShape = String;
typedef LineJoinShape = String;
typedef FillRule = String;
@JS()
@anonymous
abstract class PathOptions{}
extension PathOptionsExtension on PathOptions {
  external bool? get stroke;
  external set stroke(bool? value);
  external String? get color;
  external set color(String? value);
  external num? get weight;
  external set weight(num? value);
  external num? get opacity;
  external set opacity(num? value);
  external LineCapShape? get lineCap;
  external set lineCap(LineCapShape? value);
  external LineJoinShape? get lineJoin;
  external set lineJoin(LineJoinShape? value);
  external dynamic /* String|List<num> */ get dashArray;
  external set dashArray(dynamic /* String|List<num> */ value);
  external String? get dashOffset;
  external set dashOffset(String? value);
  external bool? get fill;
  external set fill(bool? value);
  external String? get fillColor;
  external set fillColor(String? value);
  external num? get fillOpacity;
  external set fillOpacity(num? value);
  external FillRule? get fillRule;
  external set fillRule(FillRule? value);
  external Renderer? get renderer;
  external set renderer(Renderer? value);
  external String? get className;
  external set className(String? value);
}
@JS("Path")
class Path {
  external PathOptions get options;
  external set options(PathOptions value);
  external dynamic redraw();
  external dynamic setStyle(PathOptions style);
  external dynamic bringToFront();
  external dynamic bringToBack();
  external Element? getElement();
}
@JS()
@anonymous
abstract class PolylineOptions{}
extension PolylineOptionsExtension on PolylineOptions {
  external num? get smoothFactor;
  external set smoothFactor(num? value);
  external bool? get noClip;
  external set noClip(bool? value);
}
@JS("Polyline")
class Polyline {
  external factory Polyline(dynamic /* List<LatLngExpression>|List<List<LatLngExpression>> */ latlngs, [PolylineOptions options]);
  external geojson.Feature<T, P>? get feature;
  external set feature(geojson.Feature<T, P>? value);
  external PolylineOptions get options;
  external set options(PolylineOptions value);
  external Feature toGeoJSON([dynamic /* num|bool */ precision]);
  external dynamic /* List<LatLng>|List<List<LatLng>>|List<List<List<LatLng>>> */ getLatLngs();
  external dynamic setLatLngs(dynamic /* List<LatLngExpression>|List<List<LatLngExpression>>|List<List<List<LatLngExpression>>> */ latlngs);
  external bool isEmpty();
  external LatLng getCenter();
  external LatLngBounds getBounds();
  external dynamic addLatLng(dynamic /* LatLngExpression|List<LatLngExpression> */ latlng, [List<LatLng> latlngs]);
  external Point closestLayerPoint(Point p);
}
@JS("polyline")
external Polyline polyline(dynamic /* List<LatLngExpression>|List<List<LatLngExpression>> */ latlngs, [PolylineOptions options]);
@JS("Polygon")
class Polygon {
  external factory Polygon(dynamic /* List<LatLngExpression>|List<List<LatLngExpression>>|List<List<List<LatLngExpression>>> */ latlngs, [PolylineOptions options]);
}
@JS("polygon")
external Polygon polygon(dynamic /* List<LatLngExpression>|List<List<LatLngExpression>>|List<List<List<LatLngExpression>>> */ latlngs, [PolylineOptions options]);
@JS("Rectangle")
class Rectangle {
  external factory Rectangle(LatLngBoundsExpression latLngBounds, [PolylineOptions options]);
  external dynamic setBounds(LatLngBoundsExpression latLngBounds);
}
@JS("rectangle")
external Rectangle rectangle(LatLngBoundsExpression latLngBounds, [PolylineOptions options]);
@JS()
@anonymous
abstract class CircleMarkerOptions{}
extension CircleMarkerOptionsExtension on CircleMarkerOptions {
  external num get radius;
  external set radius(num value);
}
@JS("CircleMarker")
class CircleMarker {
  external factory CircleMarker(LatLngExpression latlng, CircleMarkerOptions options);
  external CircleMarkerOptions get options;
  external set options(CircleMarkerOptions value);
  external geojson.Feature<geojson.Point, P>? get feature;
  external set feature(geojson.Feature<geojson.Point, P>? value);
  external Feature toGeoJSON([dynamic /* num|bool */ precision]);
  external dynamic setLatLng(LatLngExpression latLng);
  external LatLng getLatLng();
  external dynamic setRadius(num radius);
  external num getRadius();
  external dynamic setStyle(Partial options);
}
@JS("circleMarker")
external CircleMarker circleMarker(LatLngExpression latlng, [CircleMarkerOptions options]);
typedef CircleOptions = CircleMarkerOptions;
@JS("Circle")
class Circle {
  external factory Circle(LatLngExpression latlng, CircleOptions options);
  external factory Circle(LatLngExpression latlng, num radius, [CircleOptions options]);
  external dynamic toGeoJSON([dynamic /* num|bool */ precision]);
  external LatLngBounds getBounds();
  external dynamic setRadius(num radius);
  external num getRadius();
  external dynamic setStyle(PathOptions style);
}
@JS("circle")
external Circle circle(LatLngExpression latlng, num radius, [CircleMarkerOptions options]);
@JS()
@anonymous
abstract class RendererOptions{}
extension RendererOptionsExtension on RendererOptions {
  external num? get padding;
  external set padding(num? value);
  external num? get tolerance;
  external set tolerance(num? value);
}
@JS("Renderer")
class Renderer {
  external factory Renderer([RendererOptions options]);
  external RendererOptions get options;
  external set options(RendererOptions value);
}
@JS("SVG")
class SVG {
}
@JS("SVG.create")
external SVGElement create(String name);
@JS("SVG.pointsToPath")
external String pointsToPath(List<PointExpression> rings, bool closed);
@JS("svg")
external SVG svg([RendererOptions options]);
@JS("Canvas")
class Canvas {
}
@JS("canvas")
external Canvas canvas([RendererOptions options]);
@JS("LayerGroup")
class LayerGroup {
  external factory LayerGroup([List<Layer> layers, LayerOptions options]);
  external dynamic /* geojson.FeatureCollection<geojson.GeometryObject, P>|geojson.Feature<geojson.MultiPoint, P>|geojson.GeometryCollection */ get feature;
  external set feature(dynamic /* geojson.FeatureCollection<geojson.GeometryObject, P>|geojson.Feature<geojson.MultiPoint, P>|geojson.GeometryCollection */ value);
  external Feature toMultiPoint([num precision]);
  external dynamic /* geojson.FeatureCollection<geojson.GeometryObject, P>|geojson.Feature<geojson.MultiPoint, P>|geojson.GeometryCollection */ toGeoJSON([dynamic /* num|bool */ precision]);
  external dynamic addLayer(Layer layer);
  external dynamic removeLayer(dynamic /* num|Layer */ layer);
  external bool hasLayer(Layer layer);
  external dynamic clearLayers();
  external dynamic invoke(String methodName, [/* rest */ List<dynamic> params]);
  external dynamic eachLayer(void Function(Layer) fn, [dynamic context]);
  external Layer? getLayer(num id);
  external List<Layer> getLayers();
  external dynamic setZIndex(num zIndex);
  external num getLayerId(Layer layer);
}
@JS("layerGroup")
external LayerGroup layerGroup([List<Layer> layers, LayerOptions options]);
@JS("FeatureGroup")
class FeatureGroup {
  external dynamic addLayer(Layer layer);
  external dynamic removeLayer(dynamic /* num|Layer */ layer);
  external dynamic setStyle(PathOptions style);
  external dynamic bringToFront();
  external dynamic bringToBack();
  external LatLngBounds getBounds();
}
@JS("featureGroup")
external FeatureGroup featureGroup([List<Layer> layers, LayerOptions options]);
typedef StyleFunction = PathOptions Function([geojson.Feature<geojson.GeometryObject, P>]);
@JS()
@anonymous
abstract class GeoJSONOptions{}
extension GeoJSONOptionsExtension on GeoJSONOptions {
  external dynamic /* PathOptions|StyleFunction<P> */ get style;
  external set style(dynamic /* PathOptions|StyleFunction<P> */ value);
  external bool? get markersInheritOptions;
  external set markersInheritOptions(bool? value);
  external Layer pointToLayer(Feature geoJsonPoint, LatLng latlng);
  external void onEachFeature(Feature feature, Layer layer);
  external bool filter(Feature geoJsonFeature);
  external LatLng coordsToLatLng(List<num> coords);
}
@JS("GeoJSON")
class GeoJSON {
  external factory GeoJSON([geojson.GeoJsonObject? geojson, GeoJSONOptions<P, G>? options]);
  external GeoJSONOptions<P, G> get options;
  external set options(GeoJSONOptions<P, G> value);
  external static Feature getFeature(Layer layer, dynamic /* geojson.Feature<G, P>|G */ newGeometry);
  external static Layer geometryToLayer(Feature featureData, [GeoJSONOptions options]);
  external static LatLng coordsToLatLng(List<num> coords);
  external static List<dynamic> coordsToLatLngs(List<dynamic> coords, [num levelsDeep, LatLng Function(List<num>) coordsToLatLng]);
  external static List<num> latLngToCoords(LatLng latlng);
  external static List<dynamic> latLngsToCoords(List<dynamic> latlngs, [num levelsDeep, bool closed]);
  external static Feature asFeature(dynamic /* geojson.Feature<G, P>|G */ geojson);
  external dynamic addData(GeoJsonObject data);
  external dynamic resetStyle([Layer layer]);
  external dynamic setStyle(dynamic /* PathOptions|StyleFunction<P> */ style);
}
@JS("geoJSON")
external GeoJSON geoJSON([dynamic /* geojson.GeoJsonObject|List<geojson.GeoJsonObject> */ geojson, GeoJSONOptions<P, G>? options]);
@JS("geoJson")
external GeoJSON geoJson([dynamic /* geojson.GeoJsonObject|List<geojson.GeoJsonObject> */ geojson, GeoJSONOptions<P, G>? options]);
typedef Zoom = dynamic /* bool|String */;
@JS()
@anonymous
abstract class MapOptions{}
extension MapOptionsExtension on MapOptions {
  external bool? get preferCanvas;
  external set preferCanvas(bool? value);
  external bool? get attributionControl;
  external set attributionControl(bool? value);
  external bool? get zoomControl;
  external set zoomControl(bool? value);
  external bool? get closePopupOnClick;
  external set closePopupOnClick(bool? value);
  external num? get zoomSnap;
  external set zoomSnap(num? value);
  external num? get zoomDelta;
  external set zoomDelta(num? value);
  external bool? get trackResize;
  external set trackResize(bool? value);
  external bool? get boxZoom;
  external set boxZoom(bool? value);
  external Zoom? get doubleClickZoom;
  external set doubleClickZoom(Zoom? value);
  external bool? get dragging;
  external set dragging(bool? value);
  external CRS? get crs;
  external set crs(CRS? value);
  external LatLngExpression? get center;
  external set center(LatLngExpression? value);
  external num? get zoom;
  external set zoom(num? value);
  external num? get minZoom;
  external set minZoom(num? value);
  external num? get maxZoom;
  external set maxZoom(num? value);
  external List<Layer>? get layers;
  external set layers(List<Layer>? value);
  external LatLngBoundsExpression? get maxBounds;
  external set maxBounds(LatLngBoundsExpression? value);
  external Renderer? get renderer;
  external set renderer(Renderer? value);
  external bool? get fadeAnimation;
  external set fadeAnimation(bool? value);
  external bool? get markerZoomAnimation;
  external set markerZoomAnimation(bool? value);
  external num? get transform3DLimit;
  external set transform3DLimit(num? value);
  external bool? get zoomAnimation;
  external set zoomAnimation(bool? value);
  external num? get zoomAnimationThreshold;
  external set zoomAnimationThreshold(num? value);
  external bool? get inertia;
  external set inertia(bool? value);
  external num? get inertiaDeceleration;
  external set inertiaDeceleration(num? value);
  external num? get inertiaMaxSpeed;
  external set inertiaMaxSpeed(num? value);
  external num? get easeLinearity;
  external set easeLinearity(num? value);
  external bool? get worldCopyJump;
  external set worldCopyJump(bool? value);
  external num? get maxBoundsViscosity;
  external set maxBoundsViscosity(num? value);
  external bool? get keyboard;
  external set keyboard(bool? value);
  external num? get keyboardPanDelta;
  external set keyboardPanDelta(num? value);
  external Zoom? get scrollWheelZoom;
  external set scrollWheelZoom(Zoom? value);
  external num? get wheelDebounceTime;
  external set wheelDebounceTime(num? value);
  external num? get wheelPxPerZoomLevel;
  external set wheelPxPerZoomLevel(num? value);
  external bool? get tapHold;
  external set tapHold(bool? value);
  external num? get tapTolerance;
  external set tapTolerance(num? value);
  external Zoom? get touchZoom;
  external set touchZoom(Zoom? value);
  external bool? get bounceAtZoomLimits;
  external set bounceAtZoomLimits(bool? value);
}
typedef ControlPosition = String;
@JS()
@anonymous
abstract class ControlOptions{}
extension ControlOptionsExtension on ControlOptions {
  external ControlPosition? get position;
  external set position(ControlPosition? value);
}
@JS("Control")
class Control {
  external factory Control([Options options]);
  external Options get options;
  external set options(Options value);
  external static dynamic extend(T props);
  external ControlPosition getPosition();
  external dynamic setPosition(ControlPosition position);
  external HTMLElement? getContainer();
  external dynamic addTo(Map map);
  external dynamic remove();
  external HTMLElement onAdd(Map map);
  external void onRemove(Map map);
}
@JS()
@anonymous
abstract class ZoomOptions{}
extension ZoomOptionsExtension on ZoomOptions {
  external String? get zoomInText;
  external set zoomInText(String? value);
  external String? get zoomInTitle;
  external set zoomInTitle(String? value);
  external String? get zoomOutText;
  external set zoomOutText(String? value);
  external String? get zoomOutTitle;
  external set zoomOutTitle(String? value);
}
@JS("Control.Zoom")
class Zoom {
  external factory Zoom([ZoomOptions options]);
  external ZoomOptions get options;
  external set options(ZoomOptions value);
}
@JS()
@anonymous
abstract class AttributionOptions{}
extension AttributionOptionsExtension on AttributionOptions {
  external dynamic /* String|bool */ get prefix;
  external set prefix(dynamic /* String|bool */ value);
}
@JS("Control.Attribution")
class Attribution {
  external factory Attribution([AttributionOptions options]);
  external AttributionOptions get options;
  external set options(AttributionOptions value);
  external dynamic setPrefix(dynamic /* String|bool */ prefix);
  external dynamic addAttribution(String text);
  external dynamic removeAttribution(String text);
}
@JS()
@anonymous
abstract class LayersOptions{}
extension LayersOptionsExtension on LayersOptions {
  external bool? get collapsed;
  external set collapsed(bool? value);
  external bool? get autoZIndex;
  external set autoZIndex(bool? value);
  external bool? get hideSingleBase;
  external set hideSingleBase(bool? value);
  external bool? get sortLayers;
  external set sortLayers(bool? value);
  external num Function(Layer, Layer, String, String)? get sortFunction;
  external set sortFunction(num Function(Layer, Layer, String, String)? value);
}
@JS()
@anonymous
abstract class LayersObject{}
extension LayersObjectExtension on LayersObject {
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("Control.Layers")
class Layers {
  external factory Layers([LayersObject baseLayers, LayersObject overlays, LayersOptions options]);
  external LayersOptions get options;
  external set options(LayersOptions value);
  external dynamic addBaseLayer(Layer layer, String name);
  external dynamic addOverlay(Layer layer, String name);
  external dynamic removeLayer(Layer layer);
  external dynamic expand();
  external dynamic collapse();
}
@JS()
@anonymous
abstract class ScaleOptions{}
extension ScaleOptionsExtension on ScaleOptions {
  external num? get maxWidth;
  external set maxWidth(num? value);
  external bool? get metric;
  external set metric(bool? value);
  external bool? get imperial;
  external set imperial(bool? value);
  external bool? get updateWhenIdle;
  external set updateWhenIdle(bool? value);
}
@JS("Control.Scale")
class Scale {
  external factory Scale([ScaleOptions options]);
  external ScaleOptions get options;
  external set options(ScaleOptions value);
}
@JS("control.zoom")
external Zoom zoom([ZoomOptions options]);
@JS("control.attribution")
external Attribution attribution([AttributionOptions options]);
@JS("control.layers")
external Layers layers([LayersObject baseLayers, LayersObject overlays, LayersOptions options]);
@JS("control.scale")
external Scale scale([ScaleOptions options]);
@JS()
@anonymous
abstract class DivOverlayOptions{}
extension DivOverlayOptionsExtension on DivOverlayOptions {
  external PointExpression? get offset;
  external set offset(PointExpression? value);
  external String? get className;
  external set className(String? value);
  external String? get pane;
  external set pane(String? value);
  external bool? get interactive;
  external set interactive(bool? value);
  external dynamic /* String|HTMLElement|String Function(Layer)|HTMLElement Function(Layer) */ get content;
  external set content(dynamic /* String|HTMLElement|String Function(Layer)|HTMLElement Function(Layer) */ value);
}
@JS("DivOverlay")
class DivOverlay {
  external factory DivOverlay(LatLngExpression latlng, [TooltipOptions options]);
  external factory DivOverlay([DivOverlayOptions options, Layer source]);
  external DivOverlayOptions get options;
  external set options(DivOverlayOptions value);
  external LatLng? getLatLng();
  external dynamic setLatLng(LatLngExpression latlng);
  external dynamic /* Content|Content Function(Layer) */ getContent();
  external dynamic setContent(dynamic /* Content Function(Layer)|Content */ htmlContent);
  external HTMLElement? getElement();
  external void update();
  external bool isOpen();
  external dynamic bringToFront();
  external dynamic bringToBack();
  external dynamic openOn(Map map);
  external dynamic toggle([Layer layer]);
  external dynamic close();
}
@JS()
@anonymous
abstract class PopupOptions{}
extension PopupOptionsExtension on PopupOptions {
  external num? get maxWidth;
  external set maxWidth(num? value);
  external num? get minWidth;
  external set minWidth(num? value);
  external num? get maxHeight;
  external set maxHeight(num? value);
  external bool? get keepInView;
  external set keepInView(bool? value);
  external bool? get closeButton;
  external set closeButton(bool? value);
  external bool? get autoPan;
  external set autoPan(bool? value);
  external PointExpression? get autoPanPaddingTopLeft;
  external set autoPanPaddingTopLeft(PointExpression? value);
  external PointExpression? get autoPanPaddingBottomRight;
  external set autoPanPaddingBottomRight(PointExpression? value);
  external PointExpression? get autoPanPadding;
  external set autoPanPadding(PointExpression? value);
  external bool? get autoClose;
  external set autoClose(bool? value);
  external bool? get closeOnClick;
  external set closeOnClick(bool? value);
  external bool? get closeOnEscapeKey;
  external set closeOnEscapeKey(bool? value);
}
typedef Content = dynamic /* String|HTMLElement */;
@JS("Popup")
class Popup {
  external factory Popup(LatLngExpression latlng, [TooltipOptions options]);
  external factory Popup([PopupOptions options, Layer source]);
  external PopupOptions get options;
  external set options(PopupOptions value);
  external dynamic openOn(Map map);
}
@JS("popup")
external Popup popup([PopupOptions options, Layer source]);
typedef Direction = String;
@JS()
@anonymous
abstract class TooltipOptions{}
extension TooltipOptionsExtension on TooltipOptions {
  external String? get pane;
  external set pane(String? value);
  external PointExpression? get offset;
  external set offset(PointExpression? value);
  external Direction? get direction;
  external set direction(Direction? value);
  external bool? get permanent;
  external set permanent(bool? value);
  external bool? get sticky;
  external set sticky(bool? value);
  external num? get opacity;
  external set opacity(num? value);
}
@JS("Tooltip")
class Tooltip {
  external factory Tooltip(LatLngExpression latlng, [TooltipOptions options]);
  external factory Tooltip([TooltipOptions options, Layer source]);
  external TooltipOptions get options;
  external set options(TooltipOptions value);
  external void setOpacity(num val);
}
@JS("tooltip")
external Tooltip tooltip([TooltipOptions options, Layer source]);
@JS()
@anonymous
abstract class ZoomOptions{}
extension ZoomOptionsExtension on ZoomOptions {
  external bool? get animate;
  external set animate(bool? value);
}
@JS()
@anonymous
abstract class PanOptions{}
extension PanOptionsExtension on PanOptions {
  external bool? get animate;
  external set animate(bool? value);
  external num? get duration;
  external set duration(num? value);
  external num? get easeLinearity;
  external set easeLinearity(num? value);
  external bool? get noMoveStart;
  external set noMoveStart(bool? value);
}
@JS()
@anonymous
abstract class ZoomPanOptions{}
extension ZoomPanOptionsExtension on ZoomPanOptions {
}
@JS()
@anonymous
abstract class InvalidateSizeOptions{}
extension InvalidateSizeOptionsExtension on InvalidateSizeOptions {
  external bool? get debounceMoveend;
  external set debounceMoveend(bool? value);
  external bool? get pan;
  external set pan(bool? value);
}
@JS()
@anonymous
abstract class FitBoundsOptions{}
extension FitBoundsOptionsExtension on FitBoundsOptions {
  external PointExpression? get paddingTopLeft;
  external set paddingTopLeft(PointExpression? value);
  external PointExpression? get paddingBottomRight;
  external set paddingBottomRight(PointExpression? value);
  external PointExpression? get padding;
  external set padding(PointExpression? value);
  external num? get maxZoom;
  external set maxZoom(num? value);
}
@JS()
@anonymous
abstract class PanInsideOptions{}
extension PanInsideOptionsExtension on PanInsideOptions {
  external PointExpression? get paddingTopLeft;
  external set paddingTopLeft(PointExpression? value);
  external PointExpression? get paddingBottomRight;
  external set paddingBottomRight(PointExpression? value);
  external PointExpression? get padding;
  external set padding(PointExpression? value);
}
@JS()
@anonymous
abstract class LocateOptions{}
extension LocateOptionsExtension on LocateOptions {
  external bool? get watch;
  external set watch(bool? value);
  external bool? get setView;
  external set setView(bool? value);
  external num? get maxZoom;
  external set maxZoom(num? value);
  external num? get timeout;
  external set timeout(num? value);
  external num? get maximumAge;
  external set maximumAge(num? value);
  external bool? get enableHighAccuracy;
  external set enableHighAccuracy(bool? value);
}
@JS("Handler")
class Handler {
  external factory Handler(Map map);
  external dynamic enable();
  external dynamic disable();
  external bool enabled();
  external void addHooks();
  external void removeHooks();
}
@JS()
@anonymous
abstract class LeafletEvent{}
extension LeafletEventExtension on LeafletEvent {
  external String get type;
  external set type(String value);
  external dynamic get popup;
  external set popup(dynamic value);
  external dynamic get target;
  external set target(dynamic value);
  external dynamic get sourceTarget;
  external set sourceTarget(dynamic value);
  external dynamic get propagatedFrom;
  external set propagatedFrom(dynamic value);
  external dynamic get layer;
  external set layer(dynamic value);
}
@JS()
@anonymous
abstract class LeafletMouseEvent{}
extension LeafletMouseEventExtension on LeafletMouseEvent {
  external LatLng get latlng;
  external set latlng(LatLng value);
  external Point get layerPoint;
  external set layerPoint(Point value);
  external Point get containerPoint;
  external set containerPoint(Point value);
  external MouseEvent get originalEvent;
  external set originalEvent(MouseEvent value);
}
@JS()
@anonymous
abstract class LeafletKeyboardEvent{}
extension LeafletKeyboardEventExtension on LeafletKeyboardEvent {
  external KeyboardEvent get originalEvent;
  external set originalEvent(KeyboardEvent value);
}
@JS()
@anonymous
abstract class LocationEvent{}
extension LocationEventExtension on LocationEvent {
  external LatLng get latlng;
  external set latlng(LatLng value);
  external LatLngBounds get bounds;
  external set bounds(LatLngBounds value);
  external num get accuracy;
  external set accuracy(num value);
  external num get altitude;
  external set altitude(num value);
  external num get altitudeAccuracy;
  external set altitudeAccuracy(num value);
  external num get heading;
  external set heading(num value);
  external num get speed;
  external set speed(num value);
  external num get timestamp;
  external set timestamp(num value);
}
@JS()
@anonymous
abstract class ErrorEvent{}
extension ErrorEventExtension on ErrorEvent {
  external String get message;
  external set message(String value);
  external num get code;
  external set code(num value);
}
@JS()
@anonymous
abstract class LayerEvent{}
extension LayerEventExtension on LayerEvent {
  external Layer get layer;
  external set layer(Layer value);
}
@JS()
@anonymous
abstract class LayersControlEvent{}
extension LayersControlEventExtension on LayersControlEvent {
  external String get name;
  external set name(String value);
}
@JS()
@anonymous
abstract class TileEvent{}
extension TileEventExtension on TileEvent {
  external HTMLImageElement get tile;
  external set tile(HTMLImageElement value);
  external Coords get coords;
  external set coords(Coords value);
}
@JS()
@anonymous
abstract class TileErrorEvent{}
extension TileErrorEventExtension on TileErrorEvent {
  external Error get error;
  external set error(Error value);
}
@JS()
@anonymous
abstract class ResizeEvent{}
extension ResizeEventExtension on ResizeEvent {
  external Point get oldSize;
  external set oldSize(Point value);
  external Point get newSize;
  external set newSize(Point value);
}
@JS()
@anonymous
abstract class GeoJSONEvent{}
extension GeoJSONEventExtension on GeoJSONEvent {
  external Layer get layer;
  external set layer(Layer value);
  external dynamic get properties;
  external set properties(dynamic value);
  external String get geometryType;
  external set geometryType(String value);
  external String get id;
  external set id(String value);
}
@JS()
@anonymous
abstract class PopupEvent{}
extension PopupEventExtension on PopupEvent {
  external Popup get popup;
  external set popup(Popup value);
}
@JS()
@anonymous
abstract class TooltipEvent{}
extension TooltipEventExtension on TooltipEvent {
  external Tooltip get tooltip;
  external set tooltip(Tooltip value);
}
@JS()
@anonymous
abstract class DragEndEvent{}
extension DragEndEventExtension on DragEndEvent {
  external num get distance;
  external set distance(num value);
}
@JS()
@anonymous
abstract class ZoomAnimEvent{}
extension ZoomAnimEventExtension on ZoomAnimEvent {
  external LatLng get center;
  external set center(LatLng value);
  external num get zoom;
  external set zoom(num value);
  external bool get noUpdate;
  external set noUpdate(bool value);
}
typedef EventHandlerFn = void Function(Event);
typedef PropagableEvent = dynamic /* LeafletMouseEvent|LeafletKeyboardEvent|LeafletEvent|Event */;
@JS("DomEvent.on")
external dynamic on(HTMLElement el, dynamic eventMap, [dynamic context]);
@JS("DomEvent.off")
external dynamic off(HTMLElement el, dynamic eventMap, [dynamic context]);
@JS("DomEvent.stopPropagation")
external dynamic stopPropagation(PropagableEvent ev);
@JS("DomEvent.disableScrollPropagation")
external dynamic disableScrollPropagation(HTMLElement el);
@JS("DomEvent.disableClickPropagation")
external dynamic disableClickPropagation(HTMLElement el);
@JS("DomEvent.preventDefault")
external dynamic preventDefault(Event ev);
@JS("DomEvent.stop")
external dynamic stop(PropagableEvent ev);
@JS("DomEvent.getMousePosition")
external Point getMousePosition(MouseEvent ev, [HTMLElement container]);
@JS("DomEvent.getWheelDelta")
external num getWheelDelta(Event ev);
@JS("DomEvent.addListener")
external dynamic addListener(HTMLElement el, dynamic eventMap, [dynamic context]);
@JS("DomEvent.removeListener")
external dynamic removeListener(HTMLElement el, dynamic eventMap, [dynamic context]);
@JS("DomEvent.getPropagationPath")
external List<HTMLElement> getPropagationPath(Event ev);
@JS()
@anonymous
abstract class DefaultMapPanes{}
extension DefaultMapPanesExtension on DefaultMapPanes {
  external HTMLElement get mapPane;
  external set mapPane(HTMLElement value);
  external HTMLElement get tilePane;
  external set tilePane(HTMLElement value);
  external HTMLElement get overlayPane;
  external set overlayPane(HTMLElement value);
  external HTMLElement get shadowPane;
  external set shadowPane(HTMLElement value);
  external HTMLElement get markerPane;
  external set markerPane(HTMLElement value);
  external HTMLElement get tooltipPane;
  external set tooltipPane(HTMLElement value);
  external HTMLElement get popupPane;
  external set popupPane(HTMLElement value);
}
@JS("Map")
class Map {
  external factory Map(dynamic /* String|HTMLElement */ element, [MapOptions options]);
  external L.Control.Attribution get attributionControl;
  external set attributionControl(L.Control.Attribution value);
  external Handler get boxZoom;
  external set boxZoom(Handler value);
  external Handler get doubleClickZoom;
  external set doubleClickZoom(Handler value);
  external Handler get dragging;
  external set dragging(Handler value);
  external Handler get keyboard;
  external set keyboard(Handler value);
  external Handler get scrollWheelZoom;
  external set scrollWheelZoom(Handler value);
  external Handler? get tapHold;
  external set tapHold(Handler? value);
  external Handler get touchZoom;
  external set touchZoom(Handler value);
  external Control.Zoom get zoomControl;
  external set zoomControl(Control.Zoom value);
  external MapOptions get options;
  external set options(MapOptions value);
  external Renderer getRenderer(Path layer);
  external dynamic addControl(Control control);
  external dynamic removeControl(Control control);
  external dynamic addLayer(Layer layer);
  external dynamic removeLayer(Layer layer);
  external bool hasLayer(Layer layer);
  external dynamic eachLayer(void Function(Layer) fn, [dynamic context]);
  @JS("openPopup")
  external dynamic openPopup_1(Popup popup);
  @JS("openPopup")
  external dynamic openPopup_2(Content content, LatLngExpression latlng, [PopupOptions options]);
  external dynamic closePopup([Popup popup]);
  @JS("openTooltip")
  external dynamic openTooltip_1(Tooltip tooltip);
  @JS("openTooltip")
  external dynamic openTooltip_2(Content content, LatLngExpression latlng, [TooltipOptions options]);
  external dynamic closeTooltip([Tooltip tooltip]);
  external dynamic setView(LatLngExpression center, [num zoom, ZoomPanOptions options]);
  external dynamic setZoom(num zoom, [ZoomPanOptions options]);
  external dynamic zoomIn([num delta, ZoomOptions options]);
  external dynamic zoomOut([num delta, ZoomOptions options]);
  external dynamic setZoomAround(dynamic /* Point|LatLngExpression */ position, num zoom, [ZoomOptions options]);
  external dynamic fitBounds(LatLngBoundsExpression bounds, [FitBoundsOptions options]);
  external dynamic fitWorld([FitBoundsOptions options]);
  external dynamic panTo(LatLngExpression latlng, [PanOptions options]);
  external dynamic panBy(PointExpression offset, [PanOptions options]);
  external dynamic setMaxBounds([LatLngBoundsExpression bounds]);
  external dynamic setMinZoom(num zoom);
  external dynamic setMaxZoom(num zoom);
  external dynamic panInside(LatLngExpression latLng, [PanInsideOptions options]);
  external dynamic panInsideBounds(LatLngBoundsExpression bounds, [PanOptions options]);
  external dynamic invalidateSize([dynamic /* bool|InvalidateSizeOptions */ options]);
  external dynamic stop();
  external dynamic flyTo(LatLngExpression latlng, [num zoom, ZoomPanOptions options]);
  external dynamic flyToBounds(LatLngBoundsExpression bounds, [FitBoundsOptions options]);
  external dynamic addHandler(String name, dynamic HandlerClass);
  external dynamic remove();
  external HTMLElement createPane(String name, [HTMLElement container]);
  external HTMLElement? getPane(dynamic /* String|HTMLElement */ pane);
  external dynamic getPanes();
  external HTMLElement getContainer();
  external dynamic whenReady(void Function(dynamic) fn, [dynamic context]);
  external LatLng getCenter();
  external num getZoom();
  external LatLngBounds getBounds();
  external num getMinZoom();
  external num getMaxZoom();
  external num getBoundsZoom(LatLngBoundsExpression bounds, [bool inside, Point padding]);
  external Point getSize();
  external Bounds getPixelBounds();
  external Point getPixelOrigin();
  external Bounds getPixelWorldBounds([num zoom]);
  external num getZoomScale(num toZoom, [num fromZoom]);
  external num getScaleZoom(num scale, [num fromZoom]);
  external Point project(LatLngExpression latlng, [num zoom]);
  external LatLng unproject(PointExpression point, [num zoom]);
  external LatLng layerPointToLatLng(PointExpression point);
  external Point latLngToLayerPoint(LatLngExpression latlng);
  external LatLng wrapLatLng(LatLngExpression latlng);
  external LatLngBounds wrapLatLngBounds(LatLngBounds bounds);
  external num distance(LatLngExpression latlng1, LatLngExpression latlng2);
  external Point containerPointToLayerPoint(PointExpression point);
  external LatLng containerPointToLatLng(PointExpression point);
  external Point layerPointToContainerPoint(PointExpression point);
  external Point latLngToContainerPoint(LatLngExpression latlng);
  external Point mouseEventToContainerPoint(MouseEvent ev);
  external Point mouseEventToLayerPoint(MouseEvent ev);
  external LatLng mouseEventToLatLng(MouseEvent ev);
  external dynamic locate([LocateOptions options]);
  external dynamic stopLocate();
}
@JS("map")
external Map map(dynamic /* String|HTMLElement */ element, [MapOptions options]);
@JS()
@anonymous
abstract class BaseIconOptions{}
extension BaseIconOptionsExtension on BaseIconOptions {
  external String? get iconUrl;
  external set iconUrl(String? value);
  external String? get iconRetinaUrl;
  external set iconRetinaUrl(String? value);
  external PointExpression? get iconSize;
  external set iconSize(PointExpression? value);
  external PointExpression? get iconAnchor;
  external set iconAnchor(PointExpression? value);
  external PointExpression? get popupAnchor;
  external set popupAnchor(PointExpression? value);
  external PointExpression? get tooltipAnchor;
  external set tooltipAnchor(PointExpression? value);
  external String? get shadowUrl;
  external set shadowUrl(String? value);
  external String? get shadowRetinaUrl;
  external set shadowRetinaUrl(String? value);
  external PointExpression? get shadowSize;
  external set shadowSize(PointExpression? value);
  external PointExpression? get shadowAnchor;
  external set shadowAnchor(PointExpression? value);
  external String? get className;
  external set className(String? value);
}
@JS()
@anonymous
abstract class IconOptions{}
extension IconOptionsExtension on IconOptions {
  external String get iconUrl;
  external set iconUrl(String value);
  external dynamic /* CrossOrigin|bool */ get crossOrigin;
  external set crossOrigin(dynamic /* CrossOrigin|bool */ value);
}
@JS("Icon")
class Icon {
  external factory Icon(T options);
  external T get options;
  external set options(T value);
  external HTMLElement createIcon([HTMLElement oldIcon]);
  external HTMLElement createShadow([HTMLElement oldIcon]);
}
@JS()
@anonymous
abstract class DefaultIconOptions{}
extension DefaultIconOptionsExtension on DefaultIconOptions {
  external String? get imagePath;
  external set imagePath(String? value);
}
@JS("Icon.Default")
class Default {
  external factory Default([DefaultIconOptions options]);
  external static String? get imagePath;
  external static set imagePath(String? value);
}
@JS("icon")
external Icon icon(IconOptions options);
@JS()
@anonymous
abstract class DivIconOptions{}
extension DivIconOptionsExtension on DivIconOptions {
  external dynamic /* String|HTMLElement|bool */ get html;
  external set html(dynamic /* String|HTMLElement|bool */ value);
  external PointExpression? get bgPos;
  external set bgPos(PointExpression? value);
  external PointExpression? get iconSize;
  external set iconSize(PointExpression? value);
  external PointExpression? get iconAnchor;
  external set iconAnchor(PointExpression? value);
  external PointExpression? get popupAnchor;
  external set popupAnchor(PointExpression? value);
  external String? get className;
  external set className(String? value);
}
@JS("DivIcon")
class DivIcon {
  external factory DivIcon([DivIconOptions options]);
}
@JS("divIcon")
external DivIcon divIcon([DivIconOptions options]);
@JS()
@anonymous
abstract class MarkerOptions{}
extension MarkerOptionsExtension on MarkerOptions {
  external dynamic /* Icon|DivIcon */ get icon;
  external set icon(dynamic /* Icon|DivIcon */ value);
  external bool? get draggable;
  external set draggable(bool? value);
  external bool? get keyboard;
  external set keyboard(bool? value);
  external String? get title;
  external set title(String? value);
  external String? get alt;
  external set alt(String? value);
  external num? get zIndexOffset;
  external set zIndexOffset(num? value);
  external num? get opacity;
  external set opacity(num? value);
  external bool? get riseOnHover;
  external set riseOnHover(bool? value);
  external num? get riseOffset;
  external set riseOffset(num? value);
  external String? get shadowPane;
  external set shadowPane(String? value);
  external bool? get autoPan;
  external set autoPan(bool? value);
  external PointExpression? get autoPanPadding;
  external set autoPanPadding(PointExpression? value);
  external num? get autoPanSpeed;
  external set autoPanSpeed(num? value);
  external bool? get autoPanOnFocus;
  external set autoPanOnFocus(bool? value);
}
@JS("Marker")
class Marker {
  external factory Marker(LatLngExpression latlng, [MarkerOptions options]);
  external MarkerOptions get options;
  external set options(MarkerOptions value);
  external Handler? get dragging;
  external set dragging(Handler? value);
  external geojson.Feature<geojson.Point, P>? get feature;
  external set feature(geojson.Feature<geojson.Point, P>? value);
  external HTMLElement? get _shadow;
  external set _shadow(HTMLElement? value);
  external Feature toGeoJSON([dynamic /* num|bool */ precision]);
  external LatLng getLatLng();
  external dynamic setLatLng(LatLngExpression latlng);
  external dynamic setZIndexOffset(num offset);
  external dynamic /* Icon|DivIcon */ getIcon();
  external dynamic setIcon(dynamic /* Icon|DivIcon */ icon);
  external dynamic setOpacity(num opacity);
  external HTMLElement? getElement();
}
@JS("marker")
external Marker marker(LatLngExpression latlng, [MarkerOptions options]);
@JS("Browser.ie")
external bool ie;
@JS("Browser.ielt9")
external bool ielt9;
@JS("Browser.edge")
external bool edge;
@JS("Browser.webkit")
external bool webkit;
@JS("Browser.android")
external bool android;
@JS("Browser.android23")
external bool android23;
@JS("Browser.androidStock")
external bool androidStock;
@JS("Browser.opera")
external bool opera;
@JS("Browser.chrome")
external bool chrome;
@JS("Browser.gecko")
external bool gecko;
@JS("Browser.safari")
external bool safari;
@JS("Browser.opera12")
external bool opera12;
@JS("Browser.win")
external bool win;
@JS("Browser.ie3d")
external bool ie3d;
@JS("Browser.webkit3d")
external bool webkit3d;
@JS("Browser.gecko3d")
external bool gecko3d;
@JS("Browser.any3d")
external bool any3d;
@JS("Browser.mobile")
external bool mobile;
@JS("Browser.mobileWebkit")
external bool mobileWebkit;
@JS("Browser.mobileWebkit3d")
external bool mobileWebkit3d;
@JS("Browser.msPointer")
external bool msPointer;
@JS("Browser.pointer")
external bool pointer;
@JS("Browser.touch")
external bool touch;
@JS("Browser.mobileOpera")
external bool mobileOpera;
@JS("Browser.mobileGecko")
external bool mobileGecko;
@JS("Browser.retina")
external bool retina;
@JS("Browser.canvas")
external bool canvas;
@JS("Browser.svg")
external bool svg;
@JS("Browser.vml")
external bool vml;
@JS("Util.extend")
external dynamic extend(dynamic dest, [/* rest */ List<dynamic> src]);
@JS("Util.create")
external dynamic create(dynamic? proto, [PropertyDescriptorMap properties]);
@JS("Util.bind")
external void Function() bind(void Function([List<dynamic>]) fn, [/* rest */ List<dynamic> obj]);
@JS("Util.stamp")
external num stamp(dynamic obj);
@JS("Util.throttle")
external void Function() throttle(void Function() fn, num time, dynamic context);
@JS("Util.wrapNum")
external num wrapNum(num num, List<num> range, [bool includeMax]);
@JS("Util.falseFn")
external bool falseFn();
@JS("Util.formatNum")
external num formatNum(num num, [dynamic /* num|bool */ digits]);
@JS("Util.trim")
external String trim(String str);
@JS("Util.splitWords")
external List<String> splitWords(String str);
@JS("Util.setOptions")
external dynamic setOptions(dynamic obj, dynamic options);
@JS("Util.getParamString")
external String getParamString(dynamic obj, [String existingUrl, bool uppercase]);
@JS("Util.template")
external String template(String str, dynamic data);
@JS("Util.isArray")
external bool isArray(dynamic obj);
@JS("Util.indexOf")
external num indexOf(List<dynamic> array, dynamic el);
@JS("Util.requestAnimFrame")
external num requestAnimFrame(void Function(num) fn, [dynamic context, bool immediate]);
@JS("Util.cancelAnimFrame")
external void cancelAnimFrame(num id);
@JS("Util.lastId")
external num lastId;
@JS("Util.emptyImageUrl")
external String emptyImageUrl;
@JS("extend")
external dynamic extend;
@JS("bind")
external dynamic bind;
@JS("stamp")
external dynamic stamp;
@JS("setOptions")
external dynamic setOptions;
@JS("noConflict")
external dynamic noConflict();"
`;

exports[`TypeScript Definition Files Snapshot Tests > should transpile lib.dom.d.ts correctly > lib.dom.dart 1`] = `
"// Generated from lib.dom.d.ts
// Do not edit directly

@JS()
library lib_dom;
import 'package:js/js.dart';


@JS()
@anonymous
abstract class AddEventListenerOptions{}
extension AddEventListenerOptionsExtension on AddEventListenerOptions {
  external bool get once;
  external set once(bool value);
  external bool get passive;
  external set passive(bool value);
  external AbortSignal get signal;
  external set signal(AbortSignal value);
}
@JS()
@anonymous
abstract class AddressErrors{}
extension AddressErrorsExtension on AddressErrors {
  external String get addressLine;
  external set addressLine(String value);
  external String get city;
  external set city(String value);
  external String get country;
  external set country(String value);
  external String get dependentLocality;
  external set dependentLocality(String value);
  external String get organization;
  external set organization(String value);
  external String get phone;
  external set phone(String value);
  external String get postalCode;
  external set postalCode(String value);
  external String get recipient;
  external set recipient(String value);
  external String get region;
  external set region(String value);
  external String get sortingCode;
  external set sortingCode(String value);
}
@JS()
@anonymous
abstract class AesCbcParams{}
extension AesCbcParamsExtension on AesCbcParams {
  external BufferSource get iv;
  external set iv(BufferSource value);
}
@JS()
@anonymous
abstract class AesCtrParams{}
extension AesCtrParamsExtension on AesCtrParams {
  external BufferSource get counter;
  external set counter(BufferSource value);
  external num get length;
  external set length(num value);
}
@JS()
@anonymous
abstract class AesDerivedKeyParams{}
extension AesDerivedKeyParamsExtension on AesDerivedKeyParams {
  external num get length;
  external set length(num value);
}
@JS()
@anonymous
abstract class AesGcmParams{}
extension AesGcmParamsExtension on AesGcmParams {
  external BufferSource get additionalData;
  external set additionalData(BufferSource value);
  external BufferSource get iv;
  external set iv(BufferSource value);
  external num get tagLength;
  external set tagLength(num value);
}
@JS()
@anonymous
abstract class AesKeyAlgorithm{}
extension AesKeyAlgorithmExtension on AesKeyAlgorithm {
  external num get length;
  external set length(num value);
}
@JS()
@anonymous
abstract class AesKeyGenParams{}
extension AesKeyGenParamsExtension on AesKeyGenParams {
  external num get length;
  external set length(num value);
}
@JS()
@anonymous
abstract class Algorithm{}
extension AlgorithmExtension on Algorithm {
  external String get name;
  external set name(String value);
}
@JS()
@anonymous
abstract class AnalyserOptions{}
extension AnalyserOptionsExtension on AnalyserOptions {
  external num get fftSize;
  external set fftSize(num value);
  external num get maxDecibels;
  external set maxDecibels(num value);
  external num get minDecibels;
  external set minDecibels(num value);
  external num get smoothingTimeConstant;
  external set smoothingTimeConstant(num value);
}
@JS()
@anonymous
abstract class AnimationEventInit{}
extension AnimationEventInitExtension on AnimationEventInit {
  external String get animationName;
  external set animationName(String value);
  external num get elapsedTime;
  external set elapsedTime(num value);
  external String get pseudoElement;
  external set pseudoElement(String value);
}
@JS()
@anonymous
abstract class AnimationPlaybackEventInit{}
extension AnimationPlaybackEventInitExtension on AnimationPlaybackEventInit {
  external CSSNumberish? get currentTime;
  external set currentTime(CSSNumberish? value);
  external CSSNumberish? get timelineTime;
  external set timelineTime(CSSNumberish? value);
}
@JS()
@anonymous
abstract class AssignedNodesOptions{}
extension AssignedNodesOptionsExtension on AssignedNodesOptions {
  external bool get flatten;
  external set flatten(bool value);
}
@JS()
@anonymous
abstract class AudioBufferOptions{}
extension AudioBufferOptionsExtension on AudioBufferOptions {
  external num get length;
  external set length(num value);
  external num get numberOfChannels;
  external set numberOfChannels(num value);
  external num get sampleRate;
  external set sampleRate(num value);
}
@JS()
@anonymous
abstract class AudioBufferSourceOptions{}
extension AudioBufferSourceOptionsExtension on AudioBufferSourceOptions {
  external AudioBuffer? get buffer;
  external set buffer(AudioBuffer? value);
  external num get detune;
  external set detune(num value);
  external bool get loop;
  external set loop(bool value);
  external num get loopEnd;
  external set loopEnd(num value);
  external num get loopStart;
  external set loopStart(num value);
  external num get playbackRate;
  external set playbackRate(num value);
}
@JS()
@anonymous
abstract class AudioConfiguration{}
extension AudioConfigurationExtension on AudioConfiguration {
  external num get bitrate;
  external set bitrate(num value);
  external String get channels;
  external set channels(String value);
  external String get contentType;
  external set contentType(String value);
  external num get samplerate;
  external set samplerate(num value);
  external bool get spatialRendering;
  external set spatialRendering(bool value);
}
@JS()
@anonymous
abstract class AudioContextOptions{}
extension AudioContextOptionsExtension on AudioContextOptions {
  external dynamic /* AudioContextLatencyCategory|num */ get latencyHint;
  external set latencyHint(dynamic /* AudioContextLatencyCategory|num */ value);
  external num get sampleRate;
  external set sampleRate(num value);
}
@JS()
@anonymous
abstract class AudioDataCopyToOptions{}
extension AudioDataCopyToOptionsExtension on AudioDataCopyToOptions {
  external AudioSampleFormat get format;
  external set format(AudioSampleFormat value);
  external num get frameCount;
  external set frameCount(num value);
  external num get frameOffset;
  external set frameOffset(num value);
  external num get planeIndex;
  external set planeIndex(num value);
}
@JS()
@anonymous
abstract class AudioDataInit{}
extension AudioDataInitExtension on AudioDataInit {
  external BufferSource get data;
  external set data(BufferSource value);
  external AudioSampleFormat get format;
  external set format(AudioSampleFormat value);
  external num get numberOfChannels;
  external set numberOfChannels(num value);
  external num get numberOfFrames;
  external set numberOfFrames(num value);
  external num get sampleRate;
  external set sampleRate(num value);
  external num get timestamp;
  external set timestamp(num value);
  external List<ArrayBuffer> get transfer;
  external set transfer(List<ArrayBuffer> value);
}
@JS()
@anonymous
abstract class AudioDecoderConfig{}
extension AudioDecoderConfigExtension on AudioDecoderConfig {
  external String get codec;
  external set codec(String value);
  external BufferSource get description;
  external set description(BufferSource value);
  external num get numberOfChannels;
  external set numberOfChannels(num value);
  external num get sampleRate;
  external set sampleRate(num value);
}
@JS()
@anonymous
abstract class AudioDecoderInit{}
extension AudioDecoderInitExtension on AudioDecoderInit {
  external WebCodecsErrorCallback get error;
  external set error(WebCodecsErrorCallback value);
  external AudioDataOutputCallback get output;
  external set output(AudioDataOutputCallback value);
}
@JS()
@anonymous
abstract class AudioDecoderSupport{}
extension AudioDecoderSupportExtension on AudioDecoderSupport {
  external AudioDecoderConfig get config;
  external set config(AudioDecoderConfig value);
  external bool get supported;
  external set supported(bool value);
}
@JS()
@anonymous
abstract class AudioEncoderConfig{}
extension AudioEncoderConfigExtension on AudioEncoderConfig {
  external num get bitrate;
  external set bitrate(num value);
  external BitrateMode get bitrateMode;
  external set bitrateMode(BitrateMode value);
  external String get codec;
  external set codec(String value);
  external num get numberOfChannels;
  external set numberOfChannels(num value);
  external OpusEncoderConfig get opus;
  external set opus(OpusEncoderConfig value);
  external num get sampleRate;
  external set sampleRate(num value);
}
@JS()
@anonymous
abstract class AudioEncoderInit{}
extension AudioEncoderInitExtension on AudioEncoderInit {
  external WebCodecsErrorCallback get error;
  external set error(WebCodecsErrorCallback value);
  external EncodedAudioChunkOutputCallback get output;
  external set output(EncodedAudioChunkOutputCallback value);
}
@JS()
@anonymous
abstract class AudioEncoderSupport{}
extension AudioEncoderSupportExtension on AudioEncoderSupport {
  external AudioEncoderConfig get config;
  external set config(AudioEncoderConfig value);
  external bool get supported;
  external set supported(bool value);
}
@JS()
@anonymous
abstract class AudioNodeOptions{}
extension AudioNodeOptionsExtension on AudioNodeOptions {
  external num get channelCount;
  external set channelCount(num value);
  external ChannelCountMode get channelCountMode;
  external set channelCountMode(ChannelCountMode value);
  external ChannelInterpretation get channelInterpretation;
  external set channelInterpretation(ChannelInterpretation value);
}
@JS()
@anonymous
abstract class AudioProcessingEventInit{}
extension AudioProcessingEventInitExtension on AudioProcessingEventInit {
  external AudioBuffer get inputBuffer;
  external set inputBuffer(AudioBuffer value);
  external AudioBuffer get outputBuffer;
  external set outputBuffer(AudioBuffer value);
  external num get playbackTime;
  external set playbackTime(num value);
}
@JS()
@anonymous
abstract class AudioTimestamp{}
extension AudioTimestampExtension on AudioTimestamp {
  external num get contextTime;
  external set contextTime(num value);
  external DOMHighResTimeStamp get performanceTime;
  external set performanceTime(DOMHighResTimeStamp value);
}
@JS()
@anonymous
abstract class AudioWorkletNodeOptions{}
extension AudioWorkletNodeOptionsExtension on AudioWorkletNodeOptions {
  external num get numberOfInputs;
  external set numberOfInputs(num value);
  external num get numberOfOutputs;
  external set numberOfOutputs(num value);
  external List<num> get outputChannelCount;
  external set outputChannelCount(List<num> value);
  external Record<String, num> get parameterData;
  external set parameterData(Record<String, num> value);
  external dynamic get processorOptions;
  external set processorOptions(dynamic value);
}
@JS()
@anonymous
abstract class AuthenticationExtensionsClientInputs{}
extension AuthenticationExtensionsClientInputsExtension on AuthenticationExtensionsClientInputs {
  external String get appid;
  external set appid(String value);
  external bool get credProps;
  external set credProps(bool value);
  external bool get hmacCreateSecret;
  external set hmacCreateSecret(bool value);
  external bool get minPinLength;
  external set minPinLength(bool value);
  external AuthenticationExtensionsPRFInputs get prf;
  external set prf(AuthenticationExtensionsPRFInputs value);
}
@JS()
@anonymous
abstract class AuthenticationExtensionsClientInputsJSON{}
extension AuthenticationExtensionsClientInputsJSONExtension on AuthenticationExtensionsClientInputsJSON {
}
@JS()
@anonymous
abstract class AuthenticationExtensionsClientOutputs{}
extension AuthenticationExtensionsClientOutputsExtension on AuthenticationExtensionsClientOutputs {
  external bool get appid;
  external set appid(bool value);
  external CredentialPropertiesOutput get credProps;
  external set credProps(CredentialPropertiesOutput value);
  external bool get hmacCreateSecret;
  external set hmacCreateSecret(bool value);
  external AuthenticationExtensionsPRFOutputs get prf;
  external set prf(AuthenticationExtensionsPRFOutputs value);
}
@JS()
@anonymous
abstract class AuthenticationExtensionsPRFInputs{}
extension AuthenticationExtensionsPRFInputsExtension on AuthenticationExtensionsPRFInputs {
  external AuthenticationExtensionsPRFValues get eval;
  external set eval(AuthenticationExtensionsPRFValues value);
  external Record<String, AuthenticationExtensionsPRFValues> get evalByCredential;
  external set evalByCredential(Record<String, AuthenticationExtensionsPRFValues> value);
}
@JS()
@anonymous
abstract class AuthenticationExtensionsPRFOutputs{}
extension AuthenticationExtensionsPRFOutputsExtension on AuthenticationExtensionsPRFOutputs {
  external bool get enabled;
  external set enabled(bool value);
  external AuthenticationExtensionsPRFValues get results;
  external set results(AuthenticationExtensionsPRFValues value);
}
@JS()
@anonymous
abstract class AuthenticationExtensionsPRFValues{}
extension AuthenticationExtensionsPRFValuesExtension on AuthenticationExtensionsPRFValues {
  external BufferSource get first;
  external set first(BufferSource value);
  external BufferSource get second;
  external set second(BufferSource value);
}
@JS()
@anonymous
abstract class AuthenticatorSelectionCriteria{}
extension AuthenticatorSelectionCriteriaExtension on AuthenticatorSelectionCriteria {
  external AuthenticatorAttachment get authenticatorAttachment;
  external set authenticatorAttachment(AuthenticatorAttachment value);
  external bool get requireResidentKey;
  external set requireResidentKey(bool value);
  external ResidentKeyRequirement get residentKey;
  external set residentKey(ResidentKeyRequirement value);
  external UserVerificationRequirement get userVerification;
  external set userVerification(UserVerificationRequirement value);
}
@JS()
@anonymous
abstract class AvcEncoderConfig{}
extension AvcEncoderConfigExtension on AvcEncoderConfig {
  external AvcBitstreamFormat get format;
  external set format(AvcBitstreamFormat value);
}
@JS()
@anonymous
abstract class BiquadFilterOptions{}
extension BiquadFilterOptionsExtension on BiquadFilterOptions {
  external num get Q;
  external set Q(num value);
  external num get detune;
  external set detune(num value);
  external num get frequency;
  external set frequency(num value);
  external num get gain;
  external set gain(num value);
  external BiquadFilterType get type;
  external set type(BiquadFilterType value);
}
@JS()
@anonymous
abstract class BlobEventInit{}
extension BlobEventInitExtension on BlobEventInit {
  external Blob get data;
  external set data(Blob value);
  external DOMHighResTimeStamp get timecode;
  external set timecode(DOMHighResTimeStamp value);
}
@JS()
@anonymous
abstract class BlobPropertyBag{}
extension BlobPropertyBagExtension on BlobPropertyBag {
  external EndingType get endings;
  external set endings(EndingType value);
  external String get type;
  external set type(String value);
}
@JS()
@anonymous
abstract class CSSMatrixComponentOptions{}
extension CSSMatrixComponentOptionsExtension on CSSMatrixComponentOptions {
  external bool get is2D;
  external set is2D(bool value);
}
@JS()
@anonymous
abstract class CSSNumericType{}
extension CSSNumericTypeExtension on CSSNumericType {
  external num get angle;
  external set angle(num value);
  external num get flex;
  external set flex(num value);
  external num get frequency;
  external set frequency(num value);
  external num get length;
  external set length(num value);
  external num get percent;
  external set percent(num value);
  external CSSNumericBaseType get percentHint;
  external set percentHint(CSSNumericBaseType value);
  external num get resolution;
  external set resolution(num value);
  external num get time;
  external set time(num value);
}
@JS()
@anonymous
abstract class CSSStyleSheetInit{}
extension CSSStyleSheetInitExtension on CSSStyleSheetInit {
  external String get baseURL;
  external set baseURL(String value);
  external bool get disabled;
  external set disabled(bool value);
  external dynamic /* MediaList|String */ get media;
  external set media(dynamic /* MediaList|String */ value);
}
@JS()
@anonymous
abstract class CacheQueryOptions{}
extension CacheQueryOptionsExtension on CacheQueryOptions {
  external bool get ignoreMethod;
  external set ignoreMethod(bool value);
  external bool get ignoreSearch;
  external set ignoreSearch(bool value);
  external bool get ignoreVary;
  external set ignoreVary(bool value);
}
@JS()
@anonymous
abstract class CanvasRenderingContext2DSettings{}
extension CanvasRenderingContext2DSettingsExtension on CanvasRenderingContext2DSettings {
  external bool get alpha;
  external set alpha(bool value);
  external PredefinedColorSpace get colorSpace;
  external set colorSpace(PredefinedColorSpace value);
  external bool get desynchronized;
  external set desynchronized(bool value);
  external bool get willReadFrequently;
  external set willReadFrequently(bool value);
}
@JS()
@anonymous
abstract class CaretPositionFromPointOptions{}
extension CaretPositionFromPointOptionsExtension on CaretPositionFromPointOptions {
  external List<ShadowRoot> get shadowRoots;
  external set shadowRoots(List<ShadowRoot> value);
}
@JS()
@anonymous
abstract class ChannelMergerOptions{}
extension ChannelMergerOptionsExtension on ChannelMergerOptions {
  external num get numberOfInputs;
  external set numberOfInputs(num value);
}
@JS()
@anonymous
abstract class ChannelSplitterOptions{}
extension ChannelSplitterOptionsExtension on ChannelSplitterOptions {
  external num get numberOfOutputs;
  external set numberOfOutputs(num value);
}
@JS()
@anonymous
abstract class CheckVisibilityOptions{}
extension CheckVisibilityOptionsExtension on CheckVisibilityOptions {
  external bool get checkOpacity;
  external set checkOpacity(bool value);
  external bool get checkVisibilityCSS;
  external set checkVisibilityCSS(bool value);
  external bool get contentVisibilityAuto;
  external set contentVisibilityAuto(bool value);
  external bool get opacityProperty;
  external set opacityProperty(bool value);
  external bool get visibilityProperty;
  external set visibilityProperty(bool value);
}
@JS()
@anonymous
abstract class ClientQueryOptions{}
extension ClientQueryOptionsExtension on ClientQueryOptions {
  external bool get includeUncontrolled;
  external set includeUncontrolled(bool value);
  external ClientTypes get type;
  external set type(ClientTypes value);
}
@JS()
@anonymous
abstract class ClipboardEventInit{}
extension ClipboardEventInitExtension on ClipboardEventInit {
  external DataTransfer? get clipboardData;
  external set clipboardData(DataTransfer? value);
}
@JS()
@anonymous
abstract class ClipboardItemOptions{}
extension ClipboardItemOptionsExtension on ClipboardItemOptions {
  external PresentationStyle get presentationStyle;
  external set presentationStyle(PresentationStyle value);
}
@JS()
@anonymous
abstract class CloseEventInit{}
extension CloseEventInitExtension on CloseEventInit {
  external num get code;
  external set code(num value);
  external String get reason;
  external set reason(String value);
  external bool get wasClean;
  external set wasClean(bool value);
}
@JS()
@anonymous
abstract class CompositionEventInit{}
extension CompositionEventInitExtension on CompositionEventInit {
  external String get data;
  external set data(String value);
}
@JS()
@anonymous
abstract class ComputedEffectTiming{}
extension ComputedEffectTimingExtension on ComputedEffectTiming {
  external CSSNumberish get activeDuration;
  external set activeDuration(CSSNumberish value);
  external num? get currentIteration;
  external set currentIteration(num? value);
  external CSSNumberish get endTime;
  external set endTime(CSSNumberish value);
  external CSSNumberish? get localTime;
  external set localTime(CSSNumberish? value);
  external num? get progress;
  external set progress(num? value);
  external CSSNumberish get startTime;
  external set startTime(CSSNumberish value);
}
@JS()
@anonymous
abstract class ComputedKeyframe{}
extension ComputedKeyframeExtension on ComputedKeyframe {
  external CompositeOperationOrAuto get composite;
  external set composite(CompositeOperationOrAuto value);
  external num get computedOffset;
  external set computedOffset(num value);
  external String get easing;
  external set easing(String value);
  external num? get offset;
  external set offset(num? value);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS()
@anonymous
abstract class ConstantSourceOptions{}
extension ConstantSourceOptionsExtension on ConstantSourceOptions {
  external num get offset;
  external set offset(num value);
}
@JS()
@anonymous
abstract class ConstrainBooleanParameters{}
extension ConstrainBooleanParametersExtension on ConstrainBooleanParameters {
  external bool get exact;
  external set exact(bool value);
  external bool get ideal;
  external set ideal(bool value);
}
@JS()
@anonymous
abstract class ConstrainDOMStringParameters{}
extension ConstrainDOMStringParametersExtension on ConstrainDOMStringParameters {
  external dynamic /* String|List<String> */ get exact;
  external set exact(dynamic /* String|List<String> */ value);
  external dynamic /* String|List<String> */ get ideal;
  external set ideal(dynamic /* String|List<String> */ value);
}
@JS()
@anonymous
abstract class ConstrainDoubleRange{}
extension ConstrainDoubleRangeExtension on ConstrainDoubleRange {
  external num get exact;
  external set exact(num value);
  external num get ideal;
  external set ideal(num value);
}
@JS()
@anonymous
abstract class ConstrainULongRange{}
extension ConstrainULongRangeExtension on ConstrainULongRange {
  external num get exact;
  external set exact(num value);
  external num get ideal;
  external set ideal(num value);
}
@JS()
@anonymous
abstract class ContentVisibilityAutoStateChangeEventInit{}
extension ContentVisibilityAutoStateChangeEventInitExtension on ContentVisibilityAutoStateChangeEventInit {
  external bool get skipped;
  external set skipped(bool value);
}
@JS()
@anonymous
abstract class ConvolverOptions{}
extension ConvolverOptionsExtension on ConvolverOptions {
  external AudioBuffer? get buffer;
  external set buffer(AudioBuffer? value);
  external bool get disableNormalization;
  external set disableNormalization(bool value);
}
@JS()
@anonymous
abstract class CredentialCreationOptions{}
extension CredentialCreationOptionsExtension on CredentialCreationOptions {
  external PublicKeyCredentialCreationOptions get publicKey;
  external set publicKey(PublicKeyCredentialCreationOptions value);
  external AbortSignal get signal;
  external set signal(AbortSignal value);
}
@JS()
@anonymous
abstract class CredentialPropertiesOutput{}
extension CredentialPropertiesOutputExtension on CredentialPropertiesOutput {
  external bool get rk;
  external set rk(bool value);
}
@JS()
@anonymous
abstract class CredentialRequestOptions{}
extension CredentialRequestOptionsExtension on CredentialRequestOptions {
  external CredentialMediationRequirement get mediation;
  external set mediation(CredentialMediationRequirement value);
  external PublicKeyCredentialRequestOptions get publicKey;
  external set publicKey(PublicKeyCredentialRequestOptions value);
  external AbortSignal get signal;
  external set signal(AbortSignal value);
}
@JS()
@anonymous
abstract class CryptoKeyPair{}
extension CryptoKeyPairExtension on CryptoKeyPair {
  external CryptoKey get privateKey;
  external set privateKey(CryptoKey value);
  external CryptoKey get publicKey;
  external set publicKey(CryptoKey value);
}
@JS()
@anonymous
abstract class CustomEventInit{}
extension CustomEventInitExtension on CustomEventInit {
  external T get detail;
  external set detail(T value);
}
@JS()
@anonymous
abstract class DOMMatrix2DInit{}
extension DOMMatrix2DInitExtension on DOMMatrix2DInit {
  external num get a;
  external set a(num value);
  external num get b;
  external set b(num value);
  external num get c;
  external set c(num value);
  external num get d;
  external set d(num value);
  external num get e;
  external set e(num value);
  external num get f;
  external set f(num value);
  external num get m11;
  external set m11(num value);
  external num get m12;
  external set m12(num value);
  external num get m21;
  external set m21(num value);
  external num get m22;
  external set m22(num value);
  external num get m41;
  external set m41(num value);
  external num get m42;
  external set m42(num value);
}
@JS()
@anonymous
abstract class DOMMatrixInit{}
extension DOMMatrixInitExtension on DOMMatrixInit {
  external bool get is2D;
  external set is2D(bool value);
  external num get m13;
  external set m13(num value);
  external num get m14;
  external set m14(num value);
  external num get m23;
  external set m23(num value);
  external num get m24;
  external set m24(num value);
  external num get m31;
  external set m31(num value);
  external num get m32;
  external set m32(num value);
  external num get m33;
  external set m33(num value);
  external num get m34;
  external set m34(num value);
  external num get m43;
  external set m43(num value);
  external num get m44;
  external set m44(num value);
}
@JS()
@anonymous
abstract class DOMPointInit{}
extension DOMPointInitExtension on DOMPointInit {
  external num get w;
  external set w(num value);
  external num get x;
  external set x(num value);
  external num get y;
  external set y(num value);
  external num get z;
  external set z(num value);
}
@JS()
@anonymous
abstract class DOMQuadInit{}
extension DOMQuadInitExtension on DOMQuadInit {
  external DOMPointInit get p1;
  external set p1(DOMPointInit value);
  external DOMPointInit get p2;
  external set p2(DOMPointInit value);
  external DOMPointInit get p3;
  external set p3(DOMPointInit value);
  external DOMPointInit get p4;
  external set p4(DOMPointInit value);
}
@JS()
@anonymous
abstract class DOMRectInit{}
extension DOMRectInitExtension on DOMRectInit {
  external num get height;
  external set height(num value);
  external num get width;
  external set width(num value);
  external num get x;
  external set x(num value);
  external num get y;
  external set y(num value);
}
@JS()
@anonymous
abstract class DelayOptions{}
extension DelayOptionsExtension on DelayOptions {
  external num get delayTime;
  external set delayTime(num value);
  external num get maxDelayTime;
  external set maxDelayTime(num value);
}
@JS()
@anonymous
abstract class DeviceMotionEventAccelerationInit{}
extension DeviceMotionEventAccelerationInitExtension on DeviceMotionEventAccelerationInit {
  external num? get x;
  external set x(num? value);
  external num? get y;
  external set y(num? value);
  external num? get z;
  external set z(num? value);
}
@JS()
@anonymous
abstract class DeviceMotionEventInit{}
extension DeviceMotionEventInitExtension on DeviceMotionEventInit {
  external DeviceMotionEventAccelerationInit get acceleration;
  external set acceleration(DeviceMotionEventAccelerationInit value);
  external DeviceMotionEventAccelerationInit get accelerationIncludingGravity;
  external set accelerationIncludingGravity(DeviceMotionEventAccelerationInit value);
  external num get interval;
  external set interval(num value);
  external DeviceMotionEventRotationRateInit get rotationRate;
  external set rotationRate(DeviceMotionEventRotationRateInit value);
}
@JS()
@anonymous
abstract class DeviceMotionEventRotationRateInit{}
extension DeviceMotionEventRotationRateInitExtension on DeviceMotionEventRotationRateInit {
  external num? get alpha;
  external set alpha(num? value);
  external num? get beta;
  external set beta(num? value);
  external num? get gamma;
  external set gamma(num? value);
}
@JS()
@anonymous
abstract class DeviceOrientationEventInit{}
extension DeviceOrientationEventInitExtension on DeviceOrientationEventInit {
  external bool get absolute;
  external set absolute(bool value);
  external num? get alpha;
  external set alpha(num? value);
  external num? get beta;
  external set beta(num? value);
  external num? get gamma;
  external set gamma(num? value);
}
@JS()
@anonymous
abstract class DisplayMediaStreamOptions{}
extension DisplayMediaStreamOptionsExtension on DisplayMediaStreamOptions {
  external dynamic /* bool|MediaTrackConstraints */ get audio;
  external set audio(dynamic /* bool|MediaTrackConstraints */ value);
  external dynamic /* bool|MediaTrackConstraints */ get video;
  external set video(dynamic /* bool|MediaTrackConstraints */ value);
}
@JS()
@anonymous
abstract class DocumentTimelineOptions{}
extension DocumentTimelineOptionsExtension on DocumentTimelineOptions {
  external DOMHighResTimeStamp get originTime;
  external set originTime(DOMHighResTimeStamp value);
}
@JS()
@anonymous
abstract class DoubleRange{}
extension DoubleRangeExtension on DoubleRange {
  external num get max;
  external set max(num value);
  external num get min;
  external set min(num value);
}
@JS()
@anonymous
abstract class DragEventInit{}
extension DragEventInitExtension on DragEventInit {
  external DataTransfer? get dataTransfer;
  external set dataTransfer(DataTransfer? value);
}
@JS()
@anonymous
abstract class DynamicsCompressorOptions{}
extension DynamicsCompressorOptionsExtension on DynamicsCompressorOptions {
  external num get attack;
  external set attack(num value);
  external num get knee;
  external set knee(num value);
  external num get ratio;
  external set ratio(num value);
  external num get release;
  external set release(num value);
  external num get threshold;
  external set threshold(num value);
}
@JS()
@anonymous
abstract class EcKeyAlgorithm{}
extension EcKeyAlgorithmExtension on EcKeyAlgorithm {
  external NamedCurve get namedCurve;
  external set namedCurve(NamedCurve value);
}
@JS()
@anonymous
abstract class EcKeyGenParams{}
extension EcKeyGenParamsExtension on EcKeyGenParams {
  external NamedCurve get namedCurve;
  external set namedCurve(NamedCurve value);
}
@JS()
@anonymous
abstract class EcKeyImportParams{}
extension EcKeyImportParamsExtension on EcKeyImportParams {
  external NamedCurve get namedCurve;
  external set namedCurve(NamedCurve value);
}
@JS()
@anonymous
abstract class EcdhKeyDeriveParams{}
extension EcdhKeyDeriveParamsExtension on EcdhKeyDeriveParams {
  external CryptoKey get public;
  external set public(CryptoKey value);
}
@JS()
@anonymous
abstract class EcdsaParams{}
extension EcdsaParamsExtension on EcdsaParams {
  external HashAlgorithmIdentifier get hash;
  external set hash(HashAlgorithmIdentifier value);
}
@JS()
@anonymous
abstract class EffectTiming{}
extension EffectTimingExtension on EffectTiming {
  external num get delay;
  external set delay(num value);
  external PlaybackDirection get direction;
  external set direction(PlaybackDirection value);
  external dynamic /* num|CSSNumericValue|String */ get duration;
  external set duration(dynamic /* num|CSSNumericValue|String */ value);
  external String get easing;
  external set easing(String value);
  external num get endDelay;
  external set endDelay(num value);
  external FillMode get fill;
  external set fill(FillMode value);
  external num get iterationStart;
  external set iterationStart(num value);
  external num get iterations;
  external set iterations(num value);
  external num get playbackRate;
  external set playbackRate(num value);
}
@JS()
@anonymous
abstract class ElementCreationOptions{}
extension ElementCreationOptionsExtension on ElementCreationOptions {
  external String get is;
  external set is(String value);
}
@JS()
@anonymous
abstract class ElementDefinitionOptions{}
extension ElementDefinitionOptionsExtension on ElementDefinitionOptions {
  external String get extends;
  external set extends(String value);
}
@JS()
@anonymous
abstract class EncodedAudioChunkInit{}
extension EncodedAudioChunkInitExtension on EncodedAudioChunkInit {
  external AllowSharedBufferSource get data;
  external set data(AllowSharedBufferSource value);
  external num get duration;
  external set duration(num value);
  external num get timestamp;
  external set timestamp(num value);
  external List<ArrayBuffer> get transfer;
  external set transfer(List<ArrayBuffer> value);
  external EncodedAudioChunkType get type;
  external set type(EncodedAudioChunkType value);
}
@JS()
@anonymous
abstract class EncodedAudioChunkMetadata{}
extension EncodedAudioChunkMetadataExtension on EncodedAudioChunkMetadata {
  external AudioDecoderConfig get decoderConfig;
  external set decoderConfig(AudioDecoderConfig value);
}
@JS()
@anonymous
abstract class EncodedVideoChunkInit{}
extension EncodedVideoChunkInitExtension on EncodedVideoChunkInit {
  external AllowSharedBufferSource get data;
  external set data(AllowSharedBufferSource value);
  external num get duration;
  external set duration(num value);
  external num get timestamp;
  external set timestamp(num value);
  external EncodedVideoChunkType get type;
  external set type(EncodedVideoChunkType value);
}
@JS()
@anonymous
abstract class EncodedVideoChunkMetadata{}
extension EncodedVideoChunkMetadataExtension on EncodedVideoChunkMetadata {
  external VideoDecoderConfig get decoderConfig;
  external set decoderConfig(VideoDecoderConfig value);
}
@JS()
@anonymous
abstract class ErrorEventInit{}
extension ErrorEventInitExtension on ErrorEventInit {
  external num get colno;
  external set colno(num value);
  external dynamic get error;
  external set error(dynamic value);
  external String get filename;
  external set filename(String value);
  external num get lineno;
  external set lineno(num value);
  external String get message;
  external set message(String value);
}
@JS()
@anonymous
abstract class EventInit{}
extension EventInitExtension on EventInit {
  external bool get bubbles;
  external set bubbles(bool value);
  external bool get cancelable;
  external set cancelable(bool value);
  external bool get composed;
  external set composed(bool value);
}
@JS()
@anonymous
abstract class EventListenerOptions{}
extension EventListenerOptionsExtension on EventListenerOptions {
  external bool get capture;
  external set capture(bool value);
}
@JS()
@anonymous
abstract class EventModifierInit{}
extension EventModifierInitExtension on EventModifierInit {
  external bool get altKey;
  external set altKey(bool value);
  external bool get ctrlKey;
  external set ctrlKey(bool value);
  external bool get metaKey;
  external set metaKey(bool value);
  external bool get modifierAltGraph;
  external set modifierAltGraph(bool value);
  external bool get modifierCapsLock;
  external set modifierCapsLock(bool value);
  external bool get modifierFn;
  external set modifierFn(bool value);
  external bool get modifierFnLock;
  external set modifierFnLock(bool value);
  external bool get modifierHyper;
  external set modifierHyper(bool value);
  external bool get modifierNumLock;
  external set modifierNumLock(bool value);
  external bool get modifierScrollLock;
  external set modifierScrollLock(bool value);
  external bool get modifierSuper;
  external set modifierSuper(bool value);
  external bool get modifierSymbol;
  external set modifierSymbol(bool value);
  external bool get modifierSymbolLock;
  external set modifierSymbolLock(bool value);
  external bool get shiftKey;
  external set shiftKey(bool value);
}
@JS()
@anonymous
abstract class EventSourceInit{}
extension EventSourceInitExtension on EventSourceInit {
  external bool get withCredentials;
  external set withCredentials(bool value);
}
@JS()
@anonymous
abstract class FilePropertyBag{}
extension FilePropertyBagExtension on FilePropertyBag {
  external num get lastModified;
  external set lastModified(num value);
}
@JS()
@anonymous
abstract class FileSystemCreateWritableOptions{}
extension FileSystemCreateWritableOptionsExtension on FileSystemCreateWritableOptions {
  external bool get keepExistingData;
  external set keepExistingData(bool value);
}
@JS()
@anonymous
abstract class FileSystemFlags{}
extension FileSystemFlagsExtension on FileSystemFlags {
  external bool get create;
  external set create(bool value);
  external bool get exclusive;
  external set exclusive(bool value);
}
@JS()
@anonymous
abstract class FileSystemGetDirectoryOptions{}
extension FileSystemGetDirectoryOptionsExtension on FileSystemGetDirectoryOptions {
  external bool get create;
  external set create(bool value);
}
@JS()
@anonymous
abstract class FileSystemGetFileOptions{}
extension FileSystemGetFileOptionsExtension on FileSystemGetFileOptions {
  external bool get create;
  external set create(bool value);
}
@JS()
@anonymous
abstract class FileSystemRemoveOptions{}
extension FileSystemRemoveOptionsExtension on FileSystemRemoveOptions {
  external bool get recursive;
  external set recursive(bool value);
}
@JS()
@anonymous
abstract class FocusEventInit{}
extension FocusEventInitExtension on FocusEventInit {
  external EventTarget? get relatedTarget;
  external set relatedTarget(EventTarget? value);
}
@JS()
@anonymous
abstract class FocusOptions{}
extension FocusOptionsExtension on FocusOptions {
  external bool get preventScroll;
  external set preventScroll(bool value);
}
@JS()
@anonymous
abstract class FontFaceDescriptors{}
extension FontFaceDescriptorsExtension on FontFaceDescriptors {
  external String get ascentOverride;
  external set ascentOverride(String value);
  external String get descentOverride;
  external set descentOverride(String value);
  external FontDisplay get display;
  external set display(FontDisplay value);
  external String get featureSettings;
  external set featureSettings(String value);
  external String get lineGapOverride;
  external set lineGapOverride(String value);
  external String get stretch;
  external set stretch(String value);
  external String get style;
  external set style(String value);
  external String get unicodeRange;
  external set unicodeRange(String value);
  external String get weight;
  external set weight(String value);
}
@JS()
@anonymous
abstract class FontFaceSetLoadEventInit{}
extension FontFaceSetLoadEventInitExtension on FontFaceSetLoadEventInit {
  external List<FontFace> get fontfaces;
  external set fontfaces(List<FontFace> value);
}
@JS()
@anonymous
abstract class FormDataEventInit{}
extension FormDataEventInitExtension on FormDataEventInit {
  external FormData get formData;
  external set formData(FormData value);
}
@JS()
@anonymous
abstract class FullscreenOptions{}
extension FullscreenOptionsExtension on FullscreenOptions {
  external FullscreenNavigationUI get navigationUI;
  external set navigationUI(FullscreenNavigationUI value);
}
@JS()
@anonymous
abstract class GainOptions{}
extension GainOptionsExtension on GainOptions {
  external num get gain;
  external set gain(num value);
}
@JS()
@anonymous
abstract class GamepadEffectParameters{}
extension GamepadEffectParametersExtension on GamepadEffectParameters {
  external num get duration;
  external set duration(num value);
  external num get leftTrigger;
  external set leftTrigger(num value);
  external num get rightTrigger;
  external set rightTrigger(num value);
  external num get startDelay;
  external set startDelay(num value);
  external num get strongMagnitude;
  external set strongMagnitude(num value);
  external num get weakMagnitude;
  external set weakMagnitude(num value);
}
@JS()
@anonymous
abstract class GamepadEventInit{}
extension GamepadEventInitExtension on GamepadEventInit {
  external Gamepad get gamepad;
  external set gamepad(Gamepad value);
}
@JS()
@anonymous
abstract class GetAnimationsOptions{}
extension GetAnimationsOptionsExtension on GetAnimationsOptions {
  external bool get subtree;
  external set subtree(bool value);
}
@JS()
@anonymous
abstract class GetHTMLOptions{}
extension GetHTMLOptionsExtension on GetHTMLOptions {
  external bool get serializableShadowRoots;
  external set serializableShadowRoots(bool value);
  external List<ShadowRoot> get shadowRoots;
  external set shadowRoots(List<ShadowRoot> value);
}
@JS()
@anonymous
abstract class GetNotificationOptions{}
extension GetNotificationOptionsExtension on GetNotificationOptions {
  external String get tag;
  external set tag(String value);
}
@JS()
@anonymous
abstract class GetRootNodeOptions{}
extension GetRootNodeOptionsExtension on GetRootNodeOptions {
  external bool get composed;
  external set composed(bool value);
}
@JS()
@anonymous
abstract class HashChangeEventInit{}
extension HashChangeEventInitExtension on HashChangeEventInit {
  external String get newURL;
  external set newURL(String value);
  external String get oldURL;
  external set oldURL(String value);
}
@JS()
@anonymous
abstract class HkdfParams{}
extension HkdfParamsExtension on HkdfParams {
  external HashAlgorithmIdentifier get hash;
  external set hash(HashAlgorithmIdentifier value);
  external BufferSource get info;
  external set info(BufferSource value);
  external BufferSource get salt;
  external set salt(BufferSource value);
}
@JS()
@anonymous
abstract class HmacImportParams{}
extension HmacImportParamsExtension on HmacImportParams {
  external HashAlgorithmIdentifier get hash;
  external set hash(HashAlgorithmIdentifier value);
  external num get length;
  external set length(num value);
}
@JS()
@anonymous
abstract class HmacKeyAlgorithm{}
extension HmacKeyAlgorithmExtension on HmacKeyAlgorithm {
  external KeyAlgorithm get hash;
  external set hash(KeyAlgorithm value);
  external num get length;
  external set length(num value);
}
@JS()
@anonymous
abstract class HmacKeyGenParams{}
extension HmacKeyGenParamsExtension on HmacKeyGenParams {
  external HashAlgorithmIdentifier get hash;
  external set hash(HashAlgorithmIdentifier value);
  external num get length;
  external set length(num value);
}
@JS()
@anonymous
abstract class IDBDatabaseInfo{}
extension IDBDatabaseInfoExtension on IDBDatabaseInfo {
  external String get name;
  external set name(String value);
  external num get version;
  external set version(num value);
}
@JS()
@anonymous
abstract class IDBIndexParameters{}
extension IDBIndexParametersExtension on IDBIndexParameters {
  external bool get multiEntry;
  external set multiEntry(bool value);
  external bool get unique;
  external set unique(bool value);
}
@JS()
@anonymous
abstract class IDBObjectStoreParameters{}
extension IDBObjectStoreParametersExtension on IDBObjectStoreParameters {
  external bool get autoIncrement;
  external set autoIncrement(bool value);
  external dynamic /* String|List<String> */ get keyPath;
  external set keyPath(dynamic /* String|List<String> */ value);
}
@JS()
@anonymous
abstract class IDBTransactionOptions{}
extension IDBTransactionOptionsExtension on IDBTransactionOptions {
  external IDBTransactionDurability get durability;
  external set durability(IDBTransactionDurability value);
}
@JS()
@anonymous
abstract class IDBVersionChangeEventInit{}
extension IDBVersionChangeEventInitExtension on IDBVersionChangeEventInit {
  external num? get newVersion;
  external set newVersion(num? value);
  external num get oldVersion;
  external set oldVersion(num value);
}
@JS()
@anonymous
abstract class IIRFilterOptions{}
extension IIRFilterOptionsExtension on IIRFilterOptions {
  external List<num> get feedback;
  external set feedback(List<num> value);
  external List<num> get feedforward;
  external set feedforward(List<num> value);
}
@JS()
@anonymous
abstract class IdleRequestOptions{}
extension IdleRequestOptionsExtension on IdleRequestOptions {
  external num get timeout;
  external set timeout(num value);
}
@JS()
@anonymous
abstract class ImageBitmapOptions{}
extension ImageBitmapOptionsExtension on ImageBitmapOptions {
  external ColorSpaceConversion get colorSpaceConversion;
  external set colorSpaceConversion(ColorSpaceConversion value);
  external ImageOrientation get imageOrientation;
  external set imageOrientation(ImageOrientation value);
  external PremultiplyAlpha get premultiplyAlpha;
  external set premultiplyAlpha(PremultiplyAlpha value);
  external num get resizeHeight;
  external set resizeHeight(num value);
  external ResizeQuality get resizeQuality;
  external set resizeQuality(ResizeQuality value);
  external num get resizeWidth;
  external set resizeWidth(num value);
}
@JS()
@anonymous
abstract class ImageBitmapRenderingContextSettings{}
extension ImageBitmapRenderingContextSettingsExtension on ImageBitmapRenderingContextSettings {
  external bool get alpha;
  external set alpha(bool value);
}
@JS()
@anonymous
abstract class ImageDataSettings{}
extension ImageDataSettingsExtension on ImageDataSettings {
  external PredefinedColorSpace get colorSpace;
  external set colorSpace(PredefinedColorSpace value);
}
@JS()
@anonymous
abstract class ImageDecodeOptions{}
extension ImageDecodeOptionsExtension on ImageDecodeOptions {
  external bool get completeFramesOnly;
  external set completeFramesOnly(bool value);
  external num get frameIndex;
  external set frameIndex(num value);
}
@JS()
@anonymous
abstract class ImageDecodeResult{}
extension ImageDecodeResultExtension on ImageDecodeResult {
  external bool get complete;
  external set complete(bool value);
  external VideoFrame get image;
  external set image(VideoFrame value);
}
@JS()
@anonymous
abstract class ImageDecoderInit{}
extension ImageDecoderInitExtension on ImageDecoderInit {
  external ColorSpaceConversion get colorSpaceConversion;
  external set colorSpaceConversion(ColorSpaceConversion value);
  external ImageBufferSource get data;
  external set data(ImageBufferSource value);
  external num get desiredHeight;
  external set desiredHeight(num value);
  external num get desiredWidth;
  external set desiredWidth(num value);
  external bool get preferAnimation;
  external set preferAnimation(bool value);
  external List<ArrayBuffer> get transfer;
  external set transfer(List<ArrayBuffer> value);
  external String get type;
  external set type(String value);
}
@JS()
@anonymous
abstract class ImageEncodeOptions{}
extension ImageEncodeOptionsExtension on ImageEncodeOptions {
  external num get quality;
  external set quality(num value);
  external String get type;
  external set type(String value);
}
@JS()
@anonymous
abstract class InputEventInit{}
extension InputEventInitExtension on InputEventInit {
  external String? get data;
  external set data(String? value);
  external DataTransfer? get dataTransfer;
  external set dataTransfer(DataTransfer? value);
  external String get inputType;
  external set inputType(String value);
  external bool get isComposing;
  external set isComposing(bool value);
  external List<StaticRange> get targetRanges;
  external set targetRanges(List<StaticRange> value);
}
@JS()
@anonymous
abstract class IntersectionObserverInit{}
extension IntersectionObserverInitExtension on IntersectionObserverInit {
  external dynamic /* Element|Document */ get root;
  external set root(dynamic /* Element|Document */ value);
  external String get rootMargin;
  external set rootMargin(String value);
  external dynamic /* num|List<num> */ get threshold;
  external set threshold(dynamic /* num|List<num> */ value);
}
@JS()
@anonymous
abstract class JsonWebKey{}
extension JsonWebKeyExtension on JsonWebKey {
  external String get alg;
  external set alg(String value);
  external String get crv;
  external set crv(String value);
  external String get d;
  external set d(String value);
  external String get dp;
  external set dp(String value);
  external String get dq;
  external set dq(String value);
  external String get e;
  external set e(String value);
  external bool get ext;
  external set ext(bool value);
  external String get k;
  external set k(String value);
  external List<String> get key_ops;
  external set key_ops(List<String> value);
  external String get kty;
  external set kty(String value);
  external String get n;
  external set n(String value);
  external List<RsaOtherPrimesInfo> get oth;
  external set oth(List<RsaOtherPrimesInfo> value);
  external String get p;
  external set p(String value);
  external String get q;
  external set q(String value);
  external String get qi;
  external set qi(String value);
  external String get use;
  external set use(String value);
  external String get x;
  external set x(String value);
  external String get y;
  external set y(String value);
}
@JS()
@anonymous
abstract class KeyAlgorithm{}
extension KeyAlgorithmExtension on KeyAlgorithm {
  external String get name;
  external set name(String value);
}
@JS()
@anonymous
abstract class KeyboardEventInit{}
extension KeyboardEventInitExtension on KeyboardEventInit {
  external num get charCode;
  external set charCode(num value);
  external String get code;
  external set code(String value);
  external bool get isComposing;
  external set isComposing(bool value);
  external String get key;
  external set key(String value);
  external num get keyCode;
  external set keyCode(num value);
  external num get location;
  external set location(num value);
  external bool get repeat;
  external set repeat(bool value);
}
@JS()
@anonymous
abstract class Keyframe{}
extension KeyframeExtension on Keyframe {
  external CompositeOperationOrAuto get composite;
  external set composite(CompositeOperationOrAuto value);
  external String get easing;
  external set easing(String value);
  external num? get offset;
  external set offset(num? value);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS()
@anonymous
abstract class KeyframeAnimationOptions{}
extension KeyframeAnimationOptionsExtension on KeyframeAnimationOptions {
  external String get id;
  external set id(String value);
  external AnimationTimeline? get timeline;
  external set timeline(AnimationTimeline? value);
}
@JS()
@anonymous
abstract class KeyframeEffectOptions{}
extension KeyframeEffectOptionsExtension on KeyframeEffectOptions {
  external CompositeOperation get composite;
  external set composite(CompositeOperation value);
  external IterationCompositeOperation get iterationComposite;
  external set iterationComposite(IterationCompositeOperation value);
  external String? get pseudoElement;
  external set pseudoElement(String? value);
}
@JS()
@anonymous
abstract class LockInfo{}
extension LockInfoExtension on LockInfo {
  external String get clientId;
  external set clientId(String value);
  external LockMode get mode;
  external set mode(LockMode value);
  external String get name;
  external set name(String value);
}
@JS()
@anonymous
abstract class LockManagerSnapshot{}
extension LockManagerSnapshotExtension on LockManagerSnapshot {
  external List<LockInfo> get held;
  external set held(List<LockInfo> value);
  external List<LockInfo> get pending;
  external set pending(List<LockInfo> value);
}
@JS()
@anonymous
abstract class LockOptions{}
extension LockOptionsExtension on LockOptions {
  external bool get ifAvailable;
  external set ifAvailable(bool value);
  external LockMode get mode;
  external set mode(LockMode value);
  external AbortSignal get signal;
  external set signal(AbortSignal value);
  external bool get steal;
  external set steal(bool value);
}
@JS()
@anonymous
abstract class MIDIConnectionEventInit{}
extension MIDIConnectionEventInitExtension on MIDIConnectionEventInit {
  external MIDIPort get port;
  external set port(MIDIPort value);
}
@JS()
@anonymous
abstract class MIDIMessageEventInit{}
extension MIDIMessageEventInitExtension on MIDIMessageEventInit {
  external Uint8Array get data;
  external set data(Uint8Array value);
}
@JS()
@anonymous
abstract class MIDIOptions{}
extension MIDIOptionsExtension on MIDIOptions {
  external bool get software;
  external set software(bool value);
  external bool get sysex;
  external set sysex(bool value);
}
@JS()
@anonymous
abstract class MediaCapabilitiesDecodingInfo{}
extension MediaCapabilitiesDecodingInfoExtension on MediaCapabilitiesDecodingInfo {
  external MediaDecodingConfiguration get configuration;
  external set configuration(MediaDecodingConfiguration value);
}
@JS()
@anonymous
abstract class MediaCapabilitiesEncodingInfo{}
extension MediaCapabilitiesEncodingInfoExtension on MediaCapabilitiesEncodingInfo {
  external MediaEncodingConfiguration get configuration;
  external set configuration(MediaEncodingConfiguration value);
}
@JS()
@anonymous
abstract class MediaCapabilitiesInfo{}
extension MediaCapabilitiesInfoExtension on MediaCapabilitiesInfo {
  external bool get powerEfficient;
  external set powerEfficient(bool value);
  external bool get smooth;
  external set smooth(bool value);
  external bool get supported;
  external set supported(bool value);
}
@JS()
@anonymous
abstract class MediaConfiguration{}
extension MediaConfigurationExtension on MediaConfiguration {
  external AudioConfiguration get audio;
  external set audio(AudioConfiguration value);
  external VideoConfiguration get video;
  external set video(VideoConfiguration value);
}
@JS()
@anonymous
abstract class MediaDecodingConfiguration{}
extension MediaDecodingConfigurationExtension on MediaDecodingConfiguration {
  external MediaDecodingType get type;
  external set type(MediaDecodingType value);
}
@JS()
@anonymous
abstract class MediaElementAudioSourceOptions{}
extension MediaElementAudioSourceOptionsExtension on MediaElementAudioSourceOptions {
  external HTMLMediaElement get mediaElement;
  external set mediaElement(HTMLMediaElement value);
}
@JS()
@anonymous
abstract class MediaEncodingConfiguration{}
extension MediaEncodingConfigurationExtension on MediaEncodingConfiguration {
  external MediaEncodingType get type;
  external set type(MediaEncodingType value);
}
@JS()
@anonymous
abstract class MediaEncryptedEventInit{}
extension MediaEncryptedEventInitExtension on MediaEncryptedEventInit {
  external ArrayBuffer? get initData;
  external set initData(ArrayBuffer? value);
  external String get initDataType;
  external set initDataType(String value);
}
@JS()
@anonymous
abstract class MediaImage{}
extension MediaImageExtension on MediaImage {
  external String get sizes;
  external set sizes(String value);
  external String get src;
  external set src(String value);
  external String get type;
  external set type(String value);
}
@JS()
@anonymous
abstract class MediaKeyMessageEventInit{}
extension MediaKeyMessageEventInitExtension on MediaKeyMessageEventInit {
  external ArrayBuffer get message;
  external set message(ArrayBuffer value);
  external MediaKeyMessageType get messageType;
  external set messageType(MediaKeyMessageType value);
}
@JS()
@anonymous
abstract class MediaKeySystemConfiguration{}
extension MediaKeySystemConfigurationExtension on MediaKeySystemConfiguration {
  external List<MediaKeySystemMediaCapability> get audioCapabilities;
  external set audioCapabilities(List<MediaKeySystemMediaCapability> value);
  external MediaKeysRequirement get distinctiveIdentifier;
  external set distinctiveIdentifier(MediaKeysRequirement value);
  external List<String> get initDataTypes;
  external set initDataTypes(List<String> value);
  external String get label;
  external set label(String value);
  external MediaKeysRequirement get persistentState;
  external set persistentState(MediaKeysRequirement value);
  external List<String> get sessionTypes;
  external set sessionTypes(List<String> value);
  external List<MediaKeySystemMediaCapability> get videoCapabilities;
  external set videoCapabilities(List<MediaKeySystemMediaCapability> value);
}
@JS()
@anonymous
abstract class MediaKeySystemMediaCapability{}
extension MediaKeySystemMediaCapabilityExtension on MediaKeySystemMediaCapability {
  external String get contentType;
  external set contentType(String value);
  external String? get encryptionScheme;
  external set encryptionScheme(String? value);
  external String get robustness;
  external set robustness(String value);
}
@JS()
@anonymous
abstract class MediaKeysPolicy{}
extension MediaKeysPolicyExtension on MediaKeysPolicy {
  external String get minHdcpVersion;
  external set minHdcpVersion(String value);
}
@JS()
@anonymous
abstract class MediaMetadataInit{}
extension MediaMetadataInitExtension on MediaMetadataInit {
  external String get album;
  external set album(String value);
  external String get artist;
  external set artist(String value);
  external List<MediaImage> get artwork;
  external set artwork(List<MediaImage> value);
  external String get title;
  external set title(String value);
}
@JS()
@anonymous
abstract class MediaPositionState{}
extension MediaPositionStateExtension on MediaPositionState {
  external num get duration;
  external set duration(num value);
  external num get playbackRate;
  external set playbackRate(num value);
  external num get position;
  external set position(num value);
}
@JS()
@anonymous
abstract class MediaQueryListEventInit{}
extension MediaQueryListEventInitExtension on MediaQueryListEventInit {
  external bool get matches;
  external set matches(bool value);
  external String get media;
  external set media(String value);
}
@JS()
@anonymous
abstract class MediaRecorderOptions{}
extension MediaRecorderOptionsExtension on MediaRecorderOptions {
  external num get audioBitsPerSecond;
  external set audioBitsPerSecond(num value);
  external num get bitsPerSecond;
  external set bitsPerSecond(num value);
  external String get mimeType;
  external set mimeType(String value);
  external num get videoBitsPerSecond;
  external set videoBitsPerSecond(num value);
}
@JS()
@anonymous
abstract class MediaSessionActionDetails{}
extension MediaSessionActionDetailsExtension on MediaSessionActionDetails {
  external MediaSessionAction get action;
  external set action(MediaSessionAction value);
  external bool get fastSeek;
  external set fastSeek(bool value);
  external num get seekOffset;
  external set seekOffset(num value);
  external num get seekTime;
  external set seekTime(num value);
}
@JS()
@anonymous
abstract class MediaStreamAudioSourceOptions{}
extension MediaStreamAudioSourceOptionsExtension on MediaStreamAudioSourceOptions {
  external MediaStream get mediaStream;
  external set mediaStream(MediaStream value);
}
@JS()
@anonymous
abstract class MediaStreamConstraints{}
extension MediaStreamConstraintsExtension on MediaStreamConstraints {
  external dynamic /* bool|MediaTrackConstraints */ get audio;
  external set audio(dynamic /* bool|MediaTrackConstraints */ value);
  external String get peerIdentity;
  external set peerIdentity(String value);
  external bool get preferCurrentTab;
  external set preferCurrentTab(bool value);
  external dynamic /* bool|MediaTrackConstraints */ get video;
  external set video(dynamic /* bool|MediaTrackConstraints */ value);
}
@JS()
@anonymous
abstract class MediaStreamTrackEventInit{}
extension MediaStreamTrackEventInitExtension on MediaStreamTrackEventInit {
  external MediaStreamTrack get track;
  external set track(MediaStreamTrack value);
}
@JS()
@anonymous
abstract class MediaTrackCapabilities{}
extension MediaTrackCapabilitiesExtension on MediaTrackCapabilities {
  external DoubleRange get aspectRatio;
  external set aspectRatio(DoubleRange value);
  external List<bool> get autoGainControl;
  external set autoGainControl(List<bool> value);
  external List<bool> get backgroundBlur;
  external set backgroundBlur(List<bool> value);
  external ULongRange get channelCount;
  external set channelCount(ULongRange value);
  external String get deviceId;
  external set deviceId(String value);
  external String get displaySurface;
  external set displaySurface(String value);
  external List<bool> get echoCancellation;
  external set echoCancellation(List<bool> value);
  external List<String> get facingMode;
  external set facingMode(List<String> value);
  external DoubleRange get frameRate;
  external set frameRate(DoubleRange value);
  external String get groupId;
  external set groupId(String value);
  external ULongRange get height;
  external set height(ULongRange value);
  external List<bool> get noiseSuppression;
  external set noiseSuppression(List<bool> value);
  external ULongRange get sampleRate;
  external set sampleRate(ULongRange value);
  external ULongRange get sampleSize;
  external set sampleSize(ULongRange value);
  external ULongRange get width;
  external set width(ULongRange value);
}
@JS()
@anonymous
abstract class MediaTrackConstraintSet{}
extension MediaTrackConstraintSetExtension on MediaTrackConstraintSet {
  external ConstrainDouble get aspectRatio;
  external set aspectRatio(ConstrainDouble value);
  external ConstrainBoolean get autoGainControl;
  external set autoGainControl(ConstrainBoolean value);
  external ConstrainBoolean get backgroundBlur;
  external set backgroundBlur(ConstrainBoolean value);
  external ConstrainULong get channelCount;
  external set channelCount(ConstrainULong value);
  external ConstrainDOMString get deviceId;
  external set deviceId(ConstrainDOMString value);
  external ConstrainDOMString get displaySurface;
  external set displaySurface(ConstrainDOMString value);
  external ConstrainBoolean get echoCancellation;
  external set echoCancellation(ConstrainBoolean value);
  external ConstrainDOMString get facingMode;
  external set facingMode(ConstrainDOMString value);
  external ConstrainDouble get frameRate;
  external set frameRate(ConstrainDouble value);
  external ConstrainDOMString get groupId;
  external set groupId(ConstrainDOMString value);
  external ConstrainULong get height;
  external set height(ConstrainULong value);
  external ConstrainBoolean get noiseSuppression;
  external set noiseSuppression(ConstrainBoolean value);
  external ConstrainULong get sampleRate;
  external set sampleRate(ConstrainULong value);
  external ConstrainULong get sampleSize;
  external set sampleSize(ConstrainULong value);
  external ConstrainULong get width;
  external set width(ConstrainULong value);
}
@JS()
@anonymous
abstract class MediaTrackConstraints{}
extension MediaTrackConstraintsExtension on MediaTrackConstraints {
  external List<MediaTrackConstraintSet> get advanced;
  external set advanced(List<MediaTrackConstraintSet> value);
}
@JS()
@anonymous
abstract class MediaTrackSettings{}
extension MediaTrackSettingsExtension on MediaTrackSettings {
  external num get aspectRatio;
  external set aspectRatio(num value);
  external bool get autoGainControl;
  external set autoGainControl(bool value);
  external bool get backgroundBlur;
  external set backgroundBlur(bool value);
  external num get channelCount;
  external set channelCount(num value);
  external String get deviceId;
  external set deviceId(String value);
  external String get displaySurface;
  external set displaySurface(String value);
  external bool get echoCancellation;
  external set echoCancellation(bool value);
  external String get facingMode;
  external set facingMode(String value);
  external num get frameRate;
  external set frameRate(num value);
  external String get groupId;
  external set groupId(String value);
  external num get height;
  external set height(num value);
  external bool get noiseSuppression;
  external set noiseSuppression(bool value);
  external num get sampleRate;
  external set sampleRate(num value);
  external num get sampleSize;
  external set sampleSize(num value);
  external num get width;
  external set width(num value);
}
@JS()
@anonymous
abstract class MediaTrackSupportedConstraints{}
extension MediaTrackSupportedConstraintsExtension on MediaTrackSupportedConstraints {
  external bool get aspectRatio;
  external set aspectRatio(bool value);
  external bool get autoGainControl;
  external set autoGainControl(bool value);
  external bool get backgroundBlur;
  external set backgroundBlur(bool value);
  external bool get channelCount;
  external set channelCount(bool value);
  external bool get deviceId;
  external set deviceId(bool value);
  external bool get displaySurface;
  external set displaySurface(bool value);
  external bool get echoCancellation;
  external set echoCancellation(bool value);
  external bool get facingMode;
  external set facingMode(bool value);
  external bool get frameRate;
  external set frameRate(bool value);
  external bool get groupId;
  external set groupId(bool value);
  external bool get height;
  external set height(bool value);
  external bool get noiseSuppression;
  external set noiseSuppression(bool value);
  external bool get sampleRate;
  external set sampleRate(bool value);
  external bool get sampleSize;
  external set sampleSize(bool value);
  external bool get width;
  external set width(bool value);
}
@JS()
@anonymous
abstract class MessageEventInit{}
extension MessageEventInitExtension on MessageEventInit {
  external T get data;
  external set data(T value);
  external String get lastEventId;
  external set lastEventId(String value);
  external String get origin;
  external set origin(String value);
  external List<MessagePort> get ports;
  external set ports(List<MessagePort> value);
  external MessageEventSource? get source;
  external set source(MessageEventSource? value);
}
@JS()
@anonymous
abstract class MouseEventInit{}
extension MouseEventInitExtension on MouseEventInit {
  external num get button;
  external set button(num value);
  external num get buttons;
  external set buttons(num value);
  external num get clientX;
  external set clientX(num value);
  external num get clientY;
  external set clientY(num value);
  external num get movementX;
  external set movementX(num value);
  external num get movementY;
  external set movementY(num value);
  external EventTarget? get relatedTarget;
  external set relatedTarget(EventTarget? value);
  external num get screenX;
  external set screenX(num value);
  external num get screenY;
  external set screenY(num value);
}
@JS()
@anonymous
abstract class MultiCacheQueryOptions{}
extension MultiCacheQueryOptionsExtension on MultiCacheQueryOptions {
  external String get cacheName;
  external set cacheName(String value);
}
@JS()
@anonymous
abstract class MutationObserverInit{}
extension MutationObserverInitExtension on MutationObserverInit {
  external List<String> get attributeFilter;
  external set attributeFilter(List<String> value);
  external bool get attributeOldValue;
  external set attributeOldValue(bool value);
  external bool get attributes;
  external set attributes(bool value);
  external bool get characterData;
  external set characterData(bool value);
  external bool get characterDataOldValue;
  external set characterDataOldValue(bool value);
  external bool get childList;
  external set childList(bool value);
  external bool get subtree;
  external set subtree(bool value);
}
@JS()
@anonymous
abstract class NavigationPreloadState{}
extension NavigationPreloadStateExtension on NavigationPreloadState {
  external bool get enabled;
  external set enabled(bool value);
  external String get headerValue;
  external set headerValue(String value);
}
@JS()
@anonymous
abstract class NotificationOptions{}
extension NotificationOptionsExtension on NotificationOptions {
  external String get badge;
  external set badge(String value);
  external String get body;
  external set body(String value);
  external dynamic get data;
  external set data(dynamic value);
  external NotificationDirection get dir;
  external set dir(NotificationDirection value);
  external String get icon;
  external set icon(String value);
  external String get lang;
  external set lang(String value);
  external bool get requireInteraction;
  external set requireInteraction(bool value);
  external bool? get silent;
  external set silent(bool? value);
  external String get tag;
  external set tag(String value);
}
@JS()
@anonymous
abstract class OfflineAudioCompletionEventInit{}
extension OfflineAudioCompletionEventInitExtension on OfflineAudioCompletionEventInit {
  external AudioBuffer get renderedBuffer;
  external set renderedBuffer(AudioBuffer value);
}
@JS()
@anonymous
abstract class OfflineAudioContextOptions{}
extension OfflineAudioContextOptionsExtension on OfflineAudioContextOptions {
  external num get length;
  external set length(num value);
  external num get numberOfChannels;
  external set numberOfChannels(num value);
  external num get sampleRate;
  external set sampleRate(num value);
}
@JS()
@anonymous
abstract class OptionalEffectTiming{}
extension OptionalEffectTimingExtension on OptionalEffectTiming {
  external num get delay;
  external set delay(num value);
  external PlaybackDirection get direction;
  external set direction(PlaybackDirection value);
  external dynamic /* num|String */ get duration;
  external set duration(dynamic /* num|String */ value);
  external String get easing;
  external set easing(String value);
  external num get endDelay;
  external set endDelay(num value);
  external FillMode get fill;
  external set fill(FillMode value);
  external num get iterationStart;
  external set iterationStart(num value);
  external num get iterations;
  external set iterations(num value);
  external num get playbackRate;
  external set playbackRate(num value);
}
@JS()
@anonymous
abstract class OpusEncoderConfig{}
extension OpusEncoderConfigExtension on OpusEncoderConfig {
  external num get complexity;
  external set complexity(num value);
  external OpusBitstreamFormat get format;
  external set format(OpusBitstreamFormat value);
  external num get frameDuration;
  external set frameDuration(num value);
  external num get packetlossperc;
  external set packetlossperc(num value);
  external bool get usedtx;
  external set usedtx(bool value);
  external bool get useinbandfec;
  external set useinbandfec(bool value);
}
@JS()
@anonymous
abstract class OscillatorOptions{}
extension OscillatorOptionsExtension on OscillatorOptions {
  external num get detune;
  external set detune(num value);
  external num get frequency;
  external set frequency(num value);
  external PeriodicWave get periodicWave;
  external set periodicWave(PeriodicWave value);
  external OscillatorType get type;
  external set type(OscillatorType value);
}
@JS()
@anonymous
abstract class PageRevealEventInit{}
extension PageRevealEventInitExtension on PageRevealEventInit {
  external ViewTransition? get viewTransition;
  external set viewTransition(ViewTransition? value);
}
@JS()
@anonymous
abstract class PageSwapEventInit{}
extension PageSwapEventInitExtension on PageSwapEventInit {
  external NavigationActivation? get activation;
  external set activation(NavigationActivation? value);
  external ViewTransition? get viewTransition;
  external set viewTransition(ViewTransition? value);
}
@JS()
@anonymous
abstract class PageTransitionEventInit{}
extension PageTransitionEventInitExtension on PageTransitionEventInit {
  external bool get persisted;
  external set persisted(bool value);
}
@JS()
@anonymous
abstract class PannerOptions{}
extension PannerOptionsExtension on PannerOptions {
  external num get coneInnerAngle;
  external set coneInnerAngle(num value);
  external num get coneOuterAngle;
  external set coneOuterAngle(num value);
  external num get coneOuterGain;
  external set coneOuterGain(num value);
  external DistanceModelType get distanceModel;
  external set distanceModel(DistanceModelType value);
  external num get maxDistance;
  external set maxDistance(num value);
  external num get orientationX;
  external set orientationX(num value);
  external num get orientationY;
  external set orientationY(num value);
  external num get orientationZ;
  external set orientationZ(num value);
  external PanningModelType get panningModel;
  external set panningModel(PanningModelType value);
  external num get positionX;
  external set positionX(num value);
  external num get positionY;
  external set positionY(num value);
  external num get positionZ;
  external set positionZ(num value);
  external num get refDistance;
  external set refDistance(num value);
  external num get rolloffFactor;
  external set rolloffFactor(num value);
}
@JS()
@anonymous
abstract class PayerErrors{}
extension PayerErrorsExtension on PayerErrors {
  external String get email;
  external set email(String value);
  external String get name;
  external set name(String value);
  external String get phone;
  external set phone(String value);
}
@JS()
@anonymous
abstract class PaymentCurrencyAmount{}
extension PaymentCurrencyAmountExtension on PaymentCurrencyAmount {
  external String get currency;
  external set currency(String value);
  external String get value;
  external set value(String value);
}
@JS()
@anonymous
abstract class PaymentDetailsBase{}
extension PaymentDetailsBaseExtension on PaymentDetailsBase {
  external List<PaymentItem> get displayItems;
  external set displayItems(List<PaymentItem> value);
  external List<PaymentDetailsModifier> get modifiers;
  external set modifiers(List<PaymentDetailsModifier> value);
  external List<PaymentShippingOption> get shippingOptions;
  external set shippingOptions(List<PaymentShippingOption> value);
}
@JS()
@anonymous
abstract class PaymentDetailsInit{}
extension PaymentDetailsInitExtension on PaymentDetailsInit {
  external String get id;
  external set id(String value);
  external PaymentItem get total;
  external set total(PaymentItem value);
}
@JS()
@anonymous
abstract class PaymentDetailsModifier{}
extension PaymentDetailsModifierExtension on PaymentDetailsModifier {
  external List<PaymentItem> get additionalDisplayItems;
  external set additionalDisplayItems(List<PaymentItem> value);
  external dynamic get data;
  external set data(dynamic value);
  external String get supportedMethods;
  external set supportedMethods(String value);
  external PaymentItem get total;
  external set total(PaymentItem value);
}
@JS()
@anonymous
abstract class PaymentDetailsUpdate{}
extension PaymentDetailsUpdateExtension on PaymentDetailsUpdate {
  external String get error;
  external set error(String value);
  external dynamic get paymentMethodErrors;
  external set paymentMethodErrors(dynamic value);
  external AddressErrors get shippingAddressErrors;
  external set shippingAddressErrors(AddressErrors value);
  external PaymentItem get total;
  external set total(PaymentItem value);
}
@JS()
@anonymous
abstract class PaymentItem{}
extension PaymentItemExtension on PaymentItem {
  external PaymentCurrencyAmount get amount;
  external set amount(PaymentCurrencyAmount value);
  external String get label;
  external set label(String value);
  external bool get pending;
  external set pending(bool value);
}
@JS()
@anonymous
abstract class PaymentMethodChangeEventInit{}
extension PaymentMethodChangeEventInitExtension on PaymentMethodChangeEventInit {
  external dynamic get methodDetails;
  external set methodDetails(dynamic value);
  external String get methodName;
  external set methodName(String value);
}
@JS()
@anonymous
abstract class PaymentMethodData{}
extension PaymentMethodDataExtension on PaymentMethodData {
  external dynamic get data;
  external set data(dynamic value);
  external String get supportedMethods;
  external set supportedMethods(String value);
}
@JS()
@anonymous
abstract class PaymentOptions{}
extension PaymentOptionsExtension on PaymentOptions {
  external bool get requestPayerEmail;
  external set requestPayerEmail(bool value);
  external bool get requestPayerName;
  external set requestPayerName(bool value);
  external bool get requestPayerPhone;
  external set requestPayerPhone(bool value);
  external bool get requestShipping;
  external set requestShipping(bool value);
  external PaymentShippingType get shippingType;
  external set shippingType(PaymentShippingType value);
}
@JS()
@anonymous
abstract class PaymentRequestUpdateEventInit{}
extension PaymentRequestUpdateEventInitExtension on PaymentRequestUpdateEventInit {
}
@JS()
@anonymous
abstract class PaymentShippingOption{}
extension PaymentShippingOptionExtension on PaymentShippingOption {
  external PaymentCurrencyAmount get amount;
  external set amount(PaymentCurrencyAmount value);
  external String get id;
  external set id(String value);
  external String get label;
  external set label(String value);
  external bool get selected;
  external set selected(bool value);
}
@JS()
@anonymous
abstract class PaymentValidationErrors{}
extension PaymentValidationErrorsExtension on PaymentValidationErrors {
  external String get error;
  external set error(String value);
  external PayerErrors get payer;
  external set payer(PayerErrors value);
  external AddressErrors get shippingAddress;
  external set shippingAddress(AddressErrors value);
}
@JS()
@anonymous
abstract class Pbkdf2Params{}
extension Pbkdf2ParamsExtension on Pbkdf2Params {
  external HashAlgorithmIdentifier get hash;
  external set hash(HashAlgorithmIdentifier value);
  external num get iterations;
  external set iterations(num value);
  external BufferSource get salt;
  external set salt(BufferSource value);
}
@JS()
@anonymous
abstract class PerformanceMarkOptions{}
extension PerformanceMarkOptionsExtension on PerformanceMarkOptions {
  external dynamic get detail;
  external set detail(dynamic value);
  external DOMHighResTimeStamp get startTime;
  external set startTime(DOMHighResTimeStamp value);
}
@JS()
@anonymous
abstract class PerformanceMeasureOptions{}
extension PerformanceMeasureOptionsExtension on PerformanceMeasureOptions {
  external dynamic get detail;
  external set detail(dynamic value);
  external DOMHighResTimeStamp get duration;
  external set duration(DOMHighResTimeStamp value);
  external dynamic /* String|DOMHighResTimeStamp */ get end;
  external set end(dynamic /* String|DOMHighResTimeStamp */ value);
  external dynamic /* String|DOMHighResTimeStamp */ get start;
  external set start(dynamic /* String|DOMHighResTimeStamp */ value);
}
@JS()
@anonymous
abstract class PerformanceObserverInit{}
extension PerformanceObserverInitExtension on PerformanceObserverInit {
  external bool get buffered;
  external set buffered(bool value);
  external List<String> get entryTypes;
  external set entryTypes(List<String> value);
  external String get type;
  external set type(String value);
}
@JS()
@anonymous
abstract class PeriodicWaveConstraints{}
extension PeriodicWaveConstraintsExtension on PeriodicWaveConstraints {
  external bool get disableNormalization;
  external set disableNormalization(bool value);
}
@JS()
@anonymous
abstract class PeriodicWaveOptions{}
extension PeriodicWaveOptionsExtension on PeriodicWaveOptions {
  external dynamic /* List<num>|Float32Array */ get imag;
  external set imag(dynamic /* List<num>|Float32Array */ value);
  external dynamic /* List<num>|Float32Array */ get real;
  external set real(dynamic /* List<num>|Float32Array */ value);
}
@JS()
@anonymous
abstract class PermissionDescriptor{}
extension PermissionDescriptorExtension on PermissionDescriptor {
  external PermissionName get name;
  external set name(PermissionName value);
}
@JS()
@anonymous
abstract class PictureInPictureEventInit{}
extension PictureInPictureEventInitExtension on PictureInPictureEventInit {
  external PictureInPictureWindow get pictureInPictureWindow;
  external set pictureInPictureWindow(PictureInPictureWindow value);
}
@JS()
@anonymous
abstract class PlaneLayout{}
extension PlaneLayoutExtension on PlaneLayout {
  external num get offset;
  external set offset(num value);
  external num get stride;
  external set stride(num value);
}
@JS()
@anonymous
abstract class PointerEventInit{}
extension PointerEventInitExtension on PointerEventInit {
  external num get altitudeAngle;
  external set altitudeAngle(num value);
  external num get azimuthAngle;
  external set azimuthAngle(num value);
  external List<PointerEvent> get coalescedEvents;
  external set coalescedEvents(List<PointerEvent> value);
  external num get height;
  external set height(num value);
  external bool get isPrimary;
  external set isPrimary(bool value);
  external num get pointerId;
  external set pointerId(num value);
  external String get pointerType;
  external set pointerType(String value);
  external List<PointerEvent> get predictedEvents;
  external set predictedEvents(List<PointerEvent> value);
  external num get pressure;
  external set pressure(num value);
  external num get tangentialPressure;
  external set tangentialPressure(num value);
  external num get tiltX;
  external set tiltX(num value);
  external num get tiltY;
  external set tiltY(num value);
  external num get twist;
  external set twist(num value);
  external num get width;
  external set width(num value);
}
@JS()
@anonymous
abstract class PointerLockOptions{}
extension PointerLockOptionsExtension on PointerLockOptions {
  external bool get unadjustedMovement;
  external set unadjustedMovement(bool value);
}
@JS()
@anonymous
abstract class PopStateEventInit{}
extension PopStateEventInitExtension on PopStateEventInit {
  external dynamic get state;
  external set state(dynamic value);
}
@JS()
@anonymous
abstract class PositionOptions{}
extension PositionOptionsExtension on PositionOptions {
  external bool get enableHighAccuracy;
  external set enableHighAccuracy(bool value);
  external num get maximumAge;
  external set maximumAge(num value);
  external num get timeout;
  external set timeout(num value);
}
@JS()
@anonymous
abstract class ProgressEventInit{}
extension ProgressEventInitExtension on ProgressEventInit {
  external bool get lengthComputable;
  external set lengthComputable(bool value);
  external num get loaded;
  external set loaded(num value);
  external num get total;
  external set total(num value);
}
@JS()
@anonymous
abstract class PromiseRejectionEventInit{}
extension PromiseRejectionEventInitExtension on PromiseRejectionEventInit {
  external Future<dynamic> get promise;
  external set promise(Future<dynamic> value);
  external dynamic get reason;
  external set reason(dynamic value);
}
@JS()
@anonymous
abstract class PropertyDefinition{}
extension PropertyDefinitionExtension on PropertyDefinition {
  external bool get inherits;
  external set inherits(bool value);
  external String get initialValue;
  external set initialValue(String value);
  external String get name;
  external set name(String value);
  external String get syntax;
  external set syntax(String value);
}
@JS()
@anonymous
abstract class PropertyIndexedKeyframes{}
extension PropertyIndexedKeyframesExtension on PropertyIndexedKeyframes {
  external dynamic /* CompositeOperationOrAuto|List<CompositeOperationOrAuto> */ get composite;
  external set composite(dynamic /* CompositeOperationOrAuto|List<CompositeOperationOrAuto> */ value);
  external dynamic /* String|List<String> */ get easing;
  external set easing(dynamic /* String|List<String> */ value);
  external dynamic /* num|List<num?> */ get offset;
  external set offset(dynamic /* num|List<num?> */ value);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS()
@anonymous
abstract class PublicKeyCredentialCreationOptions{}
extension PublicKeyCredentialCreationOptionsExtension on PublicKeyCredentialCreationOptions {
  external AttestationConveyancePreference get attestation;
  external set attestation(AttestationConveyancePreference value);
  external AuthenticatorSelectionCriteria get authenticatorSelection;
  external set authenticatorSelection(AuthenticatorSelectionCriteria value);
  external BufferSource get challenge;
  external set challenge(BufferSource value);
  external List<PublicKeyCredentialDescriptor> get excludeCredentials;
  external set excludeCredentials(List<PublicKeyCredentialDescriptor> value);
  external AuthenticationExtensionsClientInputs get extensions;
  external set extensions(AuthenticationExtensionsClientInputs value);
  external List<PublicKeyCredentialParameters> get pubKeyCredParams;
  external set pubKeyCredParams(List<PublicKeyCredentialParameters> value);
  external PublicKeyCredentialRpEntity get rp;
  external set rp(PublicKeyCredentialRpEntity value);
  external num get timeout;
  external set timeout(num value);
  external PublicKeyCredentialUserEntity get user;
  external set user(PublicKeyCredentialUserEntity value);
}
@JS()
@anonymous
abstract class PublicKeyCredentialCreationOptionsJSON{}
extension PublicKeyCredentialCreationOptionsJSONExtension on PublicKeyCredentialCreationOptionsJSON {
  external String get attestation;
  external set attestation(String value);
  external AuthenticatorSelectionCriteria get authenticatorSelection;
  external set authenticatorSelection(AuthenticatorSelectionCriteria value);
  external Base64URLString get challenge;
  external set challenge(Base64URLString value);
  external List<PublicKeyCredentialDescriptorJSON> get excludeCredentials;
  external set excludeCredentials(List<PublicKeyCredentialDescriptorJSON> value);
  external AuthenticationExtensionsClientInputsJSON get extensions;
  external set extensions(AuthenticationExtensionsClientInputsJSON value);
  external List<String> get hints;
  external set hints(List<String> value);
  external List<PublicKeyCredentialParameters> get pubKeyCredParams;
  external set pubKeyCredParams(List<PublicKeyCredentialParameters> value);
  external PublicKeyCredentialRpEntity get rp;
  external set rp(PublicKeyCredentialRpEntity value);
  external num get timeout;
  external set timeout(num value);
  external PublicKeyCredentialUserEntityJSON get user;
  external set user(PublicKeyCredentialUserEntityJSON value);
}
@JS()
@anonymous
abstract class PublicKeyCredentialDescriptor{}
extension PublicKeyCredentialDescriptorExtension on PublicKeyCredentialDescriptor {
  external BufferSource get id;
  external set id(BufferSource value);
  external List<AuthenticatorTransport> get transports;
  external set transports(List<AuthenticatorTransport> value);
  external PublicKeyCredentialType get type;
  external set type(PublicKeyCredentialType value);
}
@JS()
@anonymous
abstract class PublicKeyCredentialDescriptorJSON{}
extension PublicKeyCredentialDescriptorJSONExtension on PublicKeyCredentialDescriptorJSON {
  external Base64URLString get id;
  external set id(Base64URLString value);
  external List<String> get transports;
  external set transports(List<String> value);
  external String get type;
  external set type(String value);
}
@JS()
@anonymous
abstract class PublicKeyCredentialEntity{}
extension PublicKeyCredentialEntityExtension on PublicKeyCredentialEntity {
  external String get name;
  external set name(String value);
}
@JS()
@anonymous
abstract class PublicKeyCredentialParameters{}
extension PublicKeyCredentialParametersExtension on PublicKeyCredentialParameters {
  external COSEAlgorithmIdentifier get alg;
  external set alg(COSEAlgorithmIdentifier value);
  external PublicKeyCredentialType get type;
  external set type(PublicKeyCredentialType value);
}
@JS()
@anonymous
abstract class PublicKeyCredentialRequestOptions{}
extension PublicKeyCredentialRequestOptionsExtension on PublicKeyCredentialRequestOptions {
  external List<PublicKeyCredentialDescriptor> get allowCredentials;
  external set allowCredentials(List<PublicKeyCredentialDescriptor> value);
  external BufferSource get challenge;
  external set challenge(BufferSource value);
  external AuthenticationExtensionsClientInputs get extensions;
  external set extensions(AuthenticationExtensionsClientInputs value);
  external String get rpId;
  external set rpId(String value);
  external num get timeout;
  external set timeout(num value);
  external UserVerificationRequirement get userVerification;
  external set userVerification(UserVerificationRequirement value);
}
@JS()
@anonymous
abstract class PublicKeyCredentialRequestOptionsJSON{}
extension PublicKeyCredentialRequestOptionsJSONExtension on PublicKeyCredentialRequestOptionsJSON {
  external List<PublicKeyCredentialDescriptorJSON> get allowCredentials;
  external set allowCredentials(List<PublicKeyCredentialDescriptorJSON> value);
  external Base64URLString get challenge;
  external set challenge(Base64URLString value);
  external AuthenticationExtensionsClientInputsJSON get extensions;
  external set extensions(AuthenticationExtensionsClientInputsJSON value);
  external List<String> get hints;
  external set hints(List<String> value);
  external String get rpId;
  external set rpId(String value);
  external num get timeout;
  external set timeout(num value);
  external String get userVerification;
  external set userVerification(String value);
}
@JS()
@anonymous
abstract class PublicKeyCredentialRpEntity{}
extension PublicKeyCredentialRpEntityExtension on PublicKeyCredentialRpEntity {
  external String get id;
  external set id(String value);
}
@JS()
@anonymous
abstract class PublicKeyCredentialUserEntity{}
extension PublicKeyCredentialUserEntityExtension on PublicKeyCredentialUserEntity {
  external String get displayName;
  external set displayName(String value);
  external BufferSource get id;
  external set id(BufferSource value);
}
@JS()
@anonymous
abstract class PublicKeyCredentialUserEntityJSON{}
extension PublicKeyCredentialUserEntityJSONExtension on PublicKeyCredentialUserEntityJSON {
  external String get displayName;
  external set displayName(String value);
  external Base64URLString get id;
  external set id(Base64URLString value);
  external String get name;
  external set name(String value);
}
@JS()
@anonymous
abstract class PushSubscriptionJSON{}
extension PushSubscriptionJSONExtension on PushSubscriptionJSON {
  external String get endpoint;
  external set endpoint(String value);
  external EpochTimeStamp? get expirationTime;
  external set expirationTime(EpochTimeStamp? value);
  external Record<String, String> get keys;
  external set keys(Record<String, String> value);
}
@JS()
@anonymous
abstract class PushSubscriptionOptionsInit{}
extension PushSubscriptionOptionsInitExtension on PushSubscriptionOptionsInit {
  external dynamic /* BufferSource|String */ get applicationServerKey;
  external set applicationServerKey(dynamic /* BufferSource|String */ value);
  external bool get userVisibleOnly;
  external set userVisibleOnly(bool value);
}
@JS()
@anonymous
abstract class QueuingStrategy{}
extension QueuingStrategyExtension on QueuingStrategy {
  external num get highWaterMark;
  external set highWaterMark(num value);
  external QueuingStrategySize<T> get size;
  external set size(QueuingStrategySize<T> value);
}
@JS()
@anonymous
abstract class QueuingStrategyInit{}
extension QueuingStrategyInitExtension on QueuingStrategyInit {
  external num get highWaterMark;
  external set highWaterMark(num value);
}
@JS()
@anonymous
abstract class RTCAnswerOptions{}
extension RTCAnswerOptionsExtension on RTCAnswerOptions {
}
@JS()
@anonymous
abstract class RTCCertificateExpiration{}
extension RTCCertificateExpirationExtension on RTCCertificateExpiration {
  external num get expires;
  external set expires(num value);
}
@JS()
@anonymous
abstract class RTCConfiguration{}
extension RTCConfigurationExtension on RTCConfiguration {
  external RTCBundlePolicy get bundlePolicy;
  external set bundlePolicy(RTCBundlePolicy value);
  external List<RTCCertificate> get certificates;
  external set certificates(List<RTCCertificate> value);
  external num get iceCandidatePoolSize;
  external set iceCandidatePoolSize(num value);
  external List<RTCIceServer> get iceServers;
  external set iceServers(List<RTCIceServer> value);
  external RTCIceTransportPolicy get iceTransportPolicy;
  external set iceTransportPolicy(RTCIceTransportPolicy value);
  external RTCRtcpMuxPolicy get rtcpMuxPolicy;
  external set rtcpMuxPolicy(RTCRtcpMuxPolicy value);
}
@JS()
@anonymous
abstract class RTCDTMFToneChangeEventInit{}
extension RTCDTMFToneChangeEventInitExtension on RTCDTMFToneChangeEventInit {
  external String get tone;
  external set tone(String value);
}
@JS()
@anonymous
abstract class RTCDataChannelEventInit{}
extension RTCDataChannelEventInitExtension on RTCDataChannelEventInit {
  external RTCDataChannel get channel;
  external set channel(RTCDataChannel value);
}
@JS()
@anonymous
abstract class RTCDataChannelInit{}
extension RTCDataChannelInitExtension on RTCDataChannelInit {
  external num get id;
  external set id(num value);
  external num get maxPacketLifeTime;
  external set maxPacketLifeTime(num value);
  external num get maxRetransmits;
  external set maxRetransmits(num value);
  external bool get negotiated;
  external set negotiated(bool value);
  external bool get ordered;
  external set ordered(bool value);
  external String get protocol;
  external set protocol(String value);
}
@JS()
@anonymous
abstract class RTCDtlsFingerprint{}
extension RTCDtlsFingerprintExtension on RTCDtlsFingerprint {
  external String get algorithm;
  external set algorithm(String value);
  external String get value;
  external set value(String value);
}
@JS()
@anonymous
abstract class RTCEncodedAudioFrameMetadata{}
extension RTCEncodedAudioFrameMetadataExtension on RTCEncodedAudioFrameMetadata {
  external List<num> get contributingSources;
  external set contributingSources(List<num> value);
  external num get payloadType;
  external set payloadType(num value);
  external num get sequenceNumber;
  external set sequenceNumber(num value);
  external num get synchronizationSource;
  external set synchronizationSource(num value);
}
@JS()
@anonymous
abstract class RTCEncodedVideoFrameMetadata{}
extension RTCEncodedVideoFrameMetadataExtension on RTCEncodedVideoFrameMetadata {
  external List<num> get contributingSources;
  external set contributingSources(List<num> value);
  external List<num> get dependencies;
  external set dependencies(List<num> value);
  external num get frameId;
  external set frameId(num value);
  external num get height;
  external set height(num value);
  external num get payloadType;
  external set payloadType(num value);
  external num get spatialIndex;
  external set spatialIndex(num value);
  external num get synchronizationSource;
  external set synchronizationSource(num value);
  external num get temporalIndex;
  external set temporalIndex(num value);
  external num get timestamp;
  external set timestamp(num value);
  external num get width;
  external set width(num value);
}
@JS()
@anonymous
abstract class RTCErrorEventInit{}
extension RTCErrorEventInitExtension on RTCErrorEventInit {
  external RTCError get error;
  external set error(RTCError value);
}
@JS()
@anonymous
abstract class RTCErrorInit{}
extension RTCErrorInitExtension on RTCErrorInit {
  external RTCErrorDetailType get errorDetail;
  external set errorDetail(RTCErrorDetailType value);
  external num get httpRequestStatusCode;
  external set httpRequestStatusCode(num value);
  external num get receivedAlert;
  external set receivedAlert(num value);
  external num get sctpCauseCode;
  external set sctpCauseCode(num value);
  external num get sdpLineNumber;
  external set sdpLineNumber(num value);
  external num get sentAlert;
  external set sentAlert(num value);
}
@JS()
@anonymous
abstract class RTCIceCandidateInit{}
extension RTCIceCandidateInitExtension on RTCIceCandidateInit {
  external String get candidate;
  external set candidate(String value);
  external num? get sdpMLineIndex;
  external set sdpMLineIndex(num? value);
  external String? get sdpMid;
  external set sdpMid(String? value);
  external String? get usernameFragment;
  external set usernameFragment(String? value);
}
@JS()
@anonymous
abstract class RTCIceCandidatePairStats{}
extension RTCIceCandidatePairStatsExtension on RTCIceCandidatePairStats {
  external num get availableIncomingBitrate;
  external set availableIncomingBitrate(num value);
  external num get availableOutgoingBitrate;
  external set availableOutgoingBitrate(num value);
  external num get bytesDiscardedOnSend;
  external set bytesDiscardedOnSend(num value);
  external num get bytesReceived;
  external set bytesReceived(num value);
  external num get bytesSent;
  external set bytesSent(num value);
  external num get consentRequestsSent;
  external set consentRequestsSent(num value);
  external num get currentRoundTripTime;
  external set currentRoundTripTime(num value);
  external DOMHighResTimeStamp get lastPacketReceivedTimestamp;
  external set lastPacketReceivedTimestamp(DOMHighResTimeStamp value);
  external DOMHighResTimeStamp get lastPacketSentTimestamp;
  external set lastPacketSentTimestamp(DOMHighResTimeStamp value);
  external String get localCandidateId;
  external set localCandidateId(String value);
  external bool get nominated;
  external set nominated(bool value);
  external num get packetsDiscardedOnSend;
  external set packetsDiscardedOnSend(num value);
  external num get packetsReceived;
  external set packetsReceived(num value);
  external num get packetsSent;
  external set packetsSent(num value);
  external String get remoteCandidateId;
  external set remoteCandidateId(String value);
  external num get requestsReceived;
  external set requestsReceived(num value);
  external num get requestsSent;
  external set requestsSent(num value);
  external num get responsesReceived;
  external set responsesReceived(num value);
  external num get responsesSent;
  external set responsesSent(num value);
  external RTCStatsIceCandidatePairState get state;
  external set state(RTCStatsIceCandidatePairState value);
  external num get totalRoundTripTime;
  external set totalRoundTripTime(num value);
  external String get transportId;
  external set transportId(String value);
}
@JS()
@anonymous
abstract class RTCIceServer{}
extension RTCIceServerExtension on RTCIceServer {
  external String get credential;
  external set credential(String value);
  external dynamic /* String|List<String> */ get urls;
  external set urls(dynamic /* String|List<String> */ value);
  external String get username;
  external set username(String value);
}
@JS()
@anonymous
abstract class RTCInboundRtpStreamStats{}
extension RTCInboundRtpStreamStatsExtension on RTCInboundRtpStreamStats {
  external num get audioLevel;
  external set audioLevel(num value);
  external num get bytesReceived;
  external set bytesReceived(num value);
  external num get concealedSamples;
  external set concealedSamples(num value);
  external num get concealmentEvents;
  external set concealmentEvents(num value);
  external String get decoderImplementation;
  external set decoderImplementation(String value);
  external DOMHighResTimeStamp get estimatedPlayoutTimestamp;
  external set estimatedPlayoutTimestamp(DOMHighResTimeStamp value);
  external num get fecBytesReceived;
  external set fecBytesReceived(num value);
  external num get fecPacketsDiscarded;
  external set fecPacketsDiscarded(num value);
  external num get fecPacketsReceived;
  external set fecPacketsReceived(num value);
  external num get fecSsrc;
  external set fecSsrc(num value);
  external num get firCount;
  external set firCount(num value);
  external num get frameHeight;
  external set frameHeight(num value);
  external num get frameWidth;
  external set frameWidth(num value);
  external num get framesAssembledFromMultiplePackets;
  external set framesAssembledFromMultiplePackets(num value);
  external num get framesDecoded;
  external set framesDecoded(num value);
  external num get framesDropped;
  external set framesDropped(num value);
  external num get framesPerSecond;
  external set framesPerSecond(num value);
  external num get framesReceived;
  external set framesReceived(num value);
  external num get framesRendered;
  external set framesRendered(num value);
  external num get freezeCount;
  external set freezeCount(num value);
  external num get headerBytesReceived;
  external set headerBytesReceived(num value);
  external num get insertedSamplesForDeceleration;
  external set insertedSamplesForDeceleration(num value);
  external num get jitterBufferDelay;
  external set jitterBufferDelay(num value);
  external num get jitterBufferEmittedCount;
  external set jitterBufferEmittedCount(num value);
  external num get jitterBufferMinimumDelay;
  external set jitterBufferMinimumDelay(num value);
  external num get jitterBufferTargetDelay;
  external set jitterBufferTargetDelay(num value);
  external num get keyFramesDecoded;
  external set keyFramesDecoded(num value);
  external DOMHighResTimeStamp get lastPacketReceivedTimestamp;
  external set lastPacketReceivedTimestamp(DOMHighResTimeStamp value);
  external String get mid;
  external set mid(String value);
  external num get nackCount;
  external set nackCount(num value);
  external num get packetsDiscarded;
  external set packetsDiscarded(num value);
  external num get pauseCount;
  external set pauseCount(num value);
  external String get playoutId;
  external set playoutId(String value);
  external num get pliCount;
  external set pliCount(num value);
  external num get qpSum;
  external set qpSum(num value);
  external String get remoteId;
  external set remoteId(String value);
  external num get removedSamplesForAcceleration;
  external set removedSamplesForAcceleration(num value);
  external num get retransmittedBytesReceived;
  external set retransmittedBytesReceived(num value);
  external num get retransmittedPacketsReceived;
  external set retransmittedPacketsReceived(num value);
  external num get rtxSsrc;
  external set rtxSsrc(num value);
  external num get silentConcealedSamples;
  external set silentConcealedSamples(num value);
  external num get totalAssemblyTime;
  external set totalAssemblyTime(num value);
  external num get totalAudioEnergy;
  external set totalAudioEnergy(num value);
  external num get totalDecodeTime;
  external set totalDecodeTime(num value);
  external num get totalFreezesDuration;
  external set totalFreezesDuration(num value);
  external num get totalInterFrameDelay;
  external set totalInterFrameDelay(num value);
  external num get totalPausesDuration;
  external set totalPausesDuration(num value);
  external num get totalProcessingDelay;
  external set totalProcessingDelay(num value);
  external num get totalSamplesDuration;
  external set totalSamplesDuration(num value);
  external num get totalSamplesReceived;
  external set totalSamplesReceived(num value);
  external num get totalSquaredInterFrameDelay;
  external set totalSquaredInterFrameDelay(num value);
  external String get trackIdentifier;
  external set trackIdentifier(String value);
}
@JS()
@anonymous
abstract class RTCLocalSessionDescriptionInit{}
extension RTCLocalSessionDescriptionInitExtension on RTCLocalSessionDescriptionInit {
  external String get sdp;
  external set sdp(String value);
  external RTCSdpType get type;
  external set type(RTCSdpType value);
}
@JS()
@anonymous
abstract class RTCOfferAnswerOptions{}
extension RTCOfferAnswerOptionsExtension on RTCOfferAnswerOptions {
}
@JS()
@anonymous
abstract class RTCOfferOptions{}
extension RTCOfferOptionsExtension on RTCOfferOptions {
  external bool get iceRestart;
  external set iceRestart(bool value);
  external bool get offerToReceiveAudio;
  external set offerToReceiveAudio(bool value);
  external bool get offerToReceiveVideo;
  external set offerToReceiveVideo(bool value);
}
@JS()
@anonymous
abstract class RTCOutboundRtpStreamStats{}
extension RTCOutboundRtpStreamStatsExtension on RTCOutboundRtpStreamStats {
  external bool get active;
  external set active(bool value);
  external num get firCount;
  external set firCount(num value);
  external num get frameHeight;
  external set frameHeight(num value);
  external num get frameWidth;
  external set frameWidth(num value);
  external num get framesEncoded;
  external set framesEncoded(num value);
  external num get framesPerSecond;
  external set framesPerSecond(num value);
  external num get framesSent;
  external set framesSent(num value);
  external num get headerBytesSent;
  external set headerBytesSent(num value);
  external num get hugeFramesSent;
  external set hugeFramesSent(num value);
  external num get keyFramesEncoded;
  external set keyFramesEncoded(num value);
  external String get mediaSourceId;
  external set mediaSourceId(String value);
  external String get mid;
  external set mid(String value);
  external num get nackCount;
  external set nackCount(num value);
  external num get pliCount;
  external set pliCount(num value);
  external num get qpSum;
  external set qpSum(num value);
  external Record<String, num> get qualityLimitationDurations;
  external set qualityLimitationDurations(Record<String, num> value);
  external RTCQualityLimitationReason get qualityLimitationReason;
  external set qualityLimitationReason(RTCQualityLimitationReason value);
  external num get qualityLimitationResolutionChanges;
  external set qualityLimitationResolutionChanges(num value);
  external String get remoteId;
  external set remoteId(String value);
  external num get retransmittedBytesSent;
  external set retransmittedBytesSent(num value);
  external num get retransmittedPacketsSent;
  external set retransmittedPacketsSent(num value);
  external String get rid;
  external set rid(String value);
  external num get rtxSsrc;
  external set rtxSsrc(num value);
  external String get scalabilityMode;
  external set scalabilityMode(String value);
  external num get targetBitrate;
  external set targetBitrate(num value);
  external num get totalEncodeTime;
  external set totalEncodeTime(num value);
  external num get totalEncodedBytesTarget;
  external set totalEncodedBytesTarget(num value);
  external num get totalPacketSendDelay;
  external set totalPacketSendDelay(num value);
}
@JS()
@anonymous
abstract class RTCPeerConnectionIceErrorEventInit{}
extension RTCPeerConnectionIceErrorEventInitExtension on RTCPeerConnectionIceErrorEventInit {
  external String? get address;
  external set address(String? value);
  external num get errorCode;
  external set errorCode(num value);
  external String get errorText;
  external set errorText(String value);
  external num? get port;
  external set port(num? value);
  external String get url;
  external set url(String value);
}
@JS()
@anonymous
abstract class RTCPeerConnectionIceEventInit{}
extension RTCPeerConnectionIceEventInitExtension on RTCPeerConnectionIceEventInit {
  external RTCIceCandidate? get candidate;
  external set candidate(RTCIceCandidate? value);
  external String? get url;
  external set url(String? value);
}
@JS()
@anonymous
abstract class RTCReceivedRtpStreamStats{}
extension RTCReceivedRtpStreamStatsExtension on RTCReceivedRtpStreamStats {
  external num get jitter;
  external set jitter(num value);
  external num get packetsLost;
  external set packetsLost(num value);
  external num get packetsReceived;
  external set packetsReceived(num value);
}
@JS()
@anonymous
abstract class RTCRtcpParameters{}
extension RTCRtcpParametersExtension on RTCRtcpParameters {
  external String get cname;
  external set cname(String value);
  external bool get reducedSize;
  external set reducedSize(bool value);
}
@JS()
@anonymous
abstract class RTCRtpCapabilities{}
extension RTCRtpCapabilitiesExtension on RTCRtpCapabilities {
  external List<RTCRtpCodec> get codecs;
  external set codecs(List<RTCRtpCodec> value);
  external List<RTCRtpHeaderExtensionCapability> get headerExtensions;
  external set headerExtensions(List<RTCRtpHeaderExtensionCapability> value);
}
@JS()
@anonymous
abstract class RTCRtpCodec{}
extension RTCRtpCodecExtension on RTCRtpCodec {
  external num get channels;
  external set channels(num value);
  external num get clockRate;
  external set clockRate(num value);
  external String get mimeType;
  external set mimeType(String value);
  external String get sdpFmtpLine;
  external set sdpFmtpLine(String value);
}
@JS()
@anonymous
abstract class RTCRtpCodecParameters{}
extension RTCRtpCodecParametersExtension on RTCRtpCodecParameters {
  external num get payloadType;
  external set payloadType(num value);
}
@JS()
@anonymous
abstract class RTCRtpCodingParameters{}
extension RTCRtpCodingParametersExtension on RTCRtpCodingParameters {
  external String get rid;
  external set rid(String value);
}
@JS()
@anonymous
abstract class RTCRtpContributingSource{}
extension RTCRtpContributingSourceExtension on RTCRtpContributingSource {
  external num get audioLevel;
  external set audioLevel(num value);
  external num get rtpTimestamp;
  external set rtpTimestamp(num value);
  external num get source;
  external set source(num value);
  external DOMHighResTimeStamp get timestamp;
  external set timestamp(DOMHighResTimeStamp value);
}
@JS()
@anonymous
abstract class RTCRtpEncodingParameters{}
extension RTCRtpEncodingParametersExtension on RTCRtpEncodingParameters {
  external bool get active;
  external set active(bool value);
  external num get maxBitrate;
  external set maxBitrate(num value);
  external num get maxFramerate;
  external set maxFramerate(num value);
  external RTCPriorityType get networkPriority;
  external set networkPriority(RTCPriorityType value);
  external RTCPriorityType get priority;
  external set priority(RTCPriorityType value);
  external num get scaleResolutionDownBy;
  external set scaleResolutionDownBy(num value);
}
@JS()
@anonymous
abstract class RTCRtpHeaderExtensionCapability{}
extension RTCRtpHeaderExtensionCapabilityExtension on RTCRtpHeaderExtensionCapability {
  external String get uri;
  external set uri(String value);
}
@JS()
@anonymous
abstract class RTCRtpHeaderExtensionParameters{}
extension RTCRtpHeaderExtensionParametersExtension on RTCRtpHeaderExtensionParameters {
  external bool get encrypted;
  external set encrypted(bool value);
  external num get id;
  external set id(num value);
  external String get uri;
  external set uri(String value);
}
@JS()
@anonymous
abstract class RTCRtpParameters{}
extension RTCRtpParametersExtension on RTCRtpParameters {
  external List<RTCRtpCodecParameters> get codecs;
  external set codecs(List<RTCRtpCodecParameters> value);
  external List<RTCRtpHeaderExtensionParameters> get headerExtensions;
  external set headerExtensions(List<RTCRtpHeaderExtensionParameters> value);
  external RTCRtcpParameters get rtcp;
  external set rtcp(RTCRtcpParameters value);
}
@JS()
@anonymous
abstract class RTCRtpReceiveParameters{}
extension RTCRtpReceiveParametersExtension on RTCRtpReceiveParameters {
}
@JS()
@anonymous
abstract class RTCRtpSendParameters{}
extension RTCRtpSendParametersExtension on RTCRtpSendParameters {
  external RTCDegradationPreference get degradationPreference;
  external set degradationPreference(RTCDegradationPreference value);
  external List<RTCRtpEncodingParameters> get encodings;
  external set encodings(List<RTCRtpEncodingParameters> value);
  external String get transactionId;
  external set transactionId(String value);
}
@JS()
@anonymous
abstract class RTCRtpStreamStats{}
extension RTCRtpStreamStatsExtension on RTCRtpStreamStats {
  external String get codecId;
  external set codecId(String value);
  external String get kind;
  external set kind(String value);
  external num get ssrc;
  external set ssrc(num value);
  external String get transportId;
  external set transportId(String value);
}
@JS()
@anonymous
abstract class RTCRtpSynchronizationSource{}
extension RTCRtpSynchronizationSourceExtension on RTCRtpSynchronizationSource {
}
@JS()
@anonymous
abstract class RTCRtpTransceiverInit{}
extension RTCRtpTransceiverInitExtension on RTCRtpTransceiverInit {
  external RTCRtpTransceiverDirection get direction;
  external set direction(RTCRtpTransceiverDirection value);
  external List<RTCRtpEncodingParameters> get sendEncodings;
  external set sendEncodings(List<RTCRtpEncodingParameters> value);
  external List<MediaStream> get streams;
  external set streams(List<MediaStream> value);
}
@JS()
@anonymous
abstract class RTCSentRtpStreamStats{}
extension RTCSentRtpStreamStatsExtension on RTCSentRtpStreamStats {
  external num get bytesSent;
  external set bytesSent(num value);
  external num get packetsSent;
  external set packetsSent(num value);
}
@JS()
@anonymous
abstract class RTCSessionDescriptionInit{}
extension RTCSessionDescriptionInitExtension on RTCSessionDescriptionInit {
  external String get sdp;
  external set sdp(String value);
  external RTCSdpType get type;
  external set type(RTCSdpType value);
}
@JS()
@anonymous
abstract class RTCSetParameterOptions{}
extension RTCSetParameterOptionsExtension on RTCSetParameterOptions {
}
@JS()
@anonymous
abstract class RTCStats{}
extension RTCStatsExtension on RTCStats {
  external String get id;
  external set id(String value);
  external DOMHighResTimeStamp get timestamp;
  external set timestamp(DOMHighResTimeStamp value);
  external RTCStatsType get type;
  external set type(RTCStatsType value);
}
@JS()
@anonymous
abstract class RTCTrackEventInit{}
extension RTCTrackEventInitExtension on RTCTrackEventInit {
  external RTCRtpReceiver get receiver;
  external set receiver(RTCRtpReceiver value);
  external List<MediaStream> get streams;
  external set streams(List<MediaStream> value);
  external MediaStreamTrack get track;
  external set track(MediaStreamTrack value);
  external RTCRtpTransceiver get transceiver;
  external set transceiver(RTCRtpTransceiver value);
}
@JS()
@anonymous
abstract class RTCTransportStats{}
extension RTCTransportStatsExtension on RTCTransportStats {
  external num get bytesReceived;
  external set bytesReceived(num value);
  external num get bytesSent;
  external set bytesSent(num value);
  external String get dtlsCipher;
  external set dtlsCipher(String value);
  external RTCDtlsRole get dtlsRole;
  external set dtlsRole(RTCDtlsRole value);
  external RTCDtlsTransportState get dtlsState;
  external set dtlsState(RTCDtlsTransportState value);
  external String get iceLocalUsernameFragment;
  external set iceLocalUsernameFragment(String value);
  external RTCIceRole get iceRole;
  external set iceRole(RTCIceRole value);
  external RTCIceTransportState get iceState;
  external set iceState(RTCIceTransportState value);
  external String get localCertificateId;
  external set localCertificateId(String value);
  external num get packetsReceived;
  external set packetsReceived(num value);
  external num get packetsSent;
  external set packetsSent(num value);
  external String get remoteCertificateId;
  external set remoteCertificateId(String value);
  external num get selectedCandidatePairChanges;
  external set selectedCandidatePairChanges(num value);
  external String get selectedCandidatePairId;
  external set selectedCandidatePairId(String value);
  external String get srtpCipher;
  external set srtpCipher(String value);
  external String get tlsVersion;
  external set tlsVersion(String value);
}
@JS()
@anonymous
abstract class ReadableStreamGetReaderOptions{}
extension ReadableStreamGetReaderOptionsExtension on ReadableStreamGetReaderOptions {
  external ReadableStreamReaderMode get mode;
  external set mode(ReadableStreamReaderMode value);
}
@JS()
@anonymous
abstract class ReadableStreamIteratorOptions{}
extension ReadableStreamIteratorOptionsExtension on ReadableStreamIteratorOptions {
  external bool get preventCancel;
  external set preventCancel(bool value);
}
@JS()
@anonymous
abstract class ReadableStreamReadDoneResult{}
extension ReadableStreamReadDoneResultExtension on ReadableStreamReadDoneResult {
  external bool get done;
  external set done(bool value);
  external T get value;
  external set value(T value);
}
@JS()
@anonymous
abstract class ReadableStreamReadValueResult{}
extension ReadableStreamReadValueResultExtension on ReadableStreamReadValueResult {
  external bool get done;
  external set done(bool value);
  external T get value;
  external set value(T value);
}
@JS()
@anonymous
abstract class ReadableWritablePair{}
extension ReadableWritablePairExtension on ReadableWritablePair {
  external ReadableStream<R> get readable;
  external set readable(ReadableStream<R> value);
  external WritableStream<W> get writable;
  external set writable(WritableStream<W> value);
}
@JS()
@anonymous
abstract class RegistrationOptions{}
extension RegistrationOptionsExtension on RegistrationOptions {
  external String get scope;
  external set scope(String value);
  external WorkerType get type;
  external set type(WorkerType value);
  external ServiceWorkerUpdateViaCache get updateViaCache;
  external set updateViaCache(ServiceWorkerUpdateViaCache value);
}
@JS()
@anonymous
abstract class ReportingObserverOptions{}
extension ReportingObserverOptionsExtension on ReportingObserverOptions {
  external bool get buffered;
  external set buffered(bool value);
  external List<String> get types;
  external set types(List<String> value);
}
@JS()
@anonymous
abstract class RequestInit{}
extension RequestInitExtension on RequestInit {
  external BodyInit? get body;
  external set body(BodyInit? value);
  external RequestCache get cache;
  external set cache(RequestCache value);
  external RequestCredentials get credentials;
  external set credentials(RequestCredentials value);
  external HeadersInit get headers;
  external set headers(HeadersInit value);
  external String get integrity;
  external set integrity(String value);
  external bool get keepalive;
  external set keepalive(bool value);
  external String get method;
  external set method(String value);
  external RequestMode get mode;
  external set mode(RequestMode value);
  external RequestPriority get priority;
  external set priority(RequestPriority value);
  external RequestRedirect get redirect;
  external set redirect(RequestRedirect value);
  external String get referrer;
  external set referrer(String value);
  external ReferrerPolicy get referrerPolicy;
  external set referrerPolicy(ReferrerPolicy value);
  external AbortSignal? get signal;
  external set signal(AbortSignal? value);
  external dynamic get window;
  external set window(dynamic value);
}
@JS()
@anonymous
abstract class ResizeObserverOptions{}
extension ResizeObserverOptionsExtension on ResizeObserverOptions {
  external ResizeObserverBoxOptions get box;
  external set box(ResizeObserverBoxOptions value);
}
@JS()
@anonymous
abstract class ResponseInit{}
extension ResponseInitExtension on ResponseInit {
  external HeadersInit get headers;
  external set headers(HeadersInit value);
  external num get status;
  external set status(num value);
  external String get statusText;
  external set statusText(String value);
}
@JS()
@anonymous
abstract class RsaHashedImportParams{}
extension RsaHashedImportParamsExtension on RsaHashedImportParams {
  external HashAlgorithmIdentifier get hash;
  external set hash(HashAlgorithmIdentifier value);
}
@JS()
@anonymous
abstract class RsaHashedKeyAlgorithm{}
extension RsaHashedKeyAlgorithmExtension on RsaHashedKeyAlgorithm {
  external KeyAlgorithm get hash;
  external set hash(KeyAlgorithm value);
}
@JS()
@anonymous
abstract class RsaHashedKeyGenParams{}
extension RsaHashedKeyGenParamsExtension on RsaHashedKeyGenParams {
  external HashAlgorithmIdentifier get hash;
  external set hash(HashAlgorithmIdentifier value);
}
@JS()
@anonymous
abstract class RsaKeyAlgorithm{}
extension RsaKeyAlgorithmExtension on RsaKeyAlgorithm {
  external num get modulusLength;
  external set modulusLength(num value);
  external BigInteger get publicExponent;
  external set publicExponent(BigInteger value);
}
@JS()
@anonymous
abstract class RsaKeyGenParams{}
extension RsaKeyGenParamsExtension on RsaKeyGenParams {
  external num get modulusLength;
  external set modulusLength(num value);
  external BigInteger get publicExponent;
  external set publicExponent(BigInteger value);
}
@JS()
@anonymous
abstract class RsaOaepParams{}
extension RsaOaepParamsExtension on RsaOaepParams {
  external BufferSource get label;
  external set label(BufferSource value);
}
@JS()
@anonymous
abstract class RsaOtherPrimesInfo{}
extension RsaOtherPrimesInfoExtension on RsaOtherPrimesInfo {
  external String get d;
  external set d(String value);
  external String get r;
  external set r(String value);
  external String get t;
  external set t(String value);
}
@JS()
@anonymous
abstract class RsaPssParams{}
extension RsaPssParamsExtension on RsaPssParams {
  external num get saltLength;
  external set saltLength(num value);
}
@JS()
@anonymous
abstract class SVGBoundingBoxOptions{}
extension SVGBoundingBoxOptionsExtension on SVGBoundingBoxOptions {
  external bool get clipped;
  external set clipped(bool value);
  external bool get fill;
  external set fill(bool value);
  external bool get markers;
  external set markers(bool value);
  external bool get stroke;
  external set stroke(bool value);
}
@JS()
@anonymous
abstract class ScrollIntoViewOptions{}
extension ScrollIntoViewOptionsExtension on ScrollIntoViewOptions {
  external ScrollLogicalPosition get block;
  external set block(ScrollLogicalPosition value);
  external ScrollLogicalPosition get inline;
  external set inline(ScrollLogicalPosition value);
}
@JS()
@anonymous
abstract class ScrollOptions{}
extension ScrollOptionsExtension on ScrollOptions {
  external ScrollBehavior get behavior;
  external set behavior(ScrollBehavior value);
}
@JS()
@anonymous
abstract class ScrollToOptions{}
extension ScrollToOptionsExtension on ScrollToOptions {
  external num get left;
  external set left(num value);
  external num get top;
  external set top(num value);
}
@JS()
@anonymous
abstract class SecurityPolicyViolationEventInit{}
extension SecurityPolicyViolationEventInitExtension on SecurityPolicyViolationEventInit {
  external String get blockedURI;
  external set blockedURI(String value);
  external num get columnNumber;
  external set columnNumber(num value);
  external SecurityPolicyViolationEventDisposition get disposition;
  external set disposition(SecurityPolicyViolationEventDisposition value);
  external String get documentURI;
  external set documentURI(String value);
  external String get effectiveDirective;
  external set effectiveDirective(String value);
  external num get lineNumber;
  external set lineNumber(num value);
  external String get originalPolicy;
  external set originalPolicy(String value);
  external String get referrer;
  external set referrer(String value);
  external String get sample;
  external set sample(String value);
  external String get sourceFile;
  external set sourceFile(String value);
  external num get statusCode;
  external set statusCode(num value);
  external String get violatedDirective;
  external set violatedDirective(String value);
}
@JS()
@anonymous
abstract class ShadowRootInit{}
extension ShadowRootInitExtension on ShadowRootInit {
  external bool get delegatesFocus;
  external set delegatesFocus(bool value);
  external ShadowRootMode get mode;
  external set mode(ShadowRootMode value);
  external bool get serializable;
  external set serializable(bool value);
  external SlotAssignmentMode get slotAssignment;
  external set slotAssignment(SlotAssignmentMode value);
}
@JS()
@anonymous
abstract class ShareData{}
extension ShareDataExtension on ShareData {
  external List<File> get files;
  external set files(List<File> value);
  external String get text;
  external set text(String value);
  external String get title;
  external set title(String value);
  external String get url;
  external set url(String value);
}
@JS()
@anonymous
abstract class SpeechSynthesisErrorEventInit{}
extension SpeechSynthesisErrorEventInitExtension on SpeechSynthesisErrorEventInit {
  external SpeechSynthesisErrorCode get error;
  external set error(SpeechSynthesisErrorCode value);
}
@JS()
@anonymous
abstract class SpeechSynthesisEventInit{}
extension SpeechSynthesisEventInitExtension on SpeechSynthesisEventInit {
  external num get charIndex;
  external set charIndex(num value);
  external num get charLength;
  external set charLength(num value);
  external num get elapsedTime;
  external set elapsedTime(num value);
  external String get name;
  external set name(String value);
  external SpeechSynthesisUtterance get utterance;
  external set utterance(SpeechSynthesisUtterance value);
}
@JS()
@anonymous
abstract class StaticRangeInit{}
extension StaticRangeInitExtension on StaticRangeInit {
  external Node get endContainer;
  external set endContainer(Node value);
  external num get endOffset;
  external set endOffset(num value);
  external Node get startContainer;
  external set startContainer(Node value);
  external num get startOffset;
  external set startOffset(num value);
}
@JS()
@anonymous
abstract class StereoPannerOptions{}
extension StereoPannerOptionsExtension on StereoPannerOptions {
  external num get pan;
  external set pan(num value);
}
@JS()
@anonymous
abstract class StorageEstimate{}
extension StorageEstimateExtension on StorageEstimate {
  external num get quota;
  external set quota(num value);
  external num get usage;
  external set usage(num value);
}
@JS()
@anonymous
abstract class StorageEventInit{}
extension StorageEventInitExtension on StorageEventInit {
  external String? get key;
  external set key(String? value);
  external String? get newValue;
  external set newValue(String? value);
  external String? get oldValue;
  external set oldValue(String? value);
  external Storage? get storageArea;
  external set storageArea(Storage? value);
  external String get url;
  external set url(String value);
}
@JS()
@anonymous
abstract class StreamPipeOptions{}
extension StreamPipeOptionsExtension on StreamPipeOptions {
  external bool get preventAbort;
  external set preventAbort(bool value);
  external bool get preventCancel;
  external set preventCancel(bool value);
  external bool get preventClose;
  external set preventClose(bool value);
  external AbortSignal get signal;
  external set signal(AbortSignal value);
}
@JS()
@anonymous
abstract class StructuredSerializeOptions{}
extension StructuredSerializeOptionsExtension on StructuredSerializeOptions {
  external List<Transferable> get transfer;
  external set transfer(List<Transferable> value);
}
@JS()
@anonymous
abstract class SubmitEventInit{}
extension SubmitEventInitExtension on SubmitEventInit {
  external HTMLElement? get submitter;
  external set submitter(HTMLElement? value);
}
@JS()
@anonymous
abstract class TextDecodeOptions{}
extension TextDecodeOptionsExtension on TextDecodeOptions {
  external bool get stream;
  external set stream(bool value);
}
@JS()
@anonymous
abstract class TextDecoderOptions{}
extension TextDecoderOptionsExtension on TextDecoderOptions {
  external bool get fatal;
  external set fatal(bool value);
  external bool get ignoreBOM;
  external set ignoreBOM(bool value);
}
@JS()
@anonymous
abstract class TextEncoderEncodeIntoResult{}
extension TextEncoderEncodeIntoResultExtension on TextEncoderEncodeIntoResult {
  external num get read;
  external set read(num value);
  external num get written;
  external set written(num value);
}
@JS()
@anonymous
abstract class ToggleEventInit{}
extension ToggleEventInitExtension on ToggleEventInit {
  external String get newState;
  external set newState(String value);
  external String get oldState;
  external set oldState(String value);
}
@JS()
@anonymous
abstract class TouchEventInit{}
extension TouchEventInitExtension on TouchEventInit {
  external List<Touch> get changedTouches;
  external set changedTouches(List<Touch> value);
  external List<Touch> get targetTouches;
  external set targetTouches(List<Touch> value);
  external List<Touch> get touches;
  external set touches(List<Touch> value);
}
@JS()
@anonymous
abstract class TouchInit{}
extension TouchInitExtension on TouchInit {
  external num get altitudeAngle;
  external set altitudeAngle(num value);
  external num get azimuthAngle;
  external set azimuthAngle(num value);
  external num get clientX;
  external set clientX(num value);
  external num get clientY;
  external set clientY(num value);
  external num get force;
  external set force(num value);
  external num get identifier;
  external set identifier(num value);
  external num get pageX;
  external set pageX(num value);
  external num get pageY;
  external set pageY(num value);
  external num get radiusX;
  external set radiusX(num value);
  external num get radiusY;
  external set radiusY(num value);
  external num get rotationAngle;
  external set rotationAngle(num value);
  external num get screenX;
  external set screenX(num value);
  external num get screenY;
  external set screenY(num value);
  external EventTarget get target;
  external set target(EventTarget value);
  external TouchType get touchType;
  external set touchType(TouchType value);
}
@JS()
@anonymous
abstract class TrackEventInit{}
extension TrackEventInitExtension on TrackEventInit {
  external TextTrack? get track;
  external set track(TextTrack? value);
}
@JS()
@anonymous
abstract class Transformer{}
extension TransformerExtension on Transformer {
  external TransformerFlushCallback<O> get flush;
  external set flush(TransformerFlushCallback<O> value);
  external dynamic get readableType;
  external set readableType(dynamic value);
  external TransformerStartCallback<O> get start;
  external set start(TransformerStartCallback<O> value);
  external TransformerTransformCallback<I, O> get transform;
  external set transform(TransformerTransformCallback<I, O> value);
  external dynamic get writableType;
  external set writableType(dynamic value);
}
@JS()
@anonymous
abstract class TransitionEventInit{}
extension TransitionEventInitExtension on TransitionEventInit {
  external num get elapsedTime;
  external set elapsedTime(num value);
  external String get propertyName;
  external set propertyName(String value);
  external String get pseudoElement;
  external set pseudoElement(String value);
}
@JS()
@anonymous
abstract class UIEventInit{}
extension UIEventInitExtension on UIEventInit {
  external num get detail;
  external set detail(num value);
  external Window? get view;
  external set view(Window? value);
  external num get which;
  external set which(num value);
}
@JS()
@anonymous
abstract class ULongRange{}
extension ULongRangeExtension on ULongRange {
  external num get max;
  external set max(num value);
  external num get min;
  external set min(num value);
}
@JS()
@anonymous
abstract class UnderlyingByteSource{}
extension UnderlyingByteSourceExtension on UnderlyingByteSource {
  external num get autoAllocateChunkSize;
  external set autoAllocateChunkSize(num value);
  external UnderlyingSourceCancelCallback get cancel;
  external set cancel(UnderlyingSourceCancelCallback value);
  external dynamic /* void|PromiseLike<void> */ Function(ReadableByteStreamController) get pull;
  external set pull(dynamic /* void|PromiseLike<void> */ Function(ReadableByteStreamController) value);
  external dynamic Function(ReadableByteStreamController) get start;
  external set start(dynamic Function(ReadableByteStreamController) value);
  external String get type;
  external set type(String value);
}
@JS()
@anonymous
abstract class UnderlyingDefaultSource{}
extension UnderlyingDefaultSourceExtension on UnderlyingDefaultSource {
  external UnderlyingSourceCancelCallback get cancel;
  external set cancel(UnderlyingSourceCancelCallback value);
  external dynamic /* void|PromiseLike<void> */ Function(ReadableStreamDefaultController<R>) get pull;
  external set pull(dynamic /* void|PromiseLike<void> */ Function(ReadableStreamDefaultController<R>) value);
  external dynamic Function(ReadableStreamDefaultController<R>) get start;
  external set start(dynamic Function(ReadableStreamDefaultController<R>) value);
  external dynamic get type;
  external set type(dynamic value);
}
@JS()
@anonymous
abstract class UnderlyingSink{}
extension UnderlyingSinkExtension on UnderlyingSink {
  external UnderlyingSinkAbortCallback get abort;
  external set abort(UnderlyingSinkAbortCallback value);
  external UnderlyingSinkCloseCallback get close;
  external set close(UnderlyingSinkCloseCallback value);
  external UnderlyingSinkStartCallback get start;
  external set start(UnderlyingSinkStartCallback value);
  external dynamic get type;
  external set type(dynamic value);
  external UnderlyingSinkWriteCallback<W> get write;
  external set write(UnderlyingSinkWriteCallback<W> value);
}
@JS()
@anonymous
abstract class UnderlyingSource{}
extension UnderlyingSourceExtension on UnderlyingSource {
  external num get autoAllocateChunkSize;
  external set autoAllocateChunkSize(num value);
  external UnderlyingSourceCancelCallback get cancel;
  external set cancel(UnderlyingSourceCancelCallback value);
  external UnderlyingSourcePullCallback<R> get pull;
  external set pull(UnderlyingSourcePullCallback<R> value);
  external UnderlyingSourceStartCallback<R> get start;
  external set start(UnderlyingSourceStartCallback<R> value);
  external ReadableStreamType get type;
  external set type(ReadableStreamType value);
}
@JS()
@anonymous
abstract class ValidityStateFlags{}
extension ValidityStateFlagsExtension on ValidityStateFlags {
  external bool get badInput;
  external set badInput(bool value);
  external bool get customError;
  external set customError(bool value);
  external bool get patternMismatch;
  external set patternMismatch(bool value);
  external bool get rangeOverflow;
  external set rangeOverflow(bool value);
  external bool get rangeUnderflow;
  external set rangeUnderflow(bool value);
  external bool get stepMismatch;
  external set stepMismatch(bool value);
  external bool get tooLong;
  external set tooLong(bool value);
  external bool get tooShort;
  external set tooShort(bool value);
  external bool get typeMismatch;
  external set typeMismatch(bool value);
  external bool get valueMissing;
  external set valueMissing(bool value);
}
@JS()
@anonymous
abstract class VideoColorSpaceInit{}
extension VideoColorSpaceInitExtension on VideoColorSpaceInit {
  external bool? get fullRange;
  external set fullRange(bool? value);
  external VideoMatrixCoefficients? get matrix;
  external set matrix(VideoMatrixCoefficients? value);
  external VideoColorPrimaries? get primaries;
  external set primaries(VideoColorPrimaries? value);
  external VideoTransferCharacteristics? get transfer;
  external set transfer(VideoTransferCharacteristics? value);
}
@JS()
@anonymous
abstract class VideoConfiguration{}
extension VideoConfigurationExtension on VideoConfiguration {
  external num get bitrate;
  external set bitrate(num value);
  external ColorGamut get colorGamut;
  external set colorGamut(ColorGamut value);
  external String get contentType;
  external set contentType(String value);
  external num get framerate;
  external set framerate(num value);
  external bool get hasAlphaChannel;
  external set hasAlphaChannel(bool value);
  external HdrMetadataType get hdrMetadataType;
  external set hdrMetadataType(HdrMetadataType value);
  external num get height;
  external set height(num value);
  external String get scalabilityMode;
  external set scalabilityMode(String value);
  external TransferFunction get transferFunction;
  external set transferFunction(TransferFunction value);
  external num get width;
  external set width(num value);
}
@JS()
@anonymous
abstract class VideoDecoderConfig{}
extension VideoDecoderConfigExtension on VideoDecoderConfig {
  external String get codec;
  external set codec(String value);
  external num get codedHeight;
  external set codedHeight(num value);
  external num get codedWidth;
  external set codedWidth(num value);
  external VideoColorSpaceInit get colorSpace;
  external set colorSpace(VideoColorSpaceInit value);
  external AllowSharedBufferSource get description;
  external set description(AllowSharedBufferSource value);
  external num get displayAspectHeight;
  external set displayAspectHeight(num value);
  external num get displayAspectWidth;
  external set displayAspectWidth(num value);
  external HardwareAcceleration get hardwareAcceleration;
  external set hardwareAcceleration(HardwareAcceleration value);
  external bool get optimizeForLatency;
  external set optimizeForLatency(bool value);
}
@JS()
@anonymous
abstract class VideoDecoderInit{}
extension VideoDecoderInitExtension on VideoDecoderInit {
  external WebCodecsErrorCallback get error;
  external set error(WebCodecsErrorCallback value);
  external VideoFrameOutputCallback get output;
  external set output(VideoFrameOutputCallback value);
}
@JS()
@anonymous
abstract class VideoDecoderSupport{}
extension VideoDecoderSupportExtension on VideoDecoderSupport {
  external VideoDecoderConfig get config;
  external set config(VideoDecoderConfig value);
  external bool get supported;
  external set supported(bool value);
}
@JS()
@anonymous
abstract class VideoEncoderConfig{}
extension VideoEncoderConfigExtension on VideoEncoderConfig {
  external AlphaOption get alpha;
  external set alpha(AlphaOption value);
  external AvcEncoderConfig get avc;
  external set avc(AvcEncoderConfig value);
  external num get bitrate;
  external set bitrate(num value);
  external VideoEncoderBitrateMode get bitrateMode;
  external set bitrateMode(VideoEncoderBitrateMode value);
  external String get codec;
  external set codec(String value);
  external String get contentHint;
  external set contentHint(String value);
  external num get displayHeight;
  external set displayHeight(num value);
  external num get displayWidth;
  external set displayWidth(num value);
  external num get framerate;
  external set framerate(num value);
  external HardwareAcceleration get hardwareAcceleration;
  external set hardwareAcceleration(HardwareAcceleration value);
  external num get height;
  external set height(num value);
  external LatencyMode get latencyMode;
  external set latencyMode(LatencyMode value);
  external String get scalabilityMode;
  external set scalabilityMode(String value);
  external num get width;
  external set width(num value);
}
@JS()
@anonymous
abstract class VideoEncoderEncodeOptions{}
extension VideoEncoderEncodeOptionsExtension on VideoEncoderEncodeOptions {
  external VideoEncoderEncodeOptionsForAvc get avc;
  external set avc(VideoEncoderEncodeOptionsForAvc value);
  external bool get keyFrame;
  external set keyFrame(bool value);
}
@JS()
@anonymous
abstract class VideoEncoderEncodeOptionsForAvc{}
extension VideoEncoderEncodeOptionsForAvcExtension on VideoEncoderEncodeOptionsForAvc {
  external num? get quantizer;
  external set quantizer(num? value);
}
@JS()
@anonymous
abstract class VideoEncoderInit{}
extension VideoEncoderInitExtension on VideoEncoderInit {
  external WebCodecsErrorCallback get error;
  external set error(WebCodecsErrorCallback value);
  external EncodedVideoChunkOutputCallback get output;
  external set output(EncodedVideoChunkOutputCallback value);
}
@JS()
@anonymous
abstract class VideoEncoderSupport{}
extension VideoEncoderSupportExtension on VideoEncoderSupport {
  external VideoEncoderConfig get config;
  external set config(VideoEncoderConfig value);
  external bool get supported;
  external set supported(bool value);
}
@JS()
@anonymous
abstract class VideoFrameBufferInit{}
extension VideoFrameBufferInitExtension on VideoFrameBufferInit {
  external num get codedHeight;
  external set codedHeight(num value);
  external num get codedWidth;
  external set codedWidth(num value);
  external VideoColorSpaceInit get colorSpace;
  external set colorSpace(VideoColorSpaceInit value);
  external num get displayHeight;
  external set displayHeight(num value);
  external num get displayWidth;
  external set displayWidth(num value);
  external num get duration;
  external set duration(num value);
  external VideoPixelFormat get format;
  external set format(VideoPixelFormat value);
  external List<PlaneLayout> get layout;
  external set layout(List<PlaneLayout> value);
  external num get timestamp;
  external set timestamp(num value);
  external DOMRectInit get visibleRect;
  external set visibleRect(DOMRectInit value);
}
@JS()
@anonymous
abstract class VideoFrameCallbackMetadata{}
extension VideoFrameCallbackMetadataExtension on VideoFrameCallbackMetadata {
  external DOMHighResTimeStamp get captureTime;
  external set captureTime(DOMHighResTimeStamp value);
  external DOMHighResTimeStamp get expectedDisplayTime;
  external set expectedDisplayTime(DOMHighResTimeStamp value);
  external num get height;
  external set height(num value);
  external num get mediaTime;
  external set mediaTime(num value);
  external DOMHighResTimeStamp get presentationTime;
  external set presentationTime(DOMHighResTimeStamp value);
  external num get presentedFrames;
  external set presentedFrames(num value);
  external num get processingDuration;
  external set processingDuration(num value);
  external DOMHighResTimeStamp get receiveTime;
  external set receiveTime(DOMHighResTimeStamp value);
  external num get rtpTimestamp;
  external set rtpTimestamp(num value);
  external num get width;
  external set width(num value);
}
@JS()
@anonymous
abstract class VideoFrameCopyToOptions{}
extension VideoFrameCopyToOptionsExtension on VideoFrameCopyToOptions {
  external PredefinedColorSpace get colorSpace;
  external set colorSpace(PredefinedColorSpace value);
  external VideoPixelFormat get format;
  external set format(VideoPixelFormat value);
  external List<PlaneLayout> get layout;
  external set layout(List<PlaneLayout> value);
  external DOMRectInit get rect;
  external set rect(DOMRectInit value);
}
@JS()
@anonymous
abstract class VideoFrameInit{}
extension VideoFrameInitExtension on VideoFrameInit {
  external AlphaOption get alpha;
  external set alpha(AlphaOption value);
  external num get displayHeight;
  external set displayHeight(num value);
  external num get displayWidth;
  external set displayWidth(num value);
  external num get duration;
  external set duration(num value);
  external num get timestamp;
  external set timestamp(num value);
  external DOMRectInit get visibleRect;
  external set visibleRect(DOMRectInit value);
}
@JS()
@anonymous
abstract class WaveShaperOptions{}
extension WaveShaperOptionsExtension on WaveShaperOptions {
  external dynamic /* List<num>|Float32Array */ get curve;
  external set curve(dynamic /* List<num>|Float32Array */ value);
  external OverSampleType get oversample;
  external set oversample(OverSampleType value);
}
@JS()
@anonymous
abstract class WebGLContextAttributes{}
extension WebGLContextAttributesExtension on WebGLContextAttributes {
  external bool get alpha;
  external set alpha(bool value);
  external bool get antialias;
  external set antialias(bool value);
  external bool get depth;
  external set depth(bool value);
  external bool get desynchronized;
  external set desynchronized(bool value);
  external bool get failIfMajorPerformanceCaveat;
  external set failIfMajorPerformanceCaveat(bool value);
  external WebGLPowerPreference get powerPreference;
  external set powerPreference(WebGLPowerPreference value);
  external bool get premultipliedAlpha;
  external set premultipliedAlpha(bool value);
  external bool get preserveDrawingBuffer;
  external set preserveDrawingBuffer(bool value);
  external bool get stencil;
  external set stencil(bool value);
}
@JS()
@anonymous
abstract class WebGLContextEventInit{}
extension WebGLContextEventInitExtension on WebGLContextEventInit {
  external String get statusMessage;
  external set statusMessage(String value);
}
@JS()
@anonymous
abstract class WebTransportCloseInfo{}
extension WebTransportCloseInfoExtension on WebTransportCloseInfo {
  external num get closeCode;
  external set closeCode(num value);
  external String get reason;
  external set reason(String value);
}
@JS()
@anonymous
abstract class WebTransportErrorOptions{}
extension WebTransportErrorOptionsExtension on WebTransportErrorOptions {
  external WebTransportErrorSource get source;
  external set source(WebTransportErrorSource value);
  external num? get streamErrorCode;
  external set streamErrorCode(num? value);
}
@JS()
@anonymous
abstract class WebTransportHash{}
extension WebTransportHashExtension on WebTransportHash {
  external String get algorithm;
  external set algorithm(String value);
  external BufferSource get value;
  external set value(BufferSource value);
}
@JS()
@anonymous
abstract class WebTransportOptions{}
extension WebTransportOptionsExtension on WebTransportOptions {
  external bool get allowPooling;
  external set allowPooling(bool value);
  external WebTransportCongestionControl get congestionControl;
  external set congestionControl(WebTransportCongestionControl value);
  external bool get requireUnreliable;
  external set requireUnreliable(bool value);
  external List<WebTransportHash> get serverCertificateHashes;
  external set serverCertificateHashes(List<WebTransportHash> value);
}
@JS()
@anonymous
abstract class WebTransportSendStreamOptions{}
extension WebTransportSendStreamOptionsExtension on WebTransportSendStreamOptions {
  external num get sendOrder;
  external set sendOrder(num value);
}
@JS()
@anonymous
abstract class WheelEventInit{}
extension WheelEventInitExtension on WheelEventInit {
  external num get deltaMode;
  external set deltaMode(num value);
  external num get deltaX;
  external set deltaX(num value);
  external num get deltaY;
  external set deltaY(num value);
  external num get deltaZ;
  external set deltaZ(num value);
}
@JS()
@anonymous
abstract class WindowPostMessageOptions{}
extension WindowPostMessageOptionsExtension on WindowPostMessageOptions {
  external String get targetOrigin;
  external set targetOrigin(String value);
}
@JS()
@anonymous
abstract class WorkerOptions{}
extension WorkerOptionsExtension on WorkerOptions {
  external RequestCredentials get credentials;
  external set credentials(RequestCredentials value);
  external String get name;
  external set name(String value);
  external WorkerType get type;
  external set type(WorkerType value);
}
@JS()
@anonymous
abstract class WorkletOptions{}
extension WorkletOptionsExtension on WorkletOptions {
  external RequestCredentials get credentials;
  external set credentials(RequestCredentials value);
}
@JS()
@anonymous
abstract class WriteParams{}
extension WriteParamsExtension on WriteParams {
  external dynamic /* BufferSource|Blob|String */ get data;
  external set data(dynamic /* BufferSource|Blob|String */ value);
  external num? get position;
  external set position(num? value);
  external num? get size;
  external set size(num? value);
  external WriteCommandType get type;
  external set type(WriteCommandType value);
}
@JS("NodeFilter")
external dynamic NodeFilter;
typedef XPathNSResolver = dynamic /* String? Function(String?)|dynamic */;
@JS()
@anonymous
abstract class ANGLE_instanced_arrays{}
extension ANGLE_instanced_arraysExtension on ANGLE_instanced_arrays {
  external num get VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE;
  external void drawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
  external void drawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, GLintptr offset, GLsizei primcount);
  external void vertexAttribDivisorANGLE(GLuint index, GLuint divisor);
}
@JS()
@anonymous
abstract class ARIAMixin{}
extension ARIAMixinExtension on ARIAMixin {
  external String? get ariaAtomic;
  external set ariaAtomic(String? value);
  external String? get ariaAutoComplete;
  external set ariaAutoComplete(String? value);
  external String? get ariaBrailleLabel;
  external set ariaBrailleLabel(String? value);
  external String? get ariaBrailleRoleDescription;
  external set ariaBrailleRoleDescription(String? value);
  external String? get ariaBusy;
  external set ariaBusy(String? value);
  external String? get ariaChecked;
  external set ariaChecked(String? value);
  external String? get ariaColCount;
  external set ariaColCount(String? value);
  external String? get ariaColIndex;
  external set ariaColIndex(String? value);
  external String? get ariaColIndexText;
  external set ariaColIndexText(String? value);
  external String? get ariaColSpan;
  external set ariaColSpan(String? value);
  external String? get ariaCurrent;
  external set ariaCurrent(String? value);
  external String? get ariaDescription;
  external set ariaDescription(String? value);
  external String? get ariaDisabled;
  external set ariaDisabled(String? value);
  external String? get ariaExpanded;
  external set ariaExpanded(String? value);
  external String? get ariaHasPopup;
  external set ariaHasPopup(String? value);
  external String? get ariaHidden;
  external set ariaHidden(String? value);
  external String? get ariaInvalid;
  external set ariaInvalid(String? value);
  external String? get ariaKeyShortcuts;
  external set ariaKeyShortcuts(String? value);
  external String? get ariaLabel;
  external set ariaLabel(String? value);
  external String? get ariaLevel;
  external set ariaLevel(String? value);
  external String? get ariaLive;
  external set ariaLive(String? value);
  external String? get ariaModal;
  external set ariaModal(String? value);
  external String? get ariaMultiLine;
  external set ariaMultiLine(String? value);
  external String? get ariaMultiSelectable;
  external set ariaMultiSelectable(String? value);
  external String? get ariaOrientation;
  external set ariaOrientation(String? value);
  external String? get ariaPlaceholder;
  external set ariaPlaceholder(String? value);
  external String? get ariaPosInSet;
  external set ariaPosInSet(String? value);
  external String? get ariaPressed;
  external set ariaPressed(String? value);
  external String? get ariaReadOnly;
  external set ariaReadOnly(String? value);
  external String? get ariaRelevant;
  external set ariaRelevant(String? value);
  external String? get ariaRequired;
  external set ariaRequired(String? value);
  external String? get ariaRoleDescription;
  external set ariaRoleDescription(String? value);
  external String? get ariaRowCount;
  external set ariaRowCount(String? value);
  external String? get ariaRowIndex;
  external set ariaRowIndex(String? value);
  external String? get ariaRowIndexText;
  external set ariaRowIndexText(String? value);
  external String? get ariaRowSpan;
  external set ariaRowSpan(String? value);
  external String? get ariaSelected;
  external set ariaSelected(String? value);
  external String? get ariaSetSize;
  external set ariaSetSize(String? value);
  external String? get ariaSort;
  external set ariaSort(String? value);
  external String? get ariaValueMax;
  external set ariaValueMax(String? value);
  external String? get ariaValueMin;
  external set ariaValueMin(String? value);
  external String? get ariaValueNow;
  external set ariaValueNow(String? value);
  external String? get ariaValueText;
  external set ariaValueText(String? value);
  external String? get role;
  external set role(String? value);
}
@JS("AbortController")
external dynamic AbortController;
@JS()
@anonymous
abstract class AbortSignalEventMap{}
extension AbortSignalEventMapExtension on AbortSignalEventMap {
  external Event get "abort";
  external set "abort"(Event value);
}
@JS("AbortSignal")
external dynamic AbortSignal;
@JS("AbstractRange")
external dynamic AbstractRange;
@JS()
@anonymous
abstract class AbstractWorkerEventMap{}
extension AbstractWorkerEventMapExtension on AbstractWorkerEventMap {
  external ErrorEvent get "error";
  external set "error"(ErrorEvent value);
}
@JS()
@anonymous
abstract class AbstractWorker{}
extension AbstractWorkerExtension on AbstractWorker {
  external dynamic Function(AbstractWorker, ErrorEvent)? get onerror;
  external set onerror(dynamic Function(AbstractWorker, ErrorEvent)? value);
  external void addEventListener(K type, dynamic Function(AbstractWorker, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  external void removeEventListener(K type, dynamic Function(AbstractWorker, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("AnalyserNode")
external dynamic AnalyserNode;
@JS()
@anonymous
abstract class Animatable{}
extension AnimatableExtension on Animatable {
  external Animation animate(dynamic /* List<Keyframe>|PropertyIndexedKeyframes */ keyframes, [dynamic /* num|KeyframeAnimationOptions */ options]);
  external List<Animation> getAnimations([GetAnimationsOptions options]);
}
@JS()
@anonymous
abstract class AnimationEventMap{}
extension AnimationEventMapExtension on AnimationEventMap {
  external AnimationPlaybackEvent get "cancel";
  external set "cancel"(AnimationPlaybackEvent value);
  external AnimationPlaybackEvent get "finish";
  external set "finish"(AnimationPlaybackEvent value);
  external AnimationPlaybackEvent get "remove";
  external set "remove"(AnimationPlaybackEvent value);
}
@JS("Animation")
external dynamic Animation;
@JS("AnimationEffect")
external dynamic AnimationEffect;
@JS("AnimationEvent")
external dynamic AnimationEvent;
@JS()
@anonymous
abstract class AnimationFrameProvider{}
extension AnimationFrameProviderExtension on AnimationFrameProvider {
  external void cancelAnimationFrame(num handle);
  external num requestAnimationFrame(FrameRequestCallback callback);
}
@JS("AnimationPlaybackEvent")
external dynamic AnimationPlaybackEvent;
@JS("AnimationTimeline")
external dynamic AnimationTimeline;
@JS("Attr")
external dynamic Attr;
@JS("AudioBuffer")
external dynamic AudioBuffer;
@JS("AudioBufferSourceNode")
external dynamic AudioBufferSourceNode;
@JS("AudioContext")
external dynamic AudioContext;
@JS("AudioData")
external dynamic AudioData;
@JS()
@anonymous
abstract class AudioDecoderEventMap{}
extension AudioDecoderEventMapExtension on AudioDecoderEventMap {
  external Event get "dequeue";
  external set "dequeue"(Event value);
}
@JS("AudioDecoder")
external dynamic AudioDecoder;
@JS("AudioDestinationNode")
external dynamic AudioDestinationNode;
@JS()
@anonymous
abstract class AudioEncoderEventMap{}
extension AudioEncoderEventMapExtension on AudioEncoderEventMap {
  external Event get "dequeue";
  external set "dequeue"(Event value);
}
@JS("AudioEncoder")
external dynamic AudioEncoder;
@JS("AudioListener")
external dynamic AudioListener;
@JS("AudioNode")
external dynamic AudioNode;
@JS("AudioParam")
external dynamic AudioParam;
@JS("AudioParamMap")
external dynamic AudioParamMap;
@JS("AudioProcessingEvent")
external dynamic AudioProcessingEvent;
@JS()
@anonymous
abstract class AudioScheduledSourceNodeEventMap{}
extension AudioScheduledSourceNodeEventMapExtension on AudioScheduledSourceNodeEventMap {
  external Event get "ended";
  external set "ended"(Event value);
}
@JS("AudioScheduledSourceNode")
external dynamic AudioScheduledSourceNode;
@JS("AudioWorklet")
external dynamic AudioWorklet;
@JS()
@anonymous
abstract class AudioWorkletNodeEventMap{}
extension AudioWorkletNodeEventMapExtension on AudioWorkletNodeEventMap {
  external ErrorEvent get "processorerror";
  external set "processorerror"(ErrorEvent value);
}
@JS("AudioWorkletNode")
external dynamic AudioWorkletNode;
@JS("AuthenticatorAssertionResponse")
external dynamic AuthenticatorAssertionResponse;
@JS("AuthenticatorAttestationResponse")
external dynamic AuthenticatorAttestationResponse;
@JS("AuthenticatorResponse")
external dynamic AuthenticatorResponse;
@JS("BarProp")
external dynamic BarProp;
@JS()
@anonymous
abstract class BaseAudioContextEventMap{}
extension BaseAudioContextEventMapExtension on BaseAudioContextEventMap {
  external Event get "statechange";
  external set "statechange"(Event value);
}
@JS("BaseAudioContext")
external dynamic BaseAudioContext;
@JS("BeforeUnloadEvent")
external dynamic BeforeUnloadEvent;
@JS("BiquadFilterNode")
external dynamic BiquadFilterNode;
@JS("Blob")
external dynamic Blob;
@JS("BlobEvent")
external dynamic BlobEvent;
@JS()
@anonymous
abstract class Body{}
extension BodyExtension on Body {
  external ReadableStream<Uint8Array>? get body;
  external bool get bodyUsed;
  external Promise arrayBuffer();
  external Promise blob();
  external Promise bytes();
  external Promise formData();
  external Promise json();
  external Promise text();
}
@JS()
@anonymous
abstract class BroadcastChannelEventMap{}
extension BroadcastChannelEventMapExtension on BroadcastChannelEventMap {
  external MessageEvent get "message";
  external set "message"(MessageEvent value);
  external MessageEvent get "messageerror";
  external set "messageerror"(MessageEvent value);
}
@JS("BroadcastChannel")
external dynamic BroadcastChannel;
@JS("ByteLengthQueuingStrategy")
external dynamic ByteLengthQueuingStrategy;
@JS("CDATASection")
external dynamic CDATASection;
@JS("CSSAnimation")
external dynamic CSSAnimation;
@JS("CSSConditionRule")
external dynamic CSSConditionRule;
@JS("CSSContainerRule")
external dynamic CSSContainerRule;
@JS("CSSCounterStyleRule")
external dynamic CSSCounterStyleRule;
@JS("CSSFontFaceRule")
external dynamic CSSFontFaceRule;
@JS("CSSFontFeatureValuesRule")
external dynamic CSSFontFeatureValuesRule;
@JS("CSSFontPaletteValuesRule")
external dynamic CSSFontPaletteValuesRule;
@JS("CSSGroupingRule")
external dynamic CSSGroupingRule;
@JS("CSSImageValue")
external dynamic CSSImageValue;
@JS("CSSImportRule")
external dynamic CSSImportRule;
@JS("CSSKeyframeRule")
external dynamic CSSKeyframeRule;
@JS("CSSKeyframesRule")
external dynamic CSSKeyframesRule;
@JS("CSSKeywordValue")
external dynamic CSSKeywordValue;
@JS("CSSLayerBlockRule")
external dynamic CSSLayerBlockRule;
@JS("CSSLayerStatementRule")
external dynamic CSSLayerStatementRule;
@JS("CSSMathClamp")
external dynamic CSSMathClamp;
@JS("CSSMathInvert")
external dynamic CSSMathInvert;
@JS("CSSMathMax")
external dynamic CSSMathMax;
@JS("CSSMathMin")
external dynamic CSSMathMin;
@JS("CSSMathNegate")
external dynamic CSSMathNegate;
@JS("CSSMathProduct")
external dynamic CSSMathProduct;
@JS("CSSMathSum")
external dynamic CSSMathSum;
@JS("CSSMathValue")
external dynamic CSSMathValue;
@JS("CSSMatrixComponent")
external dynamic CSSMatrixComponent;
@JS("CSSMediaRule")
external dynamic CSSMediaRule;
@JS("CSSNamespaceRule")
external dynamic CSSNamespaceRule;
@JS("CSSNestedDeclarations")
external dynamic CSSNestedDeclarations;
@JS("CSSNumericArray")
external dynamic CSSNumericArray;
@JS("CSSNumericValue")
external dynamic CSSNumericValue;
@JS("CSSPageRule")
external dynamic CSSPageRule;
@JS("CSSPerspective")
external dynamic CSSPerspective;
@JS("CSSPropertyRule")
external dynamic CSSPropertyRule;
@JS("CSSRotate")
external dynamic CSSRotate;
@JS("CSSRule")
external dynamic CSSRule;
@JS("CSSRuleList")
external dynamic CSSRuleList;
@JS("CSSScale")
external dynamic CSSScale;
@JS("CSSScopeRule")
external dynamic CSSScopeRule;
@JS("CSSSkew")
external dynamic CSSSkew;
@JS("CSSSkewX")
external dynamic CSSSkewX;
@JS("CSSSkewY")
external dynamic CSSSkewY;
@JS("CSSStartingStyleRule")
external dynamic CSSStartingStyleRule;
@JS("CSSStyleDeclaration")
external dynamic CSSStyleDeclaration;
@JS("CSSStyleRule")
external dynamic CSSStyleRule;
@JS("CSSStyleSheet")
external dynamic CSSStyleSheet;
@JS("CSSStyleValue")
external dynamic CSSStyleValue;
@JS("CSSSupportsRule")
external dynamic CSSSupportsRule;
@JS("CSSTransformComponent")
external dynamic CSSTransformComponent;
@JS("CSSTransformValue")
external dynamic CSSTransformValue;
@JS("CSSTransition")
external dynamic CSSTransition;
@JS("CSSTranslate")
external dynamic CSSTranslate;
@JS("CSSUnitValue")
external dynamic CSSUnitValue;
@JS("CSSUnparsedValue")
external dynamic CSSUnparsedValue;
@JS("CSSVariableReferenceValue")
external dynamic CSSVariableReferenceValue;
@JS("CSSViewTransitionRule")
external dynamic CSSViewTransitionRule;
@JS("Cache")
external dynamic Cache;
@JS("CacheStorage")
external dynamic CacheStorage;
@JS("CanvasCaptureMediaStreamTrack")
external dynamic CanvasCaptureMediaStreamTrack;
@JS()
@anonymous
abstract class CanvasCompositing{}
extension CanvasCompositingExtension on CanvasCompositing {
  external num get globalAlpha;
  external set globalAlpha(num value);
  external GlobalCompositeOperation get globalCompositeOperation;
  external set globalCompositeOperation(GlobalCompositeOperation value);
}
@JS()
@anonymous
abstract class CanvasDrawImage{}
extension CanvasDrawImageExtension on CanvasDrawImage {
  external void drawImage(CanvasImageSource image, num dx, num dy);
  external void drawImage(CanvasImageSource image, num dx, num dy, num dw, num dh);
  external void drawImage(CanvasImageSource image, num sx, num sy, num sw, num sh, num dx, num dy, num dw, num dh);
}
@JS()
@anonymous
abstract class CanvasDrawPath{}
extension CanvasDrawPathExtension on CanvasDrawPath {
  external void beginPath();
  external void clip([CanvasFillRule fillRule]);
  external void clip(Path2D path, [CanvasFillRule fillRule]);
  external void fill([CanvasFillRule fillRule]);
  external void fill(Path2D path, [CanvasFillRule fillRule]);
  external bool isPointInPath(num x, num y, [CanvasFillRule fillRule]);
  external bool isPointInPath(Path2D path, num x, num y, [CanvasFillRule fillRule]);
  external bool isPointInStroke(num x, num y);
  external bool isPointInStroke(Path2D path, num x, num y);
  external void stroke();
  external void stroke(Path2D path);
}
@JS()
@anonymous
abstract class CanvasFillStrokeStyles{}
extension CanvasFillStrokeStylesExtension on CanvasFillStrokeStyles {
  external dynamic /* String|CanvasGradient|CanvasPattern */ get fillStyle;
  external set fillStyle(dynamic /* String|CanvasGradient|CanvasPattern */ value);
  external dynamic /* String|CanvasGradient|CanvasPattern */ get strokeStyle;
  external set strokeStyle(dynamic /* String|CanvasGradient|CanvasPattern */ value);
  external CanvasGradient createConicGradient(num startAngle, num x, num y);
  external CanvasGradient createLinearGradient(num x0, num y0, num x1, num y1);
  external CanvasPattern? createPattern(CanvasImageSource image, String? repetition);
  external CanvasGradient createRadialGradient(num x0, num y0, num r0, num x1, num y1, num r1);
}
@JS()
@anonymous
abstract class CanvasFilters{}
extension CanvasFiltersExtension on CanvasFilters {
  external String get filter;
  external set filter(String value);
}
@JS("CanvasGradient")
external dynamic CanvasGradient;
@JS()
@anonymous
abstract class CanvasImageData{}
extension CanvasImageDataExtension on CanvasImageData {
  external ImageData createImageData(num sw, num sh, [ImageDataSettings settings]);
  external ImageData createImageData(ImageData imagedata);
  external ImageData getImageData(num sx, num sy, num sw, num sh, [ImageDataSettings settings]);
  external void putImageData(ImageData imagedata, num dx, num dy);
  external void putImageData(ImageData imagedata, num dx, num dy, num dirtyX, num dirtyY, num dirtyWidth, num dirtyHeight);
}
@JS()
@anonymous
abstract class CanvasImageSmoothing{}
extension CanvasImageSmoothingExtension on CanvasImageSmoothing {
  external bool get imageSmoothingEnabled;
  external set imageSmoothingEnabled(bool value);
  external ImageSmoothingQuality get imageSmoothingQuality;
  external set imageSmoothingQuality(ImageSmoothingQuality value);
}
@JS()
@anonymous
abstract class CanvasPath{}
extension CanvasPathExtension on CanvasPath {
  external void arc(num x, num y, num radius, num startAngle, num endAngle, [bool counterclockwise]);
  external void arcTo(num x1, num y1, num x2, num y2, num radius);
  external void bezierCurveTo(num cp1x, num cp1y, num cp2x, num cp2y, num x, num y);
  external void closePath();
  external void ellipse(num x, num y, num radiusX, num radiusY, num rotation, num startAngle, num endAngle, [bool counterclockwise]);
  external void lineTo(num x, num y);
  external void moveTo(num x, num y);
  external void quadraticCurveTo(num cpx, num cpy, num x, num y);
  external void rect(num x, num y, num w, num h);
  external void roundRect(num x, num y, num w, num h, [dynamic /* num|DOMPointInit|List<dynamic /* num|DOMPointInit */> */ radii]);
}
@JS()
@anonymous
abstract class CanvasPathDrawingStyles{}
extension CanvasPathDrawingStylesExtension on CanvasPathDrawingStyles {
  external CanvasLineCap get lineCap;
  external set lineCap(CanvasLineCap value);
  external num get lineDashOffset;
  external set lineDashOffset(num value);
  external CanvasLineJoin get lineJoin;
  external set lineJoin(CanvasLineJoin value);
  external num get lineWidth;
  external set lineWidth(num value);
  external num get miterLimit;
  external set miterLimit(num value);
  external List<num> getLineDash();
  external void setLineDash(List<num> segments);
}
@JS("CanvasPattern")
external dynamic CanvasPattern;
@JS()
@anonymous
abstract class CanvasRect{}
extension CanvasRectExtension on CanvasRect {
  external void clearRect(num x, num y, num w, num h);
  external void fillRect(num x, num y, num w, num h);
  external void strokeRect(num x, num y, num w, num h);
}
@JS("CanvasRenderingContext2D")
external dynamic CanvasRenderingContext2D;
@JS()
@anonymous
abstract class CanvasSettings{}
extension CanvasSettingsExtension on CanvasSettings {
  external CanvasRenderingContext2DSettings getContextAttributes();
}
@JS()
@anonymous
abstract class CanvasShadowStyles{}
extension CanvasShadowStylesExtension on CanvasShadowStyles {
  external num get shadowBlur;
  external set shadowBlur(num value);
  external String get shadowColor;
  external set shadowColor(String value);
  external num get shadowOffsetX;
  external set shadowOffsetX(num value);
  external num get shadowOffsetY;
  external set shadowOffsetY(num value);
}
@JS()
@anonymous
abstract class CanvasState{}
extension CanvasStateExtension on CanvasState {
  external bool isContextLost();
  external void reset();
  external void restore();
  external void save();
}
@JS()
@anonymous
abstract class CanvasText{}
extension CanvasTextExtension on CanvasText {
  external void fillText(String text, num x, num y, [num maxWidth]);
  external TextMetrics measureText(String text);
  external void strokeText(String text, num x, num y, [num maxWidth]);
}
@JS()
@anonymous
abstract class CanvasTextDrawingStyles{}
extension CanvasTextDrawingStylesExtension on CanvasTextDrawingStyles {
  external CanvasDirection get direction;
  external set direction(CanvasDirection value);
  external String get font;
  external set font(String value);
  external CanvasFontKerning get fontKerning;
  external set fontKerning(CanvasFontKerning value);
  external CanvasFontStretch get fontStretch;
  external set fontStretch(CanvasFontStretch value);
  external CanvasFontVariantCaps get fontVariantCaps;
  external set fontVariantCaps(CanvasFontVariantCaps value);
  external String get letterSpacing;
  external set letterSpacing(String value);
  external CanvasTextAlign get textAlign;
  external set textAlign(CanvasTextAlign value);
  external CanvasTextBaseline get textBaseline;
  external set textBaseline(CanvasTextBaseline value);
  external CanvasTextRendering get textRendering;
  external set textRendering(CanvasTextRendering value);
  external String get wordSpacing;
  external set wordSpacing(String value);
}
@JS()
@anonymous
abstract class CanvasTransform{}
extension CanvasTransformExtension on CanvasTransform {
  external DOMMatrix getTransform();
  external void resetTransform();
  external void rotate(num angle);
  external void scale(num x, num y);
  external void setTransform(num a, num b, num c, num d, num e, num f);
  external void setTransform([DOMMatrix2DInit transform]);
  external void transform(num a, num b, num c, num d, num e, num f);
  external void translate(num x, num y);
}
@JS()
@anonymous
abstract class CanvasUserInterface{}
extension CanvasUserInterfaceExtension on CanvasUserInterface {
  external void drawFocusIfNeeded(Element element);
  external void drawFocusIfNeeded(Path2D path, Element element);
}
@JS("CaretPosition")
external dynamic CaretPosition;
@JS("ChannelMergerNode")
external dynamic ChannelMergerNode;
@JS("ChannelSplitterNode")
external dynamic ChannelSplitterNode;
@JS("CharacterData")
external dynamic CharacterData;
@JS()
@anonymous
abstract class ChildNode{}
extension ChildNodeExtension on ChildNode {
  external void after([/* rest */ List<dynamic /* Node|String */> nodes]);
  external void before([/* rest */ List<dynamic /* Node|String */> nodes]);
  external void remove();
  external void replaceWith([/* rest */ List<dynamic /* Node|String */> nodes]);
}
@JS()
@anonymous
abstract class ClientRect{}
extension ClientRectExtension on ClientRect {
}
@JS("Clipboard")
external dynamic Clipboard;
@JS("ClipboardEvent")
external dynamic ClipboardEvent;
@JS("ClipboardItem")
external dynamic ClipboardItem;
@JS("CloseEvent")
external dynamic CloseEvent;
@JS("Comment")
external dynamic Comment;
@JS("CompositionEvent")
external dynamic CompositionEvent;
@JS("CompressionStream")
external dynamic CompressionStream;
@JS("ConstantSourceNode")
external dynamic ConstantSourceNode;
@JS("ContentVisibilityAutoStateChangeEvent")
external dynamic ContentVisibilityAutoStateChangeEvent;
@JS("ConvolverNode")
external dynamic ConvolverNode;
@JS("CountQueuingStrategy")
external dynamic CountQueuingStrategy;
@JS("Credential")
external dynamic Credential;
@JS("CredentialsContainer")
external dynamic CredentialsContainer;
@JS("Crypto")
external dynamic Crypto;
@JS("CryptoKey")
external dynamic CryptoKey;
@JS("CustomElementRegistry")
external dynamic CustomElementRegistry;
@JS("CustomEvent")
external dynamic CustomEvent;
@JS("CustomStateSet")
external dynamic CustomStateSet;
@JS("DOMException")
external dynamic DOMException;
@JS("DOMImplementation")
external dynamic DOMImplementation;
@JS("DOMMatrix")
external dynamic DOMMatrix;
@JS("SVGMatrix")
external dynamic SVGMatrix;
@JS("WebKitCSSMatrix")
external dynamic WebKitCSSMatrix;
@JS("DOMMatrixReadOnly")
external dynamic DOMMatrixReadOnly;
@JS("DOMParser")
external dynamic DOMParser;
@JS("DOMPoint")
external dynamic DOMPoint;
@JS("SVGPoint")
external dynamic SVGPoint;
@JS("DOMPointReadOnly")
external dynamic DOMPointReadOnly;
@JS("DOMQuad")
external dynamic DOMQuad;
@JS("DOMRect")
external dynamic DOMRect;
@JS("SVGRect")
external dynamic SVGRect;
@JS("DOMRectList")
external dynamic DOMRectList;
@JS("DOMRectReadOnly")
external dynamic DOMRectReadOnly;
@JS("DOMStringList")
external dynamic DOMStringList;
@JS("DOMStringMap")
external dynamic DOMStringMap;
@JS("DOMTokenList")
external dynamic DOMTokenList;
@JS("DataTransfer")
external dynamic DataTransfer;
@JS("DataTransferItem")
external dynamic DataTransferItem;
@JS("DataTransferItemList")
external dynamic DataTransferItemList;
@JS("DecompressionStream")
external dynamic DecompressionStream;
@JS("DelayNode")
external dynamic DelayNode;
@JS("DeviceMotionEvent")
external dynamic DeviceMotionEvent;
@JS()
@anonymous
abstract class DeviceMotionEventAcceleration{}
extension DeviceMotionEventAccelerationExtension on DeviceMotionEventAcceleration {
  external num? get x;
  external num? get y;
  external num? get z;
}
@JS()
@anonymous
abstract class DeviceMotionEventRotationRate{}
extension DeviceMotionEventRotationRateExtension on DeviceMotionEventRotationRate {
  external num? get alpha;
  external num? get beta;
  external num? get gamma;
}
@JS("DeviceOrientationEvent")
external dynamic DeviceOrientationEvent;
@JS()
@anonymous
abstract class DocumentEventMap{}
extension DocumentEventMapExtension on DocumentEventMap {
  external Event get "DOMContentLoaded";
  external set "DOMContentLoaded"(Event value);
  external Event get "fullscreenchange";
  external set "fullscreenchange"(Event value);
  external Event get "fullscreenerror";
  external set "fullscreenerror"(Event value);
  external Event get "pointerlockchange";
  external set "pointerlockchange"(Event value);
  external Event get "pointerlockerror";
  external set "pointerlockerror"(Event value);
  external Event get "readystatechange";
  external set "readystatechange"(Event value);
  external Event get "visibilitychange";
  external set "visibilitychange"(Event value);
}
@JS("Document")
external dynamic Document;
@JS("DocumentFragment")
external dynamic DocumentFragment;
@JS()
@anonymous
abstract class DocumentOrShadowRoot{}
extension DocumentOrShadowRootExtension on DocumentOrShadowRoot {
  external Element? get activeElement;
  external List<CSSStyleSheet> get adoptedStyleSheets;
  external set adoptedStyleSheets(List<CSSStyleSheet> value);
  external Element? get fullscreenElement;
  external Element? get pictureInPictureElement;
  external Element? get pointerLockElement;
  external StyleSheetList get styleSheets;
  external Element? elementFromPoint(num x, num y);
  external List<Element> elementsFromPoint(num x, num y);
  external List<Animation> getAnimations();
}
@JS("DocumentTimeline")
external dynamic DocumentTimeline;
@JS("DocumentType")
external dynamic DocumentType;
@JS("DragEvent")
external dynamic DragEvent;
@JS("DynamicsCompressorNode")
external dynamic DynamicsCompressorNode;
@JS()
@anonymous
abstract class EXT_blend_minmax{}
extension EXT_blend_minmaxExtension on EXT_blend_minmax {
  external num get MIN_EXT;
  external num get MAX_EXT;
}
@JS()
@anonymous
abstract class EXT_color_buffer_float{}
extension EXT_color_buffer_floatExtension on EXT_color_buffer_float {
}
@JS()
@anonymous
abstract class EXT_color_buffer_half_float{}
extension EXT_color_buffer_half_floatExtension on EXT_color_buffer_half_float {
  external num get RGBA16F_EXT;
  external num get RGB16F_EXT;
  external num get FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT;
  external num get UNSIGNED_NORMALIZED_EXT;
}
@JS()
@anonymous
abstract class EXT_float_blend{}
extension EXT_float_blendExtension on EXT_float_blend {
}
@JS()
@anonymous
abstract class EXT_frag_depth{}
extension EXT_frag_depthExtension on EXT_frag_depth {
}
@JS()
@anonymous
abstract class EXT_sRGB{}
extension EXT_sRGBExtension on EXT_sRGB {
  external num get SRGB_EXT;
  external num get SRGB_ALPHA_EXT;
  external num get SRGB8_ALPHA8_EXT;
  external num get FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT;
}
@JS()
@anonymous
abstract class EXT_shader_texture_lod{}
extension EXT_shader_texture_lodExtension on EXT_shader_texture_lod {
}
@JS()
@anonymous
abstract class EXT_texture_compression_bptc{}
extension EXT_texture_compression_bptcExtension on EXT_texture_compression_bptc {
  external num get COMPRESSED_RGBA_BPTC_UNORM_EXT;
  external num get COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT;
  external num get COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
  external num get COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
}
@JS()
@anonymous
abstract class EXT_texture_compression_rgtc{}
extension EXT_texture_compression_rgtcExtension on EXT_texture_compression_rgtc {
  external num get COMPRESSED_RED_RGTC1_EXT;
  external num get COMPRESSED_SIGNED_RED_RGTC1_EXT;
  external num get COMPRESSED_RED_GREEN_RGTC2_EXT;
  external num get COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
}
@JS()
@anonymous
abstract class EXT_texture_filter_anisotropic{}
extension EXT_texture_filter_anisotropicExtension on EXT_texture_filter_anisotropic {
  external num get TEXTURE_MAX_ANISOTROPY_EXT;
  external num get MAX_TEXTURE_MAX_ANISOTROPY_EXT;
}
@JS()
@anonymous
abstract class EXT_texture_norm16{}
extension EXT_texture_norm16Extension on EXT_texture_norm16 {
  external num get R16_EXT;
  external num get RG16_EXT;
  external num get RGB16_EXT;
  external num get RGBA16_EXT;
  external num get R16_SNORM_EXT;
  external num get RG16_SNORM_EXT;
  external num get RGB16_SNORM_EXT;
  external num get RGBA16_SNORM_EXT;
}
@JS()
@anonymous
abstract class ElementEventMap{}
extension ElementEventMapExtension on ElementEventMap {
  external Event get "fullscreenchange";
  external set "fullscreenchange"(Event value);
  external Event get "fullscreenerror";
  external set "fullscreenerror"(Event value);
}
@JS("Element")
external dynamic Element;
@JS()
@anonymous
abstract class ElementCSSInlineStyle{}
extension ElementCSSInlineStyleExtension on ElementCSSInlineStyle {
  external StylePropertyMap get attributeStyleMap;
  external CSSStyleDeclaration get style;
  external set style(String cssText);
}
@JS()
@anonymous
abstract class ElementContentEditable{}
extension ElementContentEditableExtension on ElementContentEditable {
  external String get contentEditable;
  external set contentEditable(String value);
  external String get enterKeyHint;
  external set enterKeyHint(String value);
  external String get inputMode;
  external set inputMode(String value);
  external bool get isContentEditable;
}
@JS("ElementInternals")
external dynamic ElementInternals;
@JS("EncodedAudioChunk")
external dynamic EncodedAudioChunk;
@JS("EncodedVideoChunk")
external dynamic EncodedVideoChunk;
@JS("ErrorEvent")
external dynamic ErrorEvent;
@JS("Event")
external dynamic Event;
@JS("EventCounts")
external dynamic EventCounts;
@JS()
@anonymous
abstract class EventListener{}
extension EventListenerExtension on EventListener {
}
@JS()
@anonymous
abstract class EventListenerObject{}
extension EventListenerObjectExtension on EventListenerObject {
  external void handleEvent(Event object);
}
@JS()
@anonymous
abstract class EventSourceEventMap{}
extension EventSourceEventMapExtension on EventSourceEventMap {
  external Event get "error";
  external set "error"(Event value);
  external MessageEvent get "message";
  external set "message"(MessageEvent value);
  external Event get "open";
  external set "open"(Event value);
}
@JS("EventSource")
external dynamic EventSource;
@JS("EventTarget")
external dynamic EventTarget;
@JS("External")
external dynamic External;
@JS("File")
external dynamic File;
@JS("FileList")
external dynamic FileList;
@JS()
@anonymous
abstract class FileReaderEventMap{}
extension FileReaderEventMapExtension on FileReaderEventMap {
  external ProgressEvent<FileReader> get "abort";
  external set "abort"(ProgressEvent<FileReader> value);
  external ProgressEvent<FileReader> get "error";
  external set "error"(ProgressEvent<FileReader> value);
  external ProgressEvent<FileReader> get "load";
  external set "load"(ProgressEvent<FileReader> value);
  external ProgressEvent<FileReader> get "loadend";
  external set "loadend"(ProgressEvent<FileReader> value);
  external ProgressEvent<FileReader> get "loadstart";
  external set "loadstart"(ProgressEvent<FileReader> value);
  external ProgressEvent<FileReader> get "progress";
  external set "progress"(ProgressEvent<FileReader> value);
}
@JS("FileReader")
external dynamic FileReader;
@JS("FileSystem")
external dynamic FileSystem;
@JS("FileSystemDirectoryEntry")
external dynamic FileSystemDirectoryEntry;
@JS("FileSystemDirectoryHandle")
external dynamic FileSystemDirectoryHandle;
@JS("FileSystemDirectoryReader")
external dynamic FileSystemDirectoryReader;
@JS("FileSystemEntry")
external dynamic FileSystemEntry;
@JS("FileSystemFileEntry")
external dynamic FileSystemFileEntry;
@JS("FileSystemFileHandle")
external dynamic FileSystemFileHandle;
@JS("FileSystemHandle")
external dynamic FileSystemHandle;
@JS("FileSystemWritableFileStream")
external dynamic FileSystemWritableFileStream;
@JS("FocusEvent")
external dynamic FocusEvent;
@JS("FontFace")
external dynamic FontFace;
@JS()
@anonymous
abstract class FontFaceSetEventMap{}
extension FontFaceSetEventMapExtension on FontFaceSetEventMap {
  external FontFaceSetLoadEvent get "loading";
  external set "loading"(FontFaceSetLoadEvent value);
  external FontFaceSetLoadEvent get "loadingdone";
  external set "loadingdone"(FontFaceSetLoadEvent value);
  external FontFaceSetLoadEvent get "loadingerror";
  external set "loadingerror"(FontFaceSetLoadEvent value);
}
@JS("FontFaceSet")
external dynamic FontFaceSet;
@JS("FontFaceSetLoadEvent")
external dynamic FontFaceSetLoadEvent;
@JS()
@anonymous
abstract class FontFaceSource{}
extension FontFaceSourceExtension on FontFaceSource {
  external FontFaceSet get fonts;
}
@JS("FormData")
external dynamic FormData;
@JS("FormDataEvent")
external dynamic FormDataEvent;
@JS("FragmentDirective")
external dynamic FragmentDirective;
@JS()
@anonymous
abstract class GPUError{}
extension GPUErrorExtension on GPUError {
  external String get message;
}
@JS("GainNode")
external dynamic GainNode;
@JS("Gamepad")
external dynamic Gamepad;
@JS("GamepadButton")
external dynamic GamepadButton;
@JS("GamepadEvent")
external dynamic GamepadEvent;
@JS("GamepadHapticActuator")
external dynamic GamepadHapticActuator;
@JS()
@anonymous
abstract class GenericTransformStream{}
extension GenericTransformStreamExtension on GenericTransformStream {
  external ReadableStream get readable;
  external WritableStream get writable;
}
@JS("Geolocation")
external dynamic Geolocation;
@JS("GeolocationCoordinates")
external dynamic GeolocationCoordinates;
@JS("GeolocationPosition")
external dynamic GeolocationPosition;
@JS("GeolocationPositionError")
external dynamic GeolocationPositionError;
@JS()
@anonymous
abstract class GlobalEventHandlersEventMap{}
extension GlobalEventHandlersEventMapExtension on GlobalEventHandlersEventMap {
  external UIEvent get "abort";
  external set "abort"(UIEvent value);
  external AnimationEvent get "animationcancel";
  external set "animationcancel"(AnimationEvent value);
  external AnimationEvent get "animationend";
  external set "animationend"(AnimationEvent value);
  external AnimationEvent get "animationiteration";
  external set "animationiteration"(AnimationEvent value);
  external AnimationEvent get "animationstart";
  external set "animationstart"(AnimationEvent value);
  external MouseEvent get "auxclick";
  external set "auxclick"(MouseEvent value);
  external InputEvent get "beforeinput";
  external set "beforeinput"(InputEvent value);
  external Event get "beforetoggle";
  external set "beforetoggle"(Event value);
  external FocusEvent get "blur";
  external set "blur"(FocusEvent value);
  external Event get "cancel";
  external set "cancel"(Event value);
  external Event get "canplay";
  external set "canplay"(Event value);
  external Event get "canplaythrough";
  external set "canplaythrough"(Event value);
  external Event get "change";
  external set "change"(Event value);
  external MouseEvent get "click";
  external set "click"(MouseEvent value);
  external Event get "close";
  external set "close"(Event value);
  external CompositionEvent get "compositionend";
  external set "compositionend"(CompositionEvent value);
  external CompositionEvent get "compositionstart";
  external set "compositionstart"(CompositionEvent value);
  external CompositionEvent get "compositionupdate";
  external set "compositionupdate"(CompositionEvent value);
  external Event get "contextlost";
  external set "contextlost"(Event value);
  external MouseEvent get "contextmenu";
  external set "contextmenu"(MouseEvent value);
  external Event get "contextrestored";
  external set "contextrestored"(Event value);
  external ClipboardEvent get "copy";
  external set "copy"(ClipboardEvent value);
  external Event get "cuechange";
  external set "cuechange"(Event value);
  external ClipboardEvent get "cut";
  external set "cut"(ClipboardEvent value);
  external MouseEvent get "dblclick";
  external set "dblclick"(MouseEvent value);
  external DragEvent get "drag";
  external set "drag"(DragEvent value);
  external DragEvent get "dragend";
  external set "dragend"(DragEvent value);
  external DragEvent get "dragenter";
  external set "dragenter"(DragEvent value);
  external DragEvent get "dragleave";
  external set "dragleave"(DragEvent value);
  external DragEvent get "dragover";
  external set "dragover"(DragEvent value);
  external DragEvent get "dragstart";
  external set "dragstart"(DragEvent value);
  external DragEvent get "drop";
  external set "drop"(DragEvent value);
  external Event get "durationchange";
  external set "durationchange"(Event value);
  external Event get "emptied";
  external set "emptied"(Event value);
  external Event get "ended";
  external set "ended"(Event value);
  external ErrorEvent get "error";
  external set "error"(ErrorEvent value);
  external FocusEvent get "focus";
  external set "focus"(FocusEvent value);
  external FocusEvent get "focusin";
  external set "focusin"(FocusEvent value);
  external FocusEvent get "focusout";
  external set "focusout"(FocusEvent value);
  external FormDataEvent get "formdata";
  external set "formdata"(FormDataEvent value);
  external PointerEvent get "gotpointercapture";
  external set "gotpointercapture"(PointerEvent value);
  external Event get "input";
  external set "input"(Event value);
  external Event get "invalid";
  external set "invalid"(Event value);
  external KeyboardEvent get "keydown";
  external set "keydown"(KeyboardEvent value);
  external KeyboardEvent get "keypress";
  external set "keypress"(KeyboardEvent value);
  external KeyboardEvent get "keyup";
  external set "keyup"(KeyboardEvent value);
  external Event get "load";
  external set "load"(Event value);
  external Event get "loadeddata";
  external set "loadeddata"(Event value);
  external Event get "loadedmetadata";
  external set "loadedmetadata"(Event value);
  external Event get "loadstart";
  external set "loadstart"(Event value);
  external PointerEvent get "lostpointercapture";
  external set "lostpointercapture"(PointerEvent value);
  external MouseEvent get "mousedown";
  external set "mousedown"(MouseEvent value);
  external MouseEvent get "mouseenter";
  external set "mouseenter"(MouseEvent value);
  external MouseEvent get "mouseleave";
  external set "mouseleave"(MouseEvent value);
  external MouseEvent get "mousemove";
  external set "mousemove"(MouseEvent value);
  external MouseEvent get "mouseout";
  external set "mouseout"(MouseEvent value);
  external MouseEvent get "mouseover";
  external set "mouseover"(MouseEvent value);
  external MouseEvent get "mouseup";
  external set "mouseup"(MouseEvent value);
  external ClipboardEvent get "paste";
  external set "paste"(ClipboardEvent value);
  external Event get "pause";
  external set "pause"(Event value);
  external Event get "play";
  external set "play"(Event value);
  external Event get "playing";
  external set "playing"(Event value);
  external PointerEvent get "pointercancel";
  external set "pointercancel"(PointerEvent value);
  external PointerEvent get "pointerdown";
  external set "pointerdown"(PointerEvent value);
  external PointerEvent get "pointerenter";
  external set "pointerenter"(PointerEvent value);
  external PointerEvent get "pointerleave";
  external set "pointerleave"(PointerEvent value);
  external PointerEvent get "pointermove";
  external set "pointermove"(PointerEvent value);
  external PointerEvent get "pointerout";
  external set "pointerout"(PointerEvent value);
  external PointerEvent get "pointerover";
  external set "pointerover"(PointerEvent value);
  external PointerEvent get "pointerup";
  external set "pointerup"(PointerEvent value);
  external ProgressEvent get "progress";
  external set "progress"(ProgressEvent value);
  external Event get "ratechange";
  external set "ratechange"(Event value);
  external Event get "reset";
  external set "reset"(Event value);
  external UIEvent get "resize";
  external set "resize"(UIEvent value);
  external Event get "scroll";
  external set "scroll"(Event value);
  external Event get "scrollend";
  external set "scrollend"(Event value);
  external SecurityPolicyViolationEvent get "securitypolicyviolation";
  external set "securitypolicyviolation"(SecurityPolicyViolationEvent value);
  external Event get "seeked";
  external set "seeked"(Event value);
  external Event get "seeking";
  external set "seeking"(Event value);
  external Event get "select";
  external set "select"(Event value);
  external Event get "selectionchange";
  external set "selectionchange"(Event value);
  external Event get "selectstart";
  external set "selectstart"(Event value);
  external Event get "slotchange";
  external set "slotchange"(Event value);
  external Event get "stalled";
  external set "stalled"(Event value);
  external SubmitEvent get "submit";
  external set "submit"(SubmitEvent value);
  external Event get "suspend";
  external set "suspend"(Event value);
  external Event get "timeupdate";
  external set "timeupdate"(Event value);
  external Event get "toggle";
  external set "toggle"(Event value);
  external TouchEvent get "touchcancel";
  external set "touchcancel"(TouchEvent value);
  external TouchEvent get "touchend";
  external set "touchend"(TouchEvent value);
  external TouchEvent get "touchmove";
  external set "touchmove"(TouchEvent value);
  external TouchEvent get "touchstart";
  external set "touchstart"(TouchEvent value);
  external TransitionEvent get "transitioncancel";
  external set "transitioncancel"(TransitionEvent value);
  external TransitionEvent get "transitionend";
  external set "transitionend"(TransitionEvent value);
  external TransitionEvent get "transitionrun";
  external set "transitionrun"(TransitionEvent value);
  external TransitionEvent get "transitionstart";
  external set "transitionstart"(TransitionEvent value);
  external Event get "volumechange";
  external set "volumechange"(Event value);
  external Event get "waiting";
  external set "waiting"(Event value);
  external Event get "webkitanimationend";
  external set "webkitanimationend"(Event value);
  external Event get "webkitanimationiteration";
  external set "webkitanimationiteration"(Event value);
  external Event get "webkitanimationstart";
  external set "webkitanimationstart"(Event value);
  external Event get "webkittransitionend";
  external set "webkittransitionend"(Event value);
  external WheelEvent get "wheel";
  external set "wheel"(WheelEvent value);
}
@JS()
@anonymous
abstract class GlobalEventHandlers{}
extension GlobalEventHandlersExtension on GlobalEventHandlers {
  external dynamic Function(GlobalEventHandlers, UIEvent)? get onabort;
  external set onabort(dynamic Function(GlobalEventHandlers, UIEvent)? value);
  external dynamic Function(GlobalEventHandlers, AnimationEvent)? get onanimationcancel;
  external set onanimationcancel(dynamic Function(GlobalEventHandlers, AnimationEvent)? value);
  external dynamic Function(GlobalEventHandlers, AnimationEvent)? get onanimationend;
  external set onanimationend(dynamic Function(GlobalEventHandlers, AnimationEvent)? value);
  external dynamic Function(GlobalEventHandlers, AnimationEvent)? get onanimationiteration;
  external set onanimationiteration(dynamic Function(GlobalEventHandlers, AnimationEvent)? value);
  external dynamic Function(GlobalEventHandlers, AnimationEvent)? get onanimationstart;
  external set onanimationstart(dynamic Function(GlobalEventHandlers, AnimationEvent)? value);
  external dynamic Function(GlobalEventHandlers, MouseEvent)? get onauxclick;
  external set onauxclick(dynamic Function(GlobalEventHandlers, MouseEvent)? value);
  external dynamic Function(GlobalEventHandlers, InputEvent)? get onbeforeinput;
  external set onbeforeinput(dynamic Function(GlobalEventHandlers, InputEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onbeforetoggle;
  external set onbeforetoggle(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, FocusEvent)? get onblur;
  external set onblur(dynamic Function(GlobalEventHandlers, FocusEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get oncancel;
  external set oncancel(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get oncanplay;
  external set oncanplay(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get oncanplaythrough;
  external set oncanplaythrough(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onchange;
  external set onchange(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, MouseEvent)? get onclick;
  external set onclick(dynamic Function(GlobalEventHandlers, MouseEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onclose;
  external set onclose(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get oncontextlost;
  external set oncontextlost(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, MouseEvent)? get oncontextmenu;
  external set oncontextmenu(dynamic Function(GlobalEventHandlers, MouseEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get oncontextrestored;
  external set oncontextrestored(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, ClipboardEvent)? get oncopy;
  external set oncopy(dynamic Function(GlobalEventHandlers, ClipboardEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get oncuechange;
  external set oncuechange(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, ClipboardEvent)? get oncut;
  external set oncut(dynamic Function(GlobalEventHandlers, ClipboardEvent)? value);
  external dynamic Function(GlobalEventHandlers, MouseEvent)? get ondblclick;
  external set ondblclick(dynamic Function(GlobalEventHandlers, MouseEvent)? value);
  external dynamic Function(GlobalEventHandlers, DragEvent)? get ondrag;
  external set ondrag(dynamic Function(GlobalEventHandlers, DragEvent)? value);
  external dynamic Function(GlobalEventHandlers, DragEvent)? get ondragend;
  external set ondragend(dynamic Function(GlobalEventHandlers, DragEvent)? value);
  external dynamic Function(GlobalEventHandlers, DragEvent)? get ondragenter;
  external set ondragenter(dynamic Function(GlobalEventHandlers, DragEvent)? value);
  external dynamic Function(GlobalEventHandlers, DragEvent)? get ondragleave;
  external set ondragleave(dynamic Function(GlobalEventHandlers, DragEvent)? value);
  external dynamic Function(GlobalEventHandlers, DragEvent)? get ondragover;
  external set ondragover(dynamic Function(GlobalEventHandlers, DragEvent)? value);
  external dynamic Function(GlobalEventHandlers, DragEvent)? get ondragstart;
  external set ondragstart(dynamic Function(GlobalEventHandlers, DragEvent)? value);
  external dynamic Function(GlobalEventHandlers, DragEvent)? get ondrop;
  external set ondrop(dynamic Function(GlobalEventHandlers, DragEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get ondurationchange;
  external set ondurationchange(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onemptied;
  external set onemptied(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onended;
  external set onended(dynamic Function(GlobalEventHandlers, Event)? value);
  external OnErrorEventHandler get onerror;
  external set onerror(OnErrorEventHandler value);
  external dynamic Function(GlobalEventHandlers, FocusEvent)? get onfocus;
  external set onfocus(dynamic Function(GlobalEventHandlers, FocusEvent)? value);
  external dynamic Function(GlobalEventHandlers, FormDataEvent)? get onformdata;
  external set onformdata(dynamic Function(GlobalEventHandlers, FormDataEvent)? value);
  external dynamic Function(GlobalEventHandlers, PointerEvent)? get ongotpointercapture;
  external set ongotpointercapture(dynamic Function(GlobalEventHandlers, PointerEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get oninput;
  external set oninput(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get oninvalid;
  external set oninvalid(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, KeyboardEvent)? get onkeydown;
  external set onkeydown(dynamic Function(GlobalEventHandlers, KeyboardEvent)? value);
  external dynamic Function(GlobalEventHandlers, KeyboardEvent)? get onkeypress;
  external set onkeypress(dynamic Function(GlobalEventHandlers, KeyboardEvent)? value);
  external dynamic Function(GlobalEventHandlers, KeyboardEvent)? get onkeyup;
  external set onkeyup(dynamic Function(GlobalEventHandlers, KeyboardEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onload;
  external set onload(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onloadeddata;
  external set onloadeddata(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onloadedmetadata;
  external set onloadedmetadata(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onloadstart;
  external set onloadstart(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, PointerEvent)? get onlostpointercapture;
  external set onlostpointercapture(dynamic Function(GlobalEventHandlers, PointerEvent)? value);
  external dynamic Function(GlobalEventHandlers, MouseEvent)? get onmousedown;
  external set onmousedown(dynamic Function(GlobalEventHandlers, MouseEvent)? value);
  external dynamic Function(GlobalEventHandlers, MouseEvent)? get onmouseenter;
  external set onmouseenter(dynamic Function(GlobalEventHandlers, MouseEvent)? value);
  external dynamic Function(GlobalEventHandlers, MouseEvent)? get onmouseleave;
  external set onmouseleave(dynamic Function(GlobalEventHandlers, MouseEvent)? value);
  external dynamic Function(GlobalEventHandlers, MouseEvent)? get onmousemove;
  external set onmousemove(dynamic Function(GlobalEventHandlers, MouseEvent)? value);
  external dynamic Function(GlobalEventHandlers, MouseEvent)? get onmouseout;
  external set onmouseout(dynamic Function(GlobalEventHandlers, MouseEvent)? value);
  external dynamic Function(GlobalEventHandlers, MouseEvent)? get onmouseover;
  external set onmouseover(dynamic Function(GlobalEventHandlers, MouseEvent)? value);
  external dynamic Function(GlobalEventHandlers, MouseEvent)? get onmouseup;
  external set onmouseup(dynamic Function(GlobalEventHandlers, MouseEvent)? value);
  external dynamic Function(GlobalEventHandlers, ClipboardEvent)? get onpaste;
  external set onpaste(dynamic Function(GlobalEventHandlers, ClipboardEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onpause;
  external set onpause(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onplay;
  external set onplay(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onplaying;
  external set onplaying(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, PointerEvent)? get onpointercancel;
  external set onpointercancel(dynamic Function(GlobalEventHandlers, PointerEvent)? value);
  external dynamic Function(GlobalEventHandlers, PointerEvent)? get onpointerdown;
  external set onpointerdown(dynamic Function(GlobalEventHandlers, PointerEvent)? value);
  external dynamic Function(GlobalEventHandlers, PointerEvent)? get onpointerenter;
  external set onpointerenter(dynamic Function(GlobalEventHandlers, PointerEvent)? value);
  external dynamic Function(GlobalEventHandlers, PointerEvent)? get onpointerleave;
  external set onpointerleave(dynamic Function(GlobalEventHandlers, PointerEvent)? value);
  external dynamic Function(GlobalEventHandlers, PointerEvent)? get onpointermove;
  external set onpointermove(dynamic Function(GlobalEventHandlers, PointerEvent)? value);
  external dynamic Function(GlobalEventHandlers, PointerEvent)? get onpointerout;
  external set onpointerout(dynamic Function(GlobalEventHandlers, PointerEvent)? value);
  external dynamic Function(GlobalEventHandlers, PointerEvent)? get onpointerover;
  external set onpointerover(dynamic Function(GlobalEventHandlers, PointerEvent)? value);
  external dynamic Function(GlobalEventHandlers, PointerEvent)? get onpointerup;
  external set onpointerup(dynamic Function(GlobalEventHandlers, PointerEvent)? value);
  external dynamic Function(GlobalEventHandlers, ProgressEvent)? get onprogress;
  external set onprogress(dynamic Function(GlobalEventHandlers, ProgressEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onratechange;
  external set onratechange(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onreset;
  external set onreset(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, UIEvent)? get onresize;
  external set onresize(dynamic Function(GlobalEventHandlers, UIEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onscroll;
  external set onscroll(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onscrollend;
  external set onscrollend(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, SecurityPolicyViolationEvent)? get onsecuritypolicyviolation;
  external set onsecuritypolicyviolation(dynamic Function(GlobalEventHandlers, SecurityPolicyViolationEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onseeked;
  external set onseeked(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onseeking;
  external set onseeking(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onselect;
  external set onselect(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onselectionchange;
  external set onselectionchange(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onselectstart;
  external set onselectstart(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onslotchange;
  external set onslotchange(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onstalled;
  external set onstalled(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, SubmitEvent)? get onsubmit;
  external set onsubmit(dynamic Function(GlobalEventHandlers, SubmitEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onsuspend;
  external set onsuspend(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get ontimeupdate;
  external set ontimeupdate(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get ontoggle;
  external set ontoggle(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, TouchEvent)? get ontouchcancel;
  external set ontouchcancel(dynamic Function(GlobalEventHandlers, TouchEvent)? value);
  external dynamic Function(GlobalEventHandlers, TouchEvent)? get ontouchend;
  external set ontouchend(dynamic Function(GlobalEventHandlers, TouchEvent)? value);
  external dynamic Function(GlobalEventHandlers, TouchEvent)? get ontouchmove;
  external set ontouchmove(dynamic Function(GlobalEventHandlers, TouchEvent)? value);
  external dynamic Function(GlobalEventHandlers, TouchEvent)? get ontouchstart;
  external set ontouchstart(dynamic Function(GlobalEventHandlers, TouchEvent)? value);
  external dynamic Function(GlobalEventHandlers, TransitionEvent)? get ontransitioncancel;
  external set ontransitioncancel(dynamic Function(GlobalEventHandlers, TransitionEvent)? value);
  external dynamic Function(GlobalEventHandlers, TransitionEvent)? get ontransitionend;
  external set ontransitionend(dynamic Function(GlobalEventHandlers, TransitionEvent)? value);
  external dynamic Function(GlobalEventHandlers, TransitionEvent)? get ontransitionrun;
  external set ontransitionrun(dynamic Function(GlobalEventHandlers, TransitionEvent)? value);
  external dynamic Function(GlobalEventHandlers, TransitionEvent)? get ontransitionstart;
  external set ontransitionstart(dynamic Function(GlobalEventHandlers, TransitionEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onvolumechange;
  external set onvolumechange(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onwaiting;
  external set onwaiting(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onwebkitanimationend;
  external set onwebkitanimationend(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onwebkitanimationiteration;
  external set onwebkitanimationiteration(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onwebkitanimationstart;
  external set onwebkitanimationstart(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onwebkittransitionend;
  external set onwebkittransitionend(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, WheelEvent)? get onwheel;
  external set onwheel(dynamic Function(GlobalEventHandlers, WheelEvent)? value);
  external void addEventListener(K type, dynamic Function(GlobalEventHandlers, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  external void removeEventListener(K type, dynamic Function(GlobalEventHandlers, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLAllCollection")
external dynamic HTMLAllCollection;
@JS("HTMLAnchorElement")
external dynamic HTMLAnchorElement;
@JS("HTMLAreaElement")
external dynamic HTMLAreaElement;
@JS("HTMLAudioElement")
external dynamic HTMLAudioElement;
@JS("HTMLBRElement")
external dynamic HTMLBRElement;
@JS("HTMLBaseElement")
external dynamic HTMLBaseElement;
@JS()
@anonymous
abstract class HTMLBodyElementEventMap{}
extension HTMLBodyElementEventMapExtension on HTMLBodyElementEventMap {
}
@JS("HTMLBodyElement")
external dynamic HTMLBodyElement;
@JS("HTMLButtonElement")
external dynamic HTMLButtonElement;
@JS("HTMLCanvasElement")
external dynamic HTMLCanvasElement;
@JS()
@anonymous
abstract class HTMLCollectionBase{}
extension HTMLCollectionBaseExtension on HTMLCollectionBase {
  external num get length;
  external Element? item(num index);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("HTMLCollection")
external dynamic HTMLCollection;
@JS()
@anonymous
abstract class HTMLCollectionOf{}
extension HTMLCollectionOfExtension on HTMLCollectionOf {
  external T? item(num index);
  external T? namedItem(String name);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("HTMLDListElement")
external dynamic HTMLDListElement;
@JS("HTMLDataElement")
external dynamic HTMLDataElement;
@JS("HTMLDataListElement")
external dynamic HTMLDataListElement;
@JS("HTMLDetailsElement")
external dynamic HTMLDetailsElement;
@JS("HTMLDialogElement")
external dynamic HTMLDialogElement;
@JS("HTMLDirectoryElement")
external dynamic HTMLDirectoryElement;
@JS("HTMLDivElement")
external dynamic HTMLDivElement;
@JS("HTMLDocument")
external dynamic HTMLDocument;
@JS()
@anonymous
abstract class HTMLElementEventMap{}
extension HTMLElementEventMapExtension on HTMLElementEventMap {
}
@JS("HTMLElement")
external dynamic HTMLElement;
@JS("HTMLEmbedElement")
external dynamic HTMLEmbedElement;
@JS("HTMLFieldSetElement")
external dynamic HTMLFieldSetElement;
@JS("HTMLFontElement")
external dynamic HTMLFontElement;
@JS("HTMLFormControlsCollection")
external dynamic HTMLFormControlsCollection;
@JS("HTMLFormElement")
external dynamic HTMLFormElement;
@JS("HTMLFrameElement")
external dynamic HTMLFrameElement;
@JS()
@anonymous
abstract class HTMLFrameSetElementEventMap{}
extension HTMLFrameSetElementEventMapExtension on HTMLFrameSetElementEventMap {
}
@JS("HTMLFrameSetElement")
external dynamic HTMLFrameSetElement;
@JS("HTMLHRElement")
external dynamic HTMLHRElement;
@JS("HTMLHeadElement")
external dynamic HTMLHeadElement;
@JS("HTMLHeadingElement")
external dynamic HTMLHeadingElement;
@JS("HTMLHtmlElement")
external dynamic HTMLHtmlElement;
@JS()
@anonymous
abstract class HTMLHyperlinkElementUtils{}
extension HTMLHyperlinkElementUtilsExtension on HTMLHyperlinkElementUtils {
  external String get hash;
  external set hash(String value);
  external String get host;
  external set host(String value);
  external String get hostname;
  external set hostname(String value);
  external String get href;
  external set href(String value);
  external String get origin;
  external String get password;
  external set password(String value);
  external String get pathname;
  external set pathname(String value);
  external String get port;
  external set port(String value);
  external String get protocol;
  external set protocol(String value);
  external String get search;
  external set search(String value);
  external String get username;
  external set username(String value);
  external String toString();
}
@JS("HTMLIFrameElement")
external dynamic HTMLIFrameElement;
@JS("HTMLImageElement")
external dynamic HTMLImageElement;
@JS("HTMLInputElement")
external dynamic HTMLInputElement;
@JS("HTMLLIElement")
external dynamic HTMLLIElement;
@JS("HTMLLabelElement")
external dynamic HTMLLabelElement;
@JS("HTMLLegendElement")
external dynamic HTMLLegendElement;
@JS("HTMLLinkElement")
external dynamic HTMLLinkElement;
@JS("HTMLMapElement")
external dynamic HTMLMapElement;
@JS("HTMLMarqueeElement")
external dynamic HTMLMarqueeElement;
@JS()
@anonymous
abstract class HTMLMediaElementEventMap{}
extension HTMLMediaElementEventMapExtension on HTMLMediaElementEventMap {
  external MediaEncryptedEvent get "encrypted";
  external set "encrypted"(MediaEncryptedEvent value);
  external Event get "waitingforkey";
  external set "waitingforkey"(Event value);
}
@JS("HTMLMediaElement")
external dynamic HTMLMediaElement;
@JS("HTMLMenuElement")
external dynamic HTMLMenuElement;
@JS("HTMLMetaElement")
external dynamic HTMLMetaElement;
@JS("HTMLMeterElement")
external dynamic HTMLMeterElement;
@JS("HTMLModElement")
external dynamic HTMLModElement;
@JS("HTMLOListElement")
external dynamic HTMLOListElement;
@JS("HTMLObjectElement")
external dynamic HTMLObjectElement;
@JS("HTMLOptGroupElement")
external dynamic HTMLOptGroupElement;
@JS("HTMLOptionElement")
external dynamic HTMLOptionElement;
@JS("HTMLOptionsCollection")
external dynamic HTMLOptionsCollection;
@JS()
@anonymous
abstract class HTMLOrSVGElement{}
extension HTMLOrSVGElementExtension on HTMLOrSVGElement {
  external bool get autofocus;
  external set autofocus(bool value);
  external DOMStringMap get dataset;
  external String get nonce;
  external set nonce(String value);
  external num get tabIndex;
  external set tabIndex(num value);
  external void blur();
  external void focus([FocusOptions options]);
}
@JS("HTMLOutputElement")
external dynamic HTMLOutputElement;
@JS("HTMLParagraphElement")
external dynamic HTMLParagraphElement;
@JS("HTMLParamElement")
external dynamic HTMLParamElement;
@JS("HTMLPictureElement")
external dynamic HTMLPictureElement;
@JS("HTMLPreElement")
external dynamic HTMLPreElement;
@JS("HTMLProgressElement")
external dynamic HTMLProgressElement;
@JS("HTMLQuoteElement")
external dynamic HTMLQuoteElement;
@JS("HTMLScriptElement")
external dynamic HTMLScriptElement;
@JS("HTMLSelectElement")
external dynamic HTMLSelectElement;
@JS("HTMLSlotElement")
external dynamic HTMLSlotElement;
@JS("HTMLSourceElement")
external dynamic HTMLSourceElement;
@JS("HTMLSpanElement")
external dynamic HTMLSpanElement;
@JS("HTMLStyleElement")
external dynamic HTMLStyleElement;
@JS("HTMLTableCaptionElement")
external dynamic HTMLTableCaptionElement;
@JS("HTMLTableCellElement")
external dynamic HTMLTableCellElement;
@JS("HTMLTableColElement")
external dynamic HTMLTableColElement;
@JS()
@anonymous
abstract class HTMLTableDataCellElement{}
extension HTMLTableDataCellElementExtension on HTMLTableDataCellElement {
  external void addEventListener(K type, dynamic Function(HTMLTableDataCellElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  external void removeEventListener(K type, dynamic Function(HTMLTableDataCellElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLTableElement")
external dynamic HTMLTableElement;
@JS()
@anonymous
abstract class HTMLTableHeaderCellElement{}
extension HTMLTableHeaderCellElementExtension on HTMLTableHeaderCellElement {
  external void addEventListener(K type, dynamic Function(HTMLTableHeaderCellElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  external void removeEventListener(K type, dynamic Function(HTMLTableHeaderCellElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLTableRowElement")
external dynamic HTMLTableRowElement;
@JS("HTMLTableSectionElement")
external dynamic HTMLTableSectionElement;
@JS("HTMLTemplateElement")
external dynamic HTMLTemplateElement;
@JS("HTMLTextAreaElement")
external dynamic HTMLTextAreaElement;
@JS("HTMLTimeElement")
external dynamic HTMLTimeElement;
@JS("HTMLTitleElement")
external dynamic HTMLTitleElement;
@JS("HTMLTrackElement")
external dynamic HTMLTrackElement;
@JS("HTMLUListElement")
external dynamic HTMLUListElement;
@JS("HTMLUnknownElement")
external dynamic HTMLUnknownElement;
@JS()
@anonymous
abstract class HTMLVideoElementEventMap{}
extension HTMLVideoElementEventMapExtension on HTMLVideoElementEventMap {
  external PictureInPictureEvent get "enterpictureinpicture";
  external set "enterpictureinpicture"(PictureInPictureEvent value);
  external PictureInPictureEvent get "leavepictureinpicture";
  external set "leavepictureinpicture"(PictureInPictureEvent value);
}
@JS("HTMLVideoElement")
external dynamic HTMLVideoElement;
@JS("HashChangeEvent")
external dynamic HashChangeEvent;
@JS("Headers")
external dynamic Headers;
@JS("Highlight")
external dynamic Highlight;
@JS("HighlightRegistry")
external dynamic HighlightRegistry;
@JS("History")
external dynamic History;
@JS("IDBCursor")
external dynamic IDBCursor;
@JS("IDBCursorWithValue")
external dynamic IDBCursorWithValue;
@JS()
@anonymous
abstract class IDBDatabaseEventMap{}
extension IDBDatabaseEventMapExtension on IDBDatabaseEventMap {
  external Event get "abort";
  external set "abort"(Event value);
  external Event get "close";
  external set "close"(Event value);
  external Event get "error";
  external set "error"(Event value);
  external IDBVersionChangeEvent get "versionchange";
  external set "versionchange"(IDBVersionChangeEvent value);
}
@JS("IDBDatabase")
external dynamic IDBDatabase;
@JS("IDBFactory")
external dynamic IDBFactory;
@JS("IDBIndex")
external dynamic IDBIndex;
@JS("IDBKeyRange")
external dynamic IDBKeyRange;
@JS("IDBObjectStore")
external dynamic IDBObjectStore;
@JS()
@anonymous
abstract class IDBOpenDBRequestEventMap{}
extension IDBOpenDBRequestEventMapExtension on IDBOpenDBRequestEventMap {
  external IDBVersionChangeEvent get "blocked";
  external set "blocked"(IDBVersionChangeEvent value);
  external IDBVersionChangeEvent get "upgradeneeded";
  external set "upgradeneeded"(IDBVersionChangeEvent value);
}
@JS("IDBOpenDBRequest")
external dynamic IDBOpenDBRequest;
@JS()
@anonymous
abstract class IDBRequestEventMap{}
extension IDBRequestEventMapExtension on IDBRequestEventMap {
  external Event get "error";
  external set "error"(Event value);
  external Event get "success";
  external set "success"(Event value);
}
@JS("IDBRequest")
external dynamic IDBRequest;
@JS()
@anonymous
abstract class IDBTransactionEventMap{}
extension IDBTransactionEventMapExtension on IDBTransactionEventMap {
  external Event get "abort";
  external set "abort"(Event value);
  external Event get "complete";
  external set "complete"(Event value);
  external Event get "error";
  external set "error"(Event value);
}
@JS("IDBTransaction")
external dynamic IDBTransaction;
@JS("IDBVersionChangeEvent")
external dynamic IDBVersionChangeEvent;
@JS("IIRFilterNode")
external dynamic IIRFilterNode;
@JS("IdleDeadline")
external dynamic IdleDeadline;
@JS("ImageBitmap")
external dynamic ImageBitmap;
@JS("ImageBitmapRenderingContext")
external dynamic ImageBitmapRenderingContext;
@JS("ImageData")
external dynamic ImageData;
@JS("ImageDecoder")
external dynamic ImageDecoder;
@JS("ImageTrack")
external dynamic ImageTrack;
@JS("ImageTrackList")
external dynamic ImageTrackList;
@JS()
@anonymous
abstract class ImportMeta{}
extension ImportMetaExtension on ImportMeta {
  external String get url;
  external set url(String value);
  external String resolve(String specifier);
}
@JS("InputDeviceInfo")
external dynamic InputDeviceInfo;
@JS("InputEvent")
external dynamic InputEvent;
@JS("IntersectionObserver")
external dynamic IntersectionObserver;
@JS("IntersectionObserverEntry")
external dynamic IntersectionObserverEntry;
@JS()
@anonymous
abstract class KHR_parallel_shader_compile{}
extension KHR_parallel_shader_compileExtension on KHR_parallel_shader_compile {
  external num get COMPLETION_STATUS_KHR;
}
@JS("KeyboardEvent")
external dynamic KeyboardEvent;
@JS("KeyframeEffect")
external dynamic KeyframeEffect;
@JS("LargestContentfulPaint")
external dynamic LargestContentfulPaint;
@JS()
@anonymous
abstract class LinkStyle{}
extension LinkStyleExtension on LinkStyle {
  external CSSStyleSheet? get sheet;
}
@JS("Location")
external dynamic Location;
@JS("Lock")
external dynamic Lock;
@JS("LockManager")
external dynamic LockManager;
@JS()
@anonymous
abstract class MIDIAccessEventMap{}
extension MIDIAccessEventMapExtension on MIDIAccessEventMap {
  external MIDIConnectionEvent get "statechange";
  external set "statechange"(MIDIConnectionEvent value);
}
@JS("MIDIAccess")
external dynamic MIDIAccess;
@JS("MIDIConnectionEvent")
external dynamic MIDIConnectionEvent;
@JS()
@anonymous
abstract class MIDIInputEventMap{}
extension MIDIInputEventMapExtension on MIDIInputEventMap {
  external MIDIMessageEvent get "midimessage";
  external set "midimessage"(MIDIMessageEvent value);
}
@JS("MIDIInput")
external dynamic MIDIInput;
@JS("MIDIInputMap")
external dynamic MIDIInputMap;
@JS("MIDIMessageEvent")
external dynamic MIDIMessageEvent;
@JS("MIDIOutput")
external dynamic MIDIOutput;
@JS("MIDIOutputMap")
external dynamic MIDIOutputMap;
@JS()
@anonymous
abstract class MIDIPortEventMap{}
extension MIDIPortEventMapExtension on MIDIPortEventMap {
  external MIDIConnectionEvent get "statechange";
  external set "statechange"(MIDIConnectionEvent value);
}
@JS("MIDIPort")
external dynamic MIDIPort;
@JS()
@anonymous
abstract class MathMLElementEventMap{}
extension MathMLElementEventMapExtension on MathMLElementEventMap {
}
@JS("MathMLElement")
external dynamic MathMLElement;
@JS("MediaCapabilities")
external dynamic MediaCapabilities;
@JS("MediaDeviceInfo")
external dynamic MediaDeviceInfo;
@JS()
@anonymous
abstract class MediaDevicesEventMap{}
extension MediaDevicesEventMapExtension on MediaDevicesEventMap {
  external Event get "devicechange";
  external set "devicechange"(Event value);
}
@JS("MediaDevices")
external dynamic MediaDevices;
@JS("MediaElementAudioSourceNode")
external dynamic MediaElementAudioSourceNode;
@JS("MediaEncryptedEvent")
external dynamic MediaEncryptedEvent;
@JS("MediaError")
external dynamic MediaError;
@JS("MediaKeyMessageEvent")
external dynamic MediaKeyMessageEvent;
@JS()
@anonymous
abstract class MediaKeySessionEventMap{}
extension MediaKeySessionEventMapExtension on MediaKeySessionEventMap {
  external Event get "keystatuseschange";
  external set "keystatuseschange"(Event value);
  external MediaKeyMessageEvent get "message";
  external set "message"(MediaKeyMessageEvent value);
}
@JS("MediaKeySession")
external dynamic MediaKeySession;
@JS("MediaKeyStatusMap")
external dynamic MediaKeyStatusMap;
@JS("MediaKeySystemAccess")
external dynamic MediaKeySystemAccess;
@JS("MediaKeys")
external dynamic MediaKeys;
@JS("MediaList")
external dynamic MediaList;
@JS("MediaMetadata")
external dynamic MediaMetadata;
@JS()
@anonymous
abstract class MediaQueryListEventMap{}
extension MediaQueryListEventMapExtension on MediaQueryListEventMap {
  external MediaQueryListEvent get "change";
  external set "change"(MediaQueryListEvent value);
}
@JS("MediaQueryList")
external dynamic MediaQueryList;
@JS("MediaQueryListEvent")
external dynamic MediaQueryListEvent;
@JS()
@anonymous
abstract class MediaRecorderEventMap{}
extension MediaRecorderEventMapExtension on MediaRecorderEventMap {
  external BlobEvent get "dataavailable";
  external set "dataavailable"(BlobEvent value);
  external ErrorEvent get "error";
  external set "error"(ErrorEvent value);
  external Event get "pause";
  external set "pause"(Event value);
  external Event get "resume";
  external set "resume"(Event value);
  external Event get "start";
  external set "start"(Event value);
  external Event get "stop";
  external set "stop"(Event value);
}
@JS("MediaRecorder")
external dynamic MediaRecorder;
@JS("MediaSession")
external dynamic MediaSession;
@JS()
@anonymous
abstract class MediaSourceEventMap{}
extension MediaSourceEventMapExtension on MediaSourceEventMap {
  external Event get "sourceclose";
  external set "sourceclose"(Event value);
  external Event get "sourceended";
  external set "sourceended"(Event value);
  external Event get "sourceopen";
  external set "sourceopen"(Event value);
}
@JS("MediaSource")
external dynamic MediaSource;
@JS("MediaSourceHandle")
external dynamic MediaSourceHandle;
@JS()
@anonymous
abstract class MediaStreamEventMap{}
extension MediaStreamEventMapExtension on MediaStreamEventMap {
  external MediaStreamTrackEvent get "addtrack";
  external set "addtrack"(MediaStreamTrackEvent value);
  external MediaStreamTrackEvent get "removetrack";
  external set "removetrack"(MediaStreamTrackEvent value);
}
@JS("MediaStream")
external dynamic MediaStream;
@JS("MediaStreamAudioDestinationNode")
external dynamic MediaStreamAudioDestinationNode;
@JS("MediaStreamAudioSourceNode")
external dynamic MediaStreamAudioSourceNode;
@JS()
@anonymous
abstract class MediaStreamTrackEventMap{}
extension MediaStreamTrackEventMapExtension on MediaStreamTrackEventMap {
  external Event get "ended";
  external set "ended"(Event value);
  external Event get "mute";
  external set "mute"(Event value);
  external Event get "unmute";
  external set "unmute"(Event value);
}
@JS("MediaStreamTrack")
external dynamic MediaStreamTrack;
@JS("MediaStreamTrackEvent")
external dynamic MediaStreamTrackEvent;
@JS("MessageChannel")
external dynamic MessageChannel;
@JS("MessageEvent")
external dynamic MessageEvent;
@JS()
@anonymous
abstract class MessageEventTargetEventMap{}
extension MessageEventTargetEventMapExtension on MessageEventTargetEventMap {
  external MessageEvent get "message";
  external set "message"(MessageEvent value);
  external MessageEvent get "messageerror";
  external set "messageerror"(MessageEvent value);
}
@JS()
@anonymous
abstract class MessageEventTarget{}
extension MessageEventTargetExtension on MessageEventTarget {
  external dynamic Function(T, MessageEvent)? get onmessage;
  external set onmessage(dynamic Function(T, MessageEvent)? value);
  external dynamic Function(T, MessageEvent)? get onmessageerror;
  external set onmessageerror(dynamic Function(T, MessageEvent)? value);
  external void addEventListener(K type, dynamic Function(T, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  external void removeEventListener(K type, dynamic Function(T, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS()
@anonymous
abstract class MessagePortEventMap{}
extension MessagePortEventMapExtension on MessagePortEventMap {
  external MessageEvent get "message";
  external set "message"(MessageEvent value);
  external MessageEvent get "messageerror";
  external set "messageerror"(MessageEvent value);
}
@JS("MessagePort")
external dynamic MessagePort;
@JS("MimeType")
external dynamic MimeType;
@JS("MimeTypeArray")
external dynamic MimeTypeArray;
@JS("MouseEvent")
external dynamic MouseEvent;
@JS("MutationObserver")
external dynamic MutationObserver;
@JS("MutationRecord")
external dynamic MutationRecord;
@JS("NamedNodeMap")
external dynamic NamedNodeMap;
@JS("NavigationActivation")
external dynamic NavigationActivation;
@JS()
@anonymous
abstract class NavigationHistoryEntryEventMap{}
extension NavigationHistoryEntryEventMapExtension on NavigationHistoryEntryEventMap {
  external Event get "dispose";
  external set "dispose"(Event value);
}
@JS("NavigationHistoryEntry")
external dynamic NavigationHistoryEntry;
@JS("NavigationPreloadManager")
external dynamic NavigationPreloadManager;
@JS("Navigator")
external dynamic Navigator;
@JS()
@anonymous
abstract class NavigatorAutomationInformation{}
extension NavigatorAutomationInformationExtension on NavigatorAutomationInformation {
  external bool get webdriver;
}
@JS()
@anonymous
abstract class NavigatorBadge{}
extension NavigatorBadgeExtension on NavigatorBadge {
  external Promise clearAppBadge();
  external Promise setAppBadge([num contents]);
}
@JS()
@anonymous
abstract class NavigatorConcurrentHardware{}
extension NavigatorConcurrentHardwareExtension on NavigatorConcurrentHardware {
  external num get hardwareConcurrency;
}
@JS()
@anonymous
abstract class NavigatorContentUtils{}
extension NavigatorContentUtilsExtension on NavigatorContentUtils {
  external void registerProtocolHandler(String scheme, dynamic /* String|URL */ url);
}
@JS()
@anonymous
abstract class NavigatorCookies{}
extension NavigatorCookiesExtension on NavigatorCookies {
  external bool get cookieEnabled;
}
@JS()
@anonymous
abstract class NavigatorID{}
extension NavigatorIDExtension on NavigatorID {
  external String get appCodeName;
  external String get appName;
  external String get appVersion;
  external String get platform;
  external String get product;
  external String get productSub;
  external String get userAgent;
  external String get vendor;
  external String get vendorSub;
}
@JS()
@anonymous
abstract class NavigatorLanguage{}
extension NavigatorLanguageExtension on NavigatorLanguage {
  external String get language;
  external ReadonlyArray<String> get languages;
}
@JS()
@anonymous
abstract class NavigatorLocks{}
extension NavigatorLocksExtension on NavigatorLocks {
  external LockManager get locks;
}
@JS()
@anonymous
abstract class NavigatorOnLine{}
extension NavigatorOnLineExtension on NavigatorOnLine {
  external bool get onLine;
}
@JS()
@anonymous
abstract class NavigatorPlugins{}
extension NavigatorPluginsExtension on NavigatorPlugins {
  external MimeTypeArray get mimeTypes;
  external bool get pdfViewerEnabled;
  external PluginArray get plugins;
  external bool javaEnabled();
}
@JS()
@anonymous
abstract class NavigatorStorage{}
extension NavigatorStorageExtension on NavigatorStorage {
  external StorageManager get storage;
}
@JS("Node")
external dynamic Node;
@JS("NodeIterator")
external dynamic NodeIterator;
@JS("NodeList")
external dynamic NodeList;
@JS()
@anonymous
abstract class NodeListOf{}
extension NodeListOfExtension on NodeListOf {
  external TNode item(num index);
  external void forEach(void Function(TNode, num, NodeListOf<TNode>) callbackfn, [dynamic thisArg]);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS()
@anonymous
abstract class NonDocumentTypeChildNode{}
extension NonDocumentTypeChildNodeExtension on NonDocumentTypeChildNode {
  external Element? get nextElementSibling;
  external Element? get previousElementSibling;
}
@JS()
@anonymous
abstract class NonElementParentNode{}
extension NonElementParentNodeExtension on NonElementParentNode {
  external Element? getElementById(String elementId);
}
@JS()
@anonymous
abstract class NotificationEventMap{}
extension NotificationEventMapExtension on NotificationEventMap {
  external Event get "click";
  external set "click"(Event value);
  external Event get "close";
  external set "close"(Event value);
  external Event get "error";
  external set "error"(Event value);
  external Event get "show";
  external set "show"(Event value);
}
@JS("Notification")
external dynamic Notification;
@JS()
@anonymous
abstract class OES_draw_buffers_indexed{}
extension OES_draw_buffers_indexedExtension on OES_draw_buffers_indexed {
  external void blendEquationSeparateiOES(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
  external void blendEquationiOES(GLuint buf, GLenum mode);
  external void blendFuncSeparateiOES(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
  external void blendFunciOES(GLuint buf, GLenum src, GLenum dst);
  external void colorMaskiOES(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
  external void disableiOES(GLenum target, GLuint index);
  external void enableiOES(GLenum target, GLuint index);
}
@JS()
@anonymous
abstract class OES_element_index_uint{}
extension OES_element_index_uintExtension on OES_element_index_uint {
}
@JS()
@anonymous
abstract class OES_fbo_render_mipmap{}
extension OES_fbo_render_mipmapExtension on OES_fbo_render_mipmap {
}
@JS()
@anonymous
abstract class OES_standard_derivatives{}
extension OES_standard_derivativesExtension on OES_standard_derivatives {
  external num get FRAGMENT_SHADER_DERIVATIVE_HINT_OES;
}
@JS()
@anonymous
abstract class OES_texture_float{}
extension OES_texture_floatExtension on OES_texture_float {
}
@JS()
@anonymous
abstract class OES_texture_float_linear{}
extension OES_texture_float_linearExtension on OES_texture_float_linear {
}
@JS()
@anonymous
abstract class OES_texture_half_float{}
extension OES_texture_half_floatExtension on OES_texture_half_float {
  external num get HALF_FLOAT_OES;
}
@JS()
@anonymous
abstract class OES_texture_half_float_linear{}
extension OES_texture_half_float_linearExtension on OES_texture_half_float_linear {
}
@JS()
@anonymous
abstract class OES_vertex_array_object{}
extension OES_vertex_array_objectExtension on OES_vertex_array_object {
  external num get VERTEX_ARRAY_BINDING_OES;
  external void bindVertexArrayOES(WebGLVertexArrayObjectOES? arrayObject);
  external WebGLVertexArrayObjectOES createVertexArrayOES();
  external void deleteVertexArrayOES(WebGLVertexArrayObjectOES? arrayObject);
  external GLboolean isVertexArrayOES(WebGLVertexArrayObjectOES? arrayObject);
}
@JS()
@anonymous
abstract class OVR_multiview2{}
extension OVR_multiview2Extension on OVR_multiview2 {
  external num get FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR;
  external num get FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR;
  external num get MAX_VIEWS_OVR;
  external num get FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR;
  external void framebufferTextureMultiviewOVR(GLenum target, GLenum attachment, WebGLTexture? texture, GLint level, GLint baseViewIndex, GLsizei numViews);
}
@JS("OfflineAudioCompletionEvent")
external dynamic OfflineAudioCompletionEvent;
@JS()
@anonymous
abstract class OfflineAudioContextEventMap{}
extension OfflineAudioContextEventMapExtension on OfflineAudioContextEventMap {
  external OfflineAudioCompletionEvent get "complete";
  external set "complete"(OfflineAudioCompletionEvent value);
}
@JS("OfflineAudioContext")
external dynamic OfflineAudioContext;
@JS()
@anonymous
abstract class OffscreenCanvasEventMap{}
extension OffscreenCanvasEventMapExtension on OffscreenCanvasEventMap {
  external Event get "contextlost";
  external set "contextlost"(Event value);
  external Event get "contextrestored";
  external set "contextrestored"(Event value);
}
@JS("OffscreenCanvas")
external dynamic OffscreenCanvas;
@JS("OffscreenCanvasRenderingContext2D")
external dynamic OffscreenCanvasRenderingContext2D;
@JS("OscillatorNode")
external dynamic OscillatorNode;
@JS("OverconstrainedError")
external dynamic OverconstrainedError;
@JS("PageRevealEvent")
external dynamic PageRevealEvent;
@JS("PageSwapEvent")
external dynamic PageSwapEvent;
@JS("PageTransitionEvent")
external dynamic PageTransitionEvent;
@JS("PannerNode")
external dynamic PannerNode;
@JS()
@anonymous
abstract class ParentNode{}
extension ParentNodeExtension on ParentNode {
  external num get childElementCount;
  external HTMLCollection get children;
  external Element? get firstElementChild;
  external Element? get lastElementChild;
  external void append([/* rest */ List<dynamic /* Node|String */> nodes]);
  external void prepend([/* rest */ List<dynamic /* Node|String */> nodes]);
  external dynamic? querySelector(K selectors);
  external dynamic? querySelector(K selectors);
  external dynamic? querySelector(K selectors);
  external dynamic? querySelector(K selectors);
  external E? querySelector(String selectors);
  external NodeListOf querySelectorAll(K selectors);
  external NodeListOf querySelectorAll(K selectors);
  external NodeListOf querySelectorAll(K selectors);
  external NodeListOf querySelectorAll(K selectors);
  external NodeListOf querySelectorAll(String selectors);
  external void replaceChildren([/* rest */ List<dynamic /* Node|String */> nodes]);
}
@JS("Path2D")
external dynamic Path2D;
@JS("PaymentAddress")
external dynamic PaymentAddress;
@JS("PaymentMethodChangeEvent")
external dynamic PaymentMethodChangeEvent;
@JS()
@anonymous
abstract class PaymentRequestEventMap{}
extension PaymentRequestEventMapExtension on PaymentRequestEventMap {
  external PaymentMethodChangeEvent get "paymentmethodchange";
  external set "paymentmethodchange"(PaymentMethodChangeEvent value);
  external PaymentRequestUpdateEvent get "shippingaddresschange";
  external set "shippingaddresschange"(PaymentRequestUpdateEvent value);
  external PaymentRequestUpdateEvent get "shippingoptionchange";
  external set "shippingoptionchange"(PaymentRequestUpdateEvent value);
}
@JS("PaymentRequest")
external dynamic PaymentRequest;
@JS("PaymentRequestUpdateEvent")
external dynamic PaymentRequestUpdateEvent;
@JS()
@anonymous
abstract class PaymentResponseEventMap{}
extension PaymentResponseEventMapExtension on PaymentResponseEventMap {
  external PaymentRequestUpdateEvent get "payerdetailchange";
  external set "payerdetailchange"(PaymentRequestUpdateEvent value);
}
@JS("PaymentResponse")
external dynamic PaymentResponse;
@JS()
@anonymous
abstract class PerformanceEventMap{}
extension PerformanceEventMapExtension on PerformanceEventMap {
  external Event get "resourcetimingbufferfull";
  external set "resourcetimingbufferfull"(Event value);
}
@JS("Performance")
external dynamic Performance;
@JS("PerformanceEntry")
external dynamic PerformanceEntry;
@JS("PerformanceEventTiming")
external dynamic PerformanceEventTiming;
@JS("PerformanceMark")
external dynamic PerformanceMark;
@JS("PerformanceMeasure")
external dynamic PerformanceMeasure;
@JS("PerformanceNavigation")
external dynamic PerformanceNavigation;
@JS("PerformanceNavigationTiming")
external dynamic PerformanceNavigationTiming;
@JS("PerformanceObserver")
external dynamic PerformanceObserver;
@JS("PerformanceObserverEntryList")
external dynamic PerformanceObserverEntryList;
@JS("PerformancePaintTiming")
external dynamic PerformancePaintTiming;
@JS("PerformanceResourceTiming")
external dynamic PerformanceResourceTiming;
@JS("PerformanceServerTiming")
external dynamic PerformanceServerTiming;
@JS("PerformanceTiming")
external dynamic PerformanceTiming;
@JS("PeriodicWave")
external dynamic PeriodicWave;
@JS()
@anonymous
abstract class PermissionStatusEventMap{}
extension PermissionStatusEventMapExtension on PermissionStatusEventMap {
  external Event get "change";
  external set "change"(Event value);
}
@JS("PermissionStatus")
external dynamic PermissionStatus;
@JS("Permissions")
external dynamic Permissions;
@JS("PictureInPictureEvent")
external dynamic PictureInPictureEvent;
@JS()
@anonymous
abstract class PictureInPictureWindowEventMap{}
extension PictureInPictureWindowEventMapExtension on PictureInPictureWindowEventMap {
  external Event get "resize";
  external set "resize"(Event value);
}
@JS("PictureInPictureWindow")
external dynamic PictureInPictureWindow;
@JS("Plugin")
external dynamic Plugin;
@JS("PluginArray")
external dynamic PluginArray;
@JS("PointerEvent")
external dynamic PointerEvent;
@JS("PopStateEvent")
external dynamic PopStateEvent;
@JS()
@anonymous
abstract class PopoverInvokerElement{}
extension PopoverInvokerElementExtension on PopoverInvokerElement {
  external String get popoverTargetAction;
  external set popoverTargetAction(String value);
  external Element? get popoverTargetElement;
  external set popoverTargetElement(Element? value);
}
@JS("ProcessingInstruction")
external dynamic ProcessingInstruction;
@JS("ProgressEvent")
external dynamic ProgressEvent;
@JS("PromiseRejectionEvent")
external dynamic PromiseRejectionEvent;
@JS("PublicKeyCredential")
external dynamic PublicKeyCredential;
@JS("PushManager")
external dynamic PushManager;
@JS("PushSubscription")
external dynamic PushSubscription;
@JS("PushSubscriptionOptions")
external dynamic PushSubscriptionOptions;
@JS("RTCCertificate")
external dynamic RTCCertificate;
@JS()
@anonymous
abstract class RTCDTMFSenderEventMap{}
extension RTCDTMFSenderEventMapExtension on RTCDTMFSenderEventMap {
  external RTCDTMFToneChangeEvent get "tonechange";
  external set "tonechange"(RTCDTMFToneChangeEvent value);
}
@JS("RTCDTMFSender")
external dynamic RTCDTMFSender;
@JS("RTCDTMFToneChangeEvent")
external dynamic RTCDTMFToneChangeEvent;
@JS()
@anonymous
abstract class RTCDataChannelEventMap{}
extension RTCDataChannelEventMapExtension on RTCDataChannelEventMap {
  external Event get "bufferedamountlow";
  external set "bufferedamountlow"(Event value);
  external Event get "close";
  external set "close"(Event value);
  external Event get "closing";
  external set "closing"(Event value);
  external RTCErrorEvent get "error";
  external set "error"(RTCErrorEvent value);
  external MessageEvent get "message";
  external set "message"(MessageEvent value);
  external Event get "open";
  external set "open"(Event value);
}
@JS("RTCDataChannel")
external dynamic RTCDataChannel;
@JS("RTCDataChannelEvent")
external dynamic RTCDataChannelEvent;
@JS()
@anonymous
abstract class RTCDtlsTransportEventMap{}
extension RTCDtlsTransportEventMapExtension on RTCDtlsTransportEventMap {
  external RTCErrorEvent get "error";
  external set "error"(RTCErrorEvent value);
  external Event get "statechange";
  external set "statechange"(Event value);
}
@JS("RTCDtlsTransport")
external dynamic RTCDtlsTransport;
@JS("RTCEncodedAudioFrame")
external dynamic RTCEncodedAudioFrame;
@JS("RTCEncodedVideoFrame")
external dynamic RTCEncodedVideoFrame;
@JS("RTCError")
external dynamic RTCError;
@JS("RTCErrorEvent")
external dynamic RTCErrorEvent;
@JS("RTCIceCandidate")
external dynamic RTCIceCandidate;
@JS()
@anonymous
abstract class RTCIceCandidatePair{}
extension RTCIceCandidatePairExtension on RTCIceCandidatePair {
  external RTCIceCandidate get local;
  external set local(RTCIceCandidate value);
  external RTCIceCandidate get remote;
  external set remote(RTCIceCandidate value);
}
@JS()
@anonymous
abstract class RTCIceTransportEventMap{}
extension RTCIceTransportEventMapExtension on RTCIceTransportEventMap {
  external Event get "gatheringstatechange";
  external set "gatheringstatechange"(Event value);
  external Event get "selectedcandidatepairchange";
  external set "selectedcandidatepairchange"(Event value);
  external Event get "statechange";
  external set "statechange"(Event value);
}
@JS("RTCIceTransport")
external dynamic RTCIceTransport;
@JS()
@anonymous
abstract class RTCPeerConnectionEventMap{}
extension RTCPeerConnectionEventMapExtension on RTCPeerConnectionEventMap {
  external Event get "connectionstatechange";
  external set "connectionstatechange"(Event value);
  external RTCDataChannelEvent get "datachannel";
  external set "datachannel"(RTCDataChannelEvent value);
  external RTCPeerConnectionIceEvent get "icecandidate";
  external set "icecandidate"(RTCPeerConnectionIceEvent value);
  external RTCPeerConnectionIceErrorEvent get "icecandidateerror";
  external set "icecandidateerror"(RTCPeerConnectionIceErrorEvent value);
  external Event get "iceconnectionstatechange";
  external set "iceconnectionstatechange"(Event value);
  external Event get "icegatheringstatechange";
  external set "icegatheringstatechange"(Event value);
  external Event get "negotiationneeded";
  external set "negotiationneeded"(Event value);
  external Event get "signalingstatechange";
  external set "signalingstatechange"(Event value);
  external RTCTrackEvent get "track";
  external set "track"(RTCTrackEvent value);
}
@JS("RTCPeerConnection")
external dynamic RTCPeerConnection;
@JS("RTCPeerConnectionIceErrorEvent")
external dynamic RTCPeerConnectionIceErrorEvent;
@JS("RTCPeerConnectionIceEvent")
external dynamic RTCPeerConnectionIceEvent;
@JS("RTCRtpReceiver")
external dynamic RTCRtpReceiver;
@JS("RTCRtpScriptTransform")
external dynamic RTCRtpScriptTransform;
@JS("RTCRtpSender")
external dynamic RTCRtpSender;
@JS("RTCRtpTransceiver")
external dynamic RTCRtpTransceiver;
@JS()
@anonymous
abstract class RTCSctpTransportEventMap{}
extension RTCSctpTransportEventMapExtension on RTCSctpTransportEventMap {
  external Event get "statechange";
  external set "statechange"(Event value);
}
@JS("RTCSctpTransport")
external dynamic RTCSctpTransport;
@JS("RTCSessionDescription")
external dynamic RTCSessionDescription;
@JS("RTCStatsReport")
external dynamic RTCStatsReport;
@JS("RTCTrackEvent")
external dynamic RTCTrackEvent;
@JS("RadioNodeList")
external dynamic RadioNodeList;
@JS("Range")
external dynamic Range;
@JS("ReadableByteStreamController")
external dynamic ReadableByteStreamController;
@JS("ReadableStream")
external dynamic ReadableStream;
@JS("ReadableStreamBYOBReader")
external dynamic ReadableStreamBYOBReader;
@JS("ReadableStreamBYOBRequest")
external dynamic ReadableStreamBYOBRequest;
@JS("ReadableStreamDefaultController")
external dynamic ReadableStreamDefaultController;
@JS("ReadableStreamDefaultReader")
external dynamic ReadableStreamDefaultReader;
@JS()
@anonymous
abstract class ReadableStreamGenericReader{}
extension ReadableStreamGenericReaderExtension on ReadableStreamGenericReader {
  external Future<void> get closed;
  external Promise cancel([dynamic reason]);
}
@JS()
@anonymous
abstract class RemotePlaybackEventMap{}
extension RemotePlaybackEventMapExtension on RemotePlaybackEventMap {
  external Event get "connect";
  external set "connect"(Event value);
  external Event get "connecting";
  external set "connecting"(Event value);
  external Event get "disconnect";
  external set "disconnect"(Event value);
}
@JS("RemotePlayback")
external dynamic RemotePlayback;
@JS("Report")
external dynamic Report;
@JS("ReportBody")
external dynamic ReportBody;
@JS("ReportingObserver")
external dynamic ReportingObserver;
@JS("Request")
external dynamic Request;
@JS("ResizeObserver")
external dynamic ResizeObserver;
@JS("ResizeObserverEntry")
external dynamic ResizeObserverEntry;
@JS("ResizeObserverSize")
external dynamic ResizeObserverSize;
@JS("Response")
external dynamic Response;
@JS("SVGAElement")
external dynamic SVGAElement;
@JS("SVGAngle")
external dynamic SVGAngle;
@JS("SVGAnimateElement")
external dynamic SVGAnimateElement;
@JS("SVGAnimateMotionElement")
external dynamic SVGAnimateMotionElement;
@JS("SVGAnimateTransformElement")
external dynamic SVGAnimateTransformElement;
@JS("SVGAnimatedAngle")
external dynamic SVGAnimatedAngle;
@JS("SVGAnimatedBoolean")
external dynamic SVGAnimatedBoolean;
@JS("SVGAnimatedEnumeration")
external dynamic SVGAnimatedEnumeration;
@JS("SVGAnimatedInteger")
external dynamic SVGAnimatedInteger;
@JS("SVGAnimatedLength")
external dynamic SVGAnimatedLength;
@JS("SVGAnimatedLengthList")
external dynamic SVGAnimatedLengthList;
@JS("SVGAnimatedNumber")
external dynamic SVGAnimatedNumber;
@JS("SVGAnimatedNumberList")
external dynamic SVGAnimatedNumberList;
@JS()
@anonymous
abstract class SVGAnimatedPoints{}
extension SVGAnimatedPointsExtension on SVGAnimatedPoints {
  external SVGPointList get animatedPoints;
  external SVGPointList get points;
}
@JS("SVGAnimatedPreserveAspectRatio")
external dynamic SVGAnimatedPreserveAspectRatio;
@JS("SVGAnimatedRect")
external dynamic SVGAnimatedRect;
@JS("SVGAnimatedString")
external dynamic SVGAnimatedString;
@JS("SVGAnimatedTransformList")
external dynamic SVGAnimatedTransformList;
@JS("SVGAnimationElement")
external dynamic SVGAnimationElement;
@JS("SVGCircleElement")
external dynamic SVGCircleElement;
@JS("SVGClipPathElement")
external dynamic SVGClipPathElement;
@JS("SVGComponentTransferFunctionElement")
external dynamic SVGComponentTransferFunctionElement;
@JS("SVGDefsElement")
external dynamic SVGDefsElement;
@JS("SVGDescElement")
external dynamic SVGDescElement;
@JS()
@anonymous
abstract class SVGElementEventMap{}
extension SVGElementEventMapExtension on SVGElementEventMap {
}
@JS("SVGElement")
external dynamic SVGElement;
@JS("SVGEllipseElement")
external dynamic SVGEllipseElement;
@JS("SVGFEBlendElement")
external dynamic SVGFEBlendElement;
@JS("SVGFEColorMatrixElement")
external dynamic SVGFEColorMatrixElement;
@JS("SVGFEComponentTransferElement")
external dynamic SVGFEComponentTransferElement;
@JS("SVGFECompositeElement")
external dynamic SVGFECompositeElement;
@JS("SVGFEConvolveMatrixElement")
external dynamic SVGFEConvolveMatrixElement;
@JS("SVGFEDiffuseLightingElement")
external dynamic SVGFEDiffuseLightingElement;
@JS("SVGFEDisplacementMapElement")
external dynamic SVGFEDisplacementMapElement;
@JS("SVGFEDistantLightElement")
external dynamic SVGFEDistantLightElement;
@JS("SVGFEDropShadowElement")
external dynamic SVGFEDropShadowElement;
@JS("SVGFEFloodElement")
external dynamic SVGFEFloodElement;
@JS("SVGFEFuncAElement")
external dynamic SVGFEFuncAElement;
@JS("SVGFEFuncBElement")
external dynamic SVGFEFuncBElement;
@JS("SVGFEFuncGElement")
external dynamic SVGFEFuncGElement;
@JS("SVGFEFuncRElement")
external dynamic SVGFEFuncRElement;
@JS("SVGFEGaussianBlurElement")
external dynamic SVGFEGaussianBlurElement;
@JS("SVGFEImageElement")
external dynamic SVGFEImageElement;
@JS("SVGFEMergeElement")
external dynamic SVGFEMergeElement;
@JS("SVGFEMergeNodeElement")
external dynamic SVGFEMergeNodeElement;
@JS("SVGFEMorphologyElement")
external dynamic SVGFEMorphologyElement;
@JS("SVGFEOffsetElement")
external dynamic SVGFEOffsetElement;
@JS("SVGFEPointLightElement")
external dynamic SVGFEPointLightElement;
@JS("SVGFESpecularLightingElement")
external dynamic SVGFESpecularLightingElement;
@JS("SVGFESpotLightElement")
external dynamic SVGFESpotLightElement;
@JS("SVGFETileElement")
external dynamic SVGFETileElement;
@JS("SVGFETurbulenceElement")
external dynamic SVGFETurbulenceElement;
@JS("SVGFilterElement")
external dynamic SVGFilterElement;
@JS()
@anonymous
abstract class SVGFilterPrimitiveStandardAttributes{}
extension SVGFilterPrimitiveStandardAttributesExtension on SVGFilterPrimitiveStandardAttributes {
  external SVGAnimatedLength get height;
  external SVGAnimatedString get result;
  external SVGAnimatedLength get width;
  external SVGAnimatedLength get x;
  external SVGAnimatedLength get y;
}
@JS()
@anonymous
abstract class SVGFitToViewBox{}
extension SVGFitToViewBoxExtension on SVGFitToViewBox {
  external SVGAnimatedPreserveAspectRatio get preserveAspectRatio;
  external SVGAnimatedRect get viewBox;
}
@JS("SVGForeignObjectElement")
external dynamic SVGForeignObjectElement;
@JS("SVGGElement")
external dynamic SVGGElement;
@JS("SVGGeometryElement")
external dynamic SVGGeometryElement;
@JS("SVGGradientElement")
external dynamic SVGGradientElement;
@JS("SVGGraphicsElement")
external dynamic SVGGraphicsElement;
@JS("SVGImageElement")
external dynamic SVGImageElement;
@JS("SVGLength")
external dynamic SVGLength;
@JS("SVGLengthList")
external dynamic SVGLengthList;
@JS("SVGLineElement")
external dynamic SVGLineElement;
@JS("SVGLinearGradientElement")
external dynamic SVGLinearGradientElement;
@JS("SVGMPathElement")
external dynamic SVGMPathElement;
@JS("SVGMarkerElement")
external dynamic SVGMarkerElement;
@JS("SVGMaskElement")
external dynamic SVGMaskElement;
@JS("SVGMetadataElement")
external dynamic SVGMetadataElement;
@JS("SVGNumber")
external dynamic SVGNumber;
@JS("SVGNumberList")
external dynamic SVGNumberList;
@JS("SVGPathElement")
external dynamic SVGPathElement;
@JS("SVGPatternElement")
external dynamic SVGPatternElement;
@JS("SVGPointList")
external dynamic SVGPointList;
@JS("SVGPolygonElement")
external dynamic SVGPolygonElement;
@JS("SVGPolylineElement")
external dynamic SVGPolylineElement;
@JS("SVGPreserveAspectRatio")
external dynamic SVGPreserveAspectRatio;
@JS("SVGRadialGradientElement")
external dynamic SVGRadialGradientElement;
@JS("SVGRectElement")
external dynamic SVGRectElement;
@JS()
@anonymous
abstract class SVGSVGElementEventMap{}
extension SVGSVGElementEventMapExtension on SVGSVGElementEventMap {
}
@JS("SVGSVGElement")
external dynamic SVGSVGElement;
@JS("SVGScriptElement")
external dynamic SVGScriptElement;
@JS("SVGSetElement")
external dynamic SVGSetElement;
@JS("SVGStopElement")
external dynamic SVGStopElement;
@JS("SVGStringList")
external dynamic SVGStringList;
@JS("SVGStyleElement")
external dynamic SVGStyleElement;
@JS("SVGSwitchElement")
external dynamic SVGSwitchElement;
@JS("SVGSymbolElement")
external dynamic SVGSymbolElement;
@JS("SVGTSpanElement")
external dynamic SVGTSpanElement;
@JS()
@anonymous
abstract class SVGTests{}
extension SVGTestsExtension on SVGTests {
  external SVGStringList get requiredExtensions;
  external SVGStringList get systemLanguage;
}
@JS("SVGTextContentElement")
external dynamic SVGTextContentElement;
@JS("SVGTextElement")
external dynamic SVGTextElement;
@JS("SVGTextPathElement")
external dynamic SVGTextPathElement;
@JS("SVGTextPositioningElement")
external dynamic SVGTextPositioningElement;
@JS("SVGTitleElement")
external dynamic SVGTitleElement;
@JS("SVGTransform")
external dynamic SVGTransform;
@JS("SVGTransformList")
external dynamic SVGTransformList;
@JS()
@anonymous
abstract class SVGURIReference{}
extension SVGURIReferenceExtension on SVGURIReference {
  external SVGAnimatedString get href;
}
@JS("SVGUnitTypes")
external dynamic SVGUnitTypes;
@JS("SVGUseElement")
external dynamic SVGUseElement;
@JS("SVGViewElement")
external dynamic SVGViewElement;
@JS("Screen")
external dynamic Screen;
@JS()
@anonymous
abstract class ScreenOrientationEventMap{}
extension ScreenOrientationEventMapExtension on ScreenOrientationEventMap {
  external Event get "change";
  external set "change"(Event value);
}
@JS("ScreenOrientation")
external dynamic ScreenOrientation;
@JS()
@anonymous
abstract class ScriptProcessorNodeEventMap{}
extension ScriptProcessorNodeEventMapExtension on ScriptProcessorNodeEventMap {
  external AudioProcessingEvent get "audioprocess";
  external set "audioprocess"(AudioProcessingEvent value);
}
@JS("ScriptProcessorNode")
external dynamic ScriptProcessorNode;
@JS("SecurityPolicyViolationEvent")
external dynamic SecurityPolicyViolationEvent;
@JS("Selection")
external dynamic Selection;
@JS()
@anonymous
abstract class ServiceWorkerEventMap{}
extension ServiceWorkerEventMapExtension on ServiceWorkerEventMap {
  external Event get "statechange";
  external set "statechange"(Event value);
}
@JS("ServiceWorker")
external dynamic ServiceWorker;
@JS()
@anonymous
abstract class ServiceWorkerContainerEventMap{}
extension ServiceWorkerContainerEventMapExtension on ServiceWorkerContainerEventMap {
  external Event get "controllerchange";
  external set "controllerchange"(Event value);
  external MessageEvent get "message";
  external set "message"(MessageEvent value);
  external MessageEvent get "messageerror";
  external set "messageerror"(MessageEvent value);
}
@JS("ServiceWorkerContainer")
external dynamic ServiceWorkerContainer;
@JS()
@anonymous
abstract class ServiceWorkerRegistrationEventMap{}
extension ServiceWorkerRegistrationEventMapExtension on ServiceWorkerRegistrationEventMap {
  external Event get "updatefound";
  external set "updatefound"(Event value);
}
@JS("ServiceWorkerRegistration")
external dynamic ServiceWorkerRegistration;
@JS()
@anonymous
abstract class ShadowRootEventMap{}
extension ShadowRootEventMapExtension on ShadowRootEventMap {
  external Event get "slotchange";
  external set "slotchange"(Event value);
}
@JS("ShadowRoot")
external dynamic ShadowRoot;
@JS("SharedWorker")
external dynamic SharedWorker;
@JS()
@anonymous
abstract class Slottable{}
extension SlottableExtension on Slottable {
  external HTMLSlotElement? get assignedSlot;
}
@JS()
@anonymous
abstract class SourceBufferEventMap{}
extension SourceBufferEventMapExtension on SourceBufferEventMap {
  external Event get "abort";
  external set "abort"(Event value);
  external Event get "error";
  external set "error"(Event value);
  external Event get "update";
  external set "update"(Event value);
  external Event get "updateend";
  external set "updateend"(Event value);
  external Event get "updatestart";
  external set "updatestart"(Event value);
}
@JS("SourceBuffer")
external dynamic SourceBuffer;
@JS()
@anonymous
abstract class SourceBufferListEventMap{}
extension SourceBufferListEventMapExtension on SourceBufferListEventMap {
  external Event get "addsourcebuffer";
  external set "addsourcebuffer"(Event value);
  external Event get "removesourcebuffer";
  external set "removesourcebuffer"(Event value);
}
@JS("SourceBufferList")
external dynamic SourceBufferList;
@JS("SpeechRecognitionAlternative")
external dynamic SpeechRecognitionAlternative;
@JS("SpeechRecognitionResult")
external dynamic SpeechRecognitionResult;
@JS("SpeechRecognitionResultList")
external dynamic SpeechRecognitionResultList;
@JS()
@anonymous
abstract class SpeechSynthesisEventMap{}
extension SpeechSynthesisEventMapExtension on SpeechSynthesisEventMap {
  external Event get "voiceschanged";
  external set "voiceschanged"(Event value);
}
@JS("SpeechSynthesis")
external dynamic SpeechSynthesis;
@JS("SpeechSynthesisErrorEvent")
external dynamic SpeechSynthesisErrorEvent;
@JS("SpeechSynthesisEvent")
external dynamic SpeechSynthesisEvent;
@JS()
@anonymous
abstract class SpeechSynthesisUtteranceEventMap{}
extension SpeechSynthesisUtteranceEventMapExtension on SpeechSynthesisUtteranceEventMap {
  external SpeechSynthesisEvent get "boundary";
  external set "boundary"(SpeechSynthesisEvent value);
  external SpeechSynthesisEvent get "end";
  external set "end"(SpeechSynthesisEvent value);
  external SpeechSynthesisErrorEvent get "error";
  external set "error"(SpeechSynthesisErrorEvent value);
  external SpeechSynthesisEvent get "mark";
  external set "mark"(SpeechSynthesisEvent value);
  external SpeechSynthesisEvent get "pause";
  external set "pause"(SpeechSynthesisEvent value);
  external SpeechSynthesisEvent get "resume";
  external set "resume"(SpeechSynthesisEvent value);
  external SpeechSynthesisEvent get "start";
  external set "start"(SpeechSynthesisEvent value);
}
@JS("SpeechSynthesisUtterance")
external dynamic SpeechSynthesisUtterance;
@JS("SpeechSynthesisVoice")
external dynamic SpeechSynthesisVoice;
@JS("StaticRange")
external dynamic StaticRange;
@JS("StereoPannerNode")
external dynamic StereoPannerNode;
@JS("Storage")
external dynamic Storage;
@JS("StorageEvent")
external dynamic StorageEvent;
@JS("StorageManager")
external dynamic StorageManager;
@JS()
@anonymous
abstract class StyleMedia{}
extension StyleMediaExtension on StyleMedia {
  external String get type;
  external set type(String value);
  external bool matchMedium(String mediaquery);
}
@JS("StylePropertyMap")
external dynamic StylePropertyMap;
@JS("StylePropertyMapReadOnly")
external dynamic StylePropertyMapReadOnly;
@JS("StyleSheet")
external dynamic StyleSheet;
@JS("StyleSheetList")
external dynamic StyleSheetList;
@JS("SubmitEvent")
external dynamic SubmitEvent;
@JS("SubtleCrypto")
external dynamic SubtleCrypto;
@JS("Text")
external dynamic Text;
@JS("TextDecoder")
external dynamic TextDecoder;
@JS()
@anonymous
abstract class TextDecoderCommon{}
extension TextDecoderCommonExtension on TextDecoderCommon {
  external String get encoding;
  external bool get fatal;
  external bool get ignoreBOM;
}
@JS("TextDecoderStream")
external dynamic TextDecoderStream;
@JS("TextEncoder")
external dynamic TextEncoder;
@JS()
@anonymous
abstract class TextEncoderCommon{}
extension TextEncoderCommonExtension on TextEncoderCommon {
  external String get encoding;
}
@JS("TextEncoderStream")
external dynamic TextEncoderStream;
@JS("TextEvent")
external dynamic TextEvent;
@JS("TextMetrics")
external dynamic TextMetrics;
@JS()
@anonymous
abstract class TextTrackEventMap{}
extension TextTrackEventMapExtension on TextTrackEventMap {
  external Event get "cuechange";
  external set "cuechange"(Event value);
}
@JS("TextTrack")
external dynamic TextTrack;
@JS()
@anonymous
abstract class TextTrackCueEventMap{}
extension TextTrackCueEventMapExtension on TextTrackCueEventMap {
  external Event get "enter";
  external set "enter"(Event value);
  external Event get "exit";
  external set "exit"(Event value);
}
@JS("TextTrackCue")
external dynamic TextTrackCue;
@JS("TextTrackCueList")
external dynamic TextTrackCueList;
@JS()
@anonymous
abstract class TextTrackListEventMap{}
extension TextTrackListEventMapExtension on TextTrackListEventMap {
  external TrackEvent get "addtrack";
  external set "addtrack"(TrackEvent value);
  external Event get "change";
  external set "change"(Event value);
  external TrackEvent get "removetrack";
  external set "removetrack"(TrackEvent value);
}
@JS("TextTrackList")
external dynamic TextTrackList;
@JS("TimeRanges")
external dynamic TimeRanges;
@JS("ToggleEvent")
external dynamic ToggleEvent;
@JS("Touch")
external dynamic Touch;
@JS("TouchEvent")
external dynamic TouchEvent;
@JS("TouchList")
external dynamic TouchList;
@JS("TrackEvent")
external dynamic TrackEvent;
@JS("TransformStream")
external dynamic TransformStream;
@JS("TransformStreamDefaultController")
external dynamic TransformStreamDefaultController;
@JS("TransitionEvent")
external dynamic TransitionEvent;
@JS("TreeWalker")
external dynamic TreeWalker;
@JS("UIEvent")
external dynamic UIEvent;
@JS("URL")
external dynamic URL;
@JS("webkitURL")
external dynamic webkitURL;
@JS("URLSearchParams")
external dynamic URLSearchParams;
@JS("UserActivation")
external dynamic UserActivation;
@JS("VTTCue")
external dynamic VTTCue;
@JS("VTTRegion")
external dynamic VTTRegion;
@JS("ValidityState")
external dynamic ValidityState;
@JS("VideoColorSpace")
external dynamic VideoColorSpace;
@JS()
@anonymous
abstract class VideoDecoderEventMap{}
extension VideoDecoderEventMapExtension on VideoDecoderEventMap {
  external Event get "dequeue";
  external set "dequeue"(Event value);
}
@JS("VideoDecoder")
external dynamic VideoDecoder;
@JS()
@anonymous
abstract class VideoEncoderEventMap{}
extension VideoEncoderEventMapExtension on VideoEncoderEventMap {
  external Event get "dequeue";
  external set "dequeue"(Event value);
}
@JS("VideoEncoder")
external dynamic VideoEncoder;
@JS("VideoFrame")
external dynamic VideoFrame;
@JS("VideoPlaybackQuality")
external dynamic VideoPlaybackQuality;
@JS("ViewTransition")
external dynamic ViewTransition;
@JS("ViewTransitionTypeSet")
external dynamic ViewTransitionTypeSet;
@JS()
@anonymous
abstract class VisualViewportEventMap{}
extension VisualViewportEventMapExtension on VisualViewportEventMap {
  external Event get "resize";
  external set "resize"(Event value);
  external Event get "scroll";
  external set "scroll"(Event value);
}
@JS("VisualViewport")
external dynamic VisualViewport;
@JS()
@anonymous
abstract class WEBGL_color_buffer_float{}
extension WEBGL_color_buffer_floatExtension on WEBGL_color_buffer_float {
  external num get RGBA32F_EXT;
  external num get FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT;
  external num get UNSIGNED_NORMALIZED_EXT;
}
@JS()
@anonymous
abstract class WEBGL_compressed_texture_astc{}
extension WEBGL_compressed_texture_astcExtension on WEBGL_compressed_texture_astc {
  external num get COMPRESSED_RGBA_ASTC_4x4_KHR;
  external num get COMPRESSED_RGBA_ASTC_5x4_KHR;
  external num get COMPRESSED_RGBA_ASTC_5x5_KHR;
  external num get COMPRESSED_RGBA_ASTC_6x5_KHR;
  external num get COMPRESSED_RGBA_ASTC_6x6_KHR;
  external num get COMPRESSED_RGBA_ASTC_8x5_KHR;
  external num get COMPRESSED_RGBA_ASTC_8x6_KHR;
  external num get COMPRESSED_RGBA_ASTC_8x8_KHR;
  external num get COMPRESSED_RGBA_ASTC_10x5_KHR;
  external num get COMPRESSED_RGBA_ASTC_10x6_KHR;
  external num get COMPRESSED_RGBA_ASTC_10x8_KHR;
  external num get COMPRESSED_RGBA_ASTC_10x10_KHR;
  external num get COMPRESSED_RGBA_ASTC_12x10_KHR;
  external num get COMPRESSED_RGBA_ASTC_12x12_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR;
  external List<String> getSupportedProfiles();
}
@JS()
@anonymous
abstract class WEBGL_compressed_texture_etc{}
extension WEBGL_compressed_texture_etcExtension on WEBGL_compressed_texture_etc {
  external num get COMPRESSED_R11_EAC;
  external num get COMPRESSED_SIGNED_R11_EAC;
  external num get COMPRESSED_RG11_EAC;
  external num get COMPRESSED_SIGNED_RG11_EAC;
  external num get COMPRESSED_RGB8_ETC2;
  external num get COMPRESSED_SRGB8_ETC2;
  external num get COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;
  external num get COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;
  external num get COMPRESSED_RGBA8_ETC2_EAC;
  external num get COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;
}
@JS()
@anonymous
abstract class WEBGL_compressed_texture_etc1{}
extension WEBGL_compressed_texture_etc1Extension on WEBGL_compressed_texture_etc1 {
  external num get COMPRESSED_RGB_ETC1_WEBGL;
}
@JS()
@anonymous
abstract class WEBGL_compressed_texture_pvrtc{}
extension WEBGL_compressed_texture_pvrtcExtension on WEBGL_compressed_texture_pvrtc {
  external num get COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
  external num get COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
  external num get COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
  external num get COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
}
@JS()
@anonymous
abstract class WEBGL_compressed_texture_s3tc{}
extension WEBGL_compressed_texture_s3tcExtension on WEBGL_compressed_texture_s3tc {
  external num get COMPRESSED_RGB_S3TC_DXT1_EXT;
  external num get COMPRESSED_RGBA_S3TC_DXT1_EXT;
  external num get COMPRESSED_RGBA_S3TC_DXT3_EXT;
  external num get COMPRESSED_RGBA_S3TC_DXT5_EXT;
}
@JS()
@anonymous
abstract class WEBGL_compressed_texture_s3tc_srgb{}
extension WEBGL_compressed_texture_s3tc_srgbExtension on WEBGL_compressed_texture_s3tc_srgb {
  external num get COMPRESSED_SRGB_S3TC_DXT1_EXT;
  external num get COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
  external num get COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
  external num get COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
}
@JS()
@anonymous
abstract class WEBGL_debug_renderer_info{}
extension WEBGL_debug_renderer_infoExtension on WEBGL_debug_renderer_info {
  external num get UNMASKED_VENDOR_WEBGL;
  external num get UNMASKED_RENDERER_WEBGL;
}
@JS()
@anonymous
abstract class WEBGL_debug_shaders{}
extension WEBGL_debug_shadersExtension on WEBGL_debug_shaders {
  external String getTranslatedShaderSource(WebGLShader shader);
}
@JS()
@anonymous
abstract class WEBGL_depth_texture{}
extension WEBGL_depth_textureExtension on WEBGL_depth_texture {
  external num get UNSIGNED_INT_24_8_WEBGL;
}
@JS()
@anonymous
abstract class WEBGL_draw_buffers{}
extension WEBGL_draw_buffersExtension on WEBGL_draw_buffers {
  external num get COLOR_ATTACHMENT0_WEBGL;
  external num get COLOR_ATTACHMENT1_WEBGL;
  external num get COLOR_ATTACHMENT2_WEBGL;
  external num get COLOR_ATTACHMENT3_WEBGL;
  external num get COLOR_ATTACHMENT4_WEBGL;
  external num get COLOR_ATTACHMENT5_WEBGL;
  external num get COLOR_ATTACHMENT6_WEBGL;
  external num get COLOR_ATTACHMENT7_WEBGL;
  external num get COLOR_ATTACHMENT8_WEBGL;
  external num get COLOR_ATTACHMENT9_WEBGL;
  external num get COLOR_ATTACHMENT10_WEBGL;
  external num get COLOR_ATTACHMENT11_WEBGL;
  external num get COLOR_ATTACHMENT12_WEBGL;
  external num get COLOR_ATTACHMENT13_WEBGL;
  external num get COLOR_ATTACHMENT14_WEBGL;
  external num get COLOR_ATTACHMENT15_WEBGL;
  external num get DRAW_BUFFER0_WEBGL;
  external num get DRAW_BUFFER1_WEBGL;
  external num get DRAW_BUFFER2_WEBGL;
  external num get DRAW_BUFFER3_WEBGL;
  external num get DRAW_BUFFER4_WEBGL;
  external num get DRAW_BUFFER5_WEBGL;
  external num get DRAW_BUFFER6_WEBGL;
  external num get DRAW_BUFFER7_WEBGL;
  external num get DRAW_BUFFER8_WEBGL;
  external num get DRAW_BUFFER9_WEBGL;
  external num get DRAW_BUFFER10_WEBGL;
  external num get DRAW_BUFFER11_WEBGL;
  external num get DRAW_BUFFER12_WEBGL;
  external num get DRAW_BUFFER13_WEBGL;
  external num get DRAW_BUFFER14_WEBGL;
  external num get DRAW_BUFFER15_WEBGL;
  external num get MAX_COLOR_ATTACHMENTS_WEBGL;
  external num get MAX_DRAW_BUFFERS_WEBGL;
  external void drawBuffersWEBGL(List<GLenum> buffers);
}
@JS()
@anonymous
abstract class WEBGL_lose_context{}
extension WEBGL_lose_contextExtension on WEBGL_lose_context {
  external void loseContext();
  external void restoreContext();
}
@JS()
@anonymous
abstract class WEBGL_multi_draw{}
extension WEBGL_multi_drawExtension on WEBGL_multi_draw {
  external void multiDrawArraysInstancedWEBGL(GLenum mode, dynamic /* Int32Array|List<GLint> */ firstsList, num firstsOffset, dynamic /* Int32Array|List<GLsizei> */ countsList, num countsOffset, dynamic /* Int32Array|List<GLsizei> */ instanceCountsList, num instanceCountsOffset, GLsizei drawcount);
  external void multiDrawArraysWEBGL(GLenum mode, dynamic /* Int32Array|List<GLint> */ firstsList, num firstsOffset, dynamic /* Int32Array|List<GLsizei> */ countsList, num countsOffset, GLsizei drawcount);
  external void multiDrawElementsInstancedWEBGL(GLenum mode, dynamic /* Int32Array|List<GLsizei> */ countsList, num countsOffset, GLenum type, dynamic /* Int32Array|List<GLsizei> */ offsetsList, num offsetsOffset, dynamic /* Int32Array|List<GLsizei> */ instanceCountsList, num instanceCountsOffset, GLsizei drawcount);
  external void multiDrawElementsWEBGL(GLenum mode, dynamic /* Int32Array|List<GLsizei> */ countsList, num countsOffset, GLenum type, dynamic /* Int32Array|List<GLsizei> */ offsetsList, num offsetsOffset, GLsizei drawcount);
}
@JS("WakeLock")
external dynamic WakeLock;
@JS()
@anonymous
abstract class WakeLockSentinelEventMap{}
extension WakeLockSentinelEventMapExtension on WakeLockSentinelEventMap {
  external Event get "release";
  external set "release"(Event value);
}
@JS("WakeLockSentinel")
external dynamic WakeLockSentinel;
@JS("WaveShaperNode")
external dynamic WaveShaperNode;
@JS("WebGL2RenderingContext")
external dynamic WebGL2RenderingContext;
@JS()
@anonymous
abstract class WebGL2RenderingContextBase{}
extension WebGL2RenderingContextBaseExtension on WebGL2RenderingContextBase {
  external num get READ_BUFFER;
  external num get UNPACK_ROW_LENGTH;
  external num get UNPACK_SKIP_ROWS;
  external num get UNPACK_SKIP_PIXELS;
  external num get PACK_ROW_LENGTH;
  external num get PACK_SKIP_ROWS;
  external num get PACK_SKIP_PIXELS;
  external num get COLOR;
  external num get DEPTH;
  external num get STENCIL;
  external num get RED;
  external num get RGB8;
  external num get RGB10_A2;
  external num get TEXTURE_BINDING_3D;
  external num get UNPACK_SKIP_IMAGES;
  external num get UNPACK_IMAGE_HEIGHT;
  external num get TEXTURE_3D;
  external num get TEXTURE_WRAP_R;
  external num get MAX_3D_TEXTURE_SIZE;
  external num get UNSIGNED_INT_2_10_10_10_REV;
  external num get MAX_ELEMENTS_VERTICES;
  external num get MAX_ELEMENTS_INDICES;
  external num get TEXTURE_MIN_LOD;
  external num get TEXTURE_MAX_LOD;
  external num get TEXTURE_BASE_LEVEL;
  external num get TEXTURE_MAX_LEVEL;
  external num get MIN;
  external num get MAX;
  external num get DEPTH_COMPONENT24;
  external num get MAX_TEXTURE_LOD_BIAS;
  external num get TEXTURE_COMPARE_MODE;
  external num get TEXTURE_COMPARE_FUNC;
  external num get CURRENT_QUERY;
  external num get QUERY_RESULT;
  external num get QUERY_RESULT_AVAILABLE;
  external num get STREAM_READ;
  external num get STREAM_COPY;
  external num get STATIC_READ;
  external num get STATIC_COPY;
  external num get DYNAMIC_READ;
  external num get DYNAMIC_COPY;
  external num get MAX_DRAW_BUFFERS;
  external num get DRAW_BUFFER0;
  external num get DRAW_BUFFER1;
  external num get DRAW_BUFFER2;
  external num get DRAW_BUFFER3;
  external num get DRAW_BUFFER4;
  external num get DRAW_BUFFER5;
  external num get DRAW_BUFFER6;
  external num get DRAW_BUFFER7;
  external num get DRAW_BUFFER8;
  external num get DRAW_BUFFER9;
  external num get DRAW_BUFFER10;
  external num get DRAW_BUFFER11;
  external num get DRAW_BUFFER12;
  external num get DRAW_BUFFER13;
  external num get DRAW_BUFFER14;
  external num get DRAW_BUFFER15;
  external num get MAX_FRAGMENT_UNIFORM_COMPONENTS;
  external num get MAX_VERTEX_UNIFORM_COMPONENTS;
  external num get SAMPLER_3D;
  external num get SAMPLER_2D_SHADOW;
  external num get FRAGMENT_SHADER_DERIVATIVE_HINT;
  external num get PIXEL_PACK_BUFFER;
  external num get PIXEL_UNPACK_BUFFER;
  external num get PIXEL_PACK_BUFFER_BINDING;
  external num get PIXEL_UNPACK_BUFFER_BINDING;
  external num get FLOAT_MAT2x3;
  external num get FLOAT_MAT2x4;
  external num get FLOAT_MAT3x2;
  external num get FLOAT_MAT3x4;
  external num get FLOAT_MAT4x2;
  external num get FLOAT_MAT4x3;
  external num get SRGB;
  external num get SRGB8;
  external num get SRGB8_ALPHA8;
  external num get COMPARE_REF_TO_TEXTURE;
  external num get RGBA32F;
  external num get RGB32F;
  external num get RGBA16F;
  external num get RGB16F;
  external num get VERTEX_ATTRIB_ARRAY_INTEGER;
  external num get MAX_ARRAY_TEXTURE_LAYERS;
  external num get MIN_PROGRAM_TEXEL_OFFSET;
  external num get MAX_PROGRAM_TEXEL_OFFSET;
  external num get MAX_VARYING_COMPONENTS;
  external num get TEXTURE_2D_ARRAY;
  external num get TEXTURE_BINDING_2D_ARRAY;
  external num get R11F_G11F_B10F;
  external num get UNSIGNED_INT_10F_11F_11F_REV;
  external num get RGB9_E5;
  external num get UNSIGNED_INT_5_9_9_9_REV;
  external num get TRANSFORM_FEEDBACK_BUFFER_MODE;
  external num get MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS;
  external num get TRANSFORM_FEEDBACK_VARYINGS;
  external num get TRANSFORM_FEEDBACK_BUFFER_START;
  external num get TRANSFORM_FEEDBACK_BUFFER_SIZE;
  external num get TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN;
  external num get RASTERIZER_DISCARD;
  external num get MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS;
  external num get MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS;
  external num get INTERLEAVED_ATTRIBS;
  external num get SEPARATE_ATTRIBS;
  external num get TRANSFORM_FEEDBACK_BUFFER;
  external num get TRANSFORM_FEEDBACK_BUFFER_BINDING;
  external num get RGBA32UI;
  external num get RGB32UI;
  external num get RGBA16UI;
  external num get RGB16UI;
  external num get RGBA8UI;
  external num get RGB8UI;
  external num get RGBA32I;
  external num get RGB32I;
  external num get RGBA16I;
  external num get RGB16I;
  external num get RGBA8I;
  external num get RGB8I;
  external num get RED_INTEGER;
  external num get RGB_INTEGER;
  external num get RGBA_INTEGER;
  external num get SAMPLER_2D_ARRAY;
  external num get SAMPLER_2D_ARRAY_SHADOW;
  external num get SAMPLER_CUBE_SHADOW;
  external num get UNSIGNED_INT_VEC2;
  external num get UNSIGNED_INT_VEC3;
  external num get UNSIGNED_INT_VEC4;
  external num get INT_SAMPLER_2D;
  external num get INT_SAMPLER_3D;
  external num get INT_SAMPLER_CUBE;
  external num get INT_SAMPLER_2D_ARRAY;
  external num get UNSIGNED_INT_SAMPLER_2D;
  external num get UNSIGNED_INT_SAMPLER_3D;
  external num get UNSIGNED_INT_SAMPLER_CUBE;
  external num get UNSIGNED_INT_SAMPLER_2D_ARRAY;
  external num get DEPTH_COMPONENT32F;
  external num get DEPTH32F_STENCIL8;
  external num get FLOAT_32_UNSIGNED_INT_24_8_REV;
  external num get FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING;
  external num get FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE;
  external num get FRAMEBUFFER_ATTACHMENT_RED_SIZE;
  external num get FRAMEBUFFER_ATTACHMENT_GREEN_SIZE;
  external num get FRAMEBUFFER_ATTACHMENT_BLUE_SIZE;
  external num get FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE;
  external num get FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE;
  external num get FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE;
  external num get FRAMEBUFFER_DEFAULT;
  external num get UNSIGNED_INT_24_8;
  external num get DEPTH24_STENCIL8;
  external num get UNSIGNED_NORMALIZED;
  external num get DRAW_FRAMEBUFFER_BINDING;
  external num get READ_FRAMEBUFFER;
  external num get DRAW_FRAMEBUFFER;
  external num get READ_FRAMEBUFFER_BINDING;
  external num get RENDERBUFFER_SAMPLES;
  external num get FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER;
  external num get MAX_COLOR_ATTACHMENTS;
  external num get COLOR_ATTACHMENT1;
  external num get COLOR_ATTACHMENT2;
  external num get COLOR_ATTACHMENT3;
  external num get COLOR_ATTACHMENT4;
  external num get COLOR_ATTACHMENT5;
  external num get COLOR_ATTACHMENT6;
  external num get COLOR_ATTACHMENT7;
  external num get COLOR_ATTACHMENT8;
  external num get COLOR_ATTACHMENT9;
  external num get COLOR_ATTACHMENT10;
  external num get COLOR_ATTACHMENT11;
  external num get COLOR_ATTACHMENT12;
  external num get COLOR_ATTACHMENT13;
  external num get COLOR_ATTACHMENT14;
  external num get COLOR_ATTACHMENT15;
  external num get FRAMEBUFFER_INCOMPLETE_MULTISAMPLE;
  external num get MAX_SAMPLES;
  external num get HALF_FLOAT;
  external num get RG;
  external num get RG_INTEGER;
  external num get R8;
  external num get RG8;
  external num get R16F;
  external num get R32F;
  external num get RG16F;
  external num get RG32F;
  external num get R8I;
  external num get R8UI;
  external num get R16I;
  external num get R16UI;
  external num get R32I;
  external num get R32UI;
  external num get RG8I;
  external num get RG8UI;
  external num get RG16I;
  external num get RG16UI;
  external num get RG32I;
  external num get RG32UI;
  external num get VERTEX_ARRAY_BINDING;
  external num get R8_SNORM;
  external num get RG8_SNORM;
  external num get RGB8_SNORM;
  external num get RGBA8_SNORM;
  external num get SIGNED_NORMALIZED;
  external num get COPY_READ_BUFFER;
  external num get COPY_WRITE_BUFFER;
  external num get COPY_READ_BUFFER_BINDING;
  external num get COPY_WRITE_BUFFER_BINDING;
  external num get UNIFORM_BUFFER;
  external num get UNIFORM_BUFFER_BINDING;
  external num get UNIFORM_BUFFER_START;
  external num get UNIFORM_BUFFER_SIZE;
  external num get MAX_VERTEX_UNIFORM_BLOCKS;
  external num get MAX_FRAGMENT_UNIFORM_BLOCKS;
  external num get MAX_COMBINED_UNIFORM_BLOCKS;
  external num get MAX_UNIFORM_BUFFER_BINDINGS;
  external num get MAX_UNIFORM_BLOCK_SIZE;
  external num get MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS;
  external num get MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS;
  external num get UNIFORM_BUFFER_OFFSET_ALIGNMENT;
  external num get ACTIVE_UNIFORM_BLOCKS;
  external num get UNIFORM_TYPE;
  external num get UNIFORM_SIZE;
  external num get UNIFORM_BLOCK_INDEX;
  external num get UNIFORM_OFFSET;
  external num get UNIFORM_ARRAY_STRIDE;
  external num get UNIFORM_MATRIX_STRIDE;
  external num get UNIFORM_IS_ROW_MAJOR;
  external num get UNIFORM_BLOCK_BINDING;
  external num get UNIFORM_BLOCK_DATA_SIZE;
  external num get UNIFORM_BLOCK_ACTIVE_UNIFORMS;
  external num get UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES;
  external num get UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER;
  external num get UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER;
  external num get INVALID_INDEX;
  external num get MAX_VERTEX_OUTPUT_COMPONENTS;
  external num get MAX_FRAGMENT_INPUT_COMPONENTS;
  external num get MAX_SERVER_WAIT_TIMEOUT;
  external num get OBJECT_TYPE;
  external num get SYNC_CONDITION;
  external num get SYNC_STATUS;
  external num get SYNC_FLAGS;
  external num get SYNC_FENCE;
  external num get SYNC_GPU_COMMANDS_COMPLETE;
  external num get UNSIGNALED;
  external num get SIGNALED;
  external num get ALREADY_SIGNALED;
  external num get TIMEOUT_EXPIRED;
  external num get CONDITION_SATISFIED;
  external num get WAIT_FAILED;
  external num get SYNC_FLUSH_COMMANDS_BIT;
  external num get VERTEX_ATTRIB_ARRAY_DIVISOR;
  external num get ANY_SAMPLES_PASSED;
  external num get ANY_SAMPLES_PASSED_CONSERVATIVE;
  external num get SAMPLER_BINDING;
  external num get RGB10_A2UI;
  external num get INT_2_10_10_10_REV;
  external num get TRANSFORM_FEEDBACK;
  external num get TRANSFORM_FEEDBACK_PAUSED;
  external num get TRANSFORM_FEEDBACK_ACTIVE;
  external num get TRANSFORM_FEEDBACK_BINDING;
  external num get TEXTURE_IMMUTABLE_FORMAT;
  external num get MAX_ELEMENT_INDEX;
  external num get TEXTURE_IMMUTABLE_LEVELS;
  external num get TIMEOUT_IGNORED;
  external num get MAX_CLIENT_WAIT_TIMEOUT_WEBGL;
  external void beginQuery(GLenum target, WebGLQuery query);
  external void beginTransformFeedback(GLenum primitiveMode);
  external void bindBufferBase(GLenum target, GLuint index, WebGLBuffer? buffer);
  external void bindBufferRange(GLenum target, GLuint index, WebGLBuffer? buffer, GLintptr offset, GLsizeiptr size);
  external void bindSampler(GLuint unit, WebGLSampler? sampler);
  external void bindTransformFeedback(GLenum target, WebGLTransformFeedback? tf);
  external void bindVertexArray(WebGLVertexArrayObject? array);
  external void blitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
  external void clearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
  external void clearBufferfv(GLenum buffer, GLint drawbuffer, Float32List values, [num srcOffset]);
  external void clearBufferiv(GLenum buffer, GLint drawbuffer, Int32List values, [num srcOffset]);
  external void clearBufferuiv(GLenum buffer, GLint drawbuffer, Uint32List values, [num srcOffset]);
  external GLenum clientWaitSync(WebGLSync sync, GLbitfield flags, GLuint64 timeout);
  external void compressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, GLintptr offset);
  external void compressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, ArrayBufferView srcData, [num srcOffset, GLuint srcLengthOverride]);
  external void compressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, GLintptr offset);
  external void compressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, ArrayBufferView srcData, [num srcOffset, GLuint srcLengthOverride]);
  external void copyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
  external void copyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
  external WebGLQuery createQuery();
  external WebGLSampler createSampler();
  external WebGLTransformFeedback createTransformFeedback();
  external WebGLVertexArrayObject createVertexArray();
  external void deleteQuery(WebGLQuery? query);
  external void deleteSampler(WebGLSampler? sampler);
  external void deleteSync(WebGLSync? sync);
  external void deleteTransformFeedback(WebGLTransformFeedback? tf);
  external void deleteVertexArray(WebGLVertexArrayObject? vertexArray);
  external void drawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instanceCount);
  external void drawBuffers(List<GLenum> buffers);
  external void drawElementsInstanced(GLenum mode, GLsizei count, GLenum type, GLintptr offset, GLsizei instanceCount);
  external void drawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLintptr offset);
  external void endQuery(GLenum target);
  external void endTransformFeedback();
  external WebGLSync? fenceSync(GLenum condition, GLbitfield flags);
  external void framebufferTextureLayer(GLenum target, GLenum attachment, WebGLTexture? texture, GLint level, GLint layer);
  external String? getActiveUniformBlockName(WebGLProgram program, GLuint uniformBlockIndex);
  external dynamic getActiveUniformBlockParameter(WebGLProgram program, GLuint uniformBlockIndex, GLenum pname);
  external dynamic getActiveUniforms(WebGLProgram program, List<GLuint> uniformIndices, GLenum pname);
  external void getBufferSubData(GLenum target, GLintptr srcByteOffset, ArrayBufferView dstBuffer, [num dstOffset, GLuint length]);
  external GLint getFragDataLocation(WebGLProgram program, String name);
  external dynamic getIndexedParameter(GLenum target, GLuint index);
  external dynamic getInternalformatParameter(GLenum target, GLenum internalformat, GLenum pname);
  external WebGLQuery? getQuery(GLenum target, GLenum pname);
  external dynamic getQueryParameter(WebGLQuery query, GLenum pname);
  external dynamic getSamplerParameter(WebGLSampler sampler, GLenum pname);
  external dynamic getSyncParameter(WebGLSync sync, GLenum pname);
  external WebGLActiveInfo? getTransformFeedbackVarying(WebGLProgram program, GLuint index);
  external GLuint getUniformBlockIndex(WebGLProgram program, String uniformBlockName);
  external List<GLuint>? getUniformIndices(WebGLProgram program, List<String> uniformNames);
  external void invalidateFramebuffer(GLenum target, List<GLenum> attachments);
  external void invalidateSubFramebuffer(GLenum target, List<GLenum> attachments, GLint x, GLint y, GLsizei width, GLsizei height);
  external GLboolean isQuery(WebGLQuery? query);
  external GLboolean isSampler(WebGLSampler? sampler);
  external GLboolean isSync(WebGLSync? sync);
  external GLboolean isTransformFeedback(WebGLTransformFeedback? tf);
  external GLboolean isVertexArray(WebGLVertexArrayObject? vertexArray);
  external void pauseTransformFeedback();
  external void readBuffer(GLenum src);
  external void renderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
  external void resumeTransformFeedback();
  external void samplerParameterf(WebGLSampler sampler, GLenum pname, GLfloat param);
  external void samplerParameteri(WebGLSampler sampler, GLenum pname, GLint param);
  external void texImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, GLintptr pboOffset);
  external void texImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, TexImageSource source);
  external void texImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, ArrayBufferView? srcData);
  external void texImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, ArrayBufferView srcData, num srcOffset);
  external void texStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
  external void texStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
  external void texSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLintptr pboOffset);
  external void texSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, TexImageSource source);
  external void texSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, ArrayBufferView? srcData, [num srcOffset]);
  external void transformFeedbackVaryings(WebGLProgram program, List<String> varyings, GLenum bufferMode);
  external void uniform1ui(WebGLUniformLocation? location, GLuint v0);
  external void uniform1uiv(WebGLUniformLocation? location, Uint32List data, [num srcOffset, GLuint srcLength]);
  external void uniform2ui(WebGLUniformLocation? location, GLuint v0, GLuint v1);
  external void uniform2uiv(WebGLUniformLocation? location, Uint32List data, [num srcOffset, GLuint srcLength]);
  external void uniform3ui(WebGLUniformLocation? location, GLuint v0, GLuint v1, GLuint v2);
  external void uniform3uiv(WebGLUniformLocation? location, Uint32List data, [num srcOffset, GLuint srcLength]);
  external void uniform4ui(WebGLUniformLocation? location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
  external void uniform4uiv(WebGLUniformLocation? location, Uint32List data, [num srcOffset, GLuint srcLength]);
  external void uniformBlockBinding(WebGLProgram program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
  external void uniformMatrix2x3fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data, [num srcOffset, GLuint srcLength]);
  external void uniformMatrix2x4fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data, [num srcOffset, GLuint srcLength]);
  external void uniformMatrix3x2fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data, [num srcOffset, GLuint srcLength]);
  external void uniformMatrix3x4fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data, [num srcOffset, GLuint srcLength]);
  external void uniformMatrix4x2fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data, [num srcOffset, GLuint srcLength]);
  external void uniformMatrix4x3fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data, [num srcOffset, GLuint srcLength]);
  external void vertexAttribDivisor(GLuint index, GLuint divisor);
  external void vertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
  external void vertexAttribI4iv(GLuint index, Int32List values);
  external void vertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
  external void vertexAttribI4uiv(GLuint index, Uint32List values);
  external void vertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
  external void waitSync(WebGLSync sync, GLbitfield flags, GLint64 timeout);
}
@JS()
@anonymous
abstract class WebGL2RenderingContextOverloads{}
extension WebGL2RenderingContextOverloadsExtension on WebGL2RenderingContextOverloads {
  external void bufferData(GLenum target, GLsizeiptr size, GLenum usage);
  external void bufferData(GLenum target, AllowSharedBufferSource? srcData, GLenum usage);
  external void bufferData(GLenum target, ArrayBufferView srcData, GLenum usage, num srcOffset, [GLuint length]);
  external void bufferSubData(GLenum target, GLintptr dstByteOffset, AllowSharedBufferSource srcData);
  external void bufferSubData(GLenum target, GLintptr dstByteOffset, ArrayBufferView srcData, num srcOffset, [GLuint length]);
  external void compressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, GLintptr offset);
  external void compressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, ArrayBufferView srcData, [num srcOffset, GLuint srcLengthOverride]);
  external void compressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, GLintptr offset);
  external void compressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, ArrayBufferView srcData, [num srcOffset, GLuint srcLengthOverride]);
  external void readPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, ArrayBufferView? dstData);
  external void readPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLintptr offset);
  external void readPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, ArrayBufferView dstData, num dstOffset);
  external void texImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, ArrayBufferView? pixels);
  external void texImage2D(GLenum target, GLint level, GLint internalformat, GLenum format, GLenum type, TexImageSource source);
  external void texImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, GLintptr pboOffset);
  external void texImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, TexImageSource source);
  external void texImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, ArrayBufferView srcData, num srcOffset);
  external void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, ArrayBufferView? pixels);
  external void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLenum format, GLenum type, TexImageSource source);
  external void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, GLintptr pboOffset);
  external void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, TexImageSource source);
  external void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, ArrayBufferView srcData, num srcOffset);
  external void uniform1fv(WebGLUniformLocation? location, Float32List data, [num srcOffset, GLuint srcLength]);
  external void uniform1iv(WebGLUniformLocation? location, Int32List data, [num srcOffset, GLuint srcLength]);
  external void uniform2fv(WebGLUniformLocation? location, Float32List data, [num srcOffset, GLuint srcLength]);
  external void uniform2iv(WebGLUniformLocation? location, Int32List data, [num srcOffset, GLuint srcLength]);
  external void uniform3fv(WebGLUniformLocation? location, Float32List data, [num srcOffset, GLuint srcLength]);
  external void uniform3iv(WebGLUniformLocation? location, Int32List data, [num srcOffset, GLuint srcLength]);
  external void uniform4fv(WebGLUniformLocation? location, Float32List data, [num srcOffset, GLuint srcLength]);
  external void uniform4iv(WebGLUniformLocation? location, Int32List data, [num srcOffset, GLuint srcLength]);
  external void uniformMatrix2fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data, [num srcOffset, GLuint srcLength]);
  external void uniformMatrix3fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data, [num srcOffset, GLuint srcLength]);
  external void uniformMatrix4fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data, [num srcOffset, GLuint srcLength]);
}
@JS("WebGLActiveInfo")
external dynamic WebGLActiveInfo;
@JS("WebGLBuffer")
external dynamic WebGLBuffer;
@JS("WebGLContextEvent")
external dynamic WebGLContextEvent;
@JS("WebGLFramebuffer")
external dynamic WebGLFramebuffer;
@JS("WebGLProgram")
external dynamic WebGLProgram;
@JS("WebGLQuery")
external dynamic WebGLQuery;
@JS("WebGLRenderbuffer")
external dynamic WebGLRenderbuffer;
@JS("WebGLRenderingContext")
external dynamic WebGLRenderingContext;
@JS()
@anonymous
abstract class WebGLRenderingContextBase{}
extension WebGLRenderingContextBaseExtension on WebGLRenderingContextBase {
  external dynamic /* HTMLCanvasElement|OffscreenCanvas */ get canvas;
  external PredefinedColorSpace get drawingBufferColorSpace;
  external set drawingBufferColorSpace(PredefinedColorSpace value);
  external GLsizei get drawingBufferHeight;
  external GLsizei get drawingBufferWidth;
  external PredefinedColorSpace get unpackColorSpace;
  external set unpackColorSpace(PredefinedColorSpace value);
  external num get DEPTH_BUFFER_BIT;
  external num get STENCIL_BUFFER_BIT;
  external num get COLOR_BUFFER_BIT;
  external num get POINTS;
  external num get LINES;
  external num get LINE_LOOP;
  external num get LINE_STRIP;
  external num get TRIANGLES;
  external num get TRIANGLE_STRIP;
  external num get TRIANGLE_FAN;
  external num get ZERO;
  external num get ONE;
  external num get SRC_COLOR;
  external num get ONE_MINUS_SRC_COLOR;
  external num get SRC_ALPHA;
  external num get ONE_MINUS_SRC_ALPHA;
  external num get DST_ALPHA;
  external num get ONE_MINUS_DST_ALPHA;
  external num get DST_COLOR;
  external num get ONE_MINUS_DST_COLOR;
  external num get SRC_ALPHA_SATURATE;
  external num get FUNC_ADD;
  external num get BLEND_EQUATION;
  external num get BLEND_EQUATION_RGB;
  external num get BLEND_EQUATION_ALPHA;
  external num get FUNC_SUBTRACT;
  external num get FUNC_REVERSE_SUBTRACT;
  external num get BLEND_DST_RGB;
  external num get BLEND_SRC_RGB;
  external num get BLEND_DST_ALPHA;
  external num get BLEND_SRC_ALPHA;
  external num get CONSTANT_COLOR;
  external num get ONE_MINUS_CONSTANT_COLOR;
  external num get CONSTANT_ALPHA;
  external num get ONE_MINUS_CONSTANT_ALPHA;
  external num get BLEND_COLOR;
  external num get ARRAY_BUFFER;
  external num get ELEMENT_ARRAY_BUFFER;
  external num get ARRAY_BUFFER_BINDING;
  external num get ELEMENT_ARRAY_BUFFER_BINDING;
  external num get STREAM_DRAW;
  external num get STATIC_DRAW;
  external num get DYNAMIC_DRAW;
  external num get BUFFER_SIZE;
  external num get BUFFER_USAGE;
  external num get CURRENT_VERTEX_ATTRIB;
  external num get FRONT;
  external num get BACK;
  external num get FRONT_AND_BACK;
  external num get CULL_FACE;
  external num get BLEND;
  external num get DITHER;
  external num get STENCIL_TEST;
  external num get DEPTH_TEST;
  external num get SCISSOR_TEST;
  external num get POLYGON_OFFSET_FILL;
  external num get SAMPLE_ALPHA_TO_COVERAGE;
  external num get SAMPLE_COVERAGE;
  external num get NO_ERROR;
  external num get INVALID_ENUM;
  external num get INVALID_VALUE;
  external num get INVALID_OPERATION;
  external num get OUT_OF_MEMORY;
  external num get CW;
  external num get CCW;
  external num get LINE_WIDTH;
  external num get ALIASED_POINT_SIZE_RANGE;
  external num get ALIASED_LINE_WIDTH_RANGE;
  external num get CULL_FACE_MODE;
  external num get FRONT_FACE;
  external num get DEPTH_RANGE;
  external num get DEPTH_WRITEMASK;
  external num get DEPTH_CLEAR_VALUE;
  external num get DEPTH_FUNC;
  external num get STENCIL_CLEAR_VALUE;
  external num get STENCIL_FUNC;
  external num get STENCIL_FAIL;
  external num get STENCIL_PASS_DEPTH_FAIL;
  external num get STENCIL_PASS_DEPTH_PASS;
  external num get STENCIL_REF;
  external num get STENCIL_VALUE_MASK;
  external num get STENCIL_WRITEMASK;
  external num get STENCIL_BACK_FUNC;
  external num get STENCIL_BACK_FAIL;
  external num get STENCIL_BACK_PASS_DEPTH_FAIL;
  external num get STENCIL_BACK_PASS_DEPTH_PASS;
  external num get STENCIL_BACK_REF;
  external num get STENCIL_BACK_VALUE_MASK;
  external num get STENCIL_BACK_WRITEMASK;
  external num get VIEWPORT;
  external num get SCISSOR_BOX;
  external num get COLOR_CLEAR_VALUE;
  external num get COLOR_WRITEMASK;
  external num get UNPACK_ALIGNMENT;
  external num get PACK_ALIGNMENT;
  external num get MAX_TEXTURE_SIZE;
  external num get MAX_VIEWPORT_DIMS;
  external num get SUBPIXEL_BITS;
  external num get RED_BITS;
  external num get GREEN_BITS;
  external num get BLUE_BITS;
  external num get ALPHA_BITS;
  external num get DEPTH_BITS;
  external num get STENCIL_BITS;
  external num get POLYGON_OFFSET_UNITS;
  external num get POLYGON_OFFSET_FACTOR;
  external num get TEXTURE_BINDING_2D;
  external num get SAMPLE_BUFFERS;
  external num get SAMPLES;
  external num get SAMPLE_COVERAGE_VALUE;
  external num get SAMPLE_COVERAGE_INVERT;
  external num get COMPRESSED_TEXTURE_FORMATS;
  external num get DONT_CARE;
  external num get FASTEST;
  external num get NICEST;
  external num get GENERATE_MIPMAP_HINT;
  external num get BYTE;
  external num get UNSIGNED_BYTE;
  external num get SHORT;
  external num get UNSIGNED_SHORT;
  external num get INT;
  external num get UNSIGNED_INT;
  external num get FLOAT;
  external num get DEPTH_COMPONENT;
  external num get ALPHA;
  external num get RGB;
  external num get RGBA;
  external num get LUMINANCE;
  external num get LUMINANCE_ALPHA;
  external num get UNSIGNED_SHORT_4_4_4_4;
  external num get UNSIGNED_SHORT_5_5_5_1;
  external num get UNSIGNED_SHORT_5_6_5;
  external num get FRAGMENT_SHADER;
  external num get VERTEX_SHADER;
  external num get MAX_VERTEX_ATTRIBS;
  external num get MAX_VERTEX_UNIFORM_VECTORS;
  external num get MAX_VARYING_VECTORS;
  external num get MAX_COMBINED_TEXTURE_IMAGE_UNITS;
  external num get MAX_VERTEX_TEXTURE_IMAGE_UNITS;
  external num get MAX_TEXTURE_IMAGE_UNITS;
  external num get MAX_FRAGMENT_UNIFORM_VECTORS;
  external num get SHADER_TYPE;
  external num get DELETE_STATUS;
  external num get LINK_STATUS;
  external num get VALIDATE_STATUS;
  external num get ATTACHED_SHADERS;
  external num get ACTIVE_UNIFORMS;
  external num get ACTIVE_ATTRIBUTES;
  external num get SHADING_LANGUAGE_VERSION;
  external num get CURRENT_PROGRAM;
  external num get NEVER;
  external num get LESS;
  external num get EQUAL;
  external num get LEQUAL;
  external num get GREATER;
  external num get NOTEQUAL;
  external num get GEQUAL;
  external num get ALWAYS;
  external num get KEEP;
  external num get REPLACE;
  external num get INCR;
  external num get DECR;
  external num get INVERT;
  external num get INCR_WRAP;
  external num get DECR_WRAP;
  external num get VENDOR;
  external num get RENDERER;
  external num get VERSION;
  external num get NEAREST;
  external num get LINEAR;
  external num get NEAREST_MIPMAP_NEAREST;
  external num get LINEAR_MIPMAP_NEAREST;
  external num get NEAREST_MIPMAP_LINEAR;
  external num get LINEAR_MIPMAP_LINEAR;
  external num get TEXTURE_MAG_FILTER;
  external num get TEXTURE_MIN_FILTER;
  external num get TEXTURE_WRAP_S;
  external num get TEXTURE_WRAP_T;
  external num get TEXTURE_2D;
  external num get TEXTURE;
  external num get TEXTURE_CUBE_MAP;
  external num get TEXTURE_BINDING_CUBE_MAP;
  external num get TEXTURE_CUBE_MAP_POSITIVE_X;
  external num get TEXTURE_CUBE_MAP_NEGATIVE_X;
  external num get TEXTURE_CUBE_MAP_POSITIVE_Y;
  external num get TEXTURE_CUBE_MAP_NEGATIVE_Y;
  external num get TEXTURE_CUBE_MAP_POSITIVE_Z;
  external num get TEXTURE_CUBE_MAP_NEGATIVE_Z;
  external num get MAX_CUBE_MAP_TEXTURE_SIZE;
  external num get TEXTURE0;
  external num get TEXTURE1;
  external num get TEXTURE2;
  external num get TEXTURE3;
  external num get TEXTURE4;
  external num get TEXTURE5;
  external num get TEXTURE6;
  external num get TEXTURE7;
  external num get TEXTURE8;
  external num get TEXTURE9;
  external num get TEXTURE10;
  external num get TEXTURE11;
  external num get TEXTURE12;
  external num get TEXTURE13;
  external num get TEXTURE14;
  external num get TEXTURE15;
  external num get TEXTURE16;
  external num get TEXTURE17;
  external num get TEXTURE18;
  external num get TEXTURE19;
  external num get TEXTURE20;
  external num get TEXTURE21;
  external num get TEXTURE22;
  external num get TEXTURE23;
  external num get TEXTURE24;
  external num get TEXTURE25;
  external num get TEXTURE26;
  external num get TEXTURE27;
  external num get TEXTURE28;
  external num get TEXTURE29;
  external num get TEXTURE30;
  external num get TEXTURE31;
  external num get ACTIVE_TEXTURE;
  external num get REPEAT;
  external num get CLAMP_TO_EDGE;
  external num get MIRRORED_REPEAT;
  external num get FLOAT_VEC2;
  external num get FLOAT_VEC3;
  external num get FLOAT_VEC4;
  external num get INT_VEC2;
  external num get INT_VEC3;
  external num get INT_VEC4;
  external num get BOOL;
  external num get BOOL_VEC2;
  external num get BOOL_VEC3;
  external num get BOOL_VEC4;
  external num get FLOAT_MAT2;
  external num get FLOAT_MAT3;
  external num get FLOAT_MAT4;
  external num get SAMPLER_2D;
  external num get SAMPLER_CUBE;
  external num get VERTEX_ATTRIB_ARRAY_ENABLED;
  external num get VERTEX_ATTRIB_ARRAY_SIZE;
  external num get VERTEX_ATTRIB_ARRAY_STRIDE;
  external num get VERTEX_ATTRIB_ARRAY_TYPE;
  external num get VERTEX_ATTRIB_ARRAY_NORMALIZED;
  external num get VERTEX_ATTRIB_ARRAY_POINTER;
  external num get VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
  external num get IMPLEMENTATION_COLOR_READ_TYPE;
  external num get IMPLEMENTATION_COLOR_READ_FORMAT;
  external num get COMPILE_STATUS;
  external num get LOW_FLOAT;
  external num get MEDIUM_FLOAT;
  external num get HIGH_FLOAT;
  external num get LOW_INT;
  external num get MEDIUM_INT;
  external num get HIGH_INT;
  external num get FRAMEBUFFER;
  external num get RENDERBUFFER;
  external num get RGBA4;
  external num get RGB5_A1;
  external num get RGBA8;
  external num get RGB565;
  external num get DEPTH_COMPONENT16;
  external num get STENCIL_INDEX8;
  external num get DEPTH_STENCIL;
  external num get RENDERBUFFER_WIDTH;
  external num get RENDERBUFFER_HEIGHT;
  external num get RENDERBUFFER_INTERNAL_FORMAT;
  external num get RENDERBUFFER_RED_SIZE;
  external num get RENDERBUFFER_GREEN_SIZE;
  external num get RENDERBUFFER_BLUE_SIZE;
  external num get RENDERBUFFER_ALPHA_SIZE;
  external num get RENDERBUFFER_DEPTH_SIZE;
  external num get RENDERBUFFER_STENCIL_SIZE;
  external num get FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
  external num get FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
  external num get FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
  external num get FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
  external num get COLOR_ATTACHMENT0;
  external num get DEPTH_ATTACHMENT;
  external num get STENCIL_ATTACHMENT;
  external num get DEPTH_STENCIL_ATTACHMENT;
  external num get NONE;
  external num get FRAMEBUFFER_COMPLETE;
  external num get FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
  external num get FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
  external num get FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
  external num get FRAMEBUFFER_UNSUPPORTED;
  external num get FRAMEBUFFER_BINDING;
  external num get RENDERBUFFER_BINDING;
  external num get MAX_RENDERBUFFER_SIZE;
  external num get INVALID_FRAMEBUFFER_OPERATION;
  external num get UNPACK_FLIP_Y_WEBGL;
  external num get UNPACK_PREMULTIPLY_ALPHA_WEBGL;
  external num get CONTEXT_LOST_WEBGL;
  external num get UNPACK_COLORSPACE_CONVERSION_WEBGL;
  external num get BROWSER_DEFAULT_WEBGL;
  external void activeTexture(GLenum texture);
  external void attachShader(WebGLProgram program, WebGLShader shader);
  external void bindAttribLocation(WebGLProgram program, GLuint index, String name);
  external void bindBuffer(GLenum target, WebGLBuffer? buffer);
  external void bindFramebuffer(GLenum target, WebGLFramebuffer? framebuffer);
  external void bindRenderbuffer(GLenum target, WebGLRenderbuffer? renderbuffer);
  external void bindTexture(GLenum target, WebGLTexture? texture);
  external void blendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
  external void blendEquation(GLenum mode);
  external void blendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
  external void blendFunc(GLenum sfactor, GLenum dfactor);
  external void blendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
  external GLenum checkFramebufferStatus(GLenum target);
  external void clear(GLbitfield mask);
  external void clearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
  external void clearDepth(GLclampf depth);
  external void clearStencil(GLint s);
  external void colorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
  external void compileShader(WebGLShader shader);
  external void copyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
  external void copyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
  external WebGLBuffer createBuffer();
  external WebGLFramebuffer createFramebuffer();
  external WebGLProgram createProgram();
  external WebGLRenderbuffer createRenderbuffer();
  external WebGLShader? createShader(GLenum type);
  external WebGLTexture createTexture();
  external void cullFace(GLenum mode);
  external void deleteBuffer(WebGLBuffer? buffer);
  external void deleteFramebuffer(WebGLFramebuffer? framebuffer);
  external void deleteProgram(WebGLProgram? program);
  external void deleteRenderbuffer(WebGLRenderbuffer? renderbuffer);
  external void deleteShader(WebGLShader? shader);
  external void deleteTexture(WebGLTexture? texture);
  external void depthFunc(GLenum func);
  external void depthMask(GLboolean flag);
  external void depthRange(GLclampf zNear, GLclampf zFar);
  external void detachShader(WebGLProgram program, WebGLShader shader);
  external void disable(GLenum cap);
  external void disableVertexAttribArray(GLuint index);
  external void drawArrays(GLenum mode, GLint first, GLsizei count);
  external void drawElements(GLenum mode, GLsizei count, GLenum type, GLintptr offset);
  external void enable(GLenum cap);
  external void enableVertexAttribArray(GLuint index);
  external void finish();
  external void flush();
  external void framebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, WebGLRenderbuffer? renderbuffer);
  external void framebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, WebGLTexture? texture, GLint level);
  external void frontFace(GLenum mode);
  external void generateMipmap(GLenum target);
  external WebGLActiveInfo? getActiveAttrib(WebGLProgram program, GLuint index);
  external WebGLActiveInfo? getActiveUniform(WebGLProgram program, GLuint index);
  external List<WebGLShader>? getAttachedShaders(WebGLProgram program);
  external GLint getAttribLocation(WebGLProgram program, String name);
  external dynamic getBufferParameter(GLenum target, GLenum pname);
  external WebGLContextAttributes? getContextAttributes();
  external GLenum getError();
  external ANGLE_instanced_arrays? getExtension(String extensionName);
  external EXT_blend_minmax? getExtension(String extensionName);
  external EXT_color_buffer_float? getExtension(String extensionName);
  external EXT_color_buffer_half_float? getExtension(String extensionName);
  external EXT_float_blend? getExtension(String extensionName);
  external EXT_frag_depth? getExtension(String extensionName);
  external EXT_sRGB? getExtension(String extensionName);
  external EXT_shader_texture_lod? getExtension(String extensionName);
  external EXT_texture_compression_bptc? getExtension(String extensionName);
  external EXT_texture_compression_rgtc? getExtension(String extensionName);
  external EXT_texture_filter_anisotropic? getExtension(String extensionName);
  external KHR_parallel_shader_compile? getExtension(String extensionName);
  external OES_element_index_uint? getExtension(String extensionName);
  external OES_fbo_render_mipmap? getExtension(String extensionName);
  external OES_standard_derivatives? getExtension(String extensionName);
  external OES_texture_float? getExtension(String extensionName);
  external OES_texture_float_linear? getExtension(String extensionName);
  external OES_texture_half_float? getExtension(String extensionName);
  external OES_texture_half_float_linear? getExtension(String extensionName);
  external OES_vertex_array_object? getExtension(String extensionName);
  external OVR_multiview2? getExtension(String extensionName);
  external WEBGL_color_buffer_float? getExtension(String extensionName);
  external WEBGL_compressed_texture_astc? getExtension(String extensionName);
  external WEBGL_compressed_texture_etc? getExtension(String extensionName);
  external WEBGL_compressed_texture_etc1? getExtension(String extensionName);
  external WEBGL_compressed_texture_pvrtc? getExtension(String extensionName);
  external WEBGL_compressed_texture_s3tc? getExtension(String extensionName);
  external WEBGL_compressed_texture_s3tc_srgb? getExtension(String extensionName);
  external WEBGL_debug_renderer_info? getExtension(String extensionName);
  external WEBGL_debug_shaders? getExtension(String extensionName);
  external WEBGL_depth_texture? getExtension(String extensionName);
  external WEBGL_draw_buffers? getExtension(String extensionName);
  external WEBGL_lose_context? getExtension(String extensionName);
  external WEBGL_multi_draw? getExtension(String extensionName);
  external dynamic getExtension(String name);
  external dynamic getFramebufferAttachmentParameter(GLenum target, GLenum attachment, GLenum pname);
  external dynamic getParameter(GLenum pname);
  external String? getProgramInfoLog(WebGLProgram program);
  external dynamic getProgramParameter(WebGLProgram program, GLenum pname);
  external dynamic getRenderbufferParameter(GLenum target, GLenum pname);
  external String? getShaderInfoLog(WebGLShader shader);
  external dynamic getShaderParameter(WebGLShader shader, GLenum pname);
  external WebGLShaderPrecisionFormat? getShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype);
  external String? getShaderSource(WebGLShader shader);
  external List<String>? getSupportedExtensions();
  external dynamic getTexParameter(GLenum target, GLenum pname);
  external dynamic getUniform(WebGLProgram program, WebGLUniformLocation location);
  external WebGLUniformLocation? getUniformLocation(WebGLProgram program, String name);
  external dynamic getVertexAttrib(GLuint index, GLenum pname);
  external GLintptr getVertexAttribOffset(GLuint index, GLenum pname);
  external void hint(GLenum target, GLenum mode);
  external GLboolean isBuffer(WebGLBuffer? buffer);
  external bool isContextLost();
  external GLboolean isEnabled(GLenum cap);
  external GLboolean isFramebuffer(WebGLFramebuffer? framebuffer);
  external GLboolean isProgram(WebGLProgram? program);
  external GLboolean isRenderbuffer(WebGLRenderbuffer? renderbuffer);
  external GLboolean isShader(WebGLShader? shader);
  external GLboolean isTexture(WebGLTexture? texture);
  external void lineWidth(GLfloat width);
  external void linkProgram(WebGLProgram program);
  external void pixelStorei(GLenum pname, dynamic /* GLint|GLboolean */ param);
  external void polygonOffset(GLfloat factor, GLfloat units);
  external void renderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
  external void sampleCoverage(GLclampf value, GLboolean invert);
  external void scissor(GLint x, GLint y, GLsizei width, GLsizei height);
  external void shaderSource(WebGLShader shader, String source);
  external void stencilFunc(GLenum func, GLint ref, GLuint mask);
  external void stencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
  external void stencilMask(GLuint mask);
  external void stencilMaskSeparate(GLenum face, GLuint mask);
  external void stencilOp(GLenum fail, GLenum zfail, GLenum zpass);
  external void stencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass);
  external void texParameterf(GLenum target, GLenum pname, GLfloat param);
  external void texParameteri(GLenum target, GLenum pname, GLint param);
  external void uniform1f(WebGLUniformLocation? location, GLfloat x);
  external void uniform1i(WebGLUniformLocation? location, GLint x);
  external void uniform2f(WebGLUniformLocation? location, GLfloat x, GLfloat y);
  external void uniform2i(WebGLUniformLocation? location, GLint x, GLint y);
  external void uniform3f(WebGLUniformLocation? location, GLfloat x, GLfloat y, GLfloat z);
  external void uniform3i(WebGLUniformLocation? location, GLint x, GLint y, GLint z);
  external void uniform4f(WebGLUniformLocation? location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  external void uniform4i(WebGLUniformLocation? location, GLint x, GLint y, GLint z, GLint w);
  external void useProgram(WebGLProgram? program);
  external void validateProgram(WebGLProgram program);
  external void vertexAttrib1f(GLuint index, GLfloat x);
  external void vertexAttrib1fv(GLuint index, Float32List values);
  external void vertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
  external void vertexAttrib2fv(GLuint index, Float32List values);
  external void vertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
  external void vertexAttrib3fv(GLuint index, Float32List values);
  external void vertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  external void vertexAttrib4fv(GLuint index, Float32List values);
  external void vertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
  external void viewport(GLint x, GLint y, GLsizei width, GLsizei height);
}
@JS()
@anonymous
abstract class WebGLRenderingContextOverloads{}
extension WebGLRenderingContextOverloadsExtension on WebGLRenderingContextOverloads {
  external void bufferData(GLenum target, GLsizeiptr size, GLenum usage);
  external void bufferData(GLenum target, AllowSharedBufferSource? data, GLenum usage);
  external void bufferSubData(GLenum target, GLintptr offset, AllowSharedBufferSource data);
  external void compressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, ArrayBufferView data);
  external void compressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, ArrayBufferView data);
  external void readPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, ArrayBufferView? pixels);
  external void texImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, ArrayBufferView? pixels);
  external void texImage2D(GLenum target, GLint level, GLint internalformat, GLenum format, GLenum type, TexImageSource source);
  external void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, ArrayBufferView? pixels);
  external void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLenum format, GLenum type, TexImageSource source);
  external void uniform1fv(WebGLUniformLocation? location, Float32List v);
  external void uniform1iv(WebGLUniformLocation? location, Int32List v);
  external void uniform2fv(WebGLUniformLocation? location, Float32List v);
  external void uniform2iv(WebGLUniformLocation? location, Int32List v);
  external void uniform3fv(WebGLUniformLocation? location, Float32List v);
  external void uniform3iv(WebGLUniformLocation? location, Int32List v);
  external void uniform4fv(WebGLUniformLocation? location, Float32List v);
  external void uniform4iv(WebGLUniformLocation? location, Int32List v);
  external void uniformMatrix2fv(WebGLUniformLocation? location, GLboolean transpose, Float32List value);
  external void uniformMatrix3fv(WebGLUniformLocation? location, GLboolean transpose, Float32List value);
  external void uniformMatrix4fv(WebGLUniformLocation? location, GLboolean transpose, Float32List value);
}
@JS("WebGLSampler")
external dynamic WebGLSampler;
@JS("WebGLShader")
external dynamic WebGLShader;
@JS("WebGLShaderPrecisionFormat")
external dynamic WebGLShaderPrecisionFormat;
@JS("WebGLSync")
external dynamic WebGLSync;
@JS("WebGLTexture")
external dynamic WebGLTexture;
@JS("WebGLTransformFeedback")
external dynamic WebGLTransformFeedback;
@JS("WebGLUniformLocation")
external dynamic WebGLUniformLocation;
@JS("WebGLVertexArrayObject")
external dynamic WebGLVertexArrayObject;
@JS()
@anonymous
abstract class WebGLVertexArrayObjectOES{}
extension WebGLVertexArrayObjectOESExtension on WebGLVertexArrayObjectOES {
}
@JS()
@anonymous
abstract class WebSocketEventMap{}
extension WebSocketEventMapExtension on WebSocketEventMap {
  external CloseEvent get "close";
  external set "close"(CloseEvent value);
  external Event get "error";
  external set "error"(Event value);
  external MessageEvent get "message";
  external set "message"(MessageEvent value);
  external Event get "open";
  external set "open"(Event value);
}
@JS("WebSocket")
external dynamic WebSocket;
@JS("WebTransport")
external dynamic WebTransport;
@JS("WebTransportBidirectionalStream")
external dynamic WebTransportBidirectionalStream;
@JS("WebTransportDatagramDuplexStream")
external dynamic WebTransportDatagramDuplexStream;
@JS("WebTransportError")
external dynamic WebTransportError;
@JS("WheelEvent")
external dynamic WheelEvent;
@JS()
@anonymous
abstract class WindowEventMap{}
extension WindowEventMapExtension on WindowEventMap {
  external Event get "DOMContentLoaded";
  external set "DOMContentLoaded"(Event value);
  external DeviceMotionEvent get "devicemotion";
  external set "devicemotion"(DeviceMotionEvent value);
  external DeviceOrientationEvent get "deviceorientation";
  external set "deviceorientation"(DeviceOrientationEvent value);
  external DeviceOrientationEvent get "deviceorientationabsolute";
  external set "deviceorientationabsolute"(DeviceOrientationEvent value);
  external GamepadEvent get "gamepadconnected";
  external set "gamepadconnected"(GamepadEvent value);
  external GamepadEvent get "gamepaddisconnected";
  external set "gamepaddisconnected"(GamepadEvent value);
  external Event get "orientationchange";
  external set "orientationchange"(Event value);
}
@JS("Window")
external dynamic Window;
@JS()
@anonymous
abstract class WindowEventHandlersEventMap{}
extension WindowEventHandlersEventMapExtension on WindowEventHandlersEventMap {
  external Event get "afterprint";
  external set "afterprint"(Event value);
  external Event get "beforeprint";
  external set "beforeprint"(Event value);
  external BeforeUnloadEvent get "beforeunload";
  external set "beforeunload"(BeforeUnloadEvent value);
  external GamepadEvent get "gamepadconnected";
  external set "gamepadconnected"(GamepadEvent value);
  external GamepadEvent get "gamepaddisconnected";
  external set "gamepaddisconnected"(GamepadEvent value);
  external HashChangeEvent get "hashchange";
  external set "hashchange"(HashChangeEvent value);
  external Event get "languagechange";
  external set "languagechange"(Event value);
  external MessageEvent get "message";
  external set "message"(MessageEvent value);
  external MessageEvent get "messageerror";
  external set "messageerror"(MessageEvent value);
  external Event get "offline";
  external set "offline"(Event value);
  external Event get "online";
  external set "online"(Event value);
  external PageTransitionEvent get "pagehide";
  external set "pagehide"(PageTransitionEvent value);
  external Event get "pagereveal";
  external set "pagereveal"(Event value);
  external PageTransitionEvent get "pageshow";
  external set "pageshow"(PageTransitionEvent value);
  external Event get "pageswap";
  external set "pageswap"(Event value);
  external PopStateEvent get "popstate";
  external set "popstate"(PopStateEvent value);
  external PromiseRejectionEvent get "rejectionhandled";
  external set "rejectionhandled"(PromiseRejectionEvent value);
  external StorageEvent get "storage";
  external set "storage"(StorageEvent value);
  external PromiseRejectionEvent get "unhandledrejection";
  external set "unhandledrejection"(PromiseRejectionEvent value);
  external Event get "unload";
  external set "unload"(Event value);
}
@JS()
@anonymous
abstract class WindowEventHandlers{}
extension WindowEventHandlersExtension on WindowEventHandlers {
  external dynamic Function(WindowEventHandlers, Event)? get onafterprint;
  external set onafterprint(dynamic Function(WindowEventHandlers, Event)? value);
  external dynamic Function(WindowEventHandlers, Event)? get onbeforeprint;
  external set onbeforeprint(dynamic Function(WindowEventHandlers, Event)? value);
  external dynamic Function(WindowEventHandlers, BeforeUnloadEvent)? get onbeforeunload;
  external set onbeforeunload(dynamic Function(WindowEventHandlers, BeforeUnloadEvent)? value);
  external dynamic Function(WindowEventHandlers, GamepadEvent)? get ongamepadconnected;
  external set ongamepadconnected(dynamic Function(WindowEventHandlers, GamepadEvent)? value);
  external dynamic Function(WindowEventHandlers, GamepadEvent)? get ongamepaddisconnected;
  external set ongamepaddisconnected(dynamic Function(WindowEventHandlers, GamepadEvent)? value);
  external dynamic Function(WindowEventHandlers, HashChangeEvent)? get onhashchange;
  external set onhashchange(dynamic Function(WindowEventHandlers, HashChangeEvent)? value);
  external dynamic Function(WindowEventHandlers, Event)? get onlanguagechange;
  external set onlanguagechange(dynamic Function(WindowEventHandlers, Event)? value);
  external dynamic Function(WindowEventHandlers, MessageEvent)? get onmessage;
  external set onmessage(dynamic Function(WindowEventHandlers, MessageEvent)? value);
  external dynamic Function(WindowEventHandlers, MessageEvent)? get onmessageerror;
  external set onmessageerror(dynamic Function(WindowEventHandlers, MessageEvent)? value);
  external dynamic Function(WindowEventHandlers, Event)? get onoffline;
  external set onoffline(dynamic Function(WindowEventHandlers, Event)? value);
  external dynamic Function(WindowEventHandlers, Event)? get ononline;
  external set ononline(dynamic Function(WindowEventHandlers, Event)? value);
  external dynamic Function(WindowEventHandlers, PageTransitionEvent)? get onpagehide;
  external set onpagehide(dynamic Function(WindowEventHandlers, PageTransitionEvent)? value);
  external dynamic Function(WindowEventHandlers, Event)? get onpagereveal;
  external set onpagereveal(dynamic Function(WindowEventHandlers, Event)? value);
  external dynamic Function(WindowEventHandlers, PageTransitionEvent)? get onpageshow;
  external set onpageshow(dynamic Function(WindowEventHandlers, PageTransitionEvent)? value);
  external dynamic Function(WindowEventHandlers, Event)? get onpageswap;
  external set onpageswap(dynamic Function(WindowEventHandlers, Event)? value);
  external dynamic Function(WindowEventHandlers, PopStateEvent)? get onpopstate;
  external set onpopstate(dynamic Function(WindowEventHandlers, PopStateEvent)? value);
  external dynamic Function(WindowEventHandlers, PromiseRejectionEvent)? get onrejectionhandled;
  external set onrejectionhandled(dynamic Function(WindowEventHandlers, PromiseRejectionEvent)? value);
  external dynamic Function(WindowEventHandlers, StorageEvent)? get onstorage;
  external set onstorage(dynamic Function(WindowEventHandlers, StorageEvent)? value);
  external dynamic Function(WindowEventHandlers, PromiseRejectionEvent)? get onunhandledrejection;
  external set onunhandledrejection(dynamic Function(WindowEventHandlers, PromiseRejectionEvent)? value);
  external dynamic Function(WindowEventHandlers, Event)? get onunload;
  external set onunload(dynamic Function(WindowEventHandlers, Event)? value);
  external void addEventListener(K type, dynamic Function(WindowEventHandlers, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  external void removeEventListener(K type, dynamic Function(WindowEventHandlers, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS()
@anonymous
abstract class WindowLocalStorage{}
extension WindowLocalStorageExtension on WindowLocalStorage {
  external Storage get localStorage;
}
@JS()
@anonymous
abstract class WindowOrWorkerGlobalScope{}
extension WindowOrWorkerGlobalScopeExtension on WindowOrWorkerGlobalScope {
  external CacheStorage get caches;
  external bool get crossOriginIsolated;
  external Crypto get crypto;
  external IDBFactory get indexedDB;
  external bool get isSecureContext;
  external String get origin;
  external Performance get performance;
  external String atob(String data);
  external String btoa(String data);
  external void clearInterval(num? id);
  external void clearTimeout(num? id);
  external Promise createImageBitmap(ImageBitmapSource image, [ImageBitmapOptions options]);
  external Promise createImageBitmap(ImageBitmapSource image, num sx, num sy, num sw, num sh, [ImageBitmapOptions options]);
  external Promise fetch(dynamic /* RequestInfo|URL */ input, [RequestInit init]);
  external void queueMicrotask(VoidFunction callback);
  external void reportError(dynamic e);
  external num setInterval(TimerHandler handler, [num timeout, /* rest */ List<dynamic> arguments]);
  external num setTimeout(TimerHandler handler, [num timeout, /* rest */ List<dynamic> arguments]);
  external T structuredClone(T value, [StructuredSerializeOptions options]);
}
@JS()
@anonymous
abstract class WindowSessionStorage{}
extension WindowSessionStorageExtension on WindowSessionStorage {
  external Storage get sessionStorage;
}
@JS()
@anonymous
abstract class WorkerEventMap{}
extension WorkerEventMapExtension on WorkerEventMap {
}
@JS("Worker")
external dynamic Worker;
@JS("Worklet")
external dynamic Worklet;
@JS("WritableStream")
external dynamic WritableStream;
@JS("WritableStreamDefaultController")
external dynamic WritableStreamDefaultController;
@JS("WritableStreamDefaultWriter")
external dynamic WritableStreamDefaultWriter;
@JS("XMLDocument")
external dynamic XMLDocument;
@JS()
@anonymous
abstract class XMLHttpRequestEventMap{}
extension XMLHttpRequestEventMapExtension on XMLHttpRequestEventMap {
  external Event get "readystatechange";
  external set "readystatechange"(Event value);
}
@JS("XMLHttpRequest")
external dynamic XMLHttpRequest;
@JS()
@anonymous
abstract class XMLHttpRequestEventTargetEventMap{}
extension XMLHttpRequestEventTargetEventMapExtension on XMLHttpRequestEventTargetEventMap {
  external ProgressEvent<XMLHttpRequestEventTarget> get "abort";
  external set "abort"(ProgressEvent<XMLHttpRequestEventTarget> value);
  external ProgressEvent<XMLHttpRequestEventTarget> get "error";
  external set "error"(ProgressEvent<XMLHttpRequestEventTarget> value);
  external ProgressEvent<XMLHttpRequestEventTarget> get "load";
  external set "load"(ProgressEvent<XMLHttpRequestEventTarget> value);
  external ProgressEvent<XMLHttpRequestEventTarget> get "loadend";
  external set "loadend"(ProgressEvent<XMLHttpRequestEventTarget> value);
  external ProgressEvent<XMLHttpRequestEventTarget> get "loadstart";
  external set "loadstart"(ProgressEvent<XMLHttpRequestEventTarget> value);
  external ProgressEvent<XMLHttpRequestEventTarget> get "progress";
  external set "progress"(ProgressEvent<XMLHttpRequestEventTarget> value);
  external ProgressEvent<XMLHttpRequestEventTarget> get "timeout";
  external set "timeout"(ProgressEvent<XMLHttpRequestEventTarget> value);
}
@JS("XMLHttpRequestEventTarget")
external dynamic XMLHttpRequestEventTarget;
@JS("XMLHttpRequestUpload")
external dynamic XMLHttpRequestUpload;
@JS("XMLSerializer")
external dynamic XMLSerializer;
@JS("XPathEvaluator")
external dynamic XPathEvaluator;
@JS()
@anonymous
abstract class XPathEvaluatorBase{}
extension XPathEvaluatorBaseExtension on XPathEvaluatorBase {
  external XPathExpression createExpression(String expression, [XPathNSResolver? resolver]);
  external Node createNSResolver(Node nodeResolver);
  external XPathResult evaluate(String expression, Node contextNode, [XPathNSResolver? resolver, num type, XPathResult? result]);
}
@JS("XPathExpression")
external dynamic XPathExpression;
@JS("XPathResult")
external dynamic XPathResult;
@JS("XSLTProcessor")
external dynamic XSLTProcessor;
@JS()
@anonymous
abstract class Console{}
extension ConsoleExtension on Console {
  external void assert([bool condition, /* rest */ List<dynamic> data]);
  external void clear();
  external void count([String label]);
  external void countReset([String label]);
  external void debug([/* rest */ List<dynamic> data]);
  external void dir([dynamic item, dynamic options]);
  external void dirxml([/* rest */ List<dynamic> data]);
  external void error([/* rest */ List<dynamic> data]);
  external void group([/* rest */ List<dynamic> data]);
  external void groupCollapsed([/* rest */ List<dynamic> data]);
  external void groupEnd();
  external void info([/* rest */ List<dynamic> data]);
  external void log([/* rest */ List<dynamic> data]);
  external void table([dynamic tabularData, List<String> properties]);
  external void time([String label]);
  external void timeEnd([String label]);
  external void timeLog([String label, /* rest */ List<dynamic> data]);
  external void timeStamp([String label]);
  external void trace([/* rest */ List<dynamic> data]);
  external void warn([/* rest */ List<dynamic> data]);
}
@JS("console")
external Console console;
@JS("CSS.highlights")
external HighlightRegistry highlights;
@JS("CSS.Hz")
external CSSUnitValue Hz(num value);
@JS("CSS.Q")
external CSSUnitValue Q(num value);
@JS("CSS.cap")
external CSSUnitValue cap(num value);
@JS("CSS.ch")
external CSSUnitValue ch(num value);
@JS("CSS.cm")
external CSSUnitValue cm(num value);
@JS("CSS.cqb")
external CSSUnitValue cqb(num value);
@JS("CSS.cqh")
external CSSUnitValue cqh(num value);
@JS("CSS.cqi")
external CSSUnitValue cqi(num value);
@JS("CSS.cqmax")
external CSSUnitValue cqmax(num value);
@JS("CSS.cqmin")
external CSSUnitValue cqmin(num value);
@JS("CSS.cqw")
external CSSUnitValue cqw(num value);
@JS("CSS.deg")
external CSSUnitValue deg(num value);
@JS("CSS.dpcm")
external CSSUnitValue dpcm(num value);
@JS("CSS.dpi")
external CSSUnitValue dpi(num value);
@JS("CSS.dppx")
external CSSUnitValue dppx(num value);
@JS("CSS.dvb")
external CSSUnitValue dvb(num value);
@JS("CSS.dvh")
external CSSUnitValue dvh(num value);
@JS("CSS.dvi")
external CSSUnitValue dvi(num value);
@JS("CSS.dvmax")
external CSSUnitValue dvmax(num value);
@JS("CSS.dvmin")
external CSSUnitValue dvmin(num value);
@JS("CSS.dvw")
external CSSUnitValue dvw(num value);
@JS("CSS.em")
external CSSUnitValue em(num value);
@JS("CSS.escape")
external String escape(String ident);
@JS("CSS.ex")
external CSSUnitValue ex(num value);
@JS("CSS.fr")
external CSSUnitValue fr(num value);
@JS("CSS.grad")
external CSSUnitValue grad(num value);
@JS("CSS.ic")
external CSSUnitValue ic(num value);
@JS("CSS.kHz")
external CSSUnitValue kHz(num value);
@JS("CSS.lh")
external CSSUnitValue lh(num value);
@JS("CSS.lvb")
external CSSUnitValue lvb(num value);
@JS("CSS.lvh")
external CSSUnitValue lvh(num value);
@JS("CSS.lvi")
external CSSUnitValue lvi(num value);
@JS("CSS.lvmax")
external CSSUnitValue lvmax(num value);
@JS("CSS.lvmin")
external CSSUnitValue lvmin(num value);
@JS("CSS.lvw")
external CSSUnitValue lvw(num value);
@JS("CSS.mm")
external CSSUnitValue mm(num value);
@JS("CSS.ms")
external CSSUnitValue ms(num value);
@JS("CSS.number")
external CSSUnitValue number(num value);
@JS("CSS.pc")
external CSSUnitValue pc(num value);
@JS("CSS.percent")
external CSSUnitValue percent(num value);
@JS("CSS.pt")
external CSSUnitValue pt(num value);
@JS("CSS.px")
external CSSUnitValue px(num value);
@JS("CSS.rad")
external CSSUnitValue rad(num value);
@JS("CSS.rcap")
external CSSUnitValue rcap(num value);
@JS("CSS.rch")
external CSSUnitValue rch(num value);
@JS("CSS.registerProperty")
external void registerProperty(PropertyDefinition definition);
@JS("CSS.rem")
external CSSUnitValue rem(num value);
@JS("CSS.rex")
external CSSUnitValue rex(num value);
@JS("CSS.ric")
external CSSUnitValue ric(num value);
@JS("CSS.rlh")
external CSSUnitValue rlh(num value);
@JS("CSS.s")
external CSSUnitValue s(num value);
@JS("CSS.supports")
external bool supports(String conditionText);
@JS("CSS.svb")
external CSSUnitValue svb(num value);
@JS("CSS.svh")
external CSSUnitValue svh(num value);
@JS("CSS.svi")
external CSSUnitValue svi(num value);
@JS("CSS.svmax")
external CSSUnitValue svmax(num value);
@JS("CSS.svmin")
external CSSUnitValue svmin(num value);
@JS("CSS.svw")
external CSSUnitValue svw(num value);
@JS("CSS.turn")
external CSSUnitValue turn(num value);
@JS("CSS.vb")
external CSSUnitValue vb(num value);
@JS("CSS.vh")
external CSSUnitValue vh(num value);
@JS("CSS.vi")
external CSSUnitValue vi(num value);
@JS("CSS.vmax")
external CSSUnitValue vmax(num value);
@JS("CSS.vmin")
external CSSUnitValue vmin(num value);
@JS("CSS.vw")
external CSSUnitValue vw(num value);
@JS("WebAssembly.CompileError")
external dynamic CompileError;
@JS("WebAssembly.Global")
external dynamic Global;
@JS("WebAssembly.Instance")
external dynamic Instance;
@JS("WebAssembly.LinkError")
external dynamic LinkError;
@JS("WebAssembly.Memory")
external dynamic Memory;
@JS("WebAssembly.Module")
external dynamic Module;
@JS("WebAssembly.RuntimeError")
external dynamic RuntimeError;
@JS("WebAssembly.Table")
external dynamic Table;
@JS()
@anonymous
abstract class GlobalDescriptor{}
extension GlobalDescriptorExtension on GlobalDescriptor {
  external bool get mutable;
  external set mutable(bool value);
  external T get value;
  external set value(T value);
}
@JS()
@anonymous
abstract class MemoryDescriptor{}
extension MemoryDescriptorExtension on MemoryDescriptor {
  external num get initial;
  external set initial(num value);
  external num get maximum;
  external set maximum(num value);
  external bool get shared;
  external set shared(bool value);
}
@JS()
@anonymous
abstract class ModuleExportDescriptor{}
extension ModuleExportDescriptorExtension on ModuleExportDescriptor {
  external ImportExportKind get kind;
  external set kind(ImportExportKind value);
  external String get name;
  external set name(String value);
}
@JS()
@anonymous
abstract class ModuleImportDescriptor{}
extension ModuleImportDescriptorExtension on ModuleImportDescriptor {
  external ImportExportKind get kind;
  external set kind(ImportExportKind value);
  external String get module;
  external set module(String value);
  external String get name;
  external set name(String value);
}
@JS()
@anonymous
abstract class TableDescriptor{}
extension TableDescriptorExtension on TableDescriptor {
  external TableKind get element;
  external set element(TableKind value);
  external num get initial;
  external set initial(num value);
  external num get maximum;
  external set maximum(num value);
}
@JS()
@anonymous
abstract class ValueTypeMap{}
extension ValueTypeMapExtension on ValueTypeMap {
  external Function get anyfunc;
  external set anyfunc(Function value);
  external dynamic get externref;
  external set externref(dynamic value);
  external num get f32;
  external set f32(num value);
  external num get f64;
  external set f64(num value);
  external num get i32;
  external set i32(num value);
  external BigInt get i64;
  external set i64(BigInt value);
  external dynamic get v128;
  external set v128(dynamic value);
}
@JS()
@anonymous
abstract class WebAssemblyInstantiatedSource{}
extension WebAssemblyInstantiatedSourceExtension on WebAssemblyInstantiatedSource {
  external Instance get instance;
  external set instance(Instance value);
  external Module get module;
  external set module(Module value);
}
typedef ImportExportKind = String;
typedef TableKind = String;
typedef ExportValue = dynamic /* Function|Global|Memory|Table */;
typedef Exports = Record<String, ExportValue>;
typedef ImportValue = dynamic /* ExportValue|num */;
typedef Imports = Record<String, ModuleImports>;
typedef ModuleImports = Record<String, ImportValue>;
typedef ValueType = dynamic;
@JS("WebAssembly.compile")
external Promise compile(BufferSource bytes);
@JS("WebAssembly.compileStreaming")
external Promise compileStreaming(dynamic /* Response|PromiseLike<Response> */ source);
@JS("WebAssembly.instantiate")
external Promise instantiate(Module moduleObject, [Imports importObject]);
@JS("WebAssembly.instantiateStreaming")
external Promise instantiateStreaming(dynamic /* Response|PromiseLike<Response> */ source, [Imports importObject]);
@JS("WebAssembly.validate")
external bool validate(BufferSource bytes);
@JS()
@anonymous
abstract class AudioDataOutputCallback{}
extension AudioDataOutputCallbackExtension on AudioDataOutputCallback {
}
@JS()
@anonymous
abstract class BlobCallback{}
extension BlobCallbackExtension on BlobCallback {
}
@JS()
@anonymous
class CustomElementConstructor{
  external factory CustomElementConstructor([/* rest */ List<dynamic> params]);
}
extension CustomElementConstructorExtension on CustomElementConstructor {
}
@JS()
@anonymous
abstract class DecodeErrorCallback{}
extension DecodeErrorCallbackExtension on DecodeErrorCallback {
}
@JS()
@anonymous
abstract class DecodeSuccessCallback{}
extension DecodeSuccessCallbackExtension on DecodeSuccessCallback {
}
@JS()
@anonymous
abstract class EncodedAudioChunkOutputCallback{}
extension EncodedAudioChunkOutputCallbackExtension on EncodedAudioChunkOutputCallback {
}
@JS()
@anonymous
abstract class EncodedVideoChunkOutputCallback{}
extension EncodedVideoChunkOutputCallbackExtension on EncodedVideoChunkOutputCallback {
}
@JS()
@anonymous
abstract class ErrorCallback{}
extension ErrorCallbackExtension on ErrorCallback {
}
@JS()
@anonymous
abstract class FileCallback{}
extension FileCallbackExtension on FileCallback {
}
@JS()
@anonymous
abstract class FileSystemEntriesCallback{}
extension FileSystemEntriesCallbackExtension on FileSystemEntriesCallback {
}
@JS()
@anonymous
abstract class FileSystemEntryCallback{}
extension FileSystemEntryCallbackExtension on FileSystemEntryCallback {
}
@JS()
@anonymous
abstract class FrameRequestCallback{}
extension FrameRequestCallbackExtension on FrameRequestCallback {
}
@JS()
@anonymous
abstract class FunctionStringCallback{}
extension FunctionStringCallbackExtension on FunctionStringCallback {
}
@JS()
@anonymous
abstract class IdleRequestCallback{}
extension IdleRequestCallbackExtension on IdleRequestCallback {
}
@JS()
@anonymous
abstract class IntersectionObserverCallback{}
extension IntersectionObserverCallbackExtension on IntersectionObserverCallback {
}
@JS()
@anonymous
abstract class LockGrantedCallback{}
extension LockGrantedCallbackExtension on LockGrantedCallback {
}
@JS()
@anonymous
abstract class MediaSessionActionHandler{}
extension MediaSessionActionHandlerExtension on MediaSessionActionHandler {
}
@JS()
@anonymous
abstract class MutationCallback{}
extension MutationCallbackExtension on MutationCallback {
}
@JS()
@anonymous
abstract class NotificationPermissionCallback{}
extension NotificationPermissionCallbackExtension on NotificationPermissionCallback {
}
@JS()
@anonymous
abstract class OnBeforeUnloadEventHandlerNonNull{}
extension OnBeforeUnloadEventHandlerNonNullExtension on OnBeforeUnloadEventHandlerNonNull {
}
@JS()
@anonymous
abstract class OnErrorEventHandlerNonNull{}
extension OnErrorEventHandlerNonNullExtension on OnErrorEventHandlerNonNull {
}
@JS()
@anonymous
abstract class PerformanceObserverCallback{}
extension PerformanceObserverCallbackExtension on PerformanceObserverCallback {
}
@JS()
@anonymous
abstract class PositionCallback{}
extension PositionCallbackExtension on PositionCallback {
}
@JS()
@anonymous
abstract class PositionErrorCallback{}
extension PositionErrorCallbackExtension on PositionErrorCallback {
}
@JS()
@anonymous
abstract class QueuingStrategySize{}
extension QueuingStrategySizeExtension on QueuingStrategySize {
}
@JS()
@anonymous
abstract class RTCPeerConnectionErrorCallback{}
extension RTCPeerConnectionErrorCallbackExtension on RTCPeerConnectionErrorCallback {
}
@JS()
@anonymous
abstract class RTCSessionDescriptionCallback{}
extension RTCSessionDescriptionCallbackExtension on RTCSessionDescriptionCallback {
}
@JS()
@anonymous
abstract class RemotePlaybackAvailabilityCallback{}
extension RemotePlaybackAvailabilityCallbackExtension on RemotePlaybackAvailabilityCallback {
}
@JS()
@anonymous
abstract class ReportingObserverCallback{}
extension ReportingObserverCallbackExtension on ReportingObserverCallback {
}
@JS()
@anonymous
abstract class ResizeObserverCallback{}
extension ResizeObserverCallbackExtension on ResizeObserverCallback {
}
@JS()
@anonymous
abstract class TransformerFlushCallback{}
extension TransformerFlushCallbackExtension on TransformerFlushCallback {
}
@JS()
@anonymous
abstract class TransformerStartCallback{}
extension TransformerStartCallbackExtension on TransformerStartCallback {
}
@JS()
@anonymous
abstract class TransformerTransformCallback{}
extension TransformerTransformCallbackExtension on TransformerTransformCallback {
}
@JS()
@anonymous
abstract class UnderlyingSinkAbortCallback{}
extension UnderlyingSinkAbortCallbackExtension on UnderlyingSinkAbortCallback {
}
@JS()
@anonymous
abstract class UnderlyingSinkCloseCallback{}
extension UnderlyingSinkCloseCallbackExtension on UnderlyingSinkCloseCallback {
}
@JS()
@anonymous
abstract class UnderlyingSinkStartCallback{}
extension UnderlyingSinkStartCallbackExtension on UnderlyingSinkStartCallback {
}
@JS()
@anonymous
abstract class UnderlyingSinkWriteCallback{}
extension UnderlyingSinkWriteCallbackExtension on UnderlyingSinkWriteCallback {
}
@JS()
@anonymous
abstract class UnderlyingSourceCancelCallback{}
extension UnderlyingSourceCancelCallbackExtension on UnderlyingSourceCancelCallback {
}
@JS()
@anonymous
abstract class UnderlyingSourcePullCallback{}
extension UnderlyingSourcePullCallbackExtension on UnderlyingSourcePullCallback {
}
@JS()
@anonymous
abstract class UnderlyingSourceStartCallback{}
extension UnderlyingSourceStartCallbackExtension on UnderlyingSourceStartCallback {
}
@JS()
@anonymous
abstract class VideoFrameOutputCallback{}
extension VideoFrameOutputCallbackExtension on VideoFrameOutputCallback {
}
@JS()
@anonymous
abstract class VideoFrameRequestCallback{}
extension VideoFrameRequestCallbackExtension on VideoFrameRequestCallback {
}
@JS()
@anonymous
abstract class ViewTransitionUpdateCallback{}
extension ViewTransitionUpdateCallbackExtension on ViewTransitionUpdateCallback {
}
@JS()
@anonymous
abstract class VoidFunction{}
extension VoidFunctionExtension on VoidFunction {
}
@JS()
@anonymous
abstract class WebCodecsErrorCallback{}
extension WebCodecsErrorCallbackExtension on WebCodecsErrorCallback {
}
@JS()
@anonymous
abstract class HTMLElementTagNameMap{}
extension HTMLElementTagNameMapExtension on HTMLElementTagNameMap {
  external HTMLAnchorElement get "a";
  external set "a"(HTMLAnchorElement value);
  external HTMLElement get "abbr";
  external set "abbr"(HTMLElement value);
  external HTMLElement get "address";
  external set "address"(HTMLElement value);
  external HTMLAreaElement get "area";
  external set "area"(HTMLAreaElement value);
  external HTMLElement get "article";
  external set "article"(HTMLElement value);
  external HTMLElement get "aside";
  external set "aside"(HTMLElement value);
  external HTMLAudioElement get "audio";
  external set "audio"(HTMLAudioElement value);
  external HTMLElement get "b";
  external set "b"(HTMLElement value);
  external HTMLBaseElement get "base";
  external set "base"(HTMLBaseElement value);
  external HTMLElement get "bdi";
  external set "bdi"(HTMLElement value);
  external HTMLElement get "bdo";
  external set "bdo"(HTMLElement value);
  external HTMLQuoteElement get "blockquote";
  external set "blockquote"(HTMLQuoteElement value);
  external HTMLBodyElement get "body";
  external set "body"(HTMLBodyElement value);
  external HTMLBRElement get "br";
  external set "br"(HTMLBRElement value);
  external HTMLButtonElement get "button";
  external set "button"(HTMLButtonElement value);
  external HTMLCanvasElement get "canvas";
  external set "canvas"(HTMLCanvasElement value);
  external HTMLTableCaptionElement get "caption";
  external set "caption"(HTMLTableCaptionElement value);
  external HTMLElement get "cite";
  external set "cite"(HTMLElement value);
  external HTMLElement get "code";
  external set "code"(HTMLElement value);
  external HTMLTableColElement get "col";
  external set "col"(HTMLTableColElement value);
  external HTMLTableColElement get "colgroup";
  external set "colgroup"(HTMLTableColElement value);
  external HTMLDataElement get "data";
  external set "data"(HTMLDataElement value);
  external HTMLDataListElement get "datalist";
  external set "datalist"(HTMLDataListElement value);
  external HTMLElement get "dd";
  external set "dd"(HTMLElement value);
  external HTMLModElement get "del";
  external set "del"(HTMLModElement value);
  external HTMLDetailsElement get "details";
  external set "details"(HTMLDetailsElement value);
  external HTMLElement get "dfn";
  external set "dfn"(HTMLElement value);
  external HTMLDialogElement get "dialog";
  external set "dialog"(HTMLDialogElement value);
  external HTMLDivElement get "div";
  external set "div"(HTMLDivElement value);
  external HTMLDListElement get "dl";
  external set "dl"(HTMLDListElement value);
  external HTMLElement get "dt";
  external set "dt"(HTMLElement value);
  external HTMLElement get "em";
  external set "em"(HTMLElement value);
  external HTMLEmbedElement get "embed";
  external set "embed"(HTMLEmbedElement value);
  external HTMLFieldSetElement get "fieldset";
  external set "fieldset"(HTMLFieldSetElement value);
  external HTMLElement get "figcaption";
  external set "figcaption"(HTMLElement value);
  external HTMLElement get "figure";
  external set "figure"(HTMLElement value);
  external HTMLElement get "footer";
  external set "footer"(HTMLElement value);
  external HTMLFormElement get "form";
  external set "form"(HTMLFormElement value);
  external HTMLHeadingElement get "h1";
  external set "h1"(HTMLHeadingElement value);
  external HTMLHeadingElement get "h2";
  external set "h2"(HTMLHeadingElement value);
  external HTMLHeadingElement get "h3";
  external set "h3"(HTMLHeadingElement value);
  external HTMLHeadingElement get "h4";
  external set "h4"(HTMLHeadingElement value);
  external HTMLHeadingElement get "h5";
  external set "h5"(HTMLHeadingElement value);
  external HTMLHeadingElement get "h6";
  external set "h6"(HTMLHeadingElement value);
  external HTMLHeadElement get "head";
  external set "head"(HTMLHeadElement value);
  external HTMLElement get "header";
  external set "header"(HTMLElement value);
  external HTMLElement get "hgroup";
  external set "hgroup"(HTMLElement value);
  external HTMLHRElement get "hr";
  external set "hr"(HTMLHRElement value);
  external HTMLHtmlElement get "html";
  external set "html"(HTMLHtmlElement value);
  external HTMLElement get "i";
  external set "i"(HTMLElement value);
  external HTMLIFrameElement get "iframe";
  external set "iframe"(HTMLIFrameElement value);
  external HTMLImageElement get "img";
  external set "img"(HTMLImageElement value);
  external HTMLInputElement get "input";
  external set "input"(HTMLInputElement value);
  external HTMLModElement get "ins";
  external set "ins"(HTMLModElement value);
  external HTMLElement get "kbd";
  external set "kbd"(HTMLElement value);
  external HTMLLabelElement get "label";
  external set "label"(HTMLLabelElement value);
  external HTMLLegendElement get "legend";
  external set "legend"(HTMLLegendElement value);
  external HTMLLIElement get "li";
  external set "li"(HTMLLIElement value);
  external HTMLLinkElement get "link";
  external set "link"(HTMLLinkElement value);
  external HTMLElement get "main";
  external set "main"(HTMLElement value);
  external HTMLMapElement get "map";
  external set "map"(HTMLMapElement value);
  external HTMLElement get "mark";
  external set "mark"(HTMLElement value);
  external HTMLMenuElement get "menu";
  external set "menu"(HTMLMenuElement value);
  external HTMLMetaElement get "meta";
  external set "meta"(HTMLMetaElement value);
  external HTMLMeterElement get "meter";
  external set "meter"(HTMLMeterElement value);
  external HTMLElement get "nav";
  external set "nav"(HTMLElement value);
  external HTMLElement get "noscript";
  external set "noscript"(HTMLElement value);
  external HTMLObjectElement get "object";
  external set "object"(HTMLObjectElement value);
  external HTMLOListElement get "ol";
  external set "ol"(HTMLOListElement value);
  external HTMLOptGroupElement get "optgroup";
  external set "optgroup"(HTMLOptGroupElement value);
  external HTMLOptionElement get "option";
  external set "option"(HTMLOptionElement value);
  external HTMLOutputElement get "output";
  external set "output"(HTMLOutputElement value);
  external HTMLParagraphElement get "p";
  external set "p"(HTMLParagraphElement value);
  external HTMLPictureElement get "picture";
  external set "picture"(HTMLPictureElement value);
  external HTMLPreElement get "pre";
  external set "pre"(HTMLPreElement value);
  external HTMLProgressElement get "progress";
  external set "progress"(HTMLProgressElement value);
  external HTMLQuoteElement get "q";
  external set "q"(HTMLQuoteElement value);
  external HTMLElement get "rp";
  external set "rp"(HTMLElement value);
  external HTMLElement get "rt";
  external set "rt"(HTMLElement value);
  external HTMLElement get "ruby";
  external set "ruby"(HTMLElement value);
  external HTMLElement get "s";
  external set "s"(HTMLElement value);
  external HTMLElement get "samp";
  external set "samp"(HTMLElement value);
  external HTMLScriptElement get "script";
  external set "script"(HTMLScriptElement value);
  external HTMLElement get "search";
  external set "search"(HTMLElement value);
  external HTMLElement get "section";
  external set "section"(HTMLElement value);
  external HTMLSelectElement get "select";
  external set "select"(HTMLSelectElement value);
  external HTMLSlotElement get "slot";
  external set "slot"(HTMLSlotElement value);
  external HTMLElement get "small";
  external set "small"(HTMLElement value);
  external HTMLSourceElement get "source";
  external set "source"(HTMLSourceElement value);
  external HTMLSpanElement get "span";
  external set "span"(HTMLSpanElement value);
  external HTMLElement get "strong";
  external set "strong"(HTMLElement value);
  external HTMLStyleElement get "style";
  external set "style"(HTMLStyleElement value);
  external HTMLElement get "sub";
  external set "sub"(HTMLElement value);
  external HTMLElement get "summary";
  external set "summary"(HTMLElement value);
  external HTMLElement get "sup";
  external set "sup"(HTMLElement value);
  external HTMLTableElement get "table";
  external set "table"(HTMLTableElement value);
  external HTMLTableSectionElement get "tbody";
  external set "tbody"(HTMLTableSectionElement value);
  external HTMLTableCellElement get "td";
  external set "td"(HTMLTableCellElement value);
  external HTMLTemplateElement get "template";
  external set "template"(HTMLTemplateElement value);
  external HTMLTextAreaElement get "textarea";
  external set "textarea"(HTMLTextAreaElement value);
  external HTMLTableSectionElement get "tfoot";
  external set "tfoot"(HTMLTableSectionElement value);
  external HTMLTableCellElement get "th";
  external set "th"(HTMLTableCellElement value);
  external HTMLTableSectionElement get "thead";
  external set "thead"(HTMLTableSectionElement value);
  external HTMLTimeElement get "time";
  external set "time"(HTMLTimeElement value);
  external HTMLTitleElement get "title";
  external set "title"(HTMLTitleElement value);
  external HTMLTableRowElement get "tr";
  external set "tr"(HTMLTableRowElement value);
  external HTMLTrackElement get "track";
  external set "track"(HTMLTrackElement value);
  external HTMLElement get "u";
  external set "u"(HTMLElement value);
  external HTMLUListElement get "ul";
  external set "ul"(HTMLUListElement value);
  external HTMLElement get "var";
  external set "var"(HTMLElement value);
  external HTMLVideoElement get "video";
  external set "video"(HTMLVideoElement value);
  external HTMLElement get "wbr";
  external set "wbr"(HTMLElement value);
}
@JS()
@anonymous
abstract class HTMLElementDeprecatedTagNameMap{}
extension HTMLElementDeprecatedTagNameMapExtension on HTMLElementDeprecatedTagNameMap {
  external HTMLElement get "acronym";
  external set "acronym"(HTMLElement value);
  external HTMLUnknownElement get "applet";
  external set "applet"(HTMLUnknownElement value);
  external HTMLElement get "basefont";
  external set "basefont"(HTMLElement value);
  external HTMLUnknownElement get "bgsound";
  external set "bgsound"(HTMLUnknownElement value);
  external HTMLElement get "big";
  external set "big"(HTMLElement value);
  external HTMLUnknownElement get "blink";
  external set "blink"(HTMLUnknownElement value);
  external HTMLElement get "center";
  external set "center"(HTMLElement value);
  external HTMLDirectoryElement get "dir";
  external set "dir"(HTMLDirectoryElement value);
  external HTMLFontElement get "font";
  external set "font"(HTMLFontElement value);
  external HTMLFrameElement get "frame";
  external set "frame"(HTMLFrameElement value);
  external HTMLFrameSetElement get "frameset";
  external set "frameset"(HTMLFrameSetElement value);
  external HTMLUnknownElement get "isindex";
  external set "isindex"(HTMLUnknownElement value);
  external HTMLUnknownElement get "keygen";
  external set "keygen"(HTMLUnknownElement value);
  external HTMLPreElement get "listing";
  external set "listing"(HTMLPreElement value);
  external HTMLMarqueeElement get "marquee";
  external set "marquee"(HTMLMarqueeElement value);
  external HTMLElement get "menuitem";
  external set "menuitem"(HTMLElement value);
  external HTMLUnknownElement get "multicol";
  external set "multicol"(HTMLUnknownElement value);
  external HTMLUnknownElement get "nextid";
  external set "nextid"(HTMLUnknownElement value);
  external HTMLElement get "nobr";
  external set "nobr"(HTMLElement value);
  external HTMLElement get "noembed";
  external set "noembed"(HTMLElement value);
  external HTMLElement get "noframes";
  external set "noframes"(HTMLElement value);
  external HTMLParamElement get "param";
  external set "param"(HTMLParamElement value);
  external HTMLElement get "plaintext";
  external set "plaintext"(HTMLElement value);
  external HTMLElement get "rb";
  external set "rb"(HTMLElement value);
  external HTMLElement get "rtc";
  external set "rtc"(HTMLElement value);
  external HTMLUnknownElement get "spacer";
  external set "spacer"(HTMLUnknownElement value);
  external HTMLElement get "strike";
  external set "strike"(HTMLElement value);
  external HTMLElement get "tt";
  external set "tt"(HTMLElement value);
  external HTMLPreElement get "xmp";
  external set "xmp"(HTMLPreElement value);
}
@JS()
@anonymous
abstract class SVGElementTagNameMap{}
extension SVGElementTagNameMapExtension on SVGElementTagNameMap {
  external SVGAElement get "a";
  external set "a"(SVGAElement value);
  external SVGAnimateElement get "animate";
  external set "animate"(SVGAnimateElement value);
  external SVGAnimateMotionElement get "animateMotion";
  external set "animateMotion"(SVGAnimateMotionElement value);
  external SVGAnimateTransformElement get "animateTransform";
  external set "animateTransform"(SVGAnimateTransformElement value);
  external SVGCircleElement get "circle";
  external set "circle"(SVGCircleElement value);
  external SVGClipPathElement get "clipPath";
  external set "clipPath"(SVGClipPathElement value);
  external SVGDefsElement get "defs";
  external set "defs"(SVGDefsElement value);
  external SVGDescElement get "desc";
  external set "desc"(SVGDescElement value);
  external SVGEllipseElement get "ellipse";
  external set "ellipse"(SVGEllipseElement value);
  external SVGFEBlendElement get "feBlend";
  external set "feBlend"(SVGFEBlendElement value);
  external SVGFEColorMatrixElement get "feColorMatrix";
  external set "feColorMatrix"(SVGFEColorMatrixElement value);
  external SVGFEComponentTransferElement get "feComponentTransfer";
  external set "feComponentTransfer"(SVGFEComponentTransferElement value);
  external SVGFECompositeElement get "feComposite";
  external set "feComposite"(SVGFECompositeElement value);
  external SVGFEConvolveMatrixElement get "feConvolveMatrix";
  external set "feConvolveMatrix"(SVGFEConvolveMatrixElement value);
  external SVGFEDiffuseLightingElement get "feDiffuseLighting";
  external set "feDiffuseLighting"(SVGFEDiffuseLightingElement value);
  external SVGFEDisplacementMapElement get "feDisplacementMap";
  external set "feDisplacementMap"(SVGFEDisplacementMapElement value);
  external SVGFEDistantLightElement get "feDistantLight";
  external set "feDistantLight"(SVGFEDistantLightElement value);
  external SVGFEDropShadowElement get "feDropShadow";
  external set "feDropShadow"(SVGFEDropShadowElement value);
  external SVGFEFloodElement get "feFlood";
  external set "feFlood"(SVGFEFloodElement value);
  external SVGFEFuncAElement get "feFuncA";
  external set "feFuncA"(SVGFEFuncAElement value);
  external SVGFEFuncBElement get "feFuncB";
  external set "feFuncB"(SVGFEFuncBElement value);
  external SVGFEFuncGElement get "feFuncG";
  external set "feFuncG"(SVGFEFuncGElement value);
  external SVGFEFuncRElement get "feFuncR";
  external set "feFuncR"(SVGFEFuncRElement value);
  external SVGFEGaussianBlurElement get "feGaussianBlur";
  external set "feGaussianBlur"(SVGFEGaussianBlurElement value);
  external SVGFEImageElement get "feImage";
  external set "feImage"(SVGFEImageElement value);
  external SVGFEMergeElement get "feMerge";
  external set "feMerge"(SVGFEMergeElement value);
  external SVGFEMergeNodeElement get "feMergeNode";
  external set "feMergeNode"(SVGFEMergeNodeElement value);
  external SVGFEMorphologyElement get "feMorphology";
  external set "feMorphology"(SVGFEMorphologyElement value);
  external SVGFEOffsetElement get "feOffset";
  external set "feOffset"(SVGFEOffsetElement value);
  external SVGFEPointLightElement get "fePointLight";
  external set "fePointLight"(SVGFEPointLightElement value);
  external SVGFESpecularLightingElement get "feSpecularLighting";
  external set "feSpecularLighting"(SVGFESpecularLightingElement value);
  external SVGFESpotLightElement get "feSpotLight";
  external set "feSpotLight"(SVGFESpotLightElement value);
  external SVGFETileElement get "feTile";
  external set "feTile"(SVGFETileElement value);
  external SVGFETurbulenceElement get "feTurbulence";
  external set "feTurbulence"(SVGFETurbulenceElement value);
  external SVGFilterElement get "filter";
  external set "filter"(SVGFilterElement value);
  external SVGForeignObjectElement get "foreignObject";
  external set "foreignObject"(SVGForeignObjectElement value);
  external SVGGElement get "g";
  external set "g"(SVGGElement value);
  external SVGImageElement get "image";
  external set "image"(SVGImageElement value);
  external SVGLineElement get "line";
  external set "line"(SVGLineElement value);
  external SVGLinearGradientElement get "linearGradient";
  external set "linearGradient"(SVGLinearGradientElement value);
  external SVGMarkerElement get "marker";
  external set "marker"(SVGMarkerElement value);
  external SVGMaskElement get "mask";
  external set "mask"(SVGMaskElement value);
  external SVGMetadataElement get "metadata";
  external set "metadata"(SVGMetadataElement value);
  external SVGMPathElement get "mpath";
  external set "mpath"(SVGMPathElement value);
  external SVGPathElement get "path";
  external set "path"(SVGPathElement value);
  external SVGPatternElement get "pattern";
  external set "pattern"(SVGPatternElement value);
  external SVGPolygonElement get "polygon";
  external set "polygon"(SVGPolygonElement value);
  external SVGPolylineElement get "polyline";
  external set "polyline"(SVGPolylineElement value);
  external SVGRadialGradientElement get "radialGradient";
  external set "radialGradient"(SVGRadialGradientElement value);
  external SVGRectElement get "rect";
  external set "rect"(SVGRectElement value);
  external SVGScriptElement get "script";
  external set "script"(SVGScriptElement value);
  external SVGSetElement get "set";
  external set "set"(SVGSetElement value);
  external SVGStopElement get "stop";
  external set "stop"(SVGStopElement value);
  external SVGStyleElement get "style";
  external set "style"(SVGStyleElement value);
  external SVGSVGElement get "svg";
  external set "svg"(SVGSVGElement value);
  external SVGSwitchElement get "switch";
  external set "switch"(SVGSwitchElement value);
  external SVGSymbolElement get "symbol";
  external set "symbol"(SVGSymbolElement value);
  external SVGTextElement get "text";
  external set "text"(SVGTextElement value);
  external SVGTextPathElement get "textPath";
  external set "textPath"(SVGTextPathElement value);
  external SVGTitleElement get "title";
  external set "title"(SVGTitleElement value);
  external SVGTSpanElement get "tspan";
  external set "tspan"(SVGTSpanElement value);
  external SVGUseElement get "use";
  external set "use"(SVGUseElement value);
  external SVGViewElement get "view";
  external set "view"(SVGViewElement value);
}
@JS()
@anonymous
abstract class MathMLElementTagNameMap{}
extension MathMLElementTagNameMapExtension on MathMLElementTagNameMap {
  external MathMLElement get "annotation";
  external set "annotation"(MathMLElement value);
  external MathMLElement get "annotation-xml";
  external set "annotation-xml"(MathMLElement value);
  external MathMLElement get "maction";
  external set "maction"(MathMLElement value);
  external MathMLElement get "math";
  external set "math"(MathMLElement value);
  external MathMLElement get "merror";
  external set "merror"(MathMLElement value);
  external MathMLElement get "mfrac";
  external set "mfrac"(MathMLElement value);
  external MathMLElement get "mi";
  external set "mi"(MathMLElement value);
  external MathMLElement get "mmultiscripts";
  external set "mmultiscripts"(MathMLElement value);
  external MathMLElement get "mn";
  external set "mn"(MathMLElement value);
  external MathMLElement get "mo";
  external set "mo"(MathMLElement value);
  external MathMLElement get "mover";
  external set "mover"(MathMLElement value);
  external MathMLElement get "mpadded";
  external set "mpadded"(MathMLElement value);
  external MathMLElement get "mphantom";
  external set "mphantom"(MathMLElement value);
  external MathMLElement get "mprescripts";
  external set "mprescripts"(MathMLElement value);
  external MathMLElement get "mroot";
  external set "mroot"(MathMLElement value);
  external MathMLElement get "mrow";
  external set "mrow"(MathMLElement value);
  external MathMLElement get "ms";
  external set "ms"(MathMLElement value);
  external MathMLElement get "mspace";
  external set "mspace"(MathMLElement value);
  external MathMLElement get "msqrt";
  external set "msqrt"(MathMLElement value);
  external MathMLElement get "mstyle";
  external set "mstyle"(MathMLElement value);
  external MathMLElement get "msub";
  external set "msub"(MathMLElement value);
  external MathMLElement get "msubsup";
  external set "msubsup"(MathMLElement value);
  external MathMLElement get "msup";
  external set "msup"(MathMLElement value);
  external MathMLElement get "mtable";
  external set "mtable"(MathMLElement value);
  external MathMLElement get "mtd";
  external set "mtd"(MathMLElement value);
  external MathMLElement get "mtext";
  external set "mtext"(MathMLElement value);
  external MathMLElement get "mtr";
  external set "mtr"(MathMLElement value);
  external MathMLElement get "munder";
  external set "munder"(MathMLElement value);
  external MathMLElement get "munderover";
  external set "munderover"(MathMLElement value);
  external MathMLElement get "semantics";
  external set "semantics"(MathMLElement value);
}
typedef ElementTagNameMap = dynamic;
@JS("Audio")
external dynamic Audio;
@JS("Image")
external dynamic Image;
@JS("Option")
external dynamic Option;
@JS("clientInformation")
external Navigator clientInformation;
@JS("closed")
external bool closed;
@JS("customElements")
external CustomElementRegistry customElements;
@JS("devicePixelRatio")
external num devicePixelRatio;
@JS("document")
external Document document;
@JS("event")
external Event? event;
@JS("external")
external External external;
@JS("frameElement")
external Element? frameElement;
@JS("frames")
external WindowProxy frames;
@JS("history")
external History history;
@JS("innerHeight")
external num innerHeight;
@JS("innerWidth")
external num innerWidth;
@JS("length")
external num length;
@JS("location")
external Location location;
@JS("locationbar")
external BarProp locationbar;
@JS("menubar")
external BarProp menubar;
@JS("name")
external void name;
@JS("navigator")
external Navigator navigator;
@JS("ondevicemotion")
external dynamic Function(Window, DeviceMotionEvent)? ondevicemotion;
@JS("ondeviceorientation")
external dynamic Function(Window, DeviceOrientationEvent)? ondeviceorientation;
@JS("ondeviceorientationabsolute")
external dynamic Function(Window, DeviceOrientationEvent)? ondeviceorientationabsolute;
@JS("onorientationchange")
external dynamic Function(Window, Event)? onorientationchange;
@JS("opener")
external dynamic opener;
@JS("orientation")
external num orientation;
@JS("outerHeight")
external num outerHeight;
@JS("outerWidth")
external num outerWidth;
@JS("pageXOffset")
external num pageXOffset;
@JS("pageYOffset")
external num pageYOffset;
@JS("parent")
external WindowProxy parent;
@JS("personalbar")
external BarProp personalbar;
@JS("screen")
external Screen screen;
@JS("screenLeft")
external num screenLeft;
@JS("screenTop")
external num screenTop;
@JS("screenX")
external num screenX;
@JS("screenY")
external num screenY;
@JS("scrollX")
external num scrollX;
@JS("scrollY")
external num scrollY;
@JS("scrollbars")
external BarProp scrollbars;
@JS("self")
external dynamic self;
@JS("speechSynthesis")
external SpeechSynthesis speechSynthesis;
@JS("status")
external String status;
@JS("statusbar")
external BarProp statusbar;
@JS("toolbar")
external BarProp toolbar;
@JS("top")
external WindowProxy? top;
@JS("visualViewport")
external VisualViewport? visualViewport;
@JS("window")
external dynamic window;
@JS("alert")
external void alert([dynamic message]);
@JS("blur")
external void blur();
@JS("cancelIdleCallback")
external void cancelIdleCallback(num handle);
@JS("captureEvents")
external void captureEvents();
@JS("close")
external void close();
@JS("confirm")
external bool confirm([String message]);
@JS("focus")
external void focus();
@JS("getComputedStyle")
external CSSStyleDeclaration getComputedStyle(Element elt, [String? pseudoElt]);
@JS("getSelection")
external Selection? getSelection();
@JS("matchMedia")
external MediaQueryList matchMedia(String query);
@JS("moveBy")
external void moveBy(num x, num y);
@JS("moveTo")
external void moveTo(num x, num y);
@JS("open")
external WindowProxy? open([dynamic /* String|URL */ url, String target, String features]);
@JS("postMessage")
external void postMessage(dynamic message, [WindowPostMessageOptions options]);
@JS("print")
external void print();
@JS("prompt")
external String? prompt([String message, String _default]);
@JS("releaseEvents")
external void releaseEvents();
@JS("requestIdleCallback")
external num requestIdleCallback(IdleRequestCallback callback, [IdleRequestOptions options]);
@JS("resizeBy")
external void resizeBy(num x, num y);
@JS("resizeTo")
external void resizeTo(num width, num height);
@JS("scroll")
external void scroll(num x, num y);
@JS("scrollBy")
external void scrollBy(num x, num y);
@JS("scrollTo")
external void scrollTo(num x, num y);
@JS("stop")
external void stop();
@JS("toString")
external String toString();
@JS("dispatchEvent")
external bool dispatchEvent(Event event);
@JS("cancelAnimationFrame")
external void cancelAnimationFrame(num handle);
@JS("requestAnimationFrame")
external num requestAnimationFrame(FrameRequestCallback callback);
@JS("onabort")
external dynamic Function(Window, UIEvent)? onabort;
@JS("onanimationcancel")
external dynamic Function(Window, AnimationEvent)? onanimationcancel;
@JS("onanimationend")
external dynamic Function(Window, AnimationEvent)? onanimationend;
@JS("onanimationiteration")
external dynamic Function(Window, AnimationEvent)? onanimationiteration;
@JS("onanimationstart")
external dynamic Function(Window, AnimationEvent)? onanimationstart;
@JS("onauxclick")
external dynamic Function(Window, MouseEvent)? onauxclick;
@JS("onbeforeinput")
external dynamic Function(Window, InputEvent)? onbeforeinput;
@JS("onbeforetoggle")
external dynamic Function(Window, Event)? onbeforetoggle;
@JS("onblur")
external dynamic Function(Window, FocusEvent)? onblur;
@JS("oncancel")
external dynamic Function(Window, Event)? oncancel;
@JS("oncanplay")
external dynamic Function(Window, Event)? oncanplay;
@JS("oncanplaythrough")
external dynamic Function(Window, Event)? oncanplaythrough;
@JS("onchange")
external dynamic Function(Window, Event)? onchange;
@JS("onclick")
external dynamic Function(Window, MouseEvent)? onclick;
@JS("onclose")
external dynamic Function(Window, Event)? onclose;
@JS("oncontextlost")
external dynamic Function(Window, Event)? oncontextlost;
@JS("oncontextmenu")
external dynamic Function(Window, MouseEvent)? oncontextmenu;
@JS("oncontextrestored")
external dynamic Function(Window, Event)? oncontextrestored;
@JS("oncopy")
external dynamic Function(Window, ClipboardEvent)? oncopy;
@JS("oncuechange")
external dynamic Function(Window, Event)? oncuechange;
@JS("oncut")
external dynamic Function(Window, ClipboardEvent)? oncut;
@JS("ondblclick")
external dynamic Function(Window, MouseEvent)? ondblclick;
@JS("ondrag")
external dynamic Function(Window, DragEvent)? ondrag;
@JS("ondragend")
external dynamic Function(Window, DragEvent)? ondragend;
@JS("ondragenter")
external dynamic Function(Window, DragEvent)? ondragenter;
@JS("ondragleave")
external dynamic Function(Window, DragEvent)? ondragleave;
@JS("ondragover")
external dynamic Function(Window, DragEvent)? ondragover;
@JS("ondragstart")
external dynamic Function(Window, DragEvent)? ondragstart;
@JS("ondrop")
external dynamic Function(Window, DragEvent)? ondrop;
@JS("ondurationchange")
external dynamic Function(Window, Event)? ondurationchange;
@JS("onemptied")
external dynamic Function(Window, Event)? onemptied;
@JS("onended")
external dynamic Function(Window, Event)? onended;
@JS("onerror")
external OnErrorEventHandler onerror;
@JS("onfocus")
external dynamic Function(Window, FocusEvent)? onfocus;
@JS("onformdata")
external dynamic Function(Window, FormDataEvent)? onformdata;
@JS("ongotpointercapture")
external dynamic Function(Window, PointerEvent)? ongotpointercapture;
@JS("oninput")
external dynamic Function(Window, Event)? oninput;
@JS("oninvalid")
external dynamic Function(Window, Event)? oninvalid;
@JS("onkeydown")
external dynamic Function(Window, KeyboardEvent)? onkeydown;
@JS("onkeypress")
external dynamic Function(Window, KeyboardEvent)? onkeypress;
@JS("onkeyup")
external dynamic Function(Window, KeyboardEvent)? onkeyup;
@JS("onload")
external dynamic Function(Window, Event)? onload;
@JS("onloadeddata")
external dynamic Function(Window, Event)? onloadeddata;
@JS("onloadedmetadata")
external dynamic Function(Window, Event)? onloadedmetadata;
@JS("onloadstart")
external dynamic Function(Window, Event)? onloadstart;
@JS("onlostpointercapture")
external dynamic Function(Window, PointerEvent)? onlostpointercapture;
@JS("onmousedown")
external dynamic Function(Window, MouseEvent)? onmousedown;
@JS("onmouseenter")
external dynamic Function(Window, MouseEvent)? onmouseenter;
@JS("onmouseleave")
external dynamic Function(Window, MouseEvent)? onmouseleave;
@JS("onmousemove")
external dynamic Function(Window, MouseEvent)? onmousemove;
@JS("onmouseout")
external dynamic Function(Window, MouseEvent)? onmouseout;
@JS("onmouseover")
external dynamic Function(Window, MouseEvent)? onmouseover;
@JS("onmouseup")
external dynamic Function(Window, MouseEvent)? onmouseup;
@JS("onpaste")
external dynamic Function(Window, ClipboardEvent)? onpaste;
@JS("onpause")
external dynamic Function(Window, Event)? onpause;
@JS("onplay")
external dynamic Function(Window, Event)? onplay;
@JS("onplaying")
external dynamic Function(Window, Event)? onplaying;
@JS("onpointercancel")
external dynamic Function(Window, PointerEvent)? onpointercancel;
@JS("onpointerdown")
external dynamic Function(Window, PointerEvent)? onpointerdown;
@JS("onpointerenter")
external dynamic Function(Window, PointerEvent)? onpointerenter;
@JS("onpointerleave")
external dynamic Function(Window, PointerEvent)? onpointerleave;
@JS("onpointermove")
external dynamic Function(Window, PointerEvent)? onpointermove;
@JS("onpointerout")
external dynamic Function(Window, PointerEvent)? onpointerout;
@JS("onpointerover")
external dynamic Function(Window, PointerEvent)? onpointerover;
@JS("onpointerup")
external dynamic Function(Window, PointerEvent)? onpointerup;
@JS("onprogress")
external dynamic Function(Window, ProgressEvent)? onprogress;
@JS("onratechange")
external dynamic Function(Window, Event)? onratechange;
@JS("onreset")
external dynamic Function(Window, Event)? onreset;
@JS("onresize")
external dynamic Function(Window, UIEvent)? onresize;
@JS("onscroll")
external dynamic Function(Window, Event)? onscroll;
@JS("onscrollend")
external dynamic Function(Window, Event)? onscrollend;
@JS("onsecuritypolicyviolation")
external dynamic Function(Window, SecurityPolicyViolationEvent)? onsecuritypolicyviolation;
@JS("onseeked")
external dynamic Function(Window, Event)? onseeked;
@JS("onseeking")
external dynamic Function(Window, Event)? onseeking;
@JS("onselect")
external dynamic Function(Window, Event)? onselect;
@JS("onselectionchange")
external dynamic Function(Window, Event)? onselectionchange;
@JS("onselectstart")
external dynamic Function(Window, Event)? onselectstart;
@JS("onslotchange")
external dynamic Function(Window, Event)? onslotchange;
@JS("onstalled")
external dynamic Function(Window, Event)? onstalled;
@JS("onsubmit")
external dynamic Function(Window, SubmitEvent)? onsubmit;
@JS("onsuspend")
external dynamic Function(Window, Event)? onsuspend;
@JS("ontimeupdate")
external dynamic Function(Window, Event)? ontimeupdate;
@JS("ontoggle")
external dynamic Function(Window, Event)? ontoggle;
@JS("ontouchcancel")
external dynamic Function(Window, TouchEvent)? ontouchcancel;
@JS("ontouchend")
external dynamic Function(Window, TouchEvent)? ontouchend;
@JS("ontouchmove")
external dynamic Function(Window, TouchEvent)? ontouchmove;
@JS("ontouchstart")
external dynamic Function(Window, TouchEvent)? ontouchstart;
@JS("ontransitioncancel")
external dynamic Function(Window, TransitionEvent)? ontransitioncancel;
@JS("ontransitionend")
external dynamic Function(Window, TransitionEvent)? ontransitionend;
@JS("ontransitionrun")
external dynamic Function(Window, TransitionEvent)? ontransitionrun;
@JS("ontransitionstart")
external dynamic Function(Window, TransitionEvent)? ontransitionstart;
@JS("onvolumechange")
external dynamic Function(Window, Event)? onvolumechange;
@JS("onwaiting")
external dynamic Function(Window, Event)? onwaiting;
@JS("onwebkitanimationend")
external dynamic Function(Window, Event)? onwebkitanimationend;
@JS("onwebkitanimationiteration")
external dynamic Function(Window, Event)? onwebkitanimationiteration;
@JS("onwebkitanimationstart")
external dynamic Function(Window, Event)? onwebkitanimationstart;
@JS("onwebkittransitionend")
external dynamic Function(Window, Event)? onwebkittransitionend;
@JS("onwheel")
external dynamic Function(Window, WheelEvent)? onwheel;
@JS("onafterprint")
external dynamic Function(Window, Event)? onafterprint;
@JS("onbeforeprint")
external dynamic Function(Window, Event)? onbeforeprint;
@JS("onbeforeunload")
external dynamic Function(Window, BeforeUnloadEvent)? onbeforeunload;
@JS("ongamepadconnected")
external dynamic Function(Window, GamepadEvent)? ongamepadconnected;
@JS("ongamepaddisconnected")
external dynamic Function(Window, GamepadEvent)? ongamepaddisconnected;
@JS("onhashchange")
external dynamic Function(Window, HashChangeEvent)? onhashchange;
@JS("onlanguagechange")
external dynamic Function(Window, Event)? onlanguagechange;
@JS("onmessage")
external dynamic Function(Window, MessageEvent)? onmessage;
@JS("onmessageerror")
external dynamic Function(Window, MessageEvent)? onmessageerror;
@JS("onoffline")
external dynamic Function(Window, Event)? onoffline;
@JS("ononline")
external dynamic Function(Window, Event)? ononline;
@JS("onpagehide")
external dynamic Function(Window, PageTransitionEvent)? onpagehide;
@JS("onpagereveal")
external dynamic Function(Window, Event)? onpagereveal;
@JS("onpageshow")
external dynamic Function(Window, PageTransitionEvent)? onpageshow;
@JS("onpageswap")
external dynamic Function(Window, Event)? onpageswap;
@JS("onpopstate")
external dynamic Function(Window, PopStateEvent)? onpopstate;
@JS("onrejectionhandled")
external dynamic Function(Window, PromiseRejectionEvent)? onrejectionhandled;
@JS("onstorage")
external dynamic Function(Window, StorageEvent)? onstorage;
@JS("onunhandledrejection")
external dynamic Function(Window, PromiseRejectionEvent)? onunhandledrejection;
@JS("onunload")
external dynamic Function(Window, Event)? onunload;
@JS("localStorage")
external Storage localStorage;
@JS("caches")
external CacheStorage caches;
@JS("crossOriginIsolated")
external bool crossOriginIsolated;
@JS("crypto")
external Crypto crypto;
@JS("indexedDB")
external IDBFactory indexedDB;
@JS("isSecureContext")
external bool isSecureContext;
@JS("origin")
external String origin;
@JS("performance")
external Performance performance;
@JS("atob")
external String atob(String data);
@JS("btoa")
external String btoa(String data);
@JS("clearInterval")
external void clearInterval(num? id);
@JS("clearTimeout")
external void clearTimeout(num? id);
@JS("createImageBitmap")
external Promise createImageBitmap(ImageBitmapSource image, num sx, num sy, num sw, num sh, [ImageBitmapOptions options]);
@JS("fetch")
external Promise fetch(dynamic /* RequestInfo|URL */ input, [RequestInit init]);
@JS("queueMicrotask")
external void queueMicrotask(VoidFunction callback);
@JS("reportError")
external void reportError(dynamic e);
@JS("setInterval")
external num setInterval(TimerHandler handler, [num timeout, /* rest */ List<dynamic> arguments]);
@JS("setTimeout")
external num setTimeout(TimerHandler handler, [num timeout, /* rest */ List<dynamic> arguments]);
@JS("structuredClone")
external T structuredClone(T value, [StructuredSerializeOptions options]);
@JS("sessionStorage")
external Storage sessionStorage;
@JS("addEventListener")
external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
@JS("removeEventListener")
external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
typedef AlgorithmIdentifier = dynamic /* Algorithm|String */;
typedef AllowSharedBufferSource = dynamic /* ArrayBuffer|ArrayBufferView */;
typedef AutoFill = dynamic /* AutoFillBase|dynamic */;
typedef AutoFillField = dynamic /* AutoFillNormalField|dynamic */;
typedef AutoFillSection = dynamic;
typedef Base64URLString = String;
typedef BigInteger = Uint8Array;
typedef BlobPart = dynamic /* BufferSource|Blob|String */;
typedef BodyInit = dynamic /* ReadableStream|XMLHttpRequestBodyInit */;
typedef BufferSource = dynamic /* ArrayBufferView|ArrayBuffer */;
typedef COSEAlgorithmIdentifier = num;
typedef CSSKeywordish = dynamic /* String|CSSKeywordValue */;
typedef CSSNumberish = dynamic /* num|CSSNumericValue */;
typedef CSSPerspectiveValue = dynamic /* CSSNumericValue|CSSKeywordish */;
typedef CSSUnparsedSegment = dynamic /* String|CSSVariableReferenceValue */;
typedef CanvasImageSource = dynamic /* HTMLOrSVGImageElement|HTMLVideoElement|HTMLCanvasElement|ImageBitmap|OffscreenCanvas|VideoFrame */;
typedef ClipboardItemData = Future<dynamic /* String|Blob */>;
typedef ClipboardItems = List<ClipboardItem>;
typedef ConstrainBoolean = dynamic /* bool|ConstrainBooleanParameters */;
typedef ConstrainDOMString = dynamic /* String|List<String>|ConstrainDOMStringParameters */;
typedef ConstrainDouble = dynamic /* num|ConstrainDoubleRange */;
typedef ConstrainULong = dynamic /* num|ConstrainULongRange */;
typedef DOMHighResTimeStamp = num;
typedef EpochTimeStamp = num;
typedef EventListenerOrEventListenerObject = dynamic /* EventListener|EventListenerObject */;
typedef FileSystemWriteChunkType = dynamic /* BufferSource|Blob|String|WriteParams */;
typedef Float32List = dynamic /* Float32Array|List<GLfloat> */;
typedef FormDataEntryValue = dynamic /* File|String */;
typedef GLbitfield = num;
typedef GLboolean = bool;
typedef GLclampf = num;
typedef GLenum = num;
typedef GLfloat = num;
typedef GLint = num;
typedef GLint64 = num;
typedef GLintptr = num;
typedef GLsizei = num;
typedef GLsizeiptr = num;
typedef GLuint = num;
typedef GLuint64 = num;
typedef HTMLOrSVGImageElement = dynamic /* HTMLImageElement|SVGImageElement */;
typedef HTMLOrSVGScriptElement = dynamic /* HTMLScriptElement|SVGScriptElement */;
typedef HashAlgorithmIdentifier = AlgorithmIdentifier;
typedef HeadersInit = dynamic /* List<List<String>>|Record<String, String>|Headers */;
typedef IDBValidKey = dynamic /* num|String|DateTime|BufferSource|List<IDBValidKey> */;
typedef ImageBitmapSource = dynamic /* CanvasImageSource|Blob|ImageData */;
typedef ImageBufferSource = dynamic /* AllowSharedBufferSource|ReadableStream */;
typedef Int32List = dynamic /* Int32Array|List<GLint> */;
typedef LineAndPositionSetting = dynamic /* num|AutoKeyword */;
typedef MediaProvider = dynamic /* MediaStream|MediaSource|Blob */;
typedef MessageEventSource = dynamic /* WindowProxy|MessagePort|ServiceWorker */;
typedef MutationRecordType = String;
typedef NamedCurve = String;
typedef OffscreenRenderingContext = dynamic /* OffscreenCanvasRenderingContext2D|ImageBitmapRenderingContext|WebGLRenderingContext|WebGL2RenderingContext */;
typedef OnBeforeUnloadEventHandler = OnBeforeUnloadEventHandlerNonNull?;
typedef OnErrorEventHandler = OnErrorEventHandlerNonNull?;
typedef OptionalPostfixToken = dynamic /* dynamic|String */;
typedef OptionalPrefixToken = dynamic /* dynamic|String */;
typedef PerformanceEntryList = List<PerformanceEntry>;
typedef PublicKeyCredentialClientCapabilities = Record<String, bool>;
typedef PublicKeyCredentialJSON = dynamic;
typedef RTCRtpTransform = RTCRtpScriptTransform;
typedef ReadableStreamController = dynamic /* ReadableStreamDefaultController<T>|ReadableByteStreamController */;
typedef ReadableStreamReadResult = dynamic /* ReadableStreamReadValueResult<T>|ReadableStreamReadDoneResult<T> */;
typedef ReadableStreamReader = dynamic /* ReadableStreamDefaultReader<T>|ReadableStreamBYOBReader */;
typedef RenderingContext = dynamic /* CanvasRenderingContext2D|ImageBitmapRenderingContext|WebGLRenderingContext|WebGL2RenderingContext */;
typedef ReportList = List<Report>;
typedef RequestInfo = dynamic /* Request|String */;
typedef TexImageSource = dynamic /* ImageBitmap|ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|OffscreenCanvas|VideoFrame */;
typedef TimerHandler = dynamic /* String|Function */;
typedef Transferable = dynamic /* OffscreenCanvas|ImageBitmap|MessagePort|MediaSourceHandle|ReadableStream|WritableStream|TransformStream|AudioData|VideoFrame|RTCDataChannel|ArrayBuffer */;
typedef Uint32List = dynamic /* Uint32Array|List<GLuint> */;
typedef VibratePattern = dynamic /* num|List<num> */;
typedef WindowProxy = Window;
typedef XMLHttpRequestBodyInit = dynamic /* Blob|BufferSource|FormData|URLSearchParams|String */;
typedef AlignSetting = String;
typedef AlphaOption = String;
typedef AnimationPlayState = String;
typedef AnimationReplaceState = String;
typedef AppendMode = String;
typedef AttestationConveyancePreference = String;
typedef AudioContextLatencyCategory = String;
typedef AudioContextState = String;
typedef AudioSampleFormat = String;
typedef AuthenticatorAttachment = String;
typedef AuthenticatorTransport = String;
typedef AutoFillAddressKind = String;
typedef AutoFillBase = String;
typedef AutoFillContactField = String;
typedef AutoFillContactKind = String;
typedef AutoFillCredentialField = String;
typedef AutoFillNormalField = String;
typedef AutoKeyword = String;
typedef AutomationRate = String;
typedef AvcBitstreamFormat = String;
typedef BinaryType = String;
typedef BiquadFilterType = String;
typedef BitrateMode = String;
typedef CSSMathOperator = String;
typedef CSSNumericBaseType = String;
typedef CanPlayTypeResult = String;
typedef CanvasDirection = String;
typedef CanvasFillRule = String;
typedef CanvasFontKerning = String;
typedef CanvasFontStretch = String;
typedef CanvasFontVariantCaps = String;
typedef CanvasLineCap = String;
typedef CanvasLineJoin = String;
typedef CanvasTextAlign = String;
typedef CanvasTextBaseline = String;
typedef CanvasTextRendering = String;
typedef ChannelCountMode = String;
typedef ChannelInterpretation = String;
typedef ClientTypes = String;
typedef CodecState = String;
typedef ColorGamut = String;
typedef ColorSpaceConversion = String;
typedef CompositeOperation = String;
typedef CompositeOperationOrAuto = String;
typedef CompressionFormat = String;
typedef CredentialMediationRequirement = String;
typedef DOMParserSupportedType = String;
typedef DirectionSetting = String;
typedef DisplayCaptureSurfaceType = String;
typedef DistanceModelType = String;
typedef DocumentReadyState = String;
typedef DocumentVisibilityState = String;
typedef EncodedAudioChunkType = String;
typedef EncodedVideoChunkType = String;
typedef EndOfStreamError = String;
typedef EndingType = String;
typedef FileSystemHandleKind = String;
typedef FillMode = String;
typedef FontDisplay = String;
typedef FontFaceLoadStatus = String;
typedef FontFaceSetLoadStatus = String;
typedef FullscreenNavigationUI = String;
typedef GamepadHapticEffectType = String;
typedef GamepadHapticsResult = String;
typedef GamepadMappingType = String;
typedef GlobalCompositeOperation = String;
typedef HardwareAcceleration = String;
typedef HdrMetadataType = String;
typedef HighlightType = String;
typedef IDBCursorDirection = String;
typedef IDBRequestReadyState = String;
typedef IDBTransactionDurability = String;
typedef IDBTransactionMode = String;
typedef ImageOrientation = String;
typedef ImageSmoothingQuality = String;
typedef InsertPosition = String;
typedef IterationCompositeOperation = String;
typedef KeyFormat = String;
typedef KeyType = String;
typedef KeyUsage = String;
typedef LatencyMode = String;
typedef LineAlignSetting = String;
typedef LockMode = String;
typedef MIDIPortConnectionState = String;
typedef MIDIPortDeviceState = String;
typedef MIDIPortType = String;
typedef MediaDecodingType = String;
typedef MediaDeviceKind = String;
typedef MediaEncodingType = String;
typedef MediaKeyMessageType = String;
typedef MediaKeySessionClosedReason = String;
typedef MediaKeySessionType = String;
typedef MediaKeyStatus = String;
typedef MediaKeysRequirement = String;
typedef MediaSessionAction = String;
typedef MediaSessionPlaybackState = String;
typedef MediaStreamTrackState = String;
typedef NavigationTimingType = String;
typedef NavigationType = String;
typedef NotificationDirection = String;
typedef NotificationPermission = String;
typedef OffscreenRenderingContextId = String;
typedef OpusBitstreamFormat = String;
typedef OrientationType = String;
typedef OscillatorType = String;
typedef OverSampleType = String;
typedef PanningModelType = String;
typedef PaymentComplete = String;
typedef PaymentShippingType = String;
typedef PermissionName = String;
typedef PermissionState = String;
typedef PlaybackDirection = String;
typedef PositionAlignSetting = String;
typedef PredefinedColorSpace = String;
typedef PremultiplyAlpha = String;
typedef PresentationStyle = String;
typedef PublicKeyCredentialType = String;
typedef PushEncryptionKeyName = String;
typedef RTCBundlePolicy = String;
typedef RTCDataChannelState = String;
typedef RTCDegradationPreference = String;
typedef RTCDtlsRole = String;
typedef RTCDtlsTransportState = String;
typedef RTCEncodedVideoFrameType = String;
typedef RTCErrorDetailType = String;
typedef RTCIceCandidateType = String;
typedef RTCIceComponent = String;
typedef RTCIceConnectionState = String;
typedef RTCIceGathererState = String;
typedef RTCIceGatheringState = String;
typedef RTCIceProtocol = String;
typedef RTCIceRole = String;
typedef RTCIceTcpCandidateType = String;
typedef RTCIceTransportPolicy = String;
typedef RTCIceTransportState = String;
typedef RTCPeerConnectionState = String;
typedef RTCPriorityType = String;
typedef RTCQualityLimitationReason = String;
typedef RTCRtcpMuxPolicy = String;
typedef RTCRtpTransceiverDirection = String;
typedef RTCSctpTransportState = String;
typedef RTCSdpType = String;
typedef RTCSignalingState = String;
typedef RTCStatsIceCandidatePairState = String;
typedef RTCStatsType = String;
typedef ReadableStreamReaderMode = String;
typedef ReadableStreamType = String;
typedef ReadyState = String;
typedef RecordingState = String;
typedef ReferrerPolicy = String;
typedef RemotePlaybackState = String;
typedef RequestCache = String;
typedef RequestCredentials = String;
typedef RequestDestination = String;
typedef RequestMode = String;
typedef RequestPriority = String;
typedef RequestRedirect = String;
typedef ResidentKeyRequirement = String;
typedef ResizeObserverBoxOptions = String;
typedef ResizeQuality = String;
typedef ResponseType = String;
typedef ScrollBehavior = String;
typedef ScrollLogicalPosition = String;
typedef ScrollRestoration = String;
typedef ScrollSetting = String;
typedef SecurityPolicyViolationEventDisposition = String;
typedef SelectionMode = String;
typedef ServiceWorkerState = String;
typedef ServiceWorkerUpdateViaCache = String;
typedef ShadowRootMode = String;
typedef SlotAssignmentMode = String;
typedef SpeechSynthesisErrorCode = String;
typedef TextTrackKind = String;
typedef TextTrackMode = String;
typedef TouchType = String;
typedef TransferFunction = String;
typedef UserVerificationRequirement = String;
typedef VideoColorPrimaries = String;
typedef VideoEncoderBitrateMode = String;
typedef VideoFacingModeEnum = String;
typedef VideoMatrixCoefficients = String;
typedef VideoPixelFormat = String;
typedef VideoTransferCharacteristics = String;
typedef WakeLockType = String;
typedef WebGLPowerPreference = String;
typedef WebTransportCongestionControl = String;
typedef WebTransportErrorSource = String;
typedef WorkerType = String;
typedef WriteCommandType = String;
typedef XMLHttpRequestResponseType = String;"
`;

exports[`TypeScript Definition Files Snapshot Tests > should transpile types.d.ts correctly > types.dart 1`] = `
"// Generated from types.d.ts
// Do not edit directly

@JS()
library types;
import 'package:js/js.dart';


@JS("testString")
external String testString;
@JS("testNumber")
external num testNumber;
@JS("testBoolean")
external bool testBoolean;
@JS("testVoid")
external void testVoid;
@JS("testAny")
external dynamic testAny;
@JS("testUnknown")
external dynamic testUnknown;
@JS("nullableString")
external String? nullableString;
@JS("undefinedString")
external String? undefinedString;
@JS("bothNullable")
external String? bothNullable;
@JS("stringArray")
external List<String> stringArray;
@JS("numberList")
external List<num> numberList;
@JS("booleanArray")
external List<bool> booleanArray;
@JS("mixedArray")
external List<dynamic /* String|num */> mixedArray;
@JS("simpleTuple")
external List<dynamic> simpleTuple;
@JS("singleTypeTuple")
external List<String> singleTypeTuple;
@JS("tupleWithOptional")
external List<dynamic> tupleWithOptional;
@JS("tupleWithRest")
external List<dynamic> tupleWithRest;
@JS("emptyTuple")
external List<dynamic> emptyTuple;
@JS("userObject")
external User userObject;
@JS("htmlElement")
external HTMLElement htmlElement;
@JS("dateObject")
external DateTime dateObject;
@JS("errorObject")
external Error errorObject;
@JS("stringPromise")
external Future<String> stringPromise;
@JS("numberMap")
external Map<String, num> numberMap;
@JS("userRecord")
external Record<String, User> userRecord;
@JS("arrayPromise")
external Future<List<String>> arrayPromise;
@JS("successStatus")
external String successStatus;
@JS("httpCode")
external num httpCode;
@JS("enabledFlag")
external bool enabledFlag;
@JS("failStatus")
external String failStatus;
@JS("stringOrNumber")
external dynamic /* String|num */ stringOrNumber;
@JS("statusLiteral")
external String statusLiteral;
@JS("optionalValue")
external String? optionalValue;
@JS("nullableValue")
external num? nullableValue;
@JS("simpleCallback")
external void Function(String) simpleCallback;
@JS("eventHandler")
external bool Function(Event, [dynamic]) eventHandler;
@JS("varArgsFunction")
external num Function([List<String>]) varArgsFunction;
@JS("noParamFunction")
external String Function() noParamFunction;
@JS("configObject")
external dynamic configObject;
@JS("pointObject")
external dynamic pointObject;
@JS("complexObject")
external dynamic complexObject;
@JS("weirdObject")
external dynamic weirdObject;
@JS("discriminatedUnion")
external dynamic discriminatedUnion;
@JS("complexUnion")
external dynamic /* String|num|dynamic */ complexUnion;
@JS("nestedPromise")
external Future<List<User>> nestedPromise;
@JS("complexMapping")
external Map<String, Future<List<User>>> complexMapping;
@JS("deepNesting")
external Future<Map<String, List<User>>> deepNesting;
@JS("tripleNested")
external Future<List<Map<String, num>>> tripleNested;
@JS("overloadedFunc")
external dynamic /* String|num */ overloadedFunc(dynamic /* String|num */ x);
@JS("createElement")
external HTMLElement createElement(String tag);
typedef StringOrNumber = dynamic;
@JS("conditionalResult")
external StringOrNumber<String> conditionalResult;
@JS("conditionalResult2")
external StringOrNumber<DateTime> conditionalResult2;
typedef ElementType = dynamic;
@JS("inferResult")
external ElementType<List<String>> inferResult;
@JS("inferResult2")
external ElementType<List<User>> inferResult2;
@JS("builtinConditional")
external NonNullable<String?> builtinConditional;
@JS("returnTypeConditional")
external ReturnType<bool Function()> returnTypeConditional;
@JS("mappedType")
external dynamic mappedType;
@JS("indexedType")
external dynamic indexedType;
@JS("templateLiteral")
external dynamic templateLiteral;
@JS("cssVariable")
external dynamic cssVariable;
@JS("eventName")
external dynamic eventName;
@JS("partialUser")
external Partial<User> partialUser;
@JS("requiredUser")
external Required<User> requiredUser;
@JS("pickedUser")
external Pick<User, String> pickedUser;
@JS("omittedUser")
external Omit<User, String> omittedUser;
@JS("userKeys")
external dynamic userKeys;
@JS("userValues")
external dynamic userValues;
@JS("weirdUnion")
external dynamic /* String|dynamic */ weirdUnion;
@JS("intersectionType")
external dynamic intersectionType;
@JS("parenthesized")
external dynamic /* String|num */ parenthesized;
@JS("arrayOfUnions")
external List<dynamic /* String|num */> arrayOfUnions;
@JS("unionOfArrays")
external dynamic /* List<String>|List<num> */ unionOfArrays;
@JS("recursiveType")
external dynamic recursiveType;
@JS("superOptional")
external String? superOptional;
@JS("optionalArray")
external List<String?>? optionalArray;
@JS()
@anonymous
abstract class User{}
extension UserExtension on User {
  external String get name;
  external set name(String value);
  external String get email;
  external set email(String value);
  external num get age;
  external set age(num value);
  external List<String> get tags;
  external set tags(List<String> value);
}"
`;
