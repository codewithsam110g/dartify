// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`TypeScript Definition Files Snapshot Tests > should transpile axios.d.ts correctly > axios.dart 1`] = `
"// Generated from axios.d.ts
// Do not edit directly

@JS()
library axios;
import 'package:js/js.dart';


typedef AxiosHeaderValue = dynamic /* AxiosHeaders|String|List<String>|num|bool */;
@JS()
@anonymous
abstract class RawAxiosHeaders{}
extension RawAxiosHeadersExtension on RawAxiosHeaders {
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
typedef MethodsHeaders = Partial<dynamic>;
typedef AxiosHeaderMatcher = dynamic /* String|RegExp|bool Function(AxiosHeaders, String, String) */;
typedef AxiosHeaderParser = dynamic Function(AxiosHeaders, AxiosHeaderValue, String);
@JS("AxiosHeaders")
class AxiosHeaders {
  external factory AxiosHeaders([dynamic /* RawAxiosHeaders|AxiosHeaders|String */ headers]);
  @JS("set")
  external AxiosHeaders set_1([String headerName, AxiosHeaderValue value, dynamic /* bool|AxiosHeaderMatcher */ rewrite]);
  @JS("set")
  external AxiosHeaders set_2([dynamic /* RawAxiosHeaders|AxiosHeaders|String */ headers, bool rewrite]);
  @JS("get")
  external RegExpExecArray? get_1(String headerName, RegExp parser);
  @JS("get")
  external AxiosHeaderValue get_2(String headerName, [dynamic /* bool|AxiosHeaderParser */ matcher]);
  @JS("has")
  external bool has(String header, [AxiosHeaderMatcher matcher]);
  @JS("delete")
  external bool delete(dynamic /* String|List<String> */ header, [AxiosHeaderMatcher matcher]);
  @JS("clear")
  external bool clear([AxiosHeaderMatcher matcher]);
  @JS("normalize")
  external AxiosHeaders normalize(bool format);
  @JS("concat")
  external AxiosHeaders concat_1([/* rest */ List<dynamic /* AxiosHeaders|RawAxiosHeaders|String */> targets]);
  @JS("concat")
  external AxiosHeaders concat_2([/* rest */ List<dynamic /* AxiosHeaders|RawAxiosHeaders|String */> targets]);
  @JS("toJSON")
  external RawAxiosHeaders toJSON([bool asStrings]);
  @JS("from")
  external AxiosHeaders from([dynamic /* AxiosHeaders|RawAxiosHeaders|String */ thing]);
  @JS("accessor")
  external AxiosHeaders accessor(dynamic /* String|List<String> */ header);
  @JS("setContentType")
  external AxiosHeaders setContentType(ContentType value, [dynamic /* bool|AxiosHeaderMatcher */ rewrite]);
  @JS("getContentType")
  external RegExpExecArray? getContentType_1([RegExp parser]);
  @JS("getContentType")
  external AxiosHeaderValue getContentType_2([AxiosHeaderMatcher matcher]);
  @JS("hasContentType")
  external bool hasContentType([AxiosHeaderMatcher matcher]);
  @JS("setContentLength")
  external AxiosHeaders setContentLength(AxiosHeaderValue value, [dynamic /* bool|AxiosHeaderMatcher */ rewrite]);
  @JS("getContentLength")
  external RegExpExecArray? getContentLength_1([RegExp parser]);
  @JS("getContentLength")
  external AxiosHeaderValue getContentLength_2([AxiosHeaderMatcher matcher]);
  @JS("hasContentLength")
  external bool hasContentLength([AxiosHeaderMatcher matcher]);
  @JS("setAccept")
  external AxiosHeaders setAccept(AxiosHeaderValue value, [dynamic /* bool|AxiosHeaderMatcher */ rewrite]);
  @JS("getAccept")
  external RegExpExecArray? getAccept_1([RegExp parser]);
  @JS("getAccept")
  external AxiosHeaderValue getAccept_2([AxiosHeaderMatcher matcher]);
  @JS("hasAccept")
  external bool hasAccept([AxiosHeaderMatcher matcher]);
  @JS("setUserAgent")
  external AxiosHeaders setUserAgent(AxiosHeaderValue value, [dynamic /* bool|AxiosHeaderMatcher */ rewrite]);
  @JS("getUserAgent")
  external RegExpExecArray? getUserAgent_1([RegExp parser]);
  @JS("getUserAgent")
  external AxiosHeaderValue getUserAgent_2([AxiosHeaderMatcher matcher]);
  @JS("hasUserAgent")
  external bool hasUserAgent([AxiosHeaderMatcher matcher]);
  @JS("setContentEncoding")
  external AxiosHeaders setContentEncoding(AxiosHeaderValue value, [dynamic /* bool|AxiosHeaderMatcher */ rewrite]);
  @JS("getContentEncoding")
  external RegExpExecArray? getContentEncoding_1([RegExp parser]);
  @JS("getContentEncoding")
  external AxiosHeaderValue getContentEncoding_2([AxiosHeaderMatcher matcher]);
  @JS("hasContentEncoding")
  external bool hasContentEncoding([AxiosHeaderMatcher matcher]);
  @JS("setAuthorization")
  external AxiosHeaders setAuthorization(AxiosHeaderValue value, [dynamic /* bool|AxiosHeaderMatcher */ rewrite]);
  @JS("getAuthorization")
  external RegExpExecArray? getAuthorization_1([RegExp parser]);
  @JS("getAuthorization")
  external AxiosHeaderValue getAuthorization_2([AxiosHeaderMatcher matcher]);
  @JS("hasAuthorization")
  external bool hasAuthorization([AxiosHeaderMatcher matcher]);
  @JS("getSetCookie")
  external List<String> getSetCookie();
  @JS("[Symbol.iterator]")
  external IterableIterator<List<dynamic>> [Symbol.iterator]();
}
typedef CommonRequestHeadersList = String;
typedef ContentType = dynamic /* AxiosHeaderValue|String|String|String|String|String|String */;
typedef RawAxiosRequestHeaders = Partial<dynamic>;
typedef AxiosRequestHeaders = dynamic;
typedef CommonResponseHeadersList = String;
typedef RawCommonResponseHeaders = dynamic;
typedef RawAxiosResponseHeaders = Partial<dynamic>;
typedef AxiosResponseHeaders = dynamic;
@JS()
@anonymous
abstract class AxiosRequestTransformer{}
extension AxiosRequestTransformerExtension on AxiosRequestTransformer {
}
@JS()
@anonymous
abstract class AxiosResponseTransformer{}
extension AxiosResponseTransformerExtension on AxiosResponseTransformer {
}
@JS()
@anonymous
abstract class AxiosAdapter{}
extension AxiosAdapterExtension on AxiosAdapter {
}
@JS()
@anonymous
abstract class AxiosBasicCredentials{}
extension AxiosBasicCredentialsExtension on AxiosBasicCredentials {
  external String get username;
  external set username(String value);
  external String get password;
  external set password(String value);
}
@JS()
@anonymous
abstract class AxiosProxyConfig{}
extension AxiosProxyConfigExtension on AxiosProxyConfig {
  external String get host;
  external set host(String value);
  external num get port;
  external set port(num value);
  external AxiosBasicCredentials get auth;
  external set auth(AxiosBasicCredentials value);
  external String get protocol;
  external set protocol(String value);
}
@JS("HttpStatusCode")
class HttpStatusCode{}
@JS("HttpStatusCode")
extension HttpStatusCodeEnum on HttpStatusCode{
  external static String get Continue;
  external static String get SwitchingProtocols;
  external static String get Processing;
  external static String get EarlyHints;
  external static String get Ok;
  external static String get Created;
  external static String get Accepted;
  external static String get NonAuthoritativeInformation;
  external static String get NoContent;
  external static String get ResetContent;
  external static String get PartialContent;
  external static String get MultiStatus;
  external static String get AlreadyReported;
  external static String get ImUsed;
  external static String get MultipleChoices;
  external static String get MovedPermanently;
  external static String get Found;
  external static String get SeeOther;
  external static String get NotModified;
  external static String get UseProxy;
  external static String get Unused;
  external static String get TemporaryRedirect;
  external static String get PermanentRedirect;
  external static String get BadRequest;
  external static String get Unauthorized;
  external static String get PaymentRequired;
  external static String get Forbidden;
  external static String get NotFound;
  external static String get MethodNotAllowed;
  external static String get NotAcceptable;
  external static String get ProxyAuthenticationRequired;
  external static String get RequestTimeout;
  external static String get Conflict;
  external static String get Gone;
  external static String get LengthRequired;
  external static String get PreconditionFailed;
  external static String get PayloadTooLarge;
  external static String get UriTooLong;
  external static String get UnsupportedMediaType;
  external static String get RangeNotSatisfiable;
  external static String get ExpectationFailed;
  external static String get ImATeapot;
  external static String get MisdirectedRequest;
  external static String get UnprocessableEntity;
  external static String get Locked;
  external static String get FailedDependency;
  external static String get TooEarly;
  external static String get UpgradeRequired;
  external static String get PreconditionRequired;
  external static String get TooManyRequests;
  external static String get RequestHeaderFieldsTooLarge;
  external static String get UnavailableForLegalReasons;
  external static String get InternalServerError;
  external static String get NotImplemented;
  external static String get BadGateway;
  external static String get ServiceUnavailable;
  external static String get GatewayTimeout;
  external static String get HttpVersionNotSupported;
  external static String get VariantAlsoNegotiates;
  external static String get InsufficientStorage;
  external static String get LoopDetected;
  external static String get NotExtended;
  external static String get NetworkAuthenticationRequired;
}
typedef Method = String;
typedef ResponseType = String;
typedef responseEncoding = String;
@JS()
@anonymous
abstract class TransitionalOptions{}
extension TransitionalOptionsExtension on TransitionalOptions {
  external bool get silentJSONParsing;
  external set silentJSONParsing(bool value);
  external bool get forcedJSONParsing;
  external set forcedJSONParsing(bool value);
  external bool get clarifyTimeoutError;
  external set clarifyTimeoutError(bool value);
}
@JS()
@anonymous
abstract class GenericAbortSignal{}
extension GenericAbortSignalExtension on GenericAbortSignal {
  external bool get aborted;
  external dynamic Function([dynamic])? get onabort;
  external set onabort(dynamic Function([dynamic])? value);
  external dynamic Function([dynamic]) get addEventListener;
  external set addEventListener(dynamic Function([dynamic]) value);
  external dynamic Function([dynamic]) get removeEventListener;
  external set removeEventListener(dynamic Function([dynamic]) value);
}
@JS()
@anonymous
abstract class FormDataVisitorHelpers{}
extension FormDataVisitorHelpersExtension on FormDataVisitorHelpers {
  external SerializerVisitor get defaultVisitor;
  external set defaultVisitor(SerializerVisitor value);
  external dynamic Function(dynamic) get convertValue;
  external set convertValue(dynamic Function(dynamic) value);
  external bool Function(dynamic) get isVisitable;
  external set isVisitable(bool Function(dynamic) value);
}
@JS()
@anonymous
abstract class SerializerVisitor{}
extension SerializerVisitorExtension on SerializerVisitor {
}
@JS()
@anonymous
abstract class SerializerOptions{}
extension SerializerOptionsExtension on SerializerOptions {
  external SerializerVisitor get visitor;
  external set visitor(SerializerVisitor value);
  external bool get dots;
  external set dots(bool value);
  external bool get metaTokens;
  external set metaTokens(bool value);
  external bool? get indexes;
  external set indexes(bool? value);
}
@JS()
@anonymous
abstract class FormSerializerOptions{}
extension FormSerializerOptionsExtension on FormSerializerOptions {
}
@JS()
@anonymous
abstract class ParamEncoder{}
extension ParamEncoderExtension on ParamEncoder {
}
@JS()
@anonymous
abstract class CustomParamsSerializer{}
extension CustomParamsSerializerExtension on CustomParamsSerializer {
}
@JS()
@anonymous
abstract class ParamsSerializerOptions{}
extension ParamsSerializerOptionsExtension on ParamsSerializerOptions {
  external ParamEncoder get encode;
  external set encode(ParamEncoder value);
  external CustomParamsSerializer get serialize;
  external set serialize(CustomParamsSerializer value);
}
typedef MaxUploadRate = num;
typedef MaxDownloadRate = num;
typedef BrowserProgressEvent = dynamic;
@JS()
@anonymous
abstract class AxiosProgressEvent{}
extension AxiosProgressEventExtension on AxiosProgressEvent {
  external num get loaded;
  external set loaded(num value);
  external num get total;
  external set total(num value);
  external num get progress;
  external set progress(num value);
  external num get bytes;
  external set bytes(num value);
  external num get rate;
  external set rate(num value);
  external num get estimated;
  external set estimated(num value);
  external bool get upload;
  external set upload(bool value);
  external bool get download;
  external set download(bool value);
  external BrowserProgressEvent get event;
  external set event(BrowserProgressEvent value);
  external bool get lengthComputable;
  external set lengthComputable(bool value);
}
typedef Milliseconds = num;
typedef AxiosAdapterName = dynamic /* String|String|String|dynamic */;
typedef AxiosAdapterConfig = dynamic /* AxiosAdapter|AxiosAdapterName */;
typedef AddressFamily = num?;
@JS()
@anonymous
abstract class LookupAddressEntry{}
extension LookupAddressEntryExtension on LookupAddressEntry {
  external String get address;
  external set address(String value);
  external AddressFamily get family;
  external set family(AddressFamily value);
}
typedef LookupAddress = dynamic /* String|LookupAddressEntry */;
@JS()
@anonymous
abstract class AxiosRequestConfig{}
extension AxiosRequestConfigExtension on AxiosRequestConfig {
  external String get url;
  external set url(String value);
  external dynamic /* Method|String */ get method;
  external set method(dynamic /* Method|String */ value);
  external String get baseURL;
  external set baseURL(String value);
  external bool get allowAbsoluteUrls;
  external set allowAbsoluteUrls(bool value);
  external dynamic /* AxiosRequestTransformer|List<AxiosRequestTransformer> */ get transformRequest;
  external set transformRequest(dynamic /* AxiosRequestTransformer|List<AxiosRequestTransformer> */ value);
  external dynamic /* AxiosResponseTransformer|List<AxiosResponseTransformer> */ get transformResponse;
  external set transformResponse(dynamic /* AxiosResponseTransformer|List<AxiosResponseTransformer> */ value);
  external dynamic /* dynamic|AxiosHeaders */ get headers;
  external set headers(dynamic /* dynamic|AxiosHeaders */ value);
  external dynamic get params;
  external set params(dynamic value);
  external dynamic /* ParamsSerializerOptions|CustomParamsSerializer */ get paramsSerializer;
  external set paramsSerializer(dynamic /* ParamsSerializerOptions|CustomParamsSerializer */ value);
  external D get data;
  external set data(D value);
  external Milliseconds get timeout;
  external set timeout(Milliseconds value);
  external String get timeoutErrorMessage;
  external set timeoutErrorMessage(String value);
  external bool get withCredentials;
  external set withCredentials(bool value);
  external dynamic /* AxiosAdapterConfig|List<AxiosAdapterConfig> */ get adapter;
  external set adapter(dynamic /* AxiosAdapterConfig|List<AxiosAdapterConfig> */ value);
  external AxiosBasicCredentials get auth;
  external set auth(AxiosBasicCredentials value);
  external ResponseType get responseType;
  external set responseType(ResponseType value);
  external dynamic /* responseEncoding|String */ get responseEncoding;
  external set responseEncoding(dynamic /* responseEncoding|String */ value);
  external String get xsrfCookieName;
  external set xsrfCookieName(String value);
  external String get xsrfHeaderName;
  external set xsrfHeaderName(String value);
  external void Function(AxiosProgressEvent) get onUploadProgress;
  external set onUploadProgress(void Function(AxiosProgressEvent) value);
  external void Function(AxiosProgressEvent) get onDownloadProgress;
  external set onDownloadProgress(void Function(AxiosProgressEvent) value);
  external num get maxContentLength;
  external set maxContentLength(num value);
  external bool Function(num)? get validateStatus;
  external set validateStatus(bool Function(num)? value);
  external num get maxBodyLength;
  external set maxBodyLength(num value);
  external num get maxRedirects;
  external set maxRedirects(num value);
  external dynamic /* num|List<dynamic> */ get maxRate;
  external set maxRate(dynamic /* num|List<dynamic> */ value);
  external void Function(Record<String, dynamic>, dynamic) get beforeRedirect;
  external set beforeRedirect(void Function(Record<String, dynamic>, dynamic) value);
  external String? get socketPath;
  external set socketPath(String? value);
  external dynamic get transport;
  external set transport(dynamic value);
  external dynamic get httpAgent;
  external set httpAgent(dynamic value);
  external dynamic get httpsAgent;
  external set httpsAgent(dynamic value);
  external dynamic /* AxiosProxyConfig|bool */ get proxy;
  external set proxy(dynamic /* AxiosProxyConfig|bool */ value);
  external CancelToken get cancelToken;
  external set cancelToken(CancelToken value);
  external bool get decompress;
  external set decompress(bool value);
  external TransitionalOptions get transitional;
  external set transitional(TransitionalOptions value);
  external GenericAbortSignal get signal;
  external set signal(GenericAbortSignal value);
  external bool get insecureHTTPParser;
  external set insecureHTTPParser(bool value);
  external AnonInterface$5 get env;
  external set env(AnonInterface$5 value);
  external FormSerializerOptions get formSerializer;
  external set formSerializer(FormSerializerOptions value);
  external AddressFamily get family;
  external set family(AddressFamily value);
  external dynamic /* void Function(String, dynamic, void Function(Error?, dynamic /* LookupAddress|List<LookupAddress> */, [AddressFamily]))|Future<dynamic /* List<dynamic>|LookupAddress */> Function(String, dynamic) */ get lookup;
  external set lookup(dynamic /* void Function(String, dynamic, void Function(Error?, dynamic /* LookupAddress|List<LookupAddress> */, [AddressFamily]))|Future<dynamic /* List<dynamic>|LookupAddress */> Function(String, dynamic) */ value);
  external dynamic /* bool|bool? Function(InternalAxiosRequestConfig) */ get withXSRFToken;
  external set withXSRFToken(dynamic /* bool|bool? Function(InternalAxiosRequestConfig) */ value);
  external dynamic /* Omit<RequestInit, String>|Record<String, dynamic> */ get fetchOptions;
  external set fetchOptions(dynamic /* Omit<RequestInit, String>|Record<String, dynamic> */ value);
}
typedef RawAxiosRequestConfig = AxiosRequestConfig<D>;
@JS()
@anonymous
abstract class InternalAxiosRequestConfig{}
extension InternalAxiosRequestConfigExtension on InternalAxiosRequestConfig {
  external AxiosRequestHeaders get headers;
  external set headers(AxiosRequestHeaders value);
}
@JS()
@anonymous
abstract class HeadersDefaults{}
extension HeadersDefaultsExtension on HeadersDefaults {
  external RawAxiosRequestHeaders get common;
  external set common(RawAxiosRequestHeaders value);
  external RawAxiosRequestHeaders get delete;
  external set delete(RawAxiosRequestHeaders value);
  external RawAxiosRequestHeaders get get;
  external set get(RawAxiosRequestHeaders value);
  external RawAxiosRequestHeaders get head;
  external set head(RawAxiosRequestHeaders value);
  external RawAxiosRequestHeaders get post;
  external set post(RawAxiosRequestHeaders value);
  external RawAxiosRequestHeaders get put;
  external set put(RawAxiosRequestHeaders value);
  external RawAxiosRequestHeaders get patch;
  external set patch(RawAxiosRequestHeaders value);
  external RawAxiosRequestHeaders get options;
  external set options(RawAxiosRequestHeaders value);
  external RawAxiosRequestHeaders get purge;
  external set purge(RawAxiosRequestHeaders value);
  external RawAxiosRequestHeaders get link;
  external set link(RawAxiosRequestHeaders value);
  external RawAxiosRequestHeaders get unlink;
  external set unlink(RawAxiosRequestHeaders value);
}
@JS()
@anonymous
abstract class AxiosDefaults{}
extension AxiosDefaultsExtension on AxiosDefaults {
  external HeadersDefaults get headers;
  external set headers(HeadersDefaults value);
}
@JS()
@anonymous
abstract class CreateAxiosDefaults{}
extension CreateAxiosDefaultsExtension on CreateAxiosDefaults {
  external dynamic /* RawAxiosRequestHeaders|AxiosHeaders|Partial<HeadersDefaults> */ get headers;
  external set headers(dynamic /* RawAxiosRequestHeaders|AxiosHeaders|Partial<HeadersDefaults> */ value);
}
@JS()
@anonymous
abstract class AxiosResponse{}
extension AxiosResponseExtension on AxiosResponse {
  external T get data;
  external set data(T value);
  external num get status;
  external set status(num value);
  external String get statusText;
  external set statusText(String value);
  external dynamic /* RawAxiosResponseHeaders|AxiosResponseHeaders */ get headers;
  external set headers(dynamic /* RawAxiosResponseHeaders|AxiosResponseHeaders */ value);
  external InternalAxiosRequestConfig<D> get config;
  external set config(InternalAxiosRequestConfig<D> value);
  external dynamic get request;
  external set request(dynamic value);
}
@JS("AxiosError")
class AxiosError {
  external factory AxiosError([String message, String code, InternalAxiosRequestConfig<D> config, dynamic request, AxiosResponse<T, D> response]);
  external InternalAxiosRequestConfig<D> get config;
  external set config(InternalAxiosRequestConfig<D> value);
  external String get code;
  external set code(String value);
  external dynamic get request;
  external set request(dynamic value);
  external AxiosResponse<T, D> get response;
  external set response(AxiosResponse<T, D> value);
  external bool get isAxiosError;
  external set isAxiosError(bool value);
  external num get status;
  external set status(num value);
  external dynamic Function() get toJSON;
  external set toJSON(dynamic Function() value);
  external Error get cause;
  external set cause(Error value);
  external static dynamic get ERR_FR_TOO_MANY_REDIRECTS;
  external static dynamic get ERR_BAD_OPTION_VALUE;
  external static dynamic get ERR_BAD_OPTION;
  external static dynamic get ERR_NETWORK;
  external static dynamic get ERR_DEPRECATED;
  external static dynamic get ERR_BAD_RESPONSE;
  external static dynamic get ERR_BAD_REQUEST;
  external static dynamic get ERR_NOT_SUPPORT;
  external static dynamic get ERR_INVALID_URL;
  external static dynamic get ERR_CANCELED;
  external static dynamic get ECONNABORTED;
  external static dynamic get ETIMEDOUT;
  @JS("from")
  external AxiosError<T, D> from(dynamic /* Error|dynamic */ error, [String code, InternalAxiosRequestConfig<D> config, dynamic request, AxiosResponse<T, D> response, dynamic customProps]);
}
@JS("CanceledError")
class CanceledError {
}
typedef AxiosPromise = Future<AxiosResponse<T>>;
@JS()
@anonymous
class CancelStatic{
  external factory CancelStatic({String message});
}
extension CancelStaticExtension on CancelStatic {
}
@JS()
@anonymous
abstract class Cancel{}
extension CancelExtension on Cancel {
  external String? get message;
  external set message(String? value);
}
@JS()
@anonymous
abstract class Canceler{}
extension CancelerExtension on Canceler {
}
@JS()
@anonymous
class CancelTokenStatic{
  external factory CancelTokenStatic({required void Function(Canceler) executor});
}
extension CancelTokenStaticExtension on CancelTokenStatic {
  @JS("source")
  external CancelTokenSource source();
}
@JS()
@anonymous
abstract class CancelToken{}
extension CancelTokenExtension on CancelToken {
  external Future<Cancel> get promise;
  external set promise(Future<Cancel> value);
  external Cancel get reason;
  external set reason(Cancel value);
  @JS("throwIfRequested")
  external void throwIfRequested();
}
@JS()
@anonymous
abstract class CancelTokenSource{}
extension CancelTokenSourceExtension on CancelTokenSource {
  external CancelToken get token;
  external set token(CancelToken value);
  external Canceler get cancel;
  external set cancel(Canceler value);
}
@JS()
@anonymous
abstract class AxiosInterceptorOptions{}
extension AxiosInterceptorOptionsExtension on AxiosInterceptorOptions {
  external bool get synchronous;
  external set synchronous(bool value);
  external bool Function(InternalAxiosRequestConfig) get runWhen;
  external set runWhen(bool Function(InternalAxiosRequestConfig) value);
}
typedef AxiosRequestInterceptorUse = num Function([dynamic /* T|Future<T> */ Function(T)?, dynamic Function(dynamic)?, AxiosInterceptorOptions]);
typedef AxiosResponseInterceptorUse = num Function([dynamic /* T|Future<T> */ Function(T)?, dynamic Function(dynamic)?]);
@JS()
@anonymous
abstract class AxiosInterceptorManager{}
extension AxiosInterceptorManagerExtension on AxiosInterceptorManager {
  external dynamic get use;
  external set use(dynamic value);
  @JS("eject")
  external void eject(num id);
  @JS("clear")
  external void clear();
}
@JS("Axios")
class Axios {
  external factory Axios([AxiosRequestConfig config]);
  external AxiosDefaults get defaults;
  external set defaults(AxiosDefaults value);
  external AnonInterface$8 get interceptors;
  external set interceptors(AnonInterface$8 value);
  @JS("getUri")
  external String getUri([AxiosRequestConfig config]);
  @JS("request")
  external Future<R> request(AxiosRequestConfig<D> config);
  @JS("get")
  external Future<R> get(String url, [AxiosRequestConfig<D> config]);
  @JS("delete")
  external Future<R> delete(String url, [AxiosRequestConfig<D> config]);
  @JS("head")
  external Future<R> head(String url, [AxiosRequestConfig<D> config]);
  @JS("options")
  external Future<R> options(String url, [AxiosRequestConfig<D> config]);
  @JS("post")
  external Future<R> post(String url, [D data, AxiosRequestConfig<D> config]);
  @JS("put")
  external Future<R> put(String url, [D data, AxiosRequestConfig<D> config]);
  @JS("patch")
  external Future<R> patch(String url, [D data, AxiosRequestConfig<D> config]);
  @JS("postForm")
  external Future<R> postForm(String url, [D data, AxiosRequestConfig<D> config]);
  @JS("putForm")
  external Future<R> putForm(String url, [D data, AxiosRequestConfig<D> config]);
  @JS("patchForm")
  external Future<R> patchForm(String url, [D data, AxiosRequestConfig<D> config]);
}
@JS()
@anonymous
abstract class AxiosInstance{}
extension AxiosInstanceExtension on AxiosInstance {
  external dynamic get defaults;
  external set defaults(dynamic value);
  @JS("create")
  external AxiosInstance create([CreateAxiosDefaults config]);
}
@JS()
@anonymous
abstract class GenericFormData{}
extension GenericFormDataExtension on GenericFormData {
  @JS("append")
  external dynamic append(String name, dynamic value, [dynamic options]);
}
@JS()
@anonymous
abstract class GenericHTMLFormElement{}
extension GenericHTMLFormElementExtension on GenericHTMLFormElement {
  external String get name;
  external set name(String value);
  external String get method;
  external set method(String value);
  @JS("submit")
  external void submit();
}
@JS("getAdapter")
external AxiosAdapter getAdapter(dynamic /* AxiosAdapterConfig|List<AxiosAdapterConfig> */ adapters);
@JS("toFormData")
external GenericFormData toFormData(dynamic sourceObj, [GenericFormData targetFormData, FormSerializerOptions options]);
@JS("formToJSON")
external dynamic formToJSON(dynamic /* GenericFormData|GenericHTMLFormElement */ form);
@JS("isAxiosError")
external dynamic isAxiosError(dynamic payload);
@JS("spread")
external R Function(List<T>) spread(R Function([List<T>]) callback);
@JS("isCancel")
external dynamic isCancel(dynamic value);
@JS("all")
external Future<List<T>> all(List<dynamic /* T|Future<T> */> values);
@JS("mergeConfig")
external AxiosRequestConfig<D> mergeConfig(AxiosRequestConfig<D> config1, AxiosRequestConfig<D> config2);
@JS()
@anonymous
abstract class AxiosStatic{}
extension AxiosStaticExtension on AxiosStatic {
  external CancelStatic get Cancel;
  external set Cancel(CancelStatic value);
  external CancelTokenStatic get CancelToken;
  external set CancelToken(CancelTokenStatic value);
  external dynamic get Axios;
  external set Axios(dynamic value);
  external dynamic get AxiosError;
  external set AxiosError(dynamic value);
  external dynamic get HttpStatusCode;
  external set HttpStatusCode(dynamic value);
  external String get VERSION;
  external dynamic get isCancel;
  external set isCancel(dynamic value);
  external dynamic get all;
  external set all(dynamic value);
  external dynamic get spread;
  external set spread(dynamic value);
  external dynamic get isAxiosError;
  external set isAxiosError(dynamic value);
  external dynamic get toFormData;
  external set toFormData(dynamic value);
  external dynamic get formToJSON;
  external set formToJSON(dynamic value);
  external dynamic get getAdapter;
  external set getAdapter(dynamic value);
  external dynamic get CanceledError;
  external set CanceledError(dynamic value);
  external dynamic get AxiosHeaders;
  external set AxiosHeaders(dynamic value);
  external dynamic get mergeConfig;
  external set mergeConfig(dynamic value);
}
@JS("axios")
external AxiosStatic axios;
@JS()
@anonymous
class AnonInterface$5{
  external factory AnonInterface$5({dynamic FormData});
}
extension AnonInterface$5Extension on AnonInterface$5 {
  external dynamic get FormData;
  external set FormData(dynamic value);
}"
`;

exports[`TypeScript Definition Files Snapshot Tests > should transpile event.d.ts correctly > event.dart 1`] = `
"// Generated from event.d.ts
// Do not edit directly

@JS()
library event;
import 'package:js/js.dart';


typedef Listener = void Function([List<dynamic>]);
@JS("EventEmitter")
class EventEmitter {
  external static num get defaultMaxListeners;
  external static set defaultMaxListeners(num value);
  @JS("listenerCount")
  external num listenerCount_1(EventEmitter emitter, dynamic /* String|num */ type);
  @JS("listenerCount")
  external num listenerCount_2(dynamic /* String|num */ type);
  @JS("eventNames")
  external List<dynamic /* String|num */> eventNames();
  @JS("setMaxListeners")
  external dynamic setMaxListeners(num n);
  @JS("getMaxListeners")
  external num getMaxListeners();
  @JS("emit")
  external bool emit(dynamic /* String|num */ type, [/* rest */ List<dynamic> args]);
  @JS("addListener")
  external dynamic addListener(dynamic /* String|num */ type, Listener listener);
  @JS("on")
  external dynamic on(dynamic /* String|num */ type, Listener listener);
  @JS("once")
  external dynamic once(dynamic /* String|num */ type, Listener listener);
  @JS("prependListener")
  external dynamic prependListener(dynamic /* String|num */ type, Listener listener);
  @JS("prependOnceListener")
  external dynamic prependOnceListener(dynamic /* String|num */ type, Listener listener);
  @JS("removeListener")
  external dynamic removeListener(dynamic /* String|num */ type, Listener listener);
  @JS("off")
  external dynamic off(dynamic /* String|num */ type, Listener listener);
  @JS("removeAllListeners")
  external dynamic removeAllListeners([dynamic /* String|num */ type]);
  @JS("listeners")
  external List<Listener> listeners(dynamic /* String|num */ type);
  @JS("rawListeners")
  external List<Listener> rawListeners(dynamic /* String|num */ type);
}"
`;

exports[`TypeScript Definition Files Snapshot Tests > should transpile h3.d.ts correctly > h3.dart 1`] = `
"// Generated from h3.d.ts
// Do not edit directly

@JS()
library h3;
import 'package:js/js.dart';


@JS("h3.h3IndexToSplitLong")
external SplitLong h3IndexToSplitLong(H3IndexInput h3Index);
@JS("h3.splitLongToH3Index")
external H3Index splitLongToH3Index(num lower, num upper);
@JS("h3.isValidCell")
external bool isValidCell(H3IndexInput h3Index);
@JS("h3.isPentagon")
external bool isPentagon(H3IndexInput h3Index);
@JS("h3.isResClassIII")
external bool isResClassIII(H3IndexInput h3Index);
@JS("h3.getBaseCellNumber")
external num getBaseCellNumber(H3IndexInput h3Index);
@JS("h3.getIcosahedronFaces")
external List<num> getIcosahedronFaces(H3IndexInput h3Index);
@JS("h3.getResolution")
external num getResolution(H3IndexInput h3Index);
@JS("h3.latLngToCell")
external H3Index latLngToCell(num lat, num lng, num res);
@JS("h3.cellToLatLng")
external CoordPair cellToLatLng(H3IndexInput h3Index);
@JS("h3.cellToBoundary")
external List<CoordPair> cellToBoundary(H3IndexInput h3Index, [bool formatAsGeoJson]);
@JS("h3.cellToParent")
external H3Index cellToParent(H3IndexInput h3Index, num res);
@JS("h3.cellToChildren")
external List<H3Index> cellToChildren(H3IndexInput h3Index, num res);
@JS("h3.cellToChildrenSize")
external num cellToChildrenSize(H3IndexInput h3Index, num res);
@JS("h3.cellToCenterChild")
external H3Index cellToCenterChild(H3IndexInput h3Index, num res);
@JS("h3.cellToChildPos")
external num cellToChildPos(H3IndexInput h3Index, num parentRes);
@JS("h3.childPosToCell")
external H3Index childPosToCell(num childPos, H3IndexInput h3Index, num childRes);
@JS("h3.gridDisk")
external List<H3Index> gridDisk(H3IndexInput h3Index, num ringSize);
@JS("h3.gridDiskDistances")
external List<List<H3Index>> gridDiskDistances(H3IndexInput h3Index, num ringSize);
@JS("h3.gridRing")
external List<H3Index> gridRing(H3IndexInput h3Index, num ringSize);
@JS("h3.gridRingUnsafe")
external List<H3Index> gridRingUnsafe(H3IndexInput h3Index, num ringSize);
@JS("h3.polygonToCells")
external List<H3Index> polygonToCells(dynamic /* List<List<num>>|List<List<List<num>>> */ coordinates, num res, [bool isGeoJson]);
@JS("h3.polygonToCellsExperimental")
external List<H3Index> polygonToCellsExperimental(dynamic /* List<List<num>>|List<List<List<num>>> */ coordinates, num res, String flags, [bool isGeoJson]);
@JS("h3.cellsToMultiPolygon")
external List<List<List<CoordPair>>> cellsToMultiPolygon(List<H3IndexInput> h3Indexes, [bool formatAsGeoJson]);
@JS("h3.compactCells")
external List<H3Index> compactCells(List<H3IndexInput> h3Set);
@JS("h3.uncompactCells")
external List<H3Index> uncompactCells(List<H3IndexInput> compactedSet, num res);
@JS("h3.areNeighborCells")
external bool areNeighborCells(H3IndexInput origin, H3IndexInput destination);
@JS("h3.cellsToDirectedEdge")
external H3Index cellsToDirectedEdge(H3IndexInput origin, H3IndexInput destination);
@JS("h3.getDirectedEdgeOrigin")
external H3Index getDirectedEdgeOrigin(H3IndexInput edgeIndex);
@JS("h3.getDirectedEdgeDestination")
external H3Index getDirectedEdgeDestination(H3IndexInput edgeIndex);
@JS("h3.isValidDirectedEdge")
external bool isValidDirectedEdge(H3IndexInput edgeIndex);
@JS("h3.directedEdgeToCells")
external List<H3Index> directedEdgeToCells(H3IndexInput edgeIndex);
@JS("h3.originToDirectedEdges")
external List<H3Index> originToDirectedEdges(H3IndexInput h3Index);
@JS("h3.directedEdgeToBoundary")
external List<CoordPair> directedEdgeToBoundary(H3IndexInput edgeIndex, [bool formatAsGeoJson]);
@JS("h3.gridDistance")
external num gridDistance(H3IndexInput origin, H3IndexInput destination);
@JS("h3.gridPathCells")
external List<H3Index> gridPathCells(H3IndexInput origin, H3IndexInput destination);
@JS("h3.cellToLocalIj")
external CoordIJ cellToLocalIj(H3IndexInput origin, H3IndexInput destination);
@JS("h3.localIjToCell")
external H3Index localIjToCell(H3IndexInput origin, CoordIJ coords);
@JS("h3.greatCircleDistance")
external num greatCircleDistance(List<num> latLng1, List<num> latLng2, String unit);
@JS("h3.cellArea")
external num cellArea(H3IndexInput h3Index, String unit);
@JS("h3.edgeLength")
external num edgeLength(H3IndexInput edge, String unit);
@JS("h3.getHexagonAreaAvg")
external num getHexagonAreaAvg(num res, String unit);
@JS("h3.getHexagonEdgeLengthAvg")
external num getHexagonEdgeLengthAvg(num res, String unit);
@JS("h3.cellToVertex")
external H3Index cellToVertex(H3IndexInput h3Index, num vertexNum);
@JS("h3.cellToVertexes")
external List<H3Index> cellToVertexes(H3IndexInput h3Index);
@JS("h3.vertexToLatLng")
external CoordPair vertexToLatLng(H3IndexInput h3Index);
@JS("h3.isValidVertex")
external bool isValidVertex(H3IndexInput h3Index);
@JS("h3.getNumCells")
external num getNumCells(num res);
@JS("h3.getRes0Cells")
external List<H3Index> getRes0Cells();
@JS("h3.getPentagons")
external List<H3Index> getPentagons(num res);
@JS("h3.degsToRads")
external num degsToRads(num deg);
@JS("h3.radsToDegs")
external num radsToDegs(num rad);
@JS("h3.UNITS.m")
external String m;
@JS("h3.UNITS.m2")
external String m2;
@JS("h3.UNITS.km")
external String km;
@JS("h3.UNITS.km2")
external String km2;
@JS("h3.UNITS.rads")
external String rads;
@JS("h3.UNITS.rads2")
external String rads2;
@JS("h3.POLYGON_TO_CELLS_FLAGS.containmentCenter")
external String containmentCenter;
@JS("h3.POLYGON_TO_CELLS_FLAGS.containmentFull")
external String containmentFull;
@JS("h3.POLYGON_TO_CELLS_FLAGS.containmentOverlapping")
external String containmentOverlapping;
@JS("h3.POLYGON_TO_CELLS_FLAGS.containmentOverlappingBbox")
external String containmentOverlappingBbox;
typedef H3Index = String;
typedef H3IndexInput = dynamic /* String|List<num> */;
typedef CoordIJ = AnonInterface$9;
typedef H3Error = AnonInterface$10;
typedef CoordPair = List<num>;
typedef SplitLong = List<num>;
@JS()
@anonymous
class AnonInterface$9{
  external factory AnonInterface$9({required num i, required num j});
}
extension AnonInterface$9Extension on AnonInterface$9 {
  external num get i;
  external set i(num value);
  external num get j;
  external set j(num value);
}
@JS()
@anonymous
class AnonInterface$10{
  external factory AnonInterface$10({required String message, required num code});
}
extension AnonInterface$10Extension on AnonInterface$10 {
  external String get message;
  external set message(String value);
  external num get code;
  external set code(num value);
}"
`;

exports[`TypeScript Definition Files Snapshot Tests > should transpile hard_types.d.ts correctly > hard_types.dart 1`] = `
"// Generated from hard_types.d.ts
// Do not edit directly

@JS()
library hard_types;
import 'package:js/js.dart';


@JS()
@anonymous
abstract class Result{}
extension ResultExtension on Result {
  external bool get success;
  external set success(bool value);
  external T get data;
  external set data(T value);
  external String? get error;
  external set error(String? value);
}
@JS("getListOfStrings")
external Future<Result<List<String>>> getListOfStrings();
typedef StringMap = Record<String, V>;
@JS("getComplexMap")
external Future<StringMap<List<Result<num>>>> getComplexMap();
typedef StringOrNumber = dynamic /* String|num */;
typedef ID = dynamic /* String|num */;
typedef Shape = dynamic;
@JS()
@anonymous
abstract class HasId{}
extension HasIdExtension on HasId {
  external num get id;
  external set id(num value);
}
@JS()
@anonymous
abstract class HasName{}
extension HasNameExtension on HasName {
  external String get name;
  external set name(String value);
}
typedef UserName = dynamic;
@JS("processUserName")
external void processUserName(UserName user);
typedef StringToNumber = dynamic;
@JS("useConditionalType")
external StringToNumber<T> useConditionalType(T input);
typedef DeepReadonly = dynamic;
@JS()
@anonymous
abstract class Config{}
extension ConfigExtension on Config {
  external String get host;
  external set host(String value);
  external num get port;
  external set port(num value);
}
typedef ReadonlyConfig = DeepReadonly<Config>;
typedef ConfigKey = dynamic;
@JS("getConfigValue")
external dynamic getConfigValue(ConfigKey key);
@JS()
@anonymous
abstract class StringFormatter{}
extension StringFormatterExtension on StringFormatter {
}
@JS()
@anonymous
abstract class EventManager{}
extension EventManagerExtension on EventManager {
  external void Function(String, void Function(dynamic)) get addListener;
  external set addListener(void Function(String, void Function(dynamic)) value);
  external bool Function(String) get removeListener;
  external set removeListener(bool Function(String) value);
}
@JS("createAdder")
external num Function(num) createAdder(num amountToAdd);
@JS()
@anonymous
abstract class TreeNode{}
extension TreeNodeExtension on TreeNode {
  external String get value;
  external set value(String value);
  external List<TreeNode> get children;
  external set children(List<TreeNode> value);
}
typedef JsonValue = dynamic /* String|num|bool|List<JsonValue>|dynamic */;
@JS("parseJson")
external JsonValue parseJson(String input);"
`;

exports[`TypeScript Definition Files Snapshot Tests > should transpile leaflet.d.ts correctly > leaflet.dart 1`] = `
"// Generated from leaflet.d.ts
// Do not edit directly

@JS()
library leaflet;
import 'package:js/js.dart';


@JS("version")
external String version;
@JS("Class")
class Class {
  @JS("extend")
  external dynamic extend(dynamic props);
  @JS("include")
  external dynamic include(dynamic props);
  @JS("mergeOptions")
  external dynamic mergeOptions(dynamic props);
  @JS("addInitHook")
  external dynamic addInitHook_1(void Function() initHookFn);
  @JS("addInitHook")
  external dynamic addInitHook_2(String methodName, [/* rest */ List<dynamic> args]);
  @JS("callInitHooks")
  external void callInitHooks();
}
@JS("Transformation")
class Transformation {
  external factory Transformation(num a, num b, num c, num d);
  @JS("transform")
  external Point transform(Point point, [num scale]);
  @JS("untransform")
  external Point untransform(Point point, [num scale]);
}
@JS("transformation")
external Transformation transformation_1(num a, num b, num c, num d);
@JS("transformation")
external Transformation transformation_2(List<num> coefficients);
@JS("LineUtil.simplify")
external List<Point> simplify(List<Point> points, num tolerance);
@JS("LineUtil.pointToSegmentDistance")
external num pointToSegmentDistance(Point p, Point p1, Point p2);
@JS("LineUtil.closestPointOnSegment")
external Point closestPointOnSegment(Point p, Point p1, Point p2);
@JS("LineUtil.isFlat")
external bool isFlat(List<LatLngExpression> latlngs);
@JS("LineUtil.clipSegment")
external dynamic /* List<Point>|bool */ clipSegment(Point a, Point b, Bounds bounds, [bool useLastCode, bool round]);
@JS("LineUtil.polylineCenter")
external LatLng polylineCenter(List<LatLngExpression> latlngs, CRS crs);
@JS("PolyUtil.clipPolygon")
external List<Point> clipPolygon(List<Point> points, BoundsExpression bounds, [bool round]);
@JS("PolyUtil.polygonCenter")
external LatLng polygonCenter(List<LatLngExpression> latlngs, CRS crs);
@JS("DomUtil.get")
external HTMLElement? get(dynamic /* String|HTMLElement */ element);
@JS("DomUtil.getStyle")
external String? getStyle(HTMLElement el, String styleAttrib);
@JS("DomUtil.create")
external dynamic create_1(T tagName, [String className, HTMLElement container]);
@JS("DomUtil.create")
external HTMLElement create_2(String tagName, [String className, HTMLElement container]);
@JS("DomUtil.remove")
external void remove(HTMLElement el);
@JS("DomUtil.empty")
external void empty(HTMLElement el);
@JS("DomUtil.toFront")
external void toFront(HTMLElement el);
@JS("DomUtil.toBack")
external void toBack(HTMLElement el);
@JS("DomUtil.hasClass")
external bool hasClass(HTMLElement el, String name);
@JS("DomUtil.addClass")
external void addClass(HTMLElement el, String name);
@JS("DomUtil.removeClass")
external void removeClass(HTMLElement el, String name);
@JS("DomUtil.setClass")
external void setClass(HTMLElement el, String name);
@JS("DomUtil.getClass")
external String getClass(HTMLElement el);
@JS("DomUtil.setOpacity")
external void setOpacity(HTMLElement el, num opacity);
@JS("DomUtil.testProp")
external dynamic /* String|bool */ testProp(List<String> props);
@JS("DomUtil.setTransform")
external void setTransform(HTMLElement el, Point offset, [num scale]);
@JS("DomUtil.setPosition")
external void setPosition(HTMLElement el, Point position);
@JS("DomUtil.getPosition")
external Point getPosition(HTMLElement el);
@JS("DomUtil.getScale")
external AnonInterface$15 getScale(HTMLElement el);
@JS("DomUtil.getSizedParentNode")
external HTMLElement getSizedParentNode(HTMLElement el);
@JS("DomUtil.disableTextSelection")
external void disableTextSelection();
@JS("DomUtil.enableTextSelection")
external void enableTextSelection();
@JS("DomUtil.disableImageDrag")
external void disableImageDrag();
@JS("DomUtil.enableImageDrag")
external void enableImageDrag();
@JS("DomUtil.preventOutline")
external void preventOutline(HTMLElement el);
@JS("DomUtil.restoreOutline")
external void restoreOutline();
@JS("DomUtil.TRANSFORM")
external String TRANSFORM;
@JS("DomUtil.TRANSITION")
external String TRANSITION;
@JS("DomUtil.TRANSITION_END")
external String TRANSITION_END;
@JS("PosAnimation")
class PosAnimation {
  @JS("run")
  external void run(HTMLElement el, Point newPos, [num duration, num easeLinearity]);
  @JS("stop")
  external void stop();
}
@JS()
@anonymous
abstract class CRS{}
extension CRSExtension on CRS {
  external String? get code;
  external set code(String? value);
  external List<num>? get wrapLng;
  external set wrapLng(List<num>? value);
  external List<num>? get wrapLat;
  external set wrapLat(List<num>? value);
  external bool get infinite;
  external set infinite(bool value);
  @JS("latLngToPoint")
  external Point latLngToPoint(LatLngExpression latlng, num zoom);
  @JS("pointToLatLng")
  external LatLng pointToLatLng(PointExpression point, num zoom);
  @JS("project")
  external Point project(dynamic /* LatLng|LatLngLiteral */ latlng);
  @JS("unproject")
  external LatLng unproject(PointExpression point);
  @JS("scale")
  external num scale(num zoom);
  @JS("zoom")
  external num zoom(num scale);
  @JS("getProjectedBounds")
  external Bounds getProjectedBounds(num zoom);
  @JS("distance")
  external num distance(LatLngExpression latlng1, LatLngExpression latlng2);
  @JS("wrapLatLng")
  external LatLng wrapLatLng(dynamic /* LatLng|LatLngLiteral */ latlng);
}
@JS("CRS.EPSG3395")
external CRS EPSG3395;
@JS("CRS.EPSG3857")
external CRS EPSG3857;
@JS("CRS.EPSG4326")
external CRS EPSG4326;
@JS("CRS.EPSG900913")
external CRS EPSG900913;
@JS("CRS.Earth")
external CRS Earth;
@JS("CRS.Simple")
external CRS Simple;
@JS()
@anonymous
abstract class Projection{}
extension ProjectionExtension on Projection {
  external Bounds get bounds;
  external set bounds(Bounds value);
  @JS("project")
  external Point project(dynamic /* LatLng|LatLngLiteral */ latlng);
  @JS("unproject")
  external LatLng unproject(PointExpression point);
}
@JS("Projection.LonLat")
external Projection LonLat;
@JS("Projection.Mercator")
external Projection Mercator;
@JS("Projection.SphericalMercator")
external Projection SphericalMercator;
@JS("LatLng")
class LatLng {
  external factory LatLng(num latitude, num longitude, [num altitude]);
  external num get lat;
  external set lat(num value);
  external num get lng;
  external set lng(num value);
  external num? get alt;
  external set alt(num? value);
  @JS("equals")
  external bool equals(LatLngExpression otherLatLng, [num maxMargin]);
  @JS("toString")
  external String toString();
  @JS("distanceTo")
  external num distanceTo(LatLngExpression otherLatLng);
  @JS("wrap")
  external LatLng wrap();
  @JS("toBounds")
  external LatLngBounds toBounds(num sizeInMeters);
  @JS("clone")
  external LatLng clone();
}
@JS()
@anonymous
abstract class LatLngLiteral{}
extension LatLngLiteralExtension on LatLngLiteral {
  external num get lat;
  external set lat(num value);
  external num get lng;
  external set lng(num value);
  external num get alt;
  external set alt(num value);
}
typedef LatLngTuple = List<dynamic>;
typedef LatLngExpression = dynamic /* LatLng|LatLngLiteral|LatLngTuple */;
@JS("latLng")
external LatLng latLng_1(num latitude, num longitude, [num altitude]);
@JS("latLng")
external LatLng latLng_2(dynamic /* LatLngTuple|List<num>|LatLngLiteral|dynamic */ coords);
@JS("LatLngBounds")
class LatLngBounds {
  external factory LatLngBounds(LatLngExpression southWest, LatLngExpression northEast);
  external factory LatLngBounds(List<LatLngExpression> latlngs);
  @JS("extend")
  external dynamic extend(dynamic /* LatLngExpression|LatLngBoundsExpression */ latlngOrBounds);
  @JS("pad")
  external LatLngBounds pad(num bufferRatio);
  @JS("getCenter")
  external LatLng getCenter();
  @JS("getSouthWest")
  external LatLng getSouthWest();
  @JS("getNorthEast")
  external LatLng getNorthEast();
  @JS("getNorthWest")
  external LatLng getNorthWest();
  @JS("getSouthEast")
  external LatLng getSouthEast();
  @JS("getWest")
  external num getWest();
  @JS("getSouth")
  external num getSouth();
  @JS("getEast")
  external num getEast();
  @JS("getNorth")
  external num getNorth();
  @JS("contains")
  external bool contains(dynamic /* LatLngBoundsExpression|LatLngExpression */ otherBoundsOrLatLng);
  @JS("intersects")
  external bool intersects(LatLngBoundsExpression otherBounds);
  @JS("overlaps")
  external bool overlaps(LatLngBoundsExpression otherBounds);
  @JS("toBBoxString")
  external String toBBoxString();
  @JS("equals")
  external bool equals(LatLngBoundsExpression otherBounds, [num maxMargin]);
  @JS("isValid")
  external bool isValid();
}
typedef LatLngBoundsLiteral = List<LatLngTuple>;
typedef LatLngBoundsExpression = dynamic /* LatLngBounds|LatLngBoundsLiteral */;
@JS("latLngBounds")
external LatLngBounds latLngBounds_1(LatLngExpression southWest, LatLngExpression northEast);
@JS("latLngBounds")
external LatLngBounds latLngBounds_2(List<LatLngExpression> latlngs);
typedef PointTuple = List<num>;
@JS("Point")
class Point {
  external factory Point(num x, num y, [bool round]);
  external num get x;
  external set x(num value);
  external num get y;
  external set y(num value);
  @JS("clone")
  external Point clone();
  @JS("add")
  external Point add(PointExpression otherPoint);
  @JS("subtract")
  external Point subtract(PointExpression otherPoint);
  @JS("divideBy")
  external Point divideBy(num num);
  @JS("multiplyBy")
  external Point multiplyBy(num num);
  @JS("scaleBy")
  external Point scaleBy(PointExpression scale);
  @JS("unscaleBy")
  external Point unscaleBy(PointExpression scale);
  @JS("round")
  external Point round();
  @JS("floor")
  external Point floor();
  @JS("ceil")
  external Point ceil();
  @JS("trunc")
  external Point trunc();
  @JS("distanceTo")
  external num distanceTo(PointExpression otherPoint);
  @JS("equals")
  external bool equals(PointExpression otherPoint);
  @JS("contains")
  external bool contains(PointExpression otherPoint);
  @JS("toString")
  external String toString();
}
@JS()
@anonymous
abstract class Coords{}
extension CoordsExtension on Coords {
  external num get z;
  external set z(num value);
}
typedef PointExpression = dynamic /* Point|PointTuple */;
@JS("point")
external Point point_1(num x, num y, [bool round]);
@JS("point")
external Point point_2(dynamic /* PointTuple|dynamic */ coords);
typedef BoundsLiteral = List<PointTuple>;
@JS("Bounds")
class Bounds {
  external factory Bounds(PointExpression topLeft, PointExpression bottomRight);
  external factory Bounds([dynamic /* List<Point>|BoundsLiteral */ points]);
  external Point? get min;
  external set min(Point? value);
  external Point? get max;
  external set max(Point? value);
  @JS("extend")
  external dynamic extend_1(PointExpression point);
  @JS("extend")
  external dynamic extend_2(BoundsExpression otherBounds);
  @JS("getCenter")
  external Point getCenter([bool round]);
  @JS("getBottomLeft")
  external Point getBottomLeft();
  @JS("getBottomRight")
  external Point getBottomRight();
  @JS("getTopLeft")
  external Point getTopLeft();
  @JS("getTopRight")
  external Point getTopRight();
  @JS("getSize")
  external Point getSize();
  @JS("contains")
  external bool contains(dynamic /* BoundsExpression|PointExpression */ pointOrBounds);
  @JS("intersects")
  external bool intersects(BoundsExpression otherBounds);
  @JS("overlaps")
  external bool overlaps(BoundsExpression otherBounds);
  @JS("isValid")
  external bool isValid();
  @JS("pad")
  external Bounds pad(num bufferRatio);
  @JS("equals")
  external bool equals(BoundsExpression otherBounds);
}
typedef BoundsExpression = dynamic /* Bounds|BoundsLiteral */;
@JS("bounds")
external Bounds bounds_1(PointExpression topLeft, PointExpression bottomRight);
@JS("bounds")
external Bounds bounds_2(dynamic /* List<Point>|BoundsLiteral */ points);
typedef LeafletEventHandlerFn = void Function(LeafletEvent);
typedef LayersControlEventHandlerFn = void Function(LayersControlEvent);
typedef LayerEventHandlerFn = void Function(LayerEvent);
typedef ResizeEventHandlerFn = void Function(ResizeEvent);
typedef PopupEventHandlerFn = void Function(PopupEvent);
typedef TooltipEventHandlerFn = void Function(TooltipEvent);
typedef ErrorEventHandlerFn = void Function(ErrorEvent);
typedef LocationEventHandlerFn = void Function(LocationEvent);
typedef LeafletMouseEventHandlerFn = void Function(LeafletMouseEvent);
typedef LeafletKeyboardEventHandlerFn = void Function(LeafletKeyboardEvent);
typedef ZoomAnimEventHandlerFn = void Function(ZoomAnimEvent);
typedef DragEndEventHandlerFn = void Function(DragEndEvent);
typedef TileEventHandlerFn = void Function(TileEvent);
typedef TileErrorEventHandlerFn = void Function(TileErrorEvent);
@JS()
@anonymous
abstract class LeafletEventHandlerFnMap{}
extension LeafletEventHandlerFnMapExtension on LeafletEventHandlerFnMap {
  external LayersControlEventHandlerFn? get baselayerchange;
  external set baselayerchange(LayersControlEventHandlerFn? value);
  external LayersControlEventHandlerFn? get overlayadd;
  external set overlayadd(LayersControlEventHandlerFn? value);
  external LayersControlEventHandlerFn? get overlayremove;
  external set overlayremove(LayersControlEventHandlerFn? value);
  external LayerEventHandlerFn? get layeradd;
  external set layeradd(LayerEventHandlerFn? value);
  external LayerEventHandlerFn? get layerremove;
  external set layerremove(LayerEventHandlerFn? value);
  external LeafletEventHandlerFn? get zoomlevelschange;
  external set zoomlevelschange(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get unload;
  external set unload(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get viewreset;
  external set viewreset(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get load;
  external set load(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get zoomstart;
  external set zoomstart(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get movestart;
  external set movestart(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get zoom;
  external set zoom(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get move;
  external set move(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get zoomend;
  external set zoomend(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get moveend;
  external set moveend(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get autopanstart;
  external set autopanstart(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get dragstart;
  external set dragstart(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get drag;
  external set drag(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get add;
  external set add(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get remove;
  external set remove(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get loading;
  external set loading(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get error;
  external set error(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get update;
  external set update(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get down;
  external set down(LeafletEventHandlerFn? value);
  external LeafletEventHandlerFn? get predrag;
  external set predrag(LeafletEventHandlerFn? value);
  external ResizeEventHandlerFn? get resize;
  external set resize(ResizeEventHandlerFn? value);
  external PopupEventHandlerFn? get popupopen;
  external set popupopen(PopupEventHandlerFn? value);
  external PopupEventHandlerFn? get popupclose;
  external set popupclose(PopupEventHandlerFn? value);
  external TooltipEventHandlerFn? get tooltipopen;
  external set tooltipopen(TooltipEventHandlerFn? value);
  external TooltipEventHandlerFn? get tooltipclose;
  external set tooltipclose(TooltipEventHandlerFn? value);
  external ErrorEventHandlerFn? get locationerror;
  external set locationerror(ErrorEventHandlerFn? value);
  external LocationEventHandlerFn? get locationfound;
  external set locationfound(LocationEventHandlerFn? value);
  external LeafletMouseEventHandlerFn? get click;
  external set click(LeafletMouseEventHandlerFn? value);
  external LeafletMouseEventHandlerFn? get dblclick;
  external set dblclick(LeafletMouseEventHandlerFn? value);
  external LeafletMouseEventHandlerFn? get mousedown;
  external set mousedown(LeafletMouseEventHandlerFn? value);
  external LeafletMouseEventHandlerFn? get mouseup;
  external set mouseup(LeafletMouseEventHandlerFn? value);
  external LeafletMouseEventHandlerFn? get mouseover;
  external set mouseover(LeafletMouseEventHandlerFn? value);
  external LeafletMouseEventHandlerFn? get mouseout;
  external set mouseout(LeafletMouseEventHandlerFn? value);
  external LeafletMouseEventHandlerFn? get mousemove;
  external set mousemove(LeafletMouseEventHandlerFn? value);
  external LeafletMouseEventHandlerFn? get contextmenu;
  external set contextmenu(LeafletMouseEventHandlerFn? value);
  external LeafletMouseEventHandlerFn? get preclick;
  external set preclick(LeafletMouseEventHandlerFn? value);
  external LeafletKeyboardEventHandlerFn? get keypress;
  external set keypress(LeafletKeyboardEventHandlerFn? value);
  external LeafletKeyboardEventHandlerFn? get keydown;
  external set keydown(LeafletKeyboardEventHandlerFn? value);
  external LeafletKeyboardEventHandlerFn? get keyup;
  external set keyup(LeafletKeyboardEventHandlerFn? value);
  external ZoomAnimEventHandlerFn? get zoomanim;
  external set zoomanim(ZoomAnimEventHandlerFn? value);
  external DragEndEventHandlerFn? get dragend;
  external set dragend(DragEndEventHandlerFn? value);
  external TileEventHandlerFn? get tileunload;
  external set tileunload(TileEventHandlerFn? value);
  external TileEventHandlerFn? get tileloadstart;
  external set tileloadstart(TileEventHandlerFn? value);
  external TileEventHandlerFn? get tileload;
  external set tileload(TileEventHandlerFn? value);
  external TileEventHandlerFn? get tileabort;
  external set tileabort(TileEventHandlerFn? value);
  external TileErrorEventHandlerFn? get tileerror;
  external set tileerror(TileErrorEventHandlerFn? value);
}
@JS("Events")
class Events {
  @JS("on")
  external dynamic on_1(String type, LayersControlEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_2(String type, LayerEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_3(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_4(String type, ResizeEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_5(String type, PopupEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_6(String type, TooltipEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_7(String type, ErrorEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_8(String type, LocationEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_9(String type, LeafletMouseEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_10(String type, LeafletKeyboardEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_11(String type, ZoomAnimEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_12(String type, DragEndEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_13(String type, TileEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_14(String type, TileErrorEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_15(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_16(LeafletEventHandlerFnMap eventMap);
  @JS("off")
  external dynamic off_1(String type, [LayersControlEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_2(String type, [LayerEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_3(String type, [LeafletEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_4(String type, [ResizeEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_5(String type, [PopupEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_6(String type, [TooltipEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_7(String type, [ErrorEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_8(String type, [LocationEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_9(String type, [LeafletMouseEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_10(String type, [LeafletKeyboardEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_11(String type, [ZoomAnimEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_12(String type, [DragEndEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_13(String type, [TileEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_14(String type, [TileErrorEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_15(String type, [LeafletEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_16(LeafletEventHandlerFnMap eventMap);
  @JS("off")
  external dynamic off_17();
  @JS("fire")
  external dynamic fire(String type, [dynamic data, bool propagate]);
  @JS("listens")
  external bool listens_1(String type, [bool propagate]);
  @JS("listens")
  external bool listens_2(String type, LayersControlEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_3(String type, LayerEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_4(String type, LeafletEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_5(String type, ResizeEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_6(String type, PopupEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_7(String type, TooltipEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_8(String type, ErrorEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_9(String type, LocationEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_10(String type, LeafletMouseEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_11(String type, LeafletKeyboardEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_12(String type, ZoomAnimEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_13(String type, DragEndEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_14(String type, TileEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_15(String type, TileEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_16(String type, LeafletEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("once")
  external dynamic once_1(String type, LayersControlEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_2(String type, LayerEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_3(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_4(String type, ResizeEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_5(String type, PopupEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_6(String type, TooltipEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_7(String type, ErrorEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_8(String type, LocationEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_9(String type, LeafletMouseEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_10(String type, LeafletKeyboardEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_11(String type, ZoomAnimEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_12(String type, DragEndEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_13(String type, TileEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_14(String type, TileEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_15(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_16(LeafletEventHandlerFnMap eventMap);
  @JS("addEventParent")
  external dynamic addEventParent(Evented obj);
  @JS("removeEventParent")
  external dynamic removeEventParent(Evented obj);
  @JS("addEventListener")
  external dynamic addEventListener_1(String type, LayersControlEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_2(String type, LayerEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_3(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_4(String type, ResizeEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_5(String type, PopupEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_6(String type, TooltipEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_7(String type, ErrorEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_8(String type, LocationEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_9(String type, LeafletMouseEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_10(String type, LeafletKeyboardEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_11(String type, ZoomAnimEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_12(String type, DragEndEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_13(String type, TileEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_14(String type, TileErrorEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_15(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_16(LeafletEventHandlerFnMap eventMap);
  @JS("removeEventListener")
  external dynamic removeEventListener_1(String type, [LayersControlEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_2(String type, [LayerEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_3(String type, [LeafletEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_4(String type, [ResizeEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_5(String type, [PopupEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_6(String type, [TooltipEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_7(String type, [ErrorEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_8(String type, [LocationEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_9(String type, [LeafletMouseEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_10(String type, [LeafletKeyboardEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_11(String type, [ZoomAnimEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_12(String type, [DragEndEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_13(String type, [TileEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_14(String type, [TileErrorEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_15(String type, [LeafletEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_16(LeafletEventHandlerFnMap eventMap);
  @JS("clearAllEventListeners")
  external dynamic clearAllEventListeners();
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_1(String type, LayersControlEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_2(String type, LayerEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_3(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_4(String type, ResizeEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_5(String type, PopupEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_6(String type, TooltipEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_7(String type, ErrorEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_8(String type, LocationEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_9(String type, LeafletMouseEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_10(String type, LeafletKeyboardEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_11(String type, ZoomAnimEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_12(String type, DragEndEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_13(String type, TileEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_14(String type, TileErrorEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_15(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_16(LeafletEventHandlerFnMap eventMap);
  @JS("fireEvent")
  external dynamic fireEvent(String type, [dynamic data, bool propagate]);
  @JS("hasEventListeners")
  external bool hasEventListeners(String type);
}
@JS("MixinType")
class MixinType {
  external Events get Events;
  external set Events(Events value);
}
@JS("Mixin")
external MixinType Mixin;
@JS("Evented")
class Evented {
  @JS("on")
  external dynamic on_1(String type, LayersControlEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_2(String type, LayerEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_3(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_4(String type, ResizeEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_5(String type, PopupEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_6(String type, TooltipEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_7(String type, ErrorEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_8(String type, LocationEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_9(String type, LeafletMouseEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_10(String type, LeafletKeyboardEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_11(String type, ZoomAnimEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_12(String type, DragEndEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_13(String type, TileEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_14(String type, TileErrorEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_15(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("on")
  external dynamic on_16(LeafletEventHandlerFnMap eventMap);
  @JS("off")
  external dynamic off_1(String type, [LayersControlEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_2(String type, [LayerEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_3(String type, [LeafletEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_4(String type, [ResizeEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_5(String type, [PopupEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_6(String type, [TooltipEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_7(String type, [ErrorEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_8(String type, [LocationEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_9(String type, [LeafletMouseEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_10(String type, [LeafletKeyboardEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_11(String type, [ZoomAnimEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_12(String type, [DragEndEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_13(String type, [TileEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_14(String type, [TileErrorEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_15(String type, [LeafletEventHandlerFn fn, dynamic context]);
  @JS("off")
  external dynamic off_16(LeafletEventHandlerFnMap eventMap);
  @JS("off")
  external dynamic off_17();
  @JS("fire")
  external dynamic fire(String type, [dynamic data, bool propagate]);
  @JS("listens")
  external bool listens_1(String type, [bool propagate]);
  @JS("listens")
  external bool listens_2(String type, LayersControlEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_3(String type, LayerEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_4(String type, LeafletEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_5(String type, ResizeEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_6(String type, PopupEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_7(String type, TooltipEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_8(String type, ErrorEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_9(String type, LocationEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_10(String type, LeafletMouseEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_11(String type, LeafletKeyboardEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_12(String type, ZoomAnimEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_13(String type, DragEndEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_14(String type, TileEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_15(String type, TileEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("listens")
  external bool listens_16(String type, LeafletEventHandlerFn fn, [dynamic context, bool propagate]);
  @JS("once")
  external dynamic once_1(String type, LayersControlEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_2(String type, LayerEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_3(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_4(String type, ResizeEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_5(String type, PopupEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_6(String type, TooltipEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_7(String type, ErrorEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_8(String type, LocationEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_9(String type, LeafletMouseEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_10(String type, LeafletKeyboardEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_11(String type, ZoomAnimEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_12(String type, DragEndEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_13(String type, TileEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_14(String type, TileEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_15(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("once")
  external dynamic once_16(LeafletEventHandlerFnMap eventMap);
  @JS("addEventParent")
  external dynamic addEventParent(Evented obj);
  @JS("removeEventParent")
  external dynamic removeEventParent(Evented obj);
  @JS("addEventListener")
  external dynamic addEventListener_1(String type, LayersControlEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_2(String type, LayerEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_3(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_4(String type, ResizeEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_5(String type, PopupEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_6(String type, TooltipEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_7(String type, ErrorEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_8(String type, LocationEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_9(String type, LeafletMouseEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_10(String type, LeafletKeyboardEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_11(String type, ZoomAnimEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_12(String type, DragEndEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_13(String type, TileEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_14(String type, TileErrorEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_15(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("addEventListener")
  external dynamic addEventListener_16(LeafletEventHandlerFnMap eventMap);
  @JS("removeEventListener")
  external dynamic removeEventListener_1(String type, [LayersControlEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_2(String type, [LayerEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_3(String type, [LeafletEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_4(String type, [ResizeEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_5(String type, [PopupEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_6(String type, [TooltipEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_7(String type, [ErrorEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_8(String type, [LocationEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_9(String type, [LeafletMouseEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_10(String type, [LeafletKeyboardEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_11(String type, [ZoomAnimEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_12(String type, [DragEndEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_13(String type, [TileEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_14(String type, [TileErrorEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_15(String type, [LeafletEventHandlerFn fn, dynamic context]);
  @JS("removeEventListener")
  external dynamic removeEventListener_16(LeafletEventHandlerFnMap eventMap);
  @JS("clearAllEventListeners")
  external dynamic clearAllEventListeners();
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_1(String type, LayersControlEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_2(String type, LayerEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_3(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_4(String type, ResizeEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_5(String type, PopupEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_6(String type, TooltipEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_7(String type, ErrorEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_8(String type, LocationEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_9(String type, LeafletMouseEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_10(String type, LeafletKeyboardEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_11(String type, ZoomAnimEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_12(String type, DragEndEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_13(String type, TileEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_14(String type, TileErrorEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_15(String type, LeafletEventHandlerFn fn, [dynamic context]);
  @JS("addOneTimeEventListener")
  external dynamic addOneTimeEventListener_16(LeafletEventHandlerFnMap eventMap);
  @JS("fireEvent")
  external dynamic fireEvent(String type, [dynamic data, bool propagate]);
  @JS("hasEventListeners")
  external bool hasEventListeners(String type);
}
@JS()
@anonymous
abstract class DraggableOptions{}
extension DraggableOptionsExtension on DraggableOptions {
  external num get clickTolerance;
  external set clickTolerance(num value);
}
@JS("Draggable")
class Draggable {
  external factory Draggable(HTMLElement element, [HTMLElement dragStartTarget, bool preventOutline, DraggableOptions options]);
  @JS("enable")
  external void enable();
  @JS("disable")
  external void disable();
  @JS("finishDrag")
  external void finishDrag();
}
@JS()
@anonymous
abstract class LayerOptions{}
extension LayerOptionsExtension on LayerOptions {
  external String? get pane;
  external set pane(String? value);
  external String? get attribution;
  external set attribution(String? value);
}
@JS()
@anonymous
abstract class InteractiveLayerOptions{}
extension InteractiveLayerOptionsExtension on InteractiveLayerOptions {
  external bool? get interactive;
  external set interactive(bool? value);
  external bool? get bubblingMouseEvents;
  external set bubblingMouseEvents(bool? value);
}
@JS("Layer")
class Layer {
  external factory Layer([LayerOptions options]);
  external Map get _map;
  external set _map(Map value);
  external LayerOptions get options;
  external set options(LayerOptions value);
  @JS("addTo")
  external dynamic addTo(dynamic /* Map|LayerGroup */ map);
  @JS("remove")
  external dynamic remove();
  @JS("removeFrom")
  external dynamic removeFrom(Map map);
  @JS("getPane")
  external HTMLElement? getPane([String name]);
  @JS("addInteractiveTarget")
  external dynamic addInteractiveTarget(HTMLElement targetEl);
  @JS("removeInteractiveTarget")
  external dynamic removeInteractiveTarget(HTMLElement targetEl);
  @JS("bindPopup")
  external dynamic bindPopup(dynamic /* Content Function(Layer)|Content|Popup */ content, [PopupOptions options]);
  @JS("unbindPopup")
  external dynamic unbindPopup();
  @JS("openPopup")
  external dynamic openPopup([LatLngExpression latlng]);
  @JS("closePopup")
  external dynamic closePopup();
  @JS("togglePopup")
  external dynamic togglePopup();
  @JS("isPopupOpen")
  external bool isPopupOpen();
  @JS("setPopupContent")
  external dynamic setPopupContent(dynamic /* Content|Popup */ content);
  @JS("getPopup")
  external Popup? getPopup();
  @JS("bindTooltip")
  external dynamic bindTooltip(dynamic /* Content Function(Layer)|Tooltip|Content */ content, [TooltipOptions options]);
  @JS("unbindTooltip")
  external dynamic unbindTooltip();
  @JS("openTooltip")
  external dynamic openTooltip([LatLngExpression latlng]);
  @JS("closeTooltip")
  external dynamic closeTooltip();
  @JS("toggleTooltip")
  external dynamic toggleTooltip();
  @JS("isTooltipOpen")
  external bool isTooltipOpen();
  @JS("setTooltipContent")
  external dynamic setTooltipContent(dynamic /* Content|Tooltip */ content);
  @JS("getTooltip")
  external Tooltip? getTooltip();
  @JS("onAdd")
  external dynamic onAdd(Map map);
  @JS("onRemove")
  external dynamic onRemove(Map map);
  @JS("getEvents")
  external AnonInterface$20 getEvents();
  @JS("getAttribution")
  external String? getAttribution();
  @JS("beforeAdd")
  external dynamic beforeAdd(Map map);
}
@JS()
@anonymous
abstract class GridLayerOptions{}
extension GridLayerOptionsExtension on GridLayerOptions {
  external dynamic /* num|Point */ get tileSize;
  external set tileSize(dynamic /* num|Point */ value);
  external num? get opacity;
  external set opacity(num? value);
  external bool? get updateWhenIdle;
  external set updateWhenIdle(bool? value);
  external bool? get updateWhenZooming;
  external set updateWhenZooming(bool? value);
  external num? get updateInterval;
  external set updateInterval(num? value);
  external num? get zIndex;
  external set zIndex(num? value);
  external LatLngBoundsExpression? get bounds;
  external set bounds(LatLngBoundsExpression? value);
  external num? get minZoom;
  external set minZoom(num? value);
  external num? get maxZoom;
  external set maxZoom(num? value);
  external num? get maxNativeZoom;
  external set maxNativeZoom(num? value);
  external num? get minNativeZoom;
  external set minNativeZoom(num? value);
  external bool? get noWrap;
  external set noWrap(bool? value);
  external String? get pane;
  external set pane(String? value);
  external String? get className;
  external set className(String? value);
  external num? get keepBuffer;
  external set keepBuffer(num? value);
}
typedef DoneCallback = void Function([Error, HTMLElement]);
@JS()
@anonymous
abstract class InternalTiles{}
extension InternalTilesExtension on InternalTiles {
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("GridLayer")
class GridLayer {
  external factory GridLayer([GridLayerOptions options]);
  external InternalTiles get _tiles;
  external set _tiles(InternalTiles value);
  external num? get _tileZoom;
  external set _tileZoom(num? value);
  @JS("bringToFront")
  external dynamic bringToFront();
  @JS("bringToBack")
  external dynamic bringToBack();
  @JS("getContainer")
  external HTMLElement? getContainer();
  @JS("setOpacity")
  external dynamic setOpacity(num opacity);
  @JS("setZIndex")
  external dynamic setZIndex(num zIndex);
  @JS("isLoading")
  external bool isLoading();
  @JS("redraw")
  external dynamic redraw();
  @JS("getTileSize")
  external Point getTileSize();
  @JS("createTile")
  external HTMLElement createTile(Coords coords, DoneCallback done);
  @JS("")
  external String _tileCoordsToKey(Coords coords);
  @JS("")
  external Coords _wrapCoords(Coords parameter);
}
@JS("gridLayer")
external GridLayer gridLayer([GridLayerOptions options]);
@JS()
@anonymous
abstract class TileLayerOptions{}
extension TileLayerOptionsExtension on TileLayerOptions {
  external String? get id;
  external set id(String? value);
  external dynamic /* String|List<String> */ get subdomains;
  external set subdomains(dynamic /* String|List<String> */ value);
  external String? get errorTileUrl;
  external set errorTileUrl(String? value);
  external num? get zoomOffset;
  external set zoomOffset(num? value);
  external bool? get tms;
  external set tms(bool? value);
  external bool? get zoomReverse;
  external set zoomReverse(bool? value);
  external bool? get detectRetina;
  external set detectRetina(bool? value);
  external dynamic /* CrossOrigin|bool */ get crossOrigin;
  external set crossOrigin(dynamic /* CrossOrigin|bool */ value);
  external dynamic /* ReferrerPolicy|bool */ get referrerPolicy;
  external set referrerPolicy(dynamic /* ReferrerPolicy|bool */ value);
}
@JS("TileLayer")
class TileLayer {
  external factory TileLayer(String urlTemplate, [TileLayerOptions options]);
  external TileLayerOptions get options;
  external set options(TileLayerOptions value);
  @JS("setUrl")
  external dynamic setUrl(String url, [bool noRedraw]);
  @JS("getTileUrl")
  external String getTileUrl(L.Coords coords);
  @JS("")
  external void _tileOnLoad(L.DoneCallback done, HTMLElement tile);
  @JS("")
  external void _tileOnError(L.DoneCallback done, HTMLElement tile, Error e);
  @JS("")
  external void _abortLoading();
  @JS("")
  external num _getZoomForUrl();
}
@JS("tileLayer")
external TileLayer tileLayer(String urlTemplate, [TileLayerOptions options]);
@JS("TileLayer.WMS")
class WMS {
  external factory WMS(String baseUrl, WMSOptions options);
  external WMSParams get wmsParams;
  external set wmsParams(WMSParams value);
  external WMSOptions get options;
  external set options(WMSOptions value);
  @JS("setParams")
  external dynamic setParams(WMSParams params, [bool noRedraw]);
}
@JS()
@anonymous
abstract class WMSOptions{}
extension WMSOptionsExtension on WMSOptions {
  external String? get layers;
  external set layers(String? value);
  external String? get styles;
  external set styles(String? value);
  external String? get format;
  external set format(String? value);
  external bool? get transparent;
  external set transparent(bool? value);
  external String? get version;
  external set version(String? value);
  external CRS? get crs;
  external set crs(CRS? value);
  external bool? get uppercase;
  external set uppercase(bool? value);
}
@JS()
@anonymous
abstract class WMSParams{}
extension WMSParamsExtension on WMSParams {
  external String? get format;
  external set format(String? value);
  external String get layers;
  external set layers(String value);
  external String? get request;
  external set request(String? value);
  external String? get service;
  external set service(String? value);
  external String? get styles;
  external set styles(String? value);
  external String? get version;
  external set version(String? value);
  external bool? get transparent;
  external set transparent(bool? value);
  external num? get width;
  external set width(num? value);
  external num? get height;
  external set height(num? value);
}
@JS("tileLayer.wms")
external TileLayer.WMS wms(String baseUrl, [WMSOptions options]);
typedef CrossOrigin = String;
typedef ReferrerPolicy = String;
@JS()
@anonymous
abstract class ImageOverlayOptions{}
extension ImageOverlayOptionsExtension on ImageOverlayOptions {
  external num? get opacity;
  external set opacity(num? value);
  external String? get alt;
  external set alt(String? value);
  external bool? get interactive;
  external set interactive(bool? value);
  external dynamic /* CrossOrigin|bool */ get crossOrigin;
  external set crossOrigin(dynamic /* CrossOrigin|bool */ value);
  external String? get errorOverlayUrl;
  external set errorOverlayUrl(String? value);
  external num? get zIndex;
  external set zIndex(num? value);
  external String? get className;
  external set className(String? value);
}
@JS()
@anonymous
abstract class ImageOverlayStyleOptions{}
extension ImageOverlayStyleOptionsExtension on ImageOverlayStyleOptions {
  external num get opacity;
  external set opacity(num value);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("ImageOverlay")
class ImageOverlay {
  external factory ImageOverlay(String imageUrl, LatLngBoundsExpression bounds, [ImageOverlayOptions options]);
  external ImageOverlayOptions get options;
  external set options(ImageOverlayOptions value);
  @JS("bringToFront")
  external dynamic bringToFront();
  @JS("bringToBack")
  external dynamic bringToBack();
  @JS("setUrl")
  external dynamic setUrl(String url);
  @JS("setBounds")
  external dynamic setBounds(LatLngBounds bounds);
  @JS("setZIndex")
  external dynamic setZIndex(num value);
  @JS("setOpacity")
  external dynamic setOpacity(num opacity);
  @JS("setStyle")
  external dynamic setStyle(ImageOverlayStyleOptions styleOpts);
  @JS("getBounds")
  external LatLngBounds getBounds();
  @JS("getCenter")
  external Point getCenter();
  @JS("getElement")
  external HTMLImageElement? getElement();
}
@JS("imageOverlay")
external ImageOverlay imageOverlay(String imageUrl, LatLngBoundsExpression bounds, [ImageOverlayOptions options]);
typedef SVGOverlayStyleOptions = ImageOverlayStyleOptions;
@JS("SVGOverlay")
class SVGOverlay {
  external factory SVGOverlay(dynamic /* String|SVGElement */ svgImage, LatLngBoundsExpression bounds, [ImageOverlayOptions options]);
  external ImageOverlayOptions get options;
  external set options(ImageOverlayOptions value);
  @JS("bringToFront")
  external dynamic bringToFront();
  @JS("bringToBack")
  external dynamic bringToBack();
  @JS("setUrl")
  external dynamic setUrl(String url);
  @JS("setBounds")
  external dynamic setBounds(LatLngBounds bounds);
  @JS("setZIndex")
  external dynamic setZIndex(num value);
  @JS("setOpacity")
  external dynamic setOpacity(num opacity);
  @JS("setStyle")
  external dynamic setStyle(SVGOverlayStyleOptions styleOpts);
  @JS("getBounds")
  external LatLngBounds getBounds();
  @JS("getCenter")
  external Point getCenter();
  @JS("getElement")
  external SVGElement? getElement();
}
@JS("svgOverlay")
external SVGOverlay svgOverlay(dynamic /* String|SVGElement */ svgImage, LatLngBoundsExpression bounds, [ImageOverlayOptions options]);
@JS()
@anonymous
abstract class VideoOverlayOptions{}
extension VideoOverlayOptionsExtension on VideoOverlayOptions {
  external bool? get autoplay;
  external set autoplay(bool? value);
  external bool? get loop;
  external set loop(bool? value);
  external bool? get keepAspectRatio;
  external set keepAspectRatio(bool? value);
  external bool? get muted;
  external set muted(bool? value);
  external bool? get playsInline;
  external set playsInline(bool? value);
}
@JS("VideoOverlay")
class VideoOverlay {
  external factory VideoOverlay(dynamic /* String|List<String>|HTMLVideoElement */ video, LatLngBoundsExpression bounds, [VideoOverlayOptions options]);
  external VideoOverlayOptions get options;
  external set options(VideoOverlayOptions value);
  @JS("bringToFront")
  external dynamic bringToFront();
  @JS("bringToBack")
  external dynamic bringToBack();
  @JS("setUrl")
  external dynamic setUrl(String url);
  @JS("setBounds")
  external dynamic setBounds(LatLngBounds bounds);
  @JS("setZIndex")
  external dynamic setZIndex(num value);
  @JS("setOpacity")
  external dynamic setOpacity(num opacity);
  @JS("setStyle")
  external dynamic setStyle(SVGOverlayStyleOptions styleOpts);
  @JS("getBounds")
  external LatLngBounds getBounds();
  @JS("getCenter")
  external Point getCenter();
  @JS("getElement")
  external HTMLVideoElement? getElement();
}
@JS("videoOverlay")
external VideoOverlay videoOverlay(dynamic /* String|List<String>|HTMLVideoElement */ video, LatLngBoundsExpression bounds, [VideoOverlayOptions options]);
typedef LineCapShape = String;
typedef LineJoinShape = String;
typedef FillRule = String;
@JS()
@anonymous
abstract class PathOptions{}
extension PathOptionsExtension on PathOptions {
  external bool? get stroke;
  external set stroke(bool? value);
  external String? get color;
  external set color(String? value);
  external num? get weight;
  external set weight(num? value);
  external num? get opacity;
  external set opacity(num? value);
  external LineCapShape? get lineCap;
  external set lineCap(LineCapShape? value);
  external LineJoinShape? get lineJoin;
  external set lineJoin(LineJoinShape? value);
  external dynamic /* String|List<num> */ get dashArray;
  external set dashArray(dynamic /* String|List<num> */ value);
  external String? get dashOffset;
  external set dashOffset(String? value);
  external bool? get fill;
  external set fill(bool? value);
  external String? get fillColor;
  external set fillColor(String? value);
  external num? get fillOpacity;
  external set fillOpacity(num? value);
  external FillRule? get fillRule;
  external set fillRule(FillRule? value);
  external Renderer? get renderer;
  external set renderer(Renderer? value);
  external String? get className;
  external set className(String? value);
}
@JS("Path")
class Path {
  external PathOptions get options;
  external set options(PathOptions value);
  @JS("redraw")
  external dynamic redraw();
  @JS("setStyle")
  external dynamic setStyle(PathOptions style);
  @JS("bringToFront")
  external dynamic bringToFront();
  @JS("bringToBack")
  external dynamic bringToBack();
  @JS("getElement")
  external Element? getElement();
}
@JS()
@anonymous
abstract class PolylineOptions{}
extension PolylineOptionsExtension on PolylineOptions {
  external num? get smoothFactor;
  external set smoothFactor(num? value);
  external bool? get noClip;
  external set noClip(bool? value);
}
@JS("Polyline")
class Polyline {
  external factory Polyline(dynamic /* List<LatLngExpression>|List<List<LatLngExpression>> */ latlngs, [PolylineOptions options]);
  external geojson.Feature<T, P>? get feature;
  external set feature(geojson.Feature<T, P>? value);
  external PolylineOptions get options;
  external set options(PolylineOptions value);
  @JS("toGeoJSON")
  external geojson.Feature<T, P> toGeoJSON([dynamic /* num|bool */ precision]);
  @JS("getLatLngs")
  external dynamic /* List<LatLng>|List<List<LatLng>>|List<List<List<LatLng>>> */ getLatLngs();
  @JS("setLatLngs")
  external dynamic setLatLngs(dynamic /* List<LatLngExpression>|List<List<LatLngExpression>>|List<List<List<LatLngExpression>>> */ latlngs);
  @JS("isEmpty")
  external bool isEmpty();
  @JS("getCenter")
  external LatLng getCenter();
  @JS("getBounds")
  external LatLngBounds getBounds();
  @JS("addLatLng")
  external dynamic addLatLng(dynamic /* LatLngExpression|List<LatLngExpression> */ latlng, [List<LatLng> latlngs]);
  @JS("closestLayerPoint")
  external Point closestLayerPoint(Point p);
}
@JS("polyline")
external Polyline<T, P> polyline(dynamic /* List<LatLngExpression>|List<List<LatLngExpression>> */ latlngs, [PolylineOptions options]);
@JS("Polygon")
class Polygon {
  external factory Polygon(dynamic /* List<LatLngExpression>|List<List<LatLngExpression>>|List<List<List<LatLngExpression>>> */ latlngs, [PolylineOptions options]);
}
@JS("polygon")
external Polygon<P> polygon(dynamic /* List<LatLngExpression>|List<List<LatLngExpression>>|List<List<List<LatLngExpression>>> */ latlngs, [PolylineOptions options]);
@JS("Rectangle")
class Rectangle {
  external factory Rectangle(LatLngBoundsExpression latLngBounds, [PolylineOptions options]);
  @JS("setBounds")
  external dynamic setBounds(LatLngBoundsExpression latLngBounds);
}
@JS("rectangle")
external Rectangle<P> rectangle(LatLngBoundsExpression latLngBounds, [PolylineOptions options]);
@JS()
@anonymous
abstract class CircleMarkerOptions{}
extension CircleMarkerOptionsExtension on CircleMarkerOptions {
  external num get radius;
  external set radius(num value);
}
@JS("CircleMarker")
class CircleMarker {
  external factory CircleMarker(LatLngExpression latlng, CircleMarkerOptions options);
  external CircleMarkerOptions get options;
  external set options(CircleMarkerOptions value);
  external geojson.Feature<geojson.Point, P>? get feature;
  external set feature(geojson.Feature<geojson.Point, P>? value);
  @JS("toGeoJSON")
  external geojson.Feature<geojson.Point, P> toGeoJSON([dynamic /* num|bool */ precision]);
  @JS("setLatLng")
  external dynamic setLatLng(LatLngExpression latLng);
  @JS("getLatLng")
  external LatLng getLatLng();
  @JS("setRadius")
  external dynamic setRadius(num radius);
  @JS("getRadius")
  external num getRadius();
  @JS("setStyle")
  external dynamic setStyle(Partial<CircleMarkerOptions> options);
}
@JS("circleMarker")
external CircleMarker<P> circleMarker(LatLngExpression latlng, [CircleMarkerOptions options]);
typedef CircleOptions = CircleMarkerOptions;
@JS("Circle")
class Circle {
  external factory Circle(LatLngExpression latlng, CircleOptions options);
  external factory Circle(LatLngExpression latlng, num radius, [CircleOptions options]);
  @JS("toGeoJSON")
  external dynamic toGeoJSON([dynamic /* num|bool */ precision]);
  @JS("getBounds")
  external LatLngBounds getBounds();
  @JS("setRadius")
  external dynamic setRadius(num radius);
  @JS("getRadius")
  external num getRadius();
  @JS("setStyle")
  external dynamic setStyle(PathOptions style);
}
@JS("circle")
external Circle<P> circle_1(LatLngExpression latlng, CircleMarkerOptions options);
@JS("circle")
external Circle<P> circle_2(LatLngExpression latlng, num radius, [CircleMarkerOptions options]);
@JS()
@anonymous
abstract class RendererOptions{}
extension RendererOptionsExtension on RendererOptions {
  external num? get padding;
  external set padding(num? value);
  external num? get tolerance;
  external set tolerance(num? value);
}
@JS("Renderer")
class Renderer {
  external factory Renderer([RendererOptions options]);
  external RendererOptions get options;
  external set options(RendererOptions value);
}
@JS("SVG")
class SVG {
}
@JS("SVG.create")
external dynamic create_1(K name);
@JS("SVG.create")
external SVGElement create_2(String name);
@JS("SVG.pointsToPath")
external String pointsToPath(List<PointExpression> rings, bool closed);
@JS("svg")
external SVG svg([RendererOptions options]);
@JS("Canvas")
class Canvas {
}
@JS("canvas")
external Canvas canvas([RendererOptions options]);
@JS("LayerGroup")
class LayerGroup {
  external factory LayerGroup([List<Layer> layers, LayerOptions options]);
  external dynamic /* geojson.FeatureCollection<geojson.GeometryObject, P>|geojson.Feature<geojson.MultiPoint, P>|geojson.GeometryCollection */ get feature;
  external set feature(dynamic /* geojson.FeatureCollection<geojson.GeometryObject, P>|geojson.Feature<geojson.MultiPoint, P>|geojson.GeometryCollection */ value);
  @JS("toMultiPoint")
  external geojson.Feature<geojson.MultiPoint, P> toMultiPoint([num precision]);
  @JS("toGeoJSON")
  external dynamic /* geojson.FeatureCollection<geojson.GeometryObject, P>|geojson.Feature<geojson.MultiPoint, P>|geojson.GeometryCollection */ toGeoJSON([dynamic /* num|bool */ precision]);
  @JS("addLayer")
  external dynamic addLayer(Layer layer);
  @JS("removeLayer")
  external dynamic removeLayer(dynamic /* num|Layer */ layer);
  @JS("hasLayer")
  external bool hasLayer(Layer layer);
  @JS("clearLayers")
  external dynamic clearLayers();
  @JS("invoke")
  external dynamic invoke(String methodName, [/* rest */ List<dynamic> params]);
  @JS("eachLayer")
  external dynamic eachLayer(void Function(Layer) fn, [dynamic context]);
  @JS("getLayer")
  external Layer? getLayer(num id);
  @JS("getLayers")
  external List<Layer> getLayers();
  @JS("setZIndex")
  external dynamic setZIndex(num zIndex);
  @JS("getLayerId")
  external num getLayerId(Layer layer);
}
@JS("layerGroup")
external LayerGroup<P> layerGroup([List<Layer> layers, LayerOptions options]);
@JS("FeatureGroup")
class FeatureGroup {
  @JS("addLayer")
  external dynamic addLayer(Layer layer);
  @JS("removeLayer")
  external dynamic removeLayer(dynamic /* num|Layer */ layer);
  @JS("setStyle")
  external dynamic setStyle(PathOptions style);
  @JS("bringToFront")
  external dynamic bringToFront();
  @JS("bringToBack")
  external dynamic bringToBack();
  @JS("getBounds")
  external LatLngBounds getBounds();
}
@JS("featureGroup")
external FeatureGroup<P> featureGroup([List<Layer> layers, LayerOptions options]);
typedef StyleFunction = PathOptions Function([geojson.Feature<geojson.GeometryObject, P>]);
@JS()
@anonymous
abstract class GeoJSONOptions{}
extension GeoJSONOptionsExtension on GeoJSONOptions {
  external dynamic /* PathOptions|StyleFunction<P> */ get style;
  external set style(dynamic /* PathOptions|StyleFunction<P> */ value);
  external bool? get markersInheritOptions;
  external set markersInheritOptions(bool? value);
  @JS("pointToLayer")
  external Layer pointToLayer(geojson.Feature<geojson.Point, P> geoJsonPoint, LatLng latlng);
  @JS("onEachFeature")
  external void onEachFeature(geojson.Feature<G, P> feature, Layer layer);
  @JS("filter")
  external bool filter(geojson.Feature<G, P> geoJsonFeature);
  @JS("coordsToLatLng")
  external LatLng coordsToLatLng(List<num> coords);
}
@JS("GeoJSON")
class GeoJSON {
  external factory GeoJSON([geojson.GeoJsonObject? geojson, GeoJSONOptions<P, G>? options]);
  external GeoJSONOptions<P, G> get options;
  external set options(GeoJSONOptions<P, G> value);
  @JS("getFeature")
  external geojson.Feature<G, P> getFeature(Layer layer, dynamic /* geojson.Feature<G, P>|G */ newGeometry);
  @JS("geometryToLayer")
  external Layer geometryToLayer(geojson.Feature<G, P> featureData, [GeoJSONOptions<P, G> options]);
  @JS("coordsToLatLng")
  external LatLng coordsToLatLng(List<num> coords);
  @JS("coordsToLatLngs")
  external List<dynamic> coordsToLatLngs(List<dynamic> coords, [num levelsDeep, LatLng Function(List<num>) coordsToLatLng]);
  @JS("latLngToCoords")
  external List<num> latLngToCoords(LatLng latlng);
  @JS("latLngsToCoords")
  external List<dynamic> latLngsToCoords(List<dynamic> latlngs, [num levelsDeep, bool closed]);
  @JS("asFeature")
  external geojson.Feature<G, P> asFeature(dynamic /* geojson.Feature<G, P>|G */ geojson);
  @JS("addData")
  external dynamic addData(geojson.GeoJsonObject data);
  @JS("resetStyle")
  external dynamic resetStyle([Layer layer]);
  @JS("setStyle")
  external dynamic setStyle(dynamic /* PathOptions|StyleFunction<P> */ style);
}
@JS("geoJSON")
external GeoJSON<P, G> geoJSON([dynamic /* geojson.GeoJsonObject|List<geojson.GeoJsonObject> */ geojson, GeoJSONOptions<P, G>? options]);
@JS("geoJson")
external GeoJSON<P, G> geoJson([dynamic /* geojson.GeoJsonObject|List<geojson.GeoJsonObject> */ geojson, GeoJSONOptions<P, G>? options]);
typedef Zoom = dynamic /* bool|String */;
@JS()
@anonymous
abstract class MapOptions{}
extension MapOptionsExtension on MapOptions {
  external bool? get preferCanvas;
  external set preferCanvas(bool? value);
  external bool? get attributionControl;
  external set attributionControl(bool? value);
  external bool? get zoomControl;
  external set zoomControl(bool? value);
  external bool? get closePopupOnClick;
  external set closePopupOnClick(bool? value);
  external num? get zoomSnap;
  external set zoomSnap(num? value);
  external num? get zoomDelta;
  external set zoomDelta(num? value);
  external bool? get trackResize;
  external set trackResize(bool? value);
  external bool? get boxZoom;
  external set boxZoom(bool? value);
  external Zoom? get doubleClickZoom;
  external set doubleClickZoom(Zoom? value);
  external bool? get dragging;
  external set dragging(bool? value);
  external CRS? get crs;
  external set crs(CRS? value);
  external LatLngExpression? get center;
  external set center(LatLngExpression? value);
  external num? get zoom;
  external set zoom(num? value);
  external num? get minZoom;
  external set minZoom(num? value);
  external num? get maxZoom;
  external set maxZoom(num? value);
  external List<Layer>? get layers;
  external set layers(List<Layer>? value);
  external LatLngBoundsExpression? get maxBounds;
  external set maxBounds(LatLngBoundsExpression? value);
  external Renderer? get renderer;
  external set renderer(Renderer? value);
  external bool? get fadeAnimation;
  external set fadeAnimation(bool? value);
  external bool? get markerZoomAnimation;
  external set markerZoomAnimation(bool? value);
  external num? get transform3DLimit;
  external set transform3DLimit(num? value);
  external bool? get zoomAnimation;
  external set zoomAnimation(bool? value);
  external num? get zoomAnimationThreshold;
  external set zoomAnimationThreshold(num? value);
  external bool? get inertia;
  external set inertia(bool? value);
  external num? get inertiaDeceleration;
  external set inertiaDeceleration(num? value);
  external num? get inertiaMaxSpeed;
  external set inertiaMaxSpeed(num? value);
  external num? get easeLinearity;
  external set easeLinearity(num? value);
  external bool? get worldCopyJump;
  external set worldCopyJump(bool? value);
  external num? get maxBoundsViscosity;
  external set maxBoundsViscosity(num? value);
  external bool? get keyboard;
  external set keyboard(bool? value);
  external num? get keyboardPanDelta;
  external set keyboardPanDelta(num? value);
  external Zoom? get scrollWheelZoom;
  external set scrollWheelZoom(Zoom? value);
  external num? get wheelDebounceTime;
  external set wheelDebounceTime(num? value);
  external num? get wheelPxPerZoomLevel;
  external set wheelPxPerZoomLevel(num? value);
  external bool? get tapHold;
  external set tapHold(bool? value);
  external num? get tapTolerance;
  external set tapTolerance(num? value);
  external Zoom? get touchZoom;
  external set touchZoom(Zoom? value);
  external bool? get bounceAtZoomLimits;
  external set bounceAtZoomLimits(bool? value);
}
typedef ControlPosition = String;
@JS()
@anonymous
abstract class ControlOptions{}
extension ControlOptionsExtension on ControlOptions {
  external ControlPosition? get position;
  external set position(ControlPosition? value);
}
@JS("Control")
class Control {
  external factory Control([Options options]);
  external Options get options;
  external set options(Options value);
  @JS("extend")
  external dynamic extend(T props);
  @JS("getPosition")
  external ControlPosition getPosition();
  @JS("setPosition")
  external dynamic setPosition(ControlPosition position);
  @JS("getContainer")
  external HTMLElement? getContainer();
  @JS("addTo")
  external dynamic addTo(Map map);
  @JS("remove")
  external dynamic remove();
  @JS("onAdd")
  external HTMLElement onAdd(Map map);
  @JS("onRemove")
  external void onRemove(Map map);
}
@JS()
@anonymous
abstract class ZoomOptions{}
extension ZoomOptionsExtension on ZoomOptions {
  external String? get zoomInText;
  external set zoomInText(String? value);
  external String? get zoomInTitle;
  external set zoomInTitle(String? value);
  external String? get zoomOutText;
  external set zoomOutText(String? value);
  external String? get zoomOutTitle;
  external set zoomOutTitle(String? value);
}
@JS("Control.Zoom")
class Zoom {
  external factory Zoom([ZoomOptions options]);
  external ZoomOptions get options;
  external set options(ZoomOptions value);
}
@JS()
@anonymous
abstract class AttributionOptions{}
extension AttributionOptionsExtension on AttributionOptions {
  external dynamic /* String|bool */ get prefix;
  external set prefix(dynamic /* String|bool */ value);
}
@JS("Control.Attribution")
class Attribution {
  external factory Attribution([AttributionOptions options]);
  external AttributionOptions get options;
  external set options(AttributionOptions value);
  @JS("setPrefix")
  external dynamic setPrefix(dynamic /* String|bool */ prefix);
  @JS("addAttribution")
  external dynamic addAttribution(String text);
  @JS("removeAttribution")
  external dynamic removeAttribution(String text);
}
@JS()
@anonymous
abstract class LayersOptions{}
extension LayersOptionsExtension on LayersOptions {
  external bool? get collapsed;
  external set collapsed(bool? value);
  external bool? get autoZIndex;
  external set autoZIndex(bool? value);
  external bool? get hideSingleBase;
  external set hideSingleBase(bool? value);
  external bool? get sortLayers;
  external set sortLayers(bool? value);
  external num Function(Layer, Layer, String, String)? get sortFunction;
  external set sortFunction(num Function(Layer, Layer, String, String)? value);
}
@JS()
@anonymous
abstract class LayersObject{}
extension LayersObjectExtension on LayersObject {
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("Control.Layers")
class Layers {
  external factory Layers([LayersObject baseLayers, LayersObject overlays, LayersOptions options]);
  external LayersOptions get options;
  external set options(LayersOptions value);
  @JS("addBaseLayer")
  external dynamic addBaseLayer(Layer layer, String name);
  @JS("addOverlay")
  external dynamic addOverlay(Layer layer, String name);
  @JS("removeLayer")
  external dynamic removeLayer(Layer layer);
  @JS("expand")
  external dynamic expand();
  @JS("collapse")
  external dynamic collapse();
}
@JS()
@anonymous
abstract class ScaleOptions{}
extension ScaleOptionsExtension on ScaleOptions {
  external num? get maxWidth;
  external set maxWidth(num? value);
  external bool? get metric;
  external set metric(bool? value);
  external bool? get imperial;
  external set imperial(bool? value);
  external bool? get updateWhenIdle;
  external set updateWhenIdle(bool? value);
}
@JS("Control.Scale")
class Scale {
  external factory Scale([ScaleOptions options]);
  external ScaleOptions get options;
  external set options(ScaleOptions value);
}
@JS("control.zoom")
external Control.Zoom zoom([Control.ZoomOptions options]);
@JS("control.attribution")
external Control.Attribution attribution([Control.AttributionOptions options]);
@JS("control.layers")
external Control.Layers layers([Control.LayersObject baseLayers, Control.LayersObject overlays, Control.LayersOptions options]);
@JS("control.scale")
external Control.Scale scale([Control.ScaleOptions options]);
@JS()
@anonymous
abstract class DivOverlayOptions{}
extension DivOverlayOptionsExtension on DivOverlayOptions {
  external PointExpression? get offset;
  external set offset(PointExpression? value);
  external String? get className;
  external set className(String? value);
  external String? get pane;
  external set pane(String? value);
  external bool? get interactive;
  external set interactive(bool? value);
  external dynamic /* String|HTMLElement|String Function(Layer)|HTMLElement Function(Layer) */ get content;
  external set content(dynamic /* String|HTMLElement|String Function(Layer)|HTMLElement Function(Layer) */ value);
}
@JS("DivOverlay")
class DivOverlay {
  external factory DivOverlay(LatLngExpression latlng, [TooltipOptions options]);
  external factory DivOverlay([DivOverlayOptions options, Layer source]);
  external DivOverlayOptions get options;
  external set options(DivOverlayOptions value);
  @JS("getLatLng")
  external LatLng? getLatLng();
  @JS("setLatLng")
  external dynamic setLatLng(LatLngExpression latlng);
  @JS("getContent")
  external dynamic /* Content|Content Function(Layer) */ getContent();
  @JS("setContent")
  external dynamic setContent(dynamic /* Content Function(Layer)|Content */ htmlContent);
  @JS("getElement")
  external HTMLElement? getElement();
  @JS("update")
  external void update();
  @JS("isOpen")
  external bool isOpen();
  @JS("bringToFront")
  external dynamic bringToFront();
  @JS("bringToBack")
  external dynamic bringToBack();
  @JS("openOn")
  external dynamic openOn(Map map);
  @JS("toggle")
  external dynamic toggle([Layer layer]);
  @JS("close")
  external dynamic close();
}
@JS()
@anonymous
abstract class PopupOptions{}
extension PopupOptionsExtension on PopupOptions {
  external num? get maxWidth;
  external set maxWidth(num? value);
  external num? get minWidth;
  external set minWidth(num? value);
  external num? get maxHeight;
  external set maxHeight(num? value);
  external bool? get keepInView;
  external set keepInView(bool? value);
  external bool? get closeButton;
  external set closeButton(bool? value);
  external bool? get autoPan;
  external set autoPan(bool? value);
  external PointExpression? get autoPanPaddingTopLeft;
  external set autoPanPaddingTopLeft(PointExpression? value);
  external PointExpression? get autoPanPaddingBottomRight;
  external set autoPanPaddingBottomRight(PointExpression? value);
  external PointExpression? get autoPanPadding;
  external set autoPanPadding(PointExpression? value);
  external bool? get autoClose;
  external set autoClose(bool? value);
  external bool? get closeOnClick;
  external set closeOnClick(bool? value);
  external bool? get closeOnEscapeKey;
  external set closeOnEscapeKey(bool? value);
}
typedef Content = dynamic /* String|HTMLElement */;
@JS("Popup")
class Popup {
  external factory Popup(LatLngExpression latlng, [TooltipOptions options]);
  external factory Popup([PopupOptions options, Layer source]);
  external PopupOptions get options;
  external set options(PopupOptions value);
  @JS("openOn")
  external dynamic openOn(Map map);
}
@JS("popup")
external Popup popup_1(LatLngExpression latlng, [PopupOptions options]);
@JS("popup")
external Popup popup_2([PopupOptions options, Layer source]);
typedef Direction = String;
@JS()
@anonymous
abstract class TooltipOptions{}
extension TooltipOptionsExtension on TooltipOptions {
  external String? get pane;
  external set pane(String? value);
  external PointExpression? get offset;
  external set offset(PointExpression? value);
  external Direction? get direction;
  external set direction(Direction? value);
  external bool? get permanent;
  external set permanent(bool? value);
  external bool? get sticky;
  external set sticky(bool? value);
  external num? get opacity;
  external set opacity(num? value);
}
@JS("Tooltip")
class Tooltip {
  external factory Tooltip(LatLngExpression latlng, [TooltipOptions options]);
  external factory Tooltip([TooltipOptions options, Layer source]);
  external TooltipOptions get options;
  external set options(TooltipOptions value);
  @JS("setOpacity")
  external void setOpacity(num val);
}
@JS("tooltip")
external Tooltip tooltip_1(LatLngExpression latlng, [TooltipOptions options]);
@JS("tooltip")
external Tooltip tooltip_2([TooltipOptions options, Layer source]);
@JS()
@anonymous
abstract class ZoomOptions{}
extension ZoomOptionsExtension on ZoomOptions {
  external bool? get animate;
  external set animate(bool? value);
}
@JS()
@anonymous
abstract class PanOptions{}
extension PanOptionsExtension on PanOptions {
  external bool? get animate;
  external set animate(bool? value);
  external num? get duration;
  external set duration(num? value);
  external num? get easeLinearity;
  external set easeLinearity(num? value);
  external bool? get noMoveStart;
  external set noMoveStart(bool? value);
}
@JS()
@anonymous
abstract class ZoomPanOptions{}
extension ZoomPanOptionsExtension on ZoomPanOptions {
}
@JS()
@anonymous
abstract class InvalidateSizeOptions{}
extension InvalidateSizeOptionsExtension on InvalidateSizeOptions {
  external bool? get debounceMoveend;
  external set debounceMoveend(bool? value);
  external bool? get pan;
  external set pan(bool? value);
}
@JS()
@anonymous
abstract class FitBoundsOptions{}
extension FitBoundsOptionsExtension on FitBoundsOptions {
  external PointExpression? get paddingTopLeft;
  external set paddingTopLeft(PointExpression? value);
  external PointExpression? get paddingBottomRight;
  external set paddingBottomRight(PointExpression? value);
  external PointExpression? get padding;
  external set padding(PointExpression? value);
  external num? get maxZoom;
  external set maxZoom(num? value);
}
@JS()
@anonymous
abstract class PanInsideOptions{}
extension PanInsideOptionsExtension on PanInsideOptions {
  external PointExpression? get paddingTopLeft;
  external set paddingTopLeft(PointExpression? value);
  external PointExpression? get paddingBottomRight;
  external set paddingBottomRight(PointExpression? value);
  external PointExpression? get padding;
  external set padding(PointExpression? value);
}
@JS()
@anonymous
abstract class LocateOptions{}
extension LocateOptionsExtension on LocateOptions {
  external bool? get watch;
  external set watch(bool? value);
  external bool? get setView;
  external set setView(bool? value);
  external num? get maxZoom;
  external set maxZoom(num? value);
  external num? get timeout;
  external set timeout(num? value);
  external num? get maximumAge;
  external set maximumAge(num? value);
  external bool? get enableHighAccuracy;
  external set enableHighAccuracy(bool? value);
}
@JS("Handler")
class Handler {
  external factory Handler(Map map);
  @JS("enable")
  external dynamic enable();
  @JS("disable")
  external dynamic disable();
  @JS("enabled")
  external bool enabled();
  @JS("addHooks")
  external void addHooks();
  @JS("removeHooks")
  external void removeHooks();
}
@JS()
@anonymous
abstract class LeafletEvent{}
extension LeafletEventExtension on LeafletEvent {
  external String get type;
  external set type(String value);
  external dynamic get popup;
  external set popup(dynamic value);
  external dynamic get target;
  external set target(dynamic value);
  external dynamic get sourceTarget;
  external set sourceTarget(dynamic value);
  external dynamic get propagatedFrom;
  external set propagatedFrom(dynamic value);
  external dynamic get layer;
  external set layer(dynamic value);
}
@JS()
@anonymous
abstract class LeafletMouseEvent{}
extension LeafletMouseEventExtension on LeafletMouseEvent {
  external LatLng get latlng;
  external set latlng(LatLng value);
  external Point get layerPoint;
  external set layerPoint(Point value);
  external Point get containerPoint;
  external set containerPoint(Point value);
  external MouseEvent get originalEvent;
  external set originalEvent(MouseEvent value);
}
@JS()
@anonymous
abstract class LeafletKeyboardEvent{}
extension LeafletKeyboardEventExtension on LeafletKeyboardEvent {
  external KeyboardEvent get originalEvent;
  external set originalEvent(KeyboardEvent value);
}
@JS()
@anonymous
abstract class LocationEvent{}
extension LocationEventExtension on LocationEvent {
  external LatLng get latlng;
  external set latlng(LatLng value);
  external LatLngBounds get bounds;
  external set bounds(LatLngBounds value);
  external num get accuracy;
  external set accuracy(num value);
  external num get altitude;
  external set altitude(num value);
  external num get altitudeAccuracy;
  external set altitudeAccuracy(num value);
  external num get heading;
  external set heading(num value);
  external num get speed;
  external set speed(num value);
  external num get timestamp;
  external set timestamp(num value);
}
@JS()
@anonymous
abstract class ErrorEvent{}
extension ErrorEventExtension on ErrorEvent {
  external String get message;
  external set message(String value);
  external num get code;
  external set code(num value);
}
@JS()
@anonymous
abstract class LayerEvent{}
extension LayerEventExtension on LayerEvent {
  external Layer get layer;
  external set layer(Layer value);
}
@JS()
@anonymous
abstract class LayersControlEvent{}
extension LayersControlEventExtension on LayersControlEvent {
  external String get name;
  external set name(String value);
}
@JS()
@anonymous
abstract class TileEvent{}
extension TileEventExtension on TileEvent {
  external HTMLImageElement get tile;
  external set tile(HTMLImageElement value);
  external Coords get coords;
  external set coords(Coords value);
}
@JS()
@anonymous
abstract class TileErrorEvent{}
extension TileErrorEventExtension on TileErrorEvent {
  external Error get error;
  external set error(Error value);
}
@JS()
@anonymous
abstract class ResizeEvent{}
extension ResizeEventExtension on ResizeEvent {
  external Point get oldSize;
  external set oldSize(Point value);
  external Point get newSize;
  external set newSize(Point value);
}
@JS()
@anonymous
abstract class GeoJSONEvent{}
extension GeoJSONEventExtension on GeoJSONEvent {
  external Layer get layer;
  external set layer(Layer value);
  external dynamic get properties;
  external set properties(dynamic value);
  external String get geometryType;
  external set geometryType(String value);
  external String get id;
  external set id(String value);
}
@JS()
@anonymous
abstract class PopupEvent{}
extension PopupEventExtension on PopupEvent {
  external Popup get popup;
  external set popup(Popup value);
}
@JS()
@anonymous
abstract class TooltipEvent{}
extension TooltipEventExtension on TooltipEvent {
  external Tooltip get tooltip;
  external set tooltip(Tooltip value);
}
@JS()
@anonymous
abstract class DragEndEvent{}
extension DragEndEventExtension on DragEndEvent {
  external num get distance;
  external set distance(num value);
}
@JS()
@anonymous
abstract class ZoomAnimEvent{}
extension ZoomAnimEventExtension on ZoomAnimEvent {
  external LatLng get center;
  external set center(LatLng value);
  external num get zoom;
  external set zoom(num value);
  external bool get noUpdate;
  external set noUpdate(bool value);
}
typedef EventHandlerFn = void Function(Event);
typedef PropagableEvent = dynamic /* LeafletMouseEvent|LeafletKeyboardEvent|LeafletEvent|Event */;
@JS("DomEvent.on")
external dynamic on_1(HTMLElement el, String types, EventHandlerFn fn, [dynamic context]);
@JS("DomEvent.on")
external dynamic on_2(HTMLElement el, AnonInterface$18 eventMap, [dynamic context]);
@JS("DomEvent.off")
external dynamic off_1(HTMLElement el);
@JS("DomEvent.off")
external dynamic off_2(HTMLElement el, String types, EventHandlerFn fn, [dynamic context]);
@JS("DomEvent.off")
external dynamic off_3(HTMLElement el, AnonInterface$18 eventMap, [dynamic context]);
@JS("DomEvent.stopPropagation")
external dynamic stopPropagation(PropagableEvent ev);
@JS("DomEvent.disableScrollPropagation")
external dynamic disableScrollPropagation(HTMLElement el);
@JS("DomEvent.disableClickPropagation")
external dynamic disableClickPropagation(HTMLElement el);
@JS("DomEvent.preventDefault")
external dynamic preventDefault(Event ev);
@JS("DomEvent.stop")
external dynamic stop(PropagableEvent ev);
@JS("DomEvent.getMousePosition")
external Point getMousePosition(MouseEvent ev, [HTMLElement container]);
@JS("DomEvent.getWheelDelta")
external num getWheelDelta(Event ev);
@JS("DomEvent.addListener")
external dynamic addListener_1(HTMLElement el, String types, EventHandlerFn fn, [dynamic context]);
@JS("DomEvent.addListener")
external dynamic addListener_2(HTMLElement el, AnonInterface$18 eventMap, [dynamic context]);
@JS("DomEvent.removeListener")
external dynamic removeListener_1(HTMLElement el, String types, EventHandlerFn fn, [dynamic context]);
@JS("DomEvent.removeListener")
external dynamic removeListener_2(HTMLElement el, AnonInterface$18 eventMap, [dynamic context]);
@JS("DomEvent.getPropagationPath")
external List<HTMLElement> getPropagationPath(Event ev);
@JS()
@anonymous
abstract class DefaultMapPanes{}
extension DefaultMapPanesExtension on DefaultMapPanes {
  external HTMLElement get mapPane;
  external set mapPane(HTMLElement value);
  external HTMLElement get tilePane;
  external set tilePane(HTMLElement value);
  external HTMLElement get overlayPane;
  external set overlayPane(HTMLElement value);
  external HTMLElement get shadowPane;
  external set shadowPane(HTMLElement value);
  external HTMLElement get markerPane;
  external set markerPane(HTMLElement value);
  external HTMLElement get tooltipPane;
  external set tooltipPane(HTMLElement value);
  external HTMLElement get popupPane;
  external set popupPane(HTMLElement value);
}
@JS("Map")
class Map {
  external factory Map(dynamic /* String|HTMLElement */ element, [MapOptions options]);
  external L.Control.Attribution get attributionControl;
  external set attributionControl(L.Control.Attribution value);
  external Handler get boxZoom;
  external set boxZoom(Handler value);
  external Handler get doubleClickZoom;
  external set doubleClickZoom(Handler value);
  external Handler get dragging;
  external set dragging(Handler value);
  external Handler get keyboard;
  external set keyboard(Handler value);
  external Handler get scrollWheelZoom;
  external set scrollWheelZoom(Handler value);
  external Handler? get tapHold;
  external set tapHold(Handler? value);
  external Handler get touchZoom;
  external set touchZoom(Handler value);
  external Control.Zoom get zoomControl;
  external set zoomControl(Control.Zoom value);
  external MapOptions get options;
  external set options(MapOptions value);
  @JS("getRenderer")
  external Renderer getRenderer(Path layer);
  @JS("addControl")
  external dynamic addControl(Control control);
  @JS("removeControl")
  external dynamic removeControl(Control control);
  @JS("addLayer")
  external dynamic addLayer(Layer layer);
  @JS("removeLayer")
  external dynamic removeLayer(Layer layer);
  @JS("hasLayer")
  external bool hasLayer(Layer layer);
  @JS("eachLayer")
  external dynamic eachLayer(void Function(Layer) fn, [dynamic context]);
  @JS("openPopup")
  external dynamic openPopup_1(Popup popup);
  @JS("openPopup")
  external dynamic openPopup_2(Content content, LatLngExpression latlng, [PopupOptions options]);
  @JS("closePopup")
  external dynamic closePopup([Popup popup]);
  @JS("openTooltip")
  external dynamic openTooltip_1(Tooltip tooltip);
  @JS("openTooltip")
  external dynamic openTooltip_2(Content content, LatLngExpression latlng, [TooltipOptions options]);
  @JS("closeTooltip")
  external dynamic closeTooltip([Tooltip tooltip]);
  @JS("setView")
  external dynamic setView(LatLngExpression center, [num zoom, ZoomPanOptions options]);
  @JS("setZoom")
  external dynamic setZoom(num zoom, [ZoomPanOptions options]);
  @JS("zoomIn")
  external dynamic zoomIn([num delta, ZoomOptions options]);
  @JS("zoomOut")
  external dynamic zoomOut([num delta, ZoomOptions options]);
  @JS("setZoomAround")
  external dynamic setZoomAround(dynamic /* Point|LatLngExpression */ position, num zoom, [ZoomOptions options]);
  @JS("fitBounds")
  external dynamic fitBounds(LatLngBoundsExpression bounds, [FitBoundsOptions options]);
  @JS("fitWorld")
  external dynamic fitWorld([FitBoundsOptions options]);
  @JS("panTo")
  external dynamic panTo(LatLngExpression latlng, [PanOptions options]);
  @JS("panBy")
  external dynamic panBy(PointExpression offset, [PanOptions options]);
  @JS("setMaxBounds")
  external dynamic setMaxBounds([LatLngBoundsExpression bounds]);
  @JS("setMinZoom")
  external dynamic setMinZoom(num zoom);
  @JS("setMaxZoom")
  external dynamic setMaxZoom(num zoom);
  @JS("panInside")
  external dynamic panInside(LatLngExpression latLng, [PanInsideOptions options]);
  @JS("panInsideBounds")
  external dynamic panInsideBounds(LatLngBoundsExpression bounds, [PanOptions options]);
  @JS("invalidateSize")
  external dynamic invalidateSize([dynamic /* bool|InvalidateSizeOptions */ options]);
  @JS("stop")
  external dynamic stop();
  @JS("flyTo")
  external dynamic flyTo(LatLngExpression latlng, [num zoom, ZoomPanOptions options]);
  @JS("flyToBounds")
  external dynamic flyToBounds(LatLngBoundsExpression bounds, [FitBoundsOptions options]);
  @JS("addHandler")
  external dynamic addHandler(String name, dynamic HandlerClass);
  @JS("remove")
  external dynamic remove();
  @JS("createPane")
  external HTMLElement createPane(String name, [HTMLElement container]);
  @JS("getPane")
  external HTMLElement? getPane(dynamic /* String|HTMLElement */ pane);
  @JS("getPanes")
  external dynamic getPanes();
  @JS("getContainer")
  external HTMLElement getContainer();
  @JS("whenReady")
  external dynamic whenReady(void Function(AnonInterface$24) fn, [dynamic context]);
  @JS("getCenter")
  external LatLng getCenter();
  @JS("getZoom")
  external num getZoom();
  @JS("getBounds")
  external LatLngBounds getBounds();
  @JS("getMinZoom")
  external num getMinZoom();
  @JS("getMaxZoom")
  external num getMaxZoom();
  @JS("getBoundsZoom")
  external num getBoundsZoom(LatLngBoundsExpression bounds, [bool inside, Point padding]);
  @JS("getSize")
  external Point getSize();
  @JS("getPixelBounds")
  external Bounds getPixelBounds();
  @JS("getPixelOrigin")
  external Point getPixelOrigin();
  @JS("getPixelWorldBounds")
  external Bounds getPixelWorldBounds([num zoom]);
  @JS("getZoomScale")
  external num getZoomScale(num toZoom, [num fromZoom]);
  @JS("getScaleZoom")
  external num getScaleZoom(num scale, [num fromZoom]);
  @JS("project")
  external Point project(LatLngExpression latlng, [num zoom]);
  @JS("unproject")
  external LatLng unproject(PointExpression point, [num zoom]);
  @JS("layerPointToLatLng")
  external LatLng layerPointToLatLng(PointExpression point);
  @JS("latLngToLayerPoint")
  external Point latLngToLayerPoint(LatLngExpression latlng);
  @JS("wrapLatLng")
  external LatLng wrapLatLng(LatLngExpression latlng);
  @JS("wrapLatLngBounds")
  external LatLngBounds wrapLatLngBounds(LatLngBounds bounds);
  @JS("distance")
  external num distance(LatLngExpression latlng1, LatLngExpression latlng2);
  @JS("containerPointToLayerPoint")
  external Point containerPointToLayerPoint(PointExpression point);
  @JS("containerPointToLatLng")
  external LatLng containerPointToLatLng(PointExpression point);
  @JS("layerPointToContainerPoint")
  external Point layerPointToContainerPoint(PointExpression point);
  @JS("latLngToContainerPoint")
  external Point latLngToContainerPoint(LatLngExpression latlng);
  @JS("mouseEventToContainerPoint")
  external Point mouseEventToContainerPoint(MouseEvent ev);
  @JS("mouseEventToLayerPoint")
  external Point mouseEventToLayerPoint(MouseEvent ev);
  @JS("mouseEventToLatLng")
  external LatLng mouseEventToLatLng(MouseEvent ev);
  @JS("locate")
  external dynamic locate([LocateOptions options]);
  @JS("stopLocate")
  external dynamic stopLocate();
}
@JS("map")
external Map map(dynamic /* String|HTMLElement */ element, [MapOptions options]);
@JS()
@anonymous
abstract class BaseIconOptions{}
extension BaseIconOptionsExtension on BaseIconOptions {
  external String? get iconUrl;
  external set iconUrl(String? value);
  external String? get iconRetinaUrl;
  external set iconRetinaUrl(String? value);
  external PointExpression? get iconSize;
  external set iconSize(PointExpression? value);
  external PointExpression? get iconAnchor;
  external set iconAnchor(PointExpression? value);
  external PointExpression? get popupAnchor;
  external set popupAnchor(PointExpression? value);
  external PointExpression? get tooltipAnchor;
  external set tooltipAnchor(PointExpression? value);
  external String? get shadowUrl;
  external set shadowUrl(String? value);
  external String? get shadowRetinaUrl;
  external set shadowRetinaUrl(String? value);
  external PointExpression? get shadowSize;
  external set shadowSize(PointExpression? value);
  external PointExpression? get shadowAnchor;
  external set shadowAnchor(PointExpression? value);
  external String? get className;
  external set className(String? value);
}
@JS()
@anonymous
abstract class IconOptions{}
extension IconOptionsExtension on IconOptions {
  external String get iconUrl;
  external set iconUrl(String value);
  external dynamic /* CrossOrigin|bool */ get crossOrigin;
  external set crossOrigin(dynamic /* CrossOrigin|bool */ value);
}
@JS("Icon")
class Icon {
  external factory Icon(T options);
  external T get options;
  external set options(T value);
  @JS("createIcon")
  external HTMLElement createIcon([HTMLElement oldIcon]);
  @JS("createShadow")
  external HTMLElement createShadow([HTMLElement oldIcon]);
}
@JS()
@anonymous
abstract class DefaultIconOptions{}
extension DefaultIconOptionsExtension on DefaultIconOptions {
  external String? get imagePath;
  external set imagePath(String? value);
}
@JS("Icon.Default")
class Default {
  external factory Default([DefaultIconOptions options]);
  external static String? get imagePath;
  external static set imagePath(String? value);
}
@JS("icon")
external Icon icon(IconOptions options);
@JS()
@anonymous
abstract class DivIconOptions{}
extension DivIconOptionsExtension on DivIconOptions {
  external dynamic /* String|HTMLElement|bool */ get html;
  external set html(dynamic /* String|HTMLElement|bool */ value);
  external PointExpression? get bgPos;
  external set bgPos(PointExpression? value);
  external PointExpression? get iconSize;
  external set iconSize(PointExpression? value);
  external PointExpression? get iconAnchor;
  external set iconAnchor(PointExpression? value);
  external PointExpression? get popupAnchor;
  external set popupAnchor(PointExpression? value);
  external String? get className;
  external set className(String? value);
}
@JS("DivIcon")
class DivIcon {
  external factory DivIcon([DivIconOptions options]);
}
@JS("divIcon")
external DivIcon divIcon([DivIconOptions options]);
@JS()
@anonymous
abstract class MarkerOptions{}
extension MarkerOptionsExtension on MarkerOptions {
  external dynamic /* Icon|DivIcon */ get icon;
  external set icon(dynamic /* Icon|DivIcon */ value);
  external bool? get draggable;
  external set draggable(bool? value);
  external bool? get keyboard;
  external set keyboard(bool? value);
  external String? get title;
  external set title(String? value);
  external String? get alt;
  external set alt(String? value);
  external num? get zIndexOffset;
  external set zIndexOffset(num? value);
  external num? get opacity;
  external set opacity(num? value);
  external bool? get riseOnHover;
  external set riseOnHover(bool? value);
  external num? get riseOffset;
  external set riseOffset(num? value);
  external String? get shadowPane;
  external set shadowPane(String? value);
  external bool? get autoPan;
  external set autoPan(bool? value);
  external PointExpression? get autoPanPadding;
  external set autoPanPadding(PointExpression? value);
  external num? get autoPanSpeed;
  external set autoPanSpeed(num? value);
  external bool? get autoPanOnFocus;
  external set autoPanOnFocus(bool? value);
}
@JS("Marker")
class Marker {
  external factory Marker(LatLngExpression latlng, [MarkerOptions options]);
  external MarkerOptions get options;
  external set options(MarkerOptions value);
  external Handler? get dragging;
  external set dragging(Handler? value);
  external geojson.Feature<geojson.Point, P>? get feature;
  external set feature(geojson.Feature<geojson.Point, P>? value);
  external HTMLElement? get _shadow;
  external set _shadow(HTMLElement? value);
  @JS("toGeoJSON")
  external geojson.Feature<geojson.Point, P> toGeoJSON([dynamic /* num|bool */ precision]);
  @JS("getLatLng")
  external LatLng getLatLng();
  @JS("setLatLng")
  external dynamic setLatLng(LatLngExpression latlng);
  @JS("setZIndexOffset")
  external dynamic setZIndexOffset(num offset);
  @JS("getIcon")
  external dynamic /* Icon|DivIcon */ getIcon();
  @JS("setIcon")
  external dynamic setIcon(dynamic /* Icon|DivIcon */ icon);
  @JS("setOpacity")
  external dynamic setOpacity(num opacity);
  @JS("getElement")
  external HTMLElement? getElement();
}
@JS("marker")
external Marker<P> marker(LatLngExpression latlng, [MarkerOptions options]);
@JS("Browser.ie")
external bool ie;
@JS("Browser.ielt9")
external bool ielt9;
@JS("Browser.edge")
external bool edge;
@JS("Browser.webkit")
external bool webkit;
@JS("Browser.android")
external bool android;
@JS("Browser.android23")
external bool android23;
@JS("Browser.androidStock")
external bool androidStock;
@JS("Browser.opera")
external bool opera;
@JS("Browser.chrome")
external bool chrome;
@JS("Browser.gecko")
external bool gecko;
@JS("Browser.safari")
external bool safari;
@JS("Browser.opera12")
external bool opera12;
@JS("Browser.win")
external bool win;
@JS("Browser.ie3d")
external bool ie3d;
@JS("Browser.webkit3d")
external bool webkit3d;
@JS("Browser.gecko3d")
external bool gecko3d;
@JS("Browser.any3d")
external bool any3d;
@JS("Browser.mobile")
external bool mobile;
@JS("Browser.mobileWebkit")
external bool mobileWebkit;
@JS("Browser.mobileWebkit3d")
external bool mobileWebkit3d;
@JS("Browser.msPointer")
external bool msPointer;
@JS("Browser.pointer")
external bool pointer;
@JS("Browser.touch")
external bool touch;
@JS("Browser.mobileOpera")
external bool mobileOpera;
@JS("Browser.mobileGecko")
external bool mobileGecko;
@JS("Browser.retina")
external bool retina;
@JS("Browser.canvas")
external bool canvas;
@JS("Browser.svg")
external bool svg;
@JS("Browser.vml")
external bool vml;
@JS("Util.extend")
external dynamic extend_1(D dest, [S1 src]);
@JS("Util.extend")
external dynamic extend_2(D dest, S1 src1, S2 src2);
@JS("Util.extend")
external dynamic extend_3(D dest, S1 src1, S2 src2, S3 src3);
@JS("Util.extend")
external dynamic extend_4(dynamic dest, [/* rest */ List<dynamic> src]);
@JS("Util.create")
external dynamic create(dynamic? proto, [PropertyDescriptorMap properties]);
@JS("Util.bind")
external void Function() bind(void Function([List<dynamic>]) fn, [/* rest */ List<dynamic> obj]);
@JS("Util.stamp")
external num stamp(dynamic obj);
@JS("Util.throttle")
external void Function() throttle(void Function() fn, num time, dynamic context);
@JS("Util.wrapNum")
external num wrapNum(num num, List<num> range, [bool includeMax]);
@JS("Util.falseFn")
external bool falseFn();
@JS("Util.formatNum")
external num formatNum(num num, [dynamic /* num|bool */ digits]);
@JS("Util.trim")
external String trim(String str);
@JS("Util.splitWords")
external List<String> splitWords(String str);
@JS("Util.setOptions")
external dynamic setOptions(dynamic obj, dynamic options);
@JS("Util.getParamString")
external String getParamString(dynamic obj, [String existingUrl, bool uppercase]);
@JS("Util.template")
external String template(String str, dynamic data);
@JS("Util.isArray")
external bool isArray(dynamic obj);
@JS("Util.indexOf")
external num indexOf(List<dynamic> array, dynamic el);
@JS("Util.requestAnimFrame")
external num requestAnimFrame(void Function(num) fn, [dynamic context, bool immediate]);
@JS("Util.cancelAnimFrame")
external void cancelAnimFrame(num id);
@JS("Util.lastId")
external num lastId;
@JS("Util.emptyImageUrl")
external String emptyImageUrl;
@JS("extend")
external dynamic extend;
@JS("bind")
external dynamic bind;
@JS("stamp")
external dynamic stamp;
@JS("setOptions")
external dynamic setOptions;
@JS("noConflict")
external dynamic noConflict();
@JS()
@anonymous
class AnonInterface$15{
  external factory AnonInterface$15({required num x, required num y, required DOMRect boundingClientRect});
}
extension AnonInterface$15Extension on AnonInterface$15 {
  external num get x;
  external set x(num value);
  external num get y;
  external set y(num value);
  external DOMRect get boundingClientRect;
  external set boundingClientRect(DOMRect value);
}
@JS()
@anonymous
class AnonInterface$18{
  external factory AnonInterface$18();
}
extension AnonInterface$18Extension on AnonInterface$18 {
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}"
`;

exports[`TypeScript Definition Files Snapshot Tests > should transpile lib.dom.d.ts correctly > lib.dom.dart 1`] = `
"// Generated from lib.dom.d.ts
// Do not edit directly

@JS()
library lib_dom;
import 'package:js/js.dart';


@JS()
@anonymous
abstract class AddEventListenerOptions{}
extension AddEventListenerOptionsExtension on AddEventListenerOptions {
  external bool get once;
  external set once(bool value);
  external bool get passive;
  external set passive(bool value);
  external AbortSignal get signal;
  external set signal(AbortSignal value);
}
@JS()
@anonymous
abstract class AddressErrors{}
extension AddressErrorsExtension on AddressErrors {
  external String get addressLine;
  external set addressLine(String value);
  external String get city;
  external set city(String value);
  external String get country;
  external set country(String value);
  external String get dependentLocality;
  external set dependentLocality(String value);
  external String get organization;
  external set organization(String value);
  external String get phone;
  external set phone(String value);
  external String get postalCode;
  external set postalCode(String value);
  external String get recipient;
  external set recipient(String value);
  external String get region;
  external set region(String value);
  external String get sortingCode;
  external set sortingCode(String value);
}
@JS()
@anonymous
abstract class AesCbcParams{}
extension AesCbcParamsExtension on AesCbcParams {
  external BufferSource get iv;
  external set iv(BufferSource value);
}
@JS()
@anonymous
abstract class AesCtrParams{}
extension AesCtrParamsExtension on AesCtrParams {
  external BufferSource get counter;
  external set counter(BufferSource value);
  external num get length;
  external set length(num value);
}
@JS()
@anonymous
abstract class AesDerivedKeyParams{}
extension AesDerivedKeyParamsExtension on AesDerivedKeyParams {
  external num get length;
  external set length(num value);
}
@JS()
@anonymous
abstract class AesGcmParams{}
extension AesGcmParamsExtension on AesGcmParams {
  external BufferSource get additionalData;
  external set additionalData(BufferSource value);
  external BufferSource get iv;
  external set iv(BufferSource value);
  external num get tagLength;
  external set tagLength(num value);
}
@JS()
@anonymous
abstract class AesKeyAlgorithm{}
extension AesKeyAlgorithmExtension on AesKeyAlgorithm {
  external num get length;
  external set length(num value);
}
@JS()
@anonymous
abstract class AesKeyGenParams{}
extension AesKeyGenParamsExtension on AesKeyGenParams {
  external num get length;
  external set length(num value);
}
@JS()
@anonymous
abstract class Algorithm{}
extension AlgorithmExtension on Algorithm {
  external String get name;
  external set name(String value);
}
@JS()
@anonymous
abstract class AnalyserOptions{}
extension AnalyserOptionsExtension on AnalyserOptions {
  external num get fftSize;
  external set fftSize(num value);
  external num get maxDecibels;
  external set maxDecibels(num value);
  external num get minDecibels;
  external set minDecibels(num value);
  external num get smoothingTimeConstant;
  external set smoothingTimeConstant(num value);
}
@JS()
@anonymous
abstract class AnimationEventInit{}
extension AnimationEventInitExtension on AnimationEventInit {
  external String get animationName;
  external set animationName(String value);
  external num get elapsedTime;
  external set elapsedTime(num value);
  external String get pseudoElement;
  external set pseudoElement(String value);
}
@JS()
@anonymous
abstract class AnimationPlaybackEventInit{}
extension AnimationPlaybackEventInitExtension on AnimationPlaybackEventInit {
  external CSSNumberish? get currentTime;
  external set currentTime(CSSNumberish? value);
  external CSSNumberish? get timelineTime;
  external set timelineTime(CSSNumberish? value);
}
@JS()
@anonymous
abstract class AssignedNodesOptions{}
extension AssignedNodesOptionsExtension on AssignedNodesOptions {
  external bool get flatten;
  external set flatten(bool value);
}
@JS()
@anonymous
abstract class AudioBufferOptions{}
extension AudioBufferOptionsExtension on AudioBufferOptions {
  external num get length;
  external set length(num value);
  external num get numberOfChannels;
  external set numberOfChannels(num value);
  external num get sampleRate;
  external set sampleRate(num value);
}
@JS()
@anonymous
abstract class AudioBufferSourceOptions{}
extension AudioBufferSourceOptionsExtension on AudioBufferSourceOptions {
  external AudioBuffer? get buffer;
  external set buffer(AudioBuffer? value);
  external num get detune;
  external set detune(num value);
  external bool get loop;
  external set loop(bool value);
  external num get loopEnd;
  external set loopEnd(num value);
  external num get loopStart;
  external set loopStart(num value);
  external num get playbackRate;
  external set playbackRate(num value);
}
@JS()
@anonymous
abstract class AudioConfiguration{}
extension AudioConfigurationExtension on AudioConfiguration {
  external num get bitrate;
  external set bitrate(num value);
  external String get channels;
  external set channels(String value);
  external String get contentType;
  external set contentType(String value);
  external num get samplerate;
  external set samplerate(num value);
  external bool get spatialRendering;
  external set spatialRendering(bool value);
}
@JS()
@anonymous
abstract class AudioContextOptions{}
extension AudioContextOptionsExtension on AudioContextOptions {
  external dynamic /* AudioContextLatencyCategory|num */ get latencyHint;
  external set latencyHint(dynamic /* AudioContextLatencyCategory|num */ value);
  external num get sampleRate;
  external set sampleRate(num value);
}
@JS()
@anonymous
abstract class AudioDataCopyToOptions{}
extension AudioDataCopyToOptionsExtension on AudioDataCopyToOptions {
  external AudioSampleFormat get format;
  external set format(AudioSampleFormat value);
  external num get frameCount;
  external set frameCount(num value);
  external num get frameOffset;
  external set frameOffset(num value);
  external num get planeIndex;
  external set planeIndex(num value);
}
@JS()
@anonymous
abstract class AudioDataInit{}
extension AudioDataInitExtension on AudioDataInit {
  external BufferSource get data;
  external set data(BufferSource value);
  external AudioSampleFormat get format;
  external set format(AudioSampleFormat value);
  external num get numberOfChannels;
  external set numberOfChannels(num value);
  external num get numberOfFrames;
  external set numberOfFrames(num value);
  external num get sampleRate;
  external set sampleRate(num value);
  external num get timestamp;
  external set timestamp(num value);
  external List<ArrayBuffer> get transfer;
  external set transfer(List<ArrayBuffer> value);
}
@JS()
@anonymous
abstract class AudioDecoderConfig{}
extension AudioDecoderConfigExtension on AudioDecoderConfig {
  external String get codec;
  external set codec(String value);
  external BufferSource get description;
  external set description(BufferSource value);
  external num get numberOfChannels;
  external set numberOfChannels(num value);
  external num get sampleRate;
  external set sampleRate(num value);
}
@JS()
@anonymous
abstract class AudioDecoderInit{}
extension AudioDecoderInitExtension on AudioDecoderInit {
  external WebCodecsErrorCallback get error;
  external set error(WebCodecsErrorCallback value);
  external AudioDataOutputCallback get output;
  external set output(AudioDataOutputCallback value);
}
@JS()
@anonymous
abstract class AudioDecoderSupport{}
extension AudioDecoderSupportExtension on AudioDecoderSupport {
  external AudioDecoderConfig get config;
  external set config(AudioDecoderConfig value);
  external bool get supported;
  external set supported(bool value);
}
@JS()
@anonymous
abstract class AudioEncoderConfig{}
extension AudioEncoderConfigExtension on AudioEncoderConfig {
  external num get bitrate;
  external set bitrate(num value);
  external BitrateMode get bitrateMode;
  external set bitrateMode(BitrateMode value);
  external String get codec;
  external set codec(String value);
  external num get numberOfChannels;
  external set numberOfChannels(num value);
  external OpusEncoderConfig get opus;
  external set opus(OpusEncoderConfig value);
  external num get sampleRate;
  external set sampleRate(num value);
}
@JS()
@anonymous
abstract class AudioEncoderInit{}
extension AudioEncoderInitExtension on AudioEncoderInit {
  external WebCodecsErrorCallback get error;
  external set error(WebCodecsErrorCallback value);
  external EncodedAudioChunkOutputCallback get output;
  external set output(EncodedAudioChunkOutputCallback value);
}
@JS()
@anonymous
abstract class AudioEncoderSupport{}
extension AudioEncoderSupportExtension on AudioEncoderSupport {
  external AudioEncoderConfig get config;
  external set config(AudioEncoderConfig value);
  external bool get supported;
  external set supported(bool value);
}
@JS()
@anonymous
abstract class AudioNodeOptions{}
extension AudioNodeOptionsExtension on AudioNodeOptions {
  external num get channelCount;
  external set channelCount(num value);
  external ChannelCountMode get channelCountMode;
  external set channelCountMode(ChannelCountMode value);
  external ChannelInterpretation get channelInterpretation;
  external set channelInterpretation(ChannelInterpretation value);
}
@JS()
@anonymous
abstract class AudioProcessingEventInit{}
extension AudioProcessingEventInitExtension on AudioProcessingEventInit {
  external AudioBuffer get inputBuffer;
  external set inputBuffer(AudioBuffer value);
  external AudioBuffer get outputBuffer;
  external set outputBuffer(AudioBuffer value);
  external num get playbackTime;
  external set playbackTime(num value);
}
@JS()
@anonymous
abstract class AudioTimestamp{}
extension AudioTimestampExtension on AudioTimestamp {
  external num get contextTime;
  external set contextTime(num value);
  external DOMHighResTimeStamp get performanceTime;
  external set performanceTime(DOMHighResTimeStamp value);
}
@JS()
@anonymous
abstract class AudioWorkletNodeOptions{}
extension AudioWorkletNodeOptionsExtension on AudioWorkletNodeOptions {
  external num get numberOfInputs;
  external set numberOfInputs(num value);
  external num get numberOfOutputs;
  external set numberOfOutputs(num value);
  external List<num> get outputChannelCount;
  external set outputChannelCount(List<num> value);
  external Record<String, num> get parameterData;
  external set parameterData(Record<String, num> value);
  external dynamic get processorOptions;
  external set processorOptions(dynamic value);
}
@JS()
@anonymous
abstract class AuthenticationExtensionsClientInputs{}
extension AuthenticationExtensionsClientInputsExtension on AuthenticationExtensionsClientInputs {
  external String get appid;
  external set appid(String value);
  external bool get credProps;
  external set credProps(bool value);
  external bool get hmacCreateSecret;
  external set hmacCreateSecret(bool value);
  external bool get minPinLength;
  external set minPinLength(bool value);
  external AuthenticationExtensionsPRFInputs get prf;
  external set prf(AuthenticationExtensionsPRFInputs value);
}
@JS()
@anonymous
abstract class AuthenticationExtensionsClientInputsJSON{}
extension AuthenticationExtensionsClientInputsJSONExtension on AuthenticationExtensionsClientInputsJSON {
}
@JS()
@anonymous
abstract class AuthenticationExtensionsClientOutputs{}
extension AuthenticationExtensionsClientOutputsExtension on AuthenticationExtensionsClientOutputs {
  external bool get appid;
  external set appid(bool value);
  external CredentialPropertiesOutput get credProps;
  external set credProps(CredentialPropertiesOutput value);
  external bool get hmacCreateSecret;
  external set hmacCreateSecret(bool value);
  external AuthenticationExtensionsPRFOutputs get prf;
  external set prf(AuthenticationExtensionsPRFOutputs value);
}
@JS()
@anonymous
abstract class AuthenticationExtensionsPRFInputs{}
extension AuthenticationExtensionsPRFInputsExtension on AuthenticationExtensionsPRFInputs {
  external AuthenticationExtensionsPRFValues get eval;
  external set eval(AuthenticationExtensionsPRFValues value);
  external Record<String, AuthenticationExtensionsPRFValues> get evalByCredential;
  external set evalByCredential(Record<String, AuthenticationExtensionsPRFValues> value);
}
@JS()
@anonymous
abstract class AuthenticationExtensionsPRFOutputs{}
extension AuthenticationExtensionsPRFOutputsExtension on AuthenticationExtensionsPRFOutputs {
  external bool get enabled;
  external set enabled(bool value);
  external AuthenticationExtensionsPRFValues get results;
  external set results(AuthenticationExtensionsPRFValues value);
}
@JS()
@anonymous
abstract class AuthenticationExtensionsPRFValues{}
extension AuthenticationExtensionsPRFValuesExtension on AuthenticationExtensionsPRFValues {
  external BufferSource get first;
  external set first(BufferSource value);
  external BufferSource get second;
  external set second(BufferSource value);
}
@JS()
@anonymous
abstract class AuthenticatorSelectionCriteria{}
extension AuthenticatorSelectionCriteriaExtension on AuthenticatorSelectionCriteria {
  external AuthenticatorAttachment get authenticatorAttachment;
  external set authenticatorAttachment(AuthenticatorAttachment value);
  external bool get requireResidentKey;
  external set requireResidentKey(bool value);
  external ResidentKeyRequirement get residentKey;
  external set residentKey(ResidentKeyRequirement value);
  external UserVerificationRequirement get userVerification;
  external set userVerification(UserVerificationRequirement value);
}
@JS()
@anonymous
abstract class AvcEncoderConfig{}
extension AvcEncoderConfigExtension on AvcEncoderConfig {
  external AvcBitstreamFormat get format;
  external set format(AvcBitstreamFormat value);
}
@JS()
@anonymous
abstract class BiquadFilterOptions{}
extension BiquadFilterOptionsExtension on BiquadFilterOptions {
  external num get Q;
  external set Q(num value);
  external num get detune;
  external set detune(num value);
  external num get frequency;
  external set frequency(num value);
  external num get gain;
  external set gain(num value);
  external BiquadFilterType get type;
  external set type(BiquadFilterType value);
}
@JS()
@anonymous
abstract class BlobEventInit{}
extension BlobEventInitExtension on BlobEventInit {
  external Blob get data;
  external set data(Blob value);
  external DOMHighResTimeStamp get timecode;
  external set timecode(DOMHighResTimeStamp value);
}
@JS()
@anonymous
abstract class BlobPropertyBag{}
extension BlobPropertyBagExtension on BlobPropertyBag {
  external EndingType get endings;
  external set endings(EndingType value);
  external String get type;
  external set type(String value);
}
@JS()
@anonymous
abstract class CSSMatrixComponentOptions{}
extension CSSMatrixComponentOptionsExtension on CSSMatrixComponentOptions {
  external bool get is2D;
  external set is2D(bool value);
}
@JS()
@anonymous
abstract class CSSNumericType{}
extension CSSNumericTypeExtension on CSSNumericType {
  external num get angle;
  external set angle(num value);
  external num get flex;
  external set flex(num value);
  external num get frequency;
  external set frequency(num value);
  external num get length;
  external set length(num value);
  external num get percent;
  external set percent(num value);
  external CSSNumericBaseType get percentHint;
  external set percentHint(CSSNumericBaseType value);
  external num get resolution;
  external set resolution(num value);
  external num get time;
  external set time(num value);
}
@JS()
@anonymous
abstract class CSSStyleSheetInit{}
extension CSSStyleSheetInitExtension on CSSStyleSheetInit {
  external String get baseURL;
  external set baseURL(String value);
  external bool get disabled;
  external set disabled(bool value);
  external dynamic /* MediaList|String */ get media;
  external set media(dynamic /* MediaList|String */ value);
}
@JS()
@anonymous
abstract class CacheQueryOptions{}
extension CacheQueryOptionsExtension on CacheQueryOptions {
  external bool get ignoreMethod;
  external set ignoreMethod(bool value);
  external bool get ignoreSearch;
  external set ignoreSearch(bool value);
  external bool get ignoreVary;
  external set ignoreVary(bool value);
}
@JS()
@anonymous
abstract class CanvasRenderingContext2DSettings{}
extension CanvasRenderingContext2DSettingsExtension on CanvasRenderingContext2DSettings {
  external bool get alpha;
  external set alpha(bool value);
  external PredefinedColorSpace get colorSpace;
  external set colorSpace(PredefinedColorSpace value);
  external bool get desynchronized;
  external set desynchronized(bool value);
  external bool get willReadFrequently;
  external set willReadFrequently(bool value);
}
@JS()
@anonymous
abstract class CaretPositionFromPointOptions{}
extension CaretPositionFromPointOptionsExtension on CaretPositionFromPointOptions {
  external List<ShadowRoot> get shadowRoots;
  external set shadowRoots(List<ShadowRoot> value);
}
@JS()
@anonymous
abstract class ChannelMergerOptions{}
extension ChannelMergerOptionsExtension on ChannelMergerOptions {
  external num get numberOfInputs;
  external set numberOfInputs(num value);
}
@JS()
@anonymous
abstract class ChannelSplitterOptions{}
extension ChannelSplitterOptionsExtension on ChannelSplitterOptions {
  external num get numberOfOutputs;
  external set numberOfOutputs(num value);
}
@JS()
@anonymous
abstract class CheckVisibilityOptions{}
extension CheckVisibilityOptionsExtension on CheckVisibilityOptions {
  external bool get checkOpacity;
  external set checkOpacity(bool value);
  external bool get checkVisibilityCSS;
  external set checkVisibilityCSS(bool value);
  external bool get contentVisibilityAuto;
  external set contentVisibilityAuto(bool value);
  external bool get opacityProperty;
  external set opacityProperty(bool value);
  external bool get visibilityProperty;
  external set visibilityProperty(bool value);
}
@JS()
@anonymous
abstract class ClientQueryOptions{}
extension ClientQueryOptionsExtension on ClientQueryOptions {
  external bool get includeUncontrolled;
  external set includeUncontrolled(bool value);
  external ClientTypes get type;
  external set type(ClientTypes value);
}
@JS()
@anonymous
abstract class ClipboardEventInit{}
extension ClipboardEventInitExtension on ClipboardEventInit {
  external DataTransfer? get clipboardData;
  external set clipboardData(DataTransfer? value);
}
@JS()
@anonymous
abstract class ClipboardItemOptions{}
extension ClipboardItemOptionsExtension on ClipboardItemOptions {
  external PresentationStyle get presentationStyle;
  external set presentationStyle(PresentationStyle value);
}
@JS()
@anonymous
abstract class CloseEventInit{}
extension CloseEventInitExtension on CloseEventInit {
  external num get code;
  external set code(num value);
  external String get reason;
  external set reason(String value);
  external bool get wasClean;
  external set wasClean(bool value);
}
@JS()
@anonymous
abstract class CompositionEventInit{}
extension CompositionEventInitExtension on CompositionEventInit {
  external String get data;
  external set data(String value);
}
@JS()
@anonymous
abstract class ComputedEffectTiming{}
extension ComputedEffectTimingExtension on ComputedEffectTiming {
  external CSSNumberish get activeDuration;
  external set activeDuration(CSSNumberish value);
  external num? get currentIteration;
  external set currentIteration(num? value);
  external CSSNumberish get endTime;
  external set endTime(CSSNumberish value);
  external CSSNumberish? get localTime;
  external set localTime(CSSNumberish? value);
  external num? get progress;
  external set progress(num? value);
  external CSSNumberish get startTime;
  external set startTime(CSSNumberish value);
}
@JS()
@anonymous
abstract class ComputedKeyframe{}
extension ComputedKeyframeExtension on ComputedKeyframe {
  external CompositeOperationOrAuto get composite;
  external set composite(CompositeOperationOrAuto value);
  external num get computedOffset;
  external set computedOffset(num value);
  external String get easing;
  external set easing(String value);
  external num? get offset;
  external set offset(num? value);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS()
@anonymous
abstract class ConstantSourceOptions{}
extension ConstantSourceOptionsExtension on ConstantSourceOptions {
  external num get offset;
  external set offset(num value);
}
@JS()
@anonymous
abstract class ConstrainBooleanParameters{}
extension ConstrainBooleanParametersExtension on ConstrainBooleanParameters {
  external bool get exact;
  external set exact(bool value);
  external bool get ideal;
  external set ideal(bool value);
}
@JS()
@anonymous
abstract class ConstrainDOMStringParameters{}
extension ConstrainDOMStringParametersExtension on ConstrainDOMStringParameters {
  external dynamic /* String|List<String> */ get exact;
  external set exact(dynamic /* String|List<String> */ value);
  external dynamic /* String|List<String> */ get ideal;
  external set ideal(dynamic /* String|List<String> */ value);
}
@JS()
@anonymous
abstract class ConstrainDoubleRange{}
extension ConstrainDoubleRangeExtension on ConstrainDoubleRange {
  external num get exact;
  external set exact(num value);
  external num get ideal;
  external set ideal(num value);
}
@JS()
@anonymous
abstract class ConstrainULongRange{}
extension ConstrainULongRangeExtension on ConstrainULongRange {
  external num get exact;
  external set exact(num value);
  external num get ideal;
  external set ideal(num value);
}
@JS()
@anonymous
abstract class ContentVisibilityAutoStateChangeEventInit{}
extension ContentVisibilityAutoStateChangeEventInitExtension on ContentVisibilityAutoStateChangeEventInit {
  external bool get skipped;
  external set skipped(bool value);
}
@JS()
@anonymous
abstract class ConvolverOptions{}
extension ConvolverOptionsExtension on ConvolverOptions {
  external AudioBuffer? get buffer;
  external set buffer(AudioBuffer? value);
  external bool get disableNormalization;
  external set disableNormalization(bool value);
}
@JS()
@anonymous
abstract class CredentialCreationOptions{}
extension CredentialCreationOptionsExtension on CredentialCreationOptions {
  external PublicKeyCredentialCreationOptions get publicKey;
  external set publicKey(PublicKeyCredentialCreationOptions value);
  external AbortSignal get signal;
  external set signal(AbortSignal value);
}
@JS()
@anonymous
abstract class CredentialPropertiesOutput{}
extension CredentialPropertiesOutputExtension on CredentialPropertiesOutput {
  external bool get rk;
  external set rk(bool value);
}
@JS()
@anonymous
abstract class CredentialRequestOptions{}
extension CredentialRequestOptionsExtension on CredentialRequestOptions {
  external CredentialMediationRequirement get mediation;
  external set mediation(CredentialMediationRequirement value);
  external PublicKeyCredentialRequestOptions get publicKey;
  external set publicKey(PublicKeyCredentialRequestOptions value);
  external AbortSignal get signal;
  external set signal(AbortSignal value);
}
@JS()
@anonymous
abstract class CryptoKeyPair{}
extension CryptoKeyPairExtension on CryptoKeyPair {
  external CryptoKey get privateKey;
  external set privateKey(CryptoKey value);
  external CryptoKey get publicKey;
  external set publicKey(CryptoKey value);
}
@JS()
@anonymous
abstract class CustomEventInit{}
extension CustomEventInitExtension on CustomEventInit {
  external T get detail;
  external set detail(T value);
}
@JS()
@anonymous
abstract class DOMMatrix2DInit{}
extension DOMMatrix2DInitExtension on DOMMatrix2DInit {
  external num get a;
  external set a(num value);
  external num get b;
  external set b(num value);
  external num get c;
  external set c(num value);
  external num get d;
  external set d(num value);
  external num get e;
  external set e(num value);
  external num get f;
  external set f(num value);
  external num get m11;
  external set m11(num value);
  external num get m12;
  external set m12(num value);
  external num get m21;
  external set m21(num value);
  external num get m22;
  external set m22(num value);
  external num get m41;
  external set m41(num value);
  external num get m42;
  external set m42(num value);
}
@JS()
@anonymous
abstract class DOMMatrixInit{}
extension DOMMatrixInitExtension on DOMMatrixInit {
  external bool get is2D;
  external set is2D(bool value);
  external num get m13;
  external set m13(num value);
  external num get m14;
  external set m14(num value);
  external num get m23;
  external set m23(num value);
  external num get m24;
  external set m24(num value);
  external num get m31;
  external set m31(num value);
  external num get m32;
  external set m32(num value);
  external num get m33;
  external set m33(num value);
  external num get m34;
  external set m34(num value);
  external num get m43;
  external set m43(num value);
  external num get m44;
  external set m44(num value);
}
@JS()
@anonymous
abstract class DOMPointInit{}
extension DOMPointInitExtension on DOMPointInit {
  external num get w;
  external set w(num value);
  external num get x;
  external set x(num value);
  external num get y;
  external set y(num value);
  external num get z;
  external set z(num value);
}
@JS()
@anonymous
abstract class DOMQuadInit{}
extension DOMQuadInitExtension on DOMQuadInit {
  external DOMPointInit get p1;
  external set p1(DOMPointInit value);
  external DOMPointInit get p2;
  external set p2(DOMPointInit value);
  external DOMPointInit get p3;
  external set p3(DOMPointInit value);
  external DOMPointInit get p4;
  external set p4(DOMPointInit value);
}
@JS()
@anonymous
abstract class DOMRectInit{}
extension DOMRectInitExtension on DOMRectInit {
  external num get height;
  external set height(num value);
  external num get width;
  external set width(num value);
  external num get x;
  external set x(num value);
  external num get y;
  external set y(num value);
}
@JS()
@anonymous
abstract class DelayOptions{}
extension DelayOptionsExtension on DelayOptions {
  external num get delayTime;
  external set delayTime(num value);
  external num get maxDelayTime;
  external set maxDelayTime(num value);
}
@JS()
@anonymous
abstract class DeviceMotionEventAccelerationInit{}
extension DeviceMotionEventAccelerationInitExtension on DeviceMotionEventAccelerationInit {
  external num? get x;
  external set x(num? value);
  external num? get y;
  external set y(num? value);
  external num? get z;
  external set z(num? value);
}
@JS()
@anonymous
abstract class DeviceMotionEventInit{}
extension DeviceMotionEventInitExtension on DeviceMotionEventInit {
  external DeviceMotionEventAccelerationInit get acceleration;
  external set acceleration(DeviceMotionEventAccelerationInit value);
  external DeviceMotionEventAccelerationInit get accelerationIncludingGravity;
  external set accelerationIncludingGravity(DeviceMotionEventAccelerationInit value);
  external num get interval;
  external set interval(num value);
  external DeviceMotionEventRotationRateInit get rotationRate;
  external set rotationRate(DeviceMotionEventRotationRateInit value);
}
@JS()
@anonymous
abstract class DeviceMotionEventRotationRateInit{}
extension DeviceMotionEventRotationRateInitExtension on DeviceMotionEventRotationRateInit {
  external num? get alpha;
  external set alpha(num? value);
  external num? get beta;
  external set beta(num? value);
  external num? get gamma;
  external set gamma(num? value);
}
@JS()
@anonymous
abstract class DeviceOrientationEventInit{}
extension DeviceOrientationEventInitExtension on DeviceOrientationEventInit {
  external bool get absolute;
  external set absolute(bool value);
  external num? get alpha;
  external set alpha(num? value);
  external num? get beta;
  external set beta(num? value);
  external num? get gamma;
  external set gamma(num? value);
}
@JS()
@anonymous
abstract class DisplayMediaStreamOptions{}
extension DisplayMediaStreamOptionsExtension on DisplayMediaStreamOptions {
  external dynamic /* bool|MediaTrackConstraints */ get audio;
  external set audio(dynamic /* bool|MediaTrackConstraints */ value);
  external dynamic /* bool|MediaTrackConstraints */ get video;
  external set video(dynamic /* bool|MediaTrackConstraints */ value);
}
@JS()
@anonymous
abstract class DocumentTimelineOptions{}
extension DocumentTimelineOptionsExtension on DocumentTimelineOptions {
  external DOMHighResTimeStamp get originTime;
  external set originTime(DOMHighResTimeStamp value);
}
@JS()
@anonymous
abstract class DoubleRange{}
extension DoubleRangeExtension on DoubleRange {
  external num get max;
  external set max(num value);
  external num get min;
  external set min(num value);
}
@JS()
@anonymous
abstract class DragEventInit{}
extension DragEventInitExtension on DragEventInit {
  external DataTransfer? get dataTransfer;
  external set dataTransfer(DataTransfer? value);
}
@JS()
@anonymous
abstract class DynamicsCompressorOptions{}
extension DynamicsCompressorOptionsExtension on DynamicsCompressorOptions {
  external num get attack;
  external set attack(num value);
  external num get knee;
  external set knee(num value);
  external num get ratio;
  external set ratio(num value);
  external num get release;
  external set release(num value);
  external num get threshold;
  external set threshold(num value);
}
@JS()
@anonymous
abstract class EcKeyAlgorithm{}
extension EcKeyAlgorithmExtension on EcKeyAlgorithm {
  external NamedCurve get namedCurve;
  external set namedCurve(NamedCurve value);
}
@JS()
@anonymous
abstract class EcKeyGenParams{}
extension EcKeyGenParamsExtension on EcKeyGenParams {
  external NamedCurve get namedCurve;
  external set namedCurve(NamedCurve value);
}
@JS()
@anonymous
abstract class EcKeyImportParams{}
extension EcKeyImportParamsExtension on EcKeyImportParams {
  external NamedCurve get namedCurve;
  external set namedCurve(NamedCurve value);
}
@JS()
@anonymous
abstract class EcdhKeyDeriveParams{}
extension EcdhKeyDeriveParamsExtension on EcdhKeyDeriveParams {
  external CryptoKey get public;
  external set public(CryptoKey value);
}
@JS()
@anonymous
abstract class EcdsaParams{}
extension EcdsaParamsExtension on EcdsaParams {
  external HashAlgorithmIdentifier get hash;
  external set hash(HashAlgorithmIdentifier value);
}
@JS()
@anonymous
abstract class EffectTiming{}
extension EffectTimingExtension on EffectTiming {
  external num get delay;
  external set delay(num value);
  external PlaybackDirection get direction;
  external set direction(PlaybackDirection value);
  external dynamic /* num|CSSNumericValue|String */ get duration;
  external set duration(dynamic /* num|CSSNumericValue|String */ value);
  external String get easing;
  external set easing(String value);
  external num get endDelay;
  external set endDelay(num value);
  external FillMode get fill;
  external set fill(FillMode value);
  external num get iterationStart;
  external set iterationStart(num value);
  external num get iterations;
  external set iterations(num value);
  external num get playbackRate;
  external set playbackRate(num value);
}
@JS()
@anonymous
abstract class ElementCreationOptions{}
extension ElementCreationOptionsExtension on ElementCreationOptions {
  external String get is;
  external set is(String value);
}
@JS()
@anonymous
abstract class ElementDefinitionOptions{}
extension ElementDefinitionOptionsExtension on ElementDefinitionOptions {
  external String get extends;
  external set extends(String value);
}
@JS()
@anonymous
abstract class EncodedAudioChunkInit{}
extension EncodedAudioChunkInitExtension on EncodedAudioChunkInit {
  external AllowSharedBufferSource get data;
  external set data(AllowSharedBufferSource value);
  external num get duration;
  external set duration(num value);
  external num get timestamp;
  external set timestamp(num value);
  external List<ArrayBuffer> get transfer;
  external set transfer(List<ArrayBuffer> value);
  external EncodedAudioChunkType get type;
  external set type(EncodedAudioChunkType value);
}
@JS()
@anonymous
abstract class EncodedAudioChunkMetadata{}
extension EncodedAudioChunkMetadataExtension on EncodedAudioChunkMetadata {
  external AudioDecoderConfig get decoderConfig;
  external set decoderConfig(AudioDecoderConfig value);
}
@JS()
@anonymous
abstract class EncodedVideoChunkInit{}
extension EncodedVideoChunkInitExtension on EncodedVideoChunkInit {
  external AllowSharedBufferSource get data;
  external set data(AllowSharedBufferSource value);
  external num get duration;
  external set duration(num value);
  external num get timestamp;
  external set timestamp(num value);
  external EncodedVideoChunkType get type;
  external set type(EncodedVideoChunkType value);
}
@JS()
@anonymous
abstract class EncodedVideoChunkMetadata{}
extension EncodedVideoChunkMetadataExtension on EncodedVideoChunkMetadata {
  external VideoDecoderConfig get decoderConfig;
  external set decoderConfig(VideoDecoderConfig value);
}
@JS()
@anonymous
abstract class ErrorEventInit{}
extension ErrorEventInitExtension on ErrorEventInit {
  external num get colno;
  external set colno(num value);
  external dynamic get error;
  external set error(dynamic value);
  external String get filename;
  external set filename(String value);
  external num get lineno;
  external set lineno(num value);
  external String get message;
  external set message(String value);
}
@JS()
@anonymous
abstract class EventInit{}
extension EventInitExtension on EventInit {
  external bool get bubbles;
  external set bubbles(bool value);
  external bool get cancelable;
  external set cancelable(bool value);
  external bool get composed;
  external set composed(bool value);
}
@JS()
@anonymous
abstract class EventListenerOptions{}
extension EventListenerOptionsExtension on EventListenerOptions {
  external bool get capture;
  external set capture(bool value);
}
@JS()
@anonymous
abstract class EventModifierInit{}
extension EventModifierInitExtension on EventModifierInit {
  external bool get altKey;
  external set altKey(bool value);
  external bool get ctrlKey;
  external set ctrlKey(bool value);
  external bool get metaKey;
  external set metaKey(bool value);
  external bool get modifierAltGraph;
  external set modifierAltGraph(bool value);
  external bool get modifierCapsLock;
  external set modifierCapsLock(bool value);
  external bool get modifierFn;
  external set modifierFn(bool value);
  external bool get modifierFnLock;
  external set modifierFnLock(bool value);
  external bool get modifierHyper;
  external set modifierHyper(bool value);
  external bool get modifierNumLock;
  external set modifierNumLock(bool value);
  external bool get modifierScrollLock;
  external set modifierScrollLock(bool value);
  external bool get modifierSuper;
  external set modifierSuper(bool value);
  external bool get modifierSymbol;
  external set modifierSymbol(bool value);
  external bool get modifierSymbolLock;
  external set modifierSymbolLock(bool value);
  external bool get shiftKey;
  external set shiftKey(bool value);
}
@JS()
@anonymous
abstract class EventSourceInit{}
extension EventSourceInitExtension on EventSourceInit {
  external bool get withCredentials;
  external set withCredentials(bool value);
}
@JS()
@anonymous
abstract class FilePropertyBag{}
extension FilePropertyBagExtension on FilePropertyBag {
  external num get lastModified;
  external set lastModified(num value);
}
@JS()
@anonymous
abstract class FileSystemCreateWritableOptions{}
extension FileSystemCreateWritableOptionsExtension on FileSystemCreateWritableOptions {
  external bool get keepExistingData;
  external set keepExistingData(bool value);
}
@JS()
@anonymous
abstract class FileSystemFlags{}
extension FileSystemFlagsExtension on FileSystemFlags {
  external bool get create;
  external set create(bool value);
  external bool get exclusive;
  external set exclusive(bool value);
}
@JS()
@anonymous
abstract class FileSystemGetDirectoryOptions{}
extension FileSystemGetDirectoryOptionsExtension on FileSystemGetDirectoryOptions {
  external bool get create;
  external set create(bool value);
}
@JS()
@anonymous
abstract class FileSystemGetFileOptions{}
extension FileSystemGetFileOptionsExtension on FileSystemGetFileOptions {
  external bool get create;
  external set create(bool value);
}
@JS()
@anonymous
abstract class FileSystemRemoveOptions{}
extension FileSystemRemoveOptionsExtension on FileSystemRemoveOptions {
  external bool get recursive;
  external set recursive(bool value);
}
@JS()
@anonymous
abstract class FocusEventInit{}
extension FocusEventInitExtension on FocusEventInit {
  external EventTarget? get relatedTarget;
  external set relatedTarget(EventTarget? value);
}
@JS()
@anonymous
abstract class FocusOptions{}
extension FocusOptionsExtension on FocusOptions {
  external bool get preventScroll;
  external set preventScroll(bool value);
}
@JS()
@anonymous
abstract class FontFaceDescriptors{}
extension FontFaceDescriptorsExtension on FontFaceDescriptors {
  external String get ascentOverride;
  external set ascentOverride(String value);
  external String get descentOverride;
  external set descentOverride(String value);
  external FontDisplay get display;
  external set display(FontDisplay value);
  external String get featureSettings;
  external set featureSettings(String value);
  external String get lineGapOverride;
  external set lineGapOverride(String value);
  external String get stretch;
  external set stretch(String value);
  external String get style;
  external set style(String value);
  external String get unicodeRange;
  external set unicodeRange(String value);
  external String get weight;
  external set weight(String value);
}
@JS()
@anonymous
abstract class FontFaceSetLoadEventInit{}
extension FontFaceSetLoadEventInitExtension on FontFaceSetLoadEventInit {
  external List<FontFace> get fontfaces;
  external set fontfaces(List<FontFace> value);
}
@JS()
@anonymous
abstract class FormDataEventInit{}
extension FormDataEventInitExtension on FormDataEventInit {
  external FormData get formData;
  external set formData(FormData value);
}
@JS()
@anonymous
abstract class FullscreenOptions{}
extension FullscreenOptionsExtension on FullscreenOptions {
  external FullscreenNavigationUI get navigationUI;
  external set navigationUI(FullscreenNavigationUI value);
}
@JS()
@anonymous
abstract class GainOptions{}
extension GainOptionsExtension on GainOptions {
  external num get gain;
  external set gain(num value);
}
@JS()
@anonymous
abstract class GamepadEffectParameters{}
extension GamepadEffectParametersExtension on GamepadEffectParameters {
  external num get duration;
  external set duration(num value);
  external num get leftTrigger;
  external set leftTrigger(num value);
  external num get rightTrigger;
  external set rightTrigger(num value);
  external num get startDelay;
  external set startDelay(num value);
  external num get strongMagnitude;
  external set strongMagnitude(num value);
  external num get weakMagnitude;
  external set weakMagnitude(num value);
}
@JS()
@anonymous
abstract class GamepadEventInit{}
extension GamepadEventInitExtension on GamepadEventInit {
  external Gamepad get gamepad;
  external set gamepad(Gamepad value);
}
@JS()
@anonymous
abstract class GetAnimationsOptions{}
extension GetAnimationsOptionsExtension on GetAnimationsOptions {
  external bool get subtree;
  external set subtree(bool value);
}
@JS()
@anonymous
abstract class GetHTMLOptions{}
extension GetHTMLOptionsExtension on GetHTMLOptions {
  external bool get serializableShadowRoots;
  external set serializableShadowRoots(bool value);
  external List<ShadowRoot> get shadowRoots;
  external set shadowRoots(List<ShadowRoot> value);
}
@JS()
@anonymous
abstract class GetNotificationOptions{}
extension GetNotificationOptionsExtension on GetNotificationOptions {
  external String get tag;
  external set tag(String value);
}
@JS()
@anonymous
abstract class GetRootNodeOptions{}
extension GetRootNodeOptionsExtension on GetRootNodeOptions {
  external bool get composed;
  external set composed(bool value);
}
@JS()
@anonymous
abstract class HashChangeEventInit{}
extension HashChangeEventInitExtension on HashChangeEventInit {
  external String get newURL;
  external set newURL(String value);
  external String get oldURL;
  external set oldURL(String value);
}
@JS()
@anonymous
abstract class HkdfParams{}
extension HkdfParamsExtension on HkdfParams {
  external HashAlgorithmIdentifier get hash;
  external set hash(HashAlgorithmIdentifier value);
  external BufferSource get info;
  external set info(BufferSource value);
  external BufferSource get salt;
  external set salt(BufferSource value);
}
@JS()
@anonymous
abstract class HmacImportParams{}
extension HmacImportParamsExtension on HmacImportParams {
  external HashAlgorithmIdentifier get hash;
  external set hash(HashAlgorithmIdentifier value);
  external num get length;
  external set length(num value);
}
@JS()
@anonymous
abstract class HmacKeyAlgorithm{}
extension HmacKeyAlgorithmExtension on HmacKeyAlgorithm {
  external KeyAlgorithm get hash;
  external set hash(KeyAlgorithm value);
  external num get length;
  external set length(num value);
}
@JS()
@anonymous
abstract class HmacKeyGenParams{}
extension HmacKeyGenParamsExtension on HmacKeyGenParams {
  external HashAlgorithmIdentifier get hash;
  external set hash(HashAlgorithmIdentifier value);
  external num get length;
  external set length(num value);
}
@JS()
@anonymous
abstract class IDBDatabaseInfo{}
extension IDBDatabaseInfoExtension on IDBDatabaseInfo {
  external String get name;
  external set name(String value);
  external num get version;
  external set version(num value);
}
@JS()
@anonymous
abstract class IDBIndexParameters{}
extension IDBIndexParametersExtension on IDBIndexParameters {
  external bool get multiEntry;
  external set multiEntry(bool value);
  external bool get unique;
  external set unique(bool value);
}
@JS()
@anonymous
abstract class IDBObjectStoreParameters{}
extension IDBObjectStoreParametersExtension on IDBObjectStoreParameters {
  external bool get autoIncrement;
  external set autoIncrement(bool value);
  external dynamic /* String|List<String> */ get keyPath;
  external set keyPath(dynamic /* String|List<String> */ value);
}
@JS()
@anonymous
abstract class IDBTransactionOptions{}
extension IDBTransactionOptionsExtension on IDBTransactionOptions {
  external IDBTransactionDurability get durability;
  external set durability(IDBTransactionDurability value);
}
@JS()
@anonymous
abstract class IDBVersionChangeEventInit{}
extension IDBVersionChangeEventInitExtension on IDBVersionChangeEventInit {
  external num? get newVersion;
  external set newVersion(num? value);
  external num get oldVersion;
  external set oldVersion(num value);
}
@JS()
@anonymous
abstract class IIRFilterOptions{}
extension IIRFilterOptionsExtension on IIRFilterOptions {
  external List<num> get feedback;
  external set feedback(List<num> value);
  external List<num> get feedforward;
  external set feedforward(List<num> value);
}
@JS()
@anonymous
abstract class IdleRequestOptions{}
extension IdleRequestOptionsExtension on IdleRequestOptions {
  external num get timeout;
  external set timeout(num value);
}
@JS()
@anonymous
abstract class ImageBitmapOptions{}
extension ImageBitmapOptionsExtension on ImageBitmapOptions {
  external ColorSpaceConversion get colorSpaceConversion;
  external set colorSpaceConversion(ColorSpaceConversion value);
  external ImageOrientation get imageOrientation;
  external set imageOrientation(ImageOrientation value);
  external PremultiplyAlpha get premultiplyAlpha;
  external set premultiplyAlpha(PremultiplyAlpha value);
  external num get resizeHeight;
  external set resizeHeight(num value);
  external ResizeQuality get resizeQuality;
  external set resizeQuality(ResizeQuality value);
  external num get resizeWidth;
  external set resizeWidth(num value);
}
@JS()
@anonymous
abstract class ImageBitmapRenderingContextSettings{}
extension ImageBitmapRenderingContextSettingsExtension on ImageBitmapRenderingContextSettings {
  external bool get alpha;
  external set alpha(bool value);
}
@JS()
@anonymous
abstract class ImageDataSettings{}
extension ImageDataSettingsExtension on ImageDataSettings {
  external PredefinedColorSpace get colorSpace;
  external set colorSpace(PredefinedColorSpace value);
}
@JS()
@anonymous
abstract class ImageDecodeOptions{}
extension ImageDecodeOptionsExtension on ImageDecodeOptions {
  external bool get completeFramesOnly;
  external set completeFramesOnly(bool value);
  external num get frameIndex;
  external set frameIndex(num value);
}
@JS()
@anonymous
abstract class ImageDecodeResult{}
extension ImageDecodeResultExtension on ImageDecodeResult {
  external bool get complete;
  external set complete(bool value);
  external VideoFrame get image;
  external set image(VideoFrame value);
}
@JS()
@anonymous
abstract class ImageDecoderInit{}
extension ImageDecoderInitExtension on ImageDecoderInit {
  external ColorSpaceConversion get colorSpaceConversion;
  external set colorSpaceConversion(ColorSpaceConversion value);
  external ImageBufferSource get data;
  external set data(ImageBufferSource value);
  external num get desiredHeight;
  external set desiredHeight(num value);
  external num get desiredWidth;
  external set desiredWidth(num value);
  external bool get preferAnimation;
  external set preferAnimation(bool value);
  external List<ArrayBuffer> get transfer;
  external set transfer(List<ArrayBuffer> value);
  external String get type;
  external set type(String value);
}
@JS()
@anonymous
abstract class ImageEncodeOptions{}
extension ImageEncodeOptionsExtension on ImageEncodeOptions {
  external num get quality;
  external set quality(num value);
  external String get type;
  external set type(String value);
}
@JS()
@anonymous
abstract class InputEventInit{}
extension InputEventInitExtension on InputEventInit {
  external String? get data;
  external set data(String? value);
  external DataTransfer? get dataTransfer;
  external set dataTransfer(DataTransfer? value);
  external String get inputType;
  external set inputType(String value);
  external bool get isComposing;
  external set isComposing(bool value);
  external List<StaticRange> get targetRanges;
  external set targetRanges(List<StaticRange> value);
}
@JS()
@anonymous
abstract class IntersectionObserverInit{}
extension IntersectionObserverInitExtension on IntersectionObserverInit {
  external dynamic /* Element|Document */ get root;
  external set root(dynamic /* Element|Document */ value);
  external String get rootMargin;
  external set rootMargin(String value);
  external dynamic /* num|List<num> */ get threshold;
  external set threshold(dynamic /* num|List<num> */ value);
}
@JS()
@anonymous
abstract class JsonWebKey{}
extension JsonWebKeyExtension on JsonWebKey {
  external String get alg;
  external set alg(String value);
  external String get crv;
  external set crv(String value);
  external String get d;
  external set d(String value);
  external String get dp;
  external set dp(String value);
  external String get dq;
  external set dq(String value);
  external String get e;
  external set e(String value);
  external bool get ext;
  external set ext(bool value);
  external String get k;
  external set k(String value);
  external List<String> get key_ops;
  external set key_ops(List<String> value);
  external String get kty;
  external set kty(String value);
  external String get n;
  external set n(String value);
  external List<RsaOtherPrimesInfo> get oth;
  external set oth(List<RsaOtherPrimesInfo> value);
  external String get p;
  external set p(String value);
  external String get q;
  external set q(String value);
  external String get qi;
  external set qi(String value);
  external String get use;
  external set use(String value);
  external String get x;
  external set x(String value);
  external String get y;
  external set y(String value);
}
@JS()
@anonymous
abstract class KeyAlgorithm{}
extension KeyAlgorithmExtension on KeyAlgorithm {
  external String get name;
  external set name(String value);
}
@JS()
@anonymous
abstract class KeyboardEventInit{}
extension KeyboardEventInitExtension on KeyboardEventInit {
  external num get charCode;
  external set charCode(num value);
  external String get code;
  external set code(String value);
  external bool get isComposing;
  external set isComposing(bool value);
  external String get key;
  external set key(String value);
  external num get keyCode;
  external set keyCode(num value);
  external num get location;
  external set location(num value);
  external bool get repeat;
  external set repeat(bool value);
}
@JS()
@anonymous
abstract class Keyframe{}
extension KeyframeExtension on Keyframe {
  external CompositeOperationOrAuto get composite;
  external set composite(CompositeOperationOrAuto value);
  external String get easing;
  external set easing(String value);
  external num? get offset;
  external set offset(num? value);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS()
@anonymous
abstract class KeyframeAnimationOptions{}
extension KeyframeAnimationOptionsExtension on KeyframeAnimationOptions {
  external String get id;
  external set id(String value);
  external AnimationTimeline? get timeline;
  external set timeline(AnimationTimeline? value);
}
@JS()
@anonymous
abstract class KeyframeEffectOptions{}
extension KeyframeEffectOptionsExtension on KeyframeEffectOptions {
  external CompositeOperation get composite;
  external set composite(CompositeOperation value);
  external IterationCompositeOperation get iterationComposite;
  external set iterationComposite(IterationCompositeOperation value);
  external String? get pseudoElement;
  external set pseudoElement(String? value);
}
@JS()
@anonymous
abstract class LockInfo{}
extension LockInfoExtension on LockInfo {
  external String get clientId;
  external set clientId(String value);
  external LockMode get mode;
  external set mode(LockMode value);
  external String get name;
  external set name(String value);
}
@JS()
@anonymous
abstract class LockManagerSnapshot{}
extension LockManagerSnapshotExtension on LockManagerSnapshot {
  external List<LockInfo> get held;
  external set held(List<LockInfo> value);
  external List<LockInfo> get pending;
  external set pending(List<LockInfo> value);
}
@JS()
@anonymous
abstract class LockOptions{}
extension LockOptionsExtension on LockOptions {
  external bool get ifAvailable;
  external set ifAvailable(bool value);
  external LockMode get mode;
  external set mode(LockMode value);
  external AbortSignal get signal;
  external set signal(AbortSignal value);
  external bool get steal;
  external set steal(bool value);
}
@JS()
@anonymous
abstract class MIDIConnectionEventInit{}
extension MIDIConnectionEventInitExtension on MIDIConnectionEventInit {
  external MIDIPort get port;
  external set port(MIDIPort value);
}
@JS()
@anonymous
abstract class MIDIMessageEventInit{}
extension MIDIMessageEventInitExtension on MIDIMessageEventInit {
  external Uint8Array get data;
  external set data(Uint8Array value);
}
@JS()
@anonymous
abstract class MIDIOptions{}
extension MIDIOptionsExtension on MIDIOptions {
  external bool get software;
  external set software(bool value);
  external bool get sysex;
  external set sysex(bool value);
}
@JS()
@anonymous
abstract class MediaCapabilitiesDecodingInfo{}
extension MediaCapabilitiesDecodingInfoExtension on MediaCapabilitiesDecodingInfo {
  external MediaDecodingConfiguration get configuration;
  external set configuration(MediaDecodingConfiguration value);
}
@JS()
@anonymous
abstract class MediaCapabilitiesEncodingInfo{}
extension MediaCapabilitiesEncodingInfoExtension on MediaCapabilitiesEncodingInfo {
  external MediaEncodingConfiguration get configuration;
  external set configuration(MediaEncodingConfiguration value);
}
@JS()
@anonymous
abstract class MediaCapabilitiesInfo{}
extension MediaCapabilitiesInfoExtension on MediaCapabilitiesInfo {
  external bool get powerEfficient;
  external set powerEfficient(bool value);
  external bool get smooth;
  external set smooth(bool value);
  external bool get supported;
  external set supported(bool value);
}
@JS()
@anonymous
abstract class MediaConfiguration{}
extension MediaConfigurationExtension on MediaConfiguration {
  external AudioConfiguration get audio;
  external set audio(AudioConfiguration value);
  external VideoConfiguration get video;
  external set video(VideoConfiguration value);
}
@JS()
@anonymous
abstract class MediaDecodingConfiguration{}
extension MediaDecodingConfigurationExtension on MediaDecodingConfiguration {
  external MediaDecodingType get type;
  external set type(MediaDecodingType value);
}
@JS()
@anonymous
abstract class MediaElementAudioSourceOptions{}
extension MediaElementAudioSourceOptionsExtension on MediaElementAudioSourceOptions {
  external HTMLMediaElement get mediaElement;
  external set mediaElement(HTMLMediaElement value);
}
@JS()
@anonymous
abstract class MediaEncodingConfiguration{}
extension MediaEncodingConfigurationExtension on MediaEncodingConfiguration {
  external MediaEncodingType get type;
  external set type(MediaEncodingType value);
}
@JS()
@anonymous
abstract class MediaEncryptedEventInit{}
extension MediaEncryptedEventInitExtension on MediaEncryptedEventInit {
  external ArrayBuffer? get initData;
  external set initData(ArrayBuffer? value);
  external String get initDataType;
  external set initDataType(String value);
}
@JS()
@anonymous
abstract class MediaImage{}
extension MediaImageExtension on MediaImage {
  external String get sizes;
  external set sizes(String value);
  external String get src;
  external set src(String value);
  external String get type;
  external set type(String value);
}
@JS()
@anonymous
abstract class MediaKeyMessageEventInit{}
extension MediaKeyMessageEventInitExtension on MediaKeyMessageEventInit {
  external ArrayBuffer get message;
  external set message(ArrayBuffer value);
  external MediaKeyMessageType get messageType;
  external set messageType(MediaKeyMessageType value);
}
@JS()
@anonymous
abstract class MediaKeySystemConfiguration{}
extension MediaKeySystemConfigurationExtension on MediaKeySystemConfiguration {
  external List<MediaKeySystemMediaCapability> get audioCapabilities;
  external set audioCapabilities(List<MediaKeySystemMediaCapability> value);
  external MediaKeysRequirement get distinctiveIdentifier;
  external set distinctiveIdentifier(MediaKeysRequirement value);
  external List<String> get initDataTypes;
  external set initDataTypes(List<String> value);
  external String get label;
  external set label(String value);
  external MediaKeysRequirement get persistentState;
  external set persistentState(MediaKeysRequirement value);
  external List<String> get sessionTypes;
  external set sessionTypes(List<String> value);
  external List<MediaKeySystemMediaCapability> get videoCapabilities;
  external set videoCapabilities(List<MediaKeySystemMediaCapability> value);
}
@JS()
@anonymous
abstract class MediaKeySystemMediaCapability{}
extension MediaKeySystemMediaCapabilityExtension on MediaKeySystemMediaCapability {
  external String get contentType;
  external set contentType(String value);
  external String? get encryptionScheme;
  external set encryptionScheme(String? value);
  external String get robustness;
  external set robustness(String value);
}
@JS()
@anonymous
abstract class MediaKeysPolicy{}
extension MediaKeysPolicyExtension on MediaKeysPolicy {
  external String get minHdcpVersion;
  external set minHdcpVersion(String value);
}
@JS()
@anonymous
abstract class MediaMetadataInit{}
extension MediaMetadataInitExtension on MediaMetadataInit {
  external String get album;
  external set album(String value);
  external String get artist;
  external set artist(String value);
  external List<MediaImage> get artwork;
  external set artwork(List<MediaImage> value);
  external String get title;
  external set title(String value);
}
@JS()
@anonymous
abstract class MediaPositionState{}
extension MediaPositionStateExtension on MediaPositionState {
  external num get duration;
  external set duration(num value);
  external num get playbackRate;
  external set playbackRate(num value);
  external num get position;
  external set position(num value);
}
@JS()
@anonymous
abstract class MediaQueryListEventInit{}
extension MediaQueryListEventInitExtension on MediaQueryListEventInit {
  external bool get matches;
  external set matches(bool value);
  external String get media;
  external set media(String value);
}
@JS()
@anonymous
abstract class MediaRecorderOptions{}
extension MediaRecorderOptionsExtension on MediaRecorderOptions {
  external num get audioBitsPerSecond;
  external set audioBitsPerSecond(num value);
  external num get bitsPerSecond;
  external set bitsPerSecond(num value);
  external String get mimeType;
  external set mimeType(String value);
  external num get videoBitsPerSecond;
  external set videoBitsPerSecond(num value);
}
@JS()
@anonymous
abstract class MediaSessionActionDetails{}
extension MediaSessionActionDetailsExtension on MediaSessionActionDetails {
  external MediaSessionAction get action;
  external set action(MediaSessionAction value);
  external bool get fastSeek;
  external set fastSeek(bool value);
  external num get seekOffset;
  external set seekOffset(num value);
  external num get seekTime;
  external set seekTime(num value);
}
@JS()
@anonymous
abstract class MediaStreamAudioSourceOptions{}
extension MediaStreamAudioSourceOptionsExtension on MediaStreamAudioSourceOptions {
  external MediaStream get mediaStream;
  external set mediaStream(MediaStream value);
}
@JS()
@anonymous
abstract class MediaStreamConstraints{}
extension MediaStreamConstraintsExtension on MediaStreamConstraints {
  external dynamic /* bool|MediaTrackConstraints */ get audio;
  external set audio(dynamic /* bool|MediaTrackConstraints */ value);
  external String get peerIdentity;
  external set peerIdentity(String value);
  external bool get preferCurrentTab;
  external set preferCurrentTab(bool value);
  external dynamic /* bool|MediaTrackConstraints */ get video;
  external set video(dynamic /* bool|MediaTrackConstraints */ value);
}
@JS()
@anonymous
abstract class MediaStreamTrackEventInit{}
extension MediaStreamTrackEventInitExtension on MediaStreamTrackEventInit {
  external MediaStreamTrack get track;
  external set track(MediaStreamTrack value);
}
@JS()
@anonymous
abstract class MediaTrackCapabilities{}
extension MediaTrackCapabilitiesExtension on MediaTrackCapabilities {
  external DoubleRange get aspectRatio;
  external set aspectRatio(DoubleRange value);
  external List<bool> get autoGainControl;
  external set autoGainControl(List<bool> value);
  external List<bool> get backgroundBlur;
  external set backgroundBlur(List<bool> value);
  external ULongRange get channelCount;
  external set channelCount(ULongRange value);
  external String get deviceId;
  external set deviceId(String value);
  external String get displaySurface;
  external set displaySurface(String value);
  external List<bool> get echoCancellation;
  external set echoCancellation(List<bool> value);
  external List<String> get facingMode;
  external set facingMode(List<String> value);
  external DoubleRange get frameRate;
  external set frameRate(DoubleRange value);
  external String get groupId;
  external set groupId(String value);
  external ULongRange get height;
  external set height(ULongRange value);
  external List<bool> get noiseSuppression;
  external set noiseSuppression(List<bool> value);
  external ULongRange get sampleRate;
  external set sampleRate(ULongRange value);
  external ULongRange get sampleSize;
  external set sampleSize(ULongRange value);
  external ULongRange get width;
  external set width(ULongRange value);
}
@JS()
@anonymous
abstract class MediaTrackConstraintSet{}
extension MediaTrackConstraintSetExtension on MediaTrackConstraintSet {
  external ConstrainDouble get aspectRatio;
  external set aspectRatio(ConstrainDouble value);
  external ConstrainBoolean get autoGainControl;
  external set autoGainControl(ConstrainBoolean value);
  external ConstrainBoolean get backgroundBlur;
  external set backgroundBlur(ConstrainBoolean value);
  external ConstrainULong get channelCount;
  external set channelCount(ConstrainULong value);
  external ConstrainDOMString get deviceId;
  external set deviceId(ConstrainDOMString value);
  external ConstrainDOMString get displaySurface;
  external set displaySurface(ConstrainDOMString value);
  external ConstrainBoolean get echoCancellation;
  external set echoCancellation(ConstrainBoolean value);
  external ConstrainDOMString get facingMode;
  external set facingMode(ConstrainDOMString value);
  external ConstrainDouble get frameRate;
  external set frameRate(ConstrainDouble value);
  external ConstrainDOMString get groupId;
  external set groupId(ConstrainDOMString value);
  external ConstrainULong get height;
  external set height(ConstrainULong value);
  external ConstrainBoolean get noiseSuppression;
  external set noiseSuppression(ConstrainBoolean value);
  external ConstrainULong get sampleRate;
  external set sampleRate(ConstrainULong value);
  external ConstrainULong get sampleSize;
  external set sampleSize(ConstrainULong value);
  external ConstrainULong get width;
  external set width(ConstrainULong value);
}
@JS()
@anonymous
abstract class MediaTrackConstraints{}
extension MediaTrackConstraintsExtension on MediaTrackConstraints {
  external List<MediaTrackConstraintSet> get advanced;
  external set advanced(List<MediaTrackConstraintSet> value);
}
@JS()
@anonymous
abstract class MediaTrackSettings{}
extension MediaTrackSettingsExtension on MediaTrackSettings {
  external num get aspectRatio;
  external set aspectRatio(num value);
  external bool get autoGainControl;
  external set autoGainControl(bool value);
  external bool get backgroundBlur;
  external set backgroundBlur(bool value);
  external num get channelCount;
  external set channelCount(num value);
  external String get deviceId;
  external set deviceId(String value);
  external String get displaySurface;
  external set displaySurface(String value);
  external bool get echoCancellation;
  external set echoCancellation(bool value);
  external String get facingMode;
  external set facingMode(String value);
  external num get frameRate;
  external set frameRate(num value);
  external String get groupId;
  external set groupId(String value);
  external num get height;
  external set height(num value);
  external bool get noiseSuppression;
  external set noiseSuppression(bool value);
  external num get sampleRate;
  external set sampleRate(num value);
  external num get sampleSize;
  external set sampleSize(num value);
  external num get width;
  external set width(num value);
}
@JS()
@anonymous
abstract class MediaTrackSupportedConstraints{}
extension MediaTrackSupportedConstraintsExtension on MediaTrackSupportedConstraints {
  external bool get aspectRatio;
  external set aspectRatio(bool value);
  external bool get autoGainControl;
  external set autoGainControl(bool value);
  external bool get backgroundBlur;
  external set backgroundBlur(bool value);
  external bool get channelCount;
  external set channelCount(bool value);
  external bool get deviceId;
  external set deviceId(bool value);
  external bool get displaySurface;
  external set displaySurface(bool value);
  external bool get echoCancellation;
  external set echoCancellation(bool value);
  external bool get facingMode;
  external set facingMode(bool value);
  external bool get frameRate;
  external set frameRate(bool value);
  external bool get groupId;
  external set groupId(bool value);
  external bool get height;
  external set height(bool value);
  external bool get noiseSuppression;
  external set noiseSuppression(bool value);
  external bool get sampleRate;
  external set sampleRate(bool value);
  external bool get sampleSize;
  external set sampleSize(bool value);
  external bool get width;
  external set width(bool value);
}
@JS()
@anonymous
abstract class MessageEventInit{}
extension MessageEventInitExtension on MessageEventInit {
  external T get data;
  external set data(T value);
  external String get lastEventId;
  external set lastEventId(String value);
  external String get origin;
  external set origin(String value);
  external List<MessagePort> get ports;
  external set ports(List<MessagePort> value);
  external MessageEventSource? get source;
  external set source(MessageEventSource? value);
}
@JS()
@anonymous
abstract class MouseEventInit{}
extension MouseEventInitExtension on MouseEventInit {
  external num get button;
  external set button(num value);
  external num get buttons;
  external set buttons(num value);
  external num get clientX;
  external set clientX(num value);
  external num get clientY;
  external set clientY(num value);
  external num get movementX;
  external set movementX(num value);
  external num get movementY;
  external set movementY(num value);
  external EventTarget? get relatedTarget;
  external set relatedTarget(EventTarget? value);
  external num get screenX;
  external set screenX(num value);
  external num get screenY;
  external set screenY(num value);
}
@JS()
@anonymous
abstract class MultiCacheQueryOptions{}
extension MultiCacheQueryOptionsExtension on MultiCacheQueryOptions {
  external String get cacheName;
  external set cacheName(String value);
}
@JS()
@anonymous
abstract class MutationObserverInit{}
extension MutationObserverInitExtension on MutationObserverInit {
  external List<String> get attributeFilter;
  external set attributeFilter(List<String> value);
  external bool get attributeOldValue;
  external set attributeOldValue(bool value);
  external bool get attributes;
  external set attributes(bool value);
  external bool get characterData;
  external set characterData(bool value);
  external bool get characterDataOldValue;
  external set characterDataOldValue(bool value);
  external bool get childList;
  external set childList(bool value);
  external bool get subtree;
  external set subtree(bool value);
}
@JS()
@anonymous
abstract class NavigationPreloadState{}
extension NavigationPreloadStateExtension on NavigationPreloadState {
  external bool get enabled;
  external set enabled(bool value);
  external String get headerValue;
  external set headerValue(String value);
}
@JS()
@anonymous
abstract class NotificationOptions{}
extension NotificationOptionsExtension on NotificationOptions {
  external String get badge;
  external set badge(String value);
  external String get body;
  external set body(String value);
  external dynamic get data;
  external set data(dynamic value);
  external NotificationDirection get dir;
  external set dir(NotificationDirection value);
  external String get icon;
  external set icon(String value);
  external String get lang;
  external set lang(String value);
  external bool get requireInteraction;
  external set requireInteraction(bool value);
  external bool? get silent;
  external set silent(bool? value);
  external String get tag;
  external set tag(String value);
}
@JS()
@anonymous
abstract class OfflineAudioCompletionEventInit{}
extension OfflineAudioCompletionEventInitExtension on OfflineAudioCompletionEventInit {
  external AudioBuffer get renderedBuffer;
  external set renderedBuffer(AudioBuffer value);
}
@JS()
@anonymous
abstract class OfflineAudioContextOptions{}
extension OfflineAudioContextOptionsExtension on OfflineAudioContextOptions {
  external num get length;
  external set length(num value);
  external num get numberOfChannels;
  external set numberOfChannels(num value);
  external num get sampleRate;
  external set sampleRate(num value);
}
@JS()
@anonymous
abstract class OptionalEffectTiming{}
extension OptionalEffectTimingExtension on OptionalEffectTiming {
  external num get delay;
  external set delay(num value);
  external PlaybackDirection get direction;
  external set direction(PlaybackDirection value);
  external dynamic /* num|String */ get duration;
  external set duration(dynamic /* num|String */ value);
  external String get easing;
  external set easing(String value);
  external num get endDelay;
  external set endDelay(num value);
  external FillMode get fill;
  external set fill(FillMode value);
  external num get iterationStart;
  external set iterationStart(num value);
  external num get iterations;
  external set iterations(num value);
  external num get playbackRate;
  external set playbackRate(num value);
}
@JS()
@anonymous
abstract class OpusEncoderConfig{}
extension OpusEncoderConfigExtension on OpusEncoderConfig {
  external num get complexity;
  external set complexity(num value);
  external OpusBitstreamFormat get format;
  external set format(OpusBitstreamFormat value);
  external num get frameDuration;
  external set frameDuration(num value);
  external num get packetlossperc;
  external set packetlossperc(num value);
  external bool get usedtx;
  external set usedtx(bool value);
  external bool get useinbandfec;
  external set useinbandfec(bool value);
}
@JS()
@anonymous
abstract class OscillatorOptions{}
extension OscillatorOptionsExtension on OscillatorOptions {
  external num get detune;
  external set detune(num value);
  external num get frequency;
  external set frequency(num value);
  external PeriodicWave get periodicWave;
  external set periodicWave(PeriodicWave value);
  external OscillatorType get type;
  external set type(OscillatorType value);
}
@JS()
@anonymous
abstract class PageRevealEventInit{}
extension PageRevealEventInitExtension on PageRevealEventInit {
  external ViewTransition? get viewTransition;
  external set viewTransition(ViewTransition? value);
}
@JS()
@anonymous
abstract class PageSwapEventInit{}
extension PageSwapEventInitExtension on PageSwapEventInit {
  external NavigationActivation? get activation;
  external set activation(NavigationActivation? value);
  external ViewTransition? get viewTransition;
  external set viewTransition(ViewTransition? value);
}
@JS()
@anonymous
abstract class PageTransitionEventInit{}
extension PageTransitionEventInitExtension on PageTransitionEventInit {
  external bool get persisted;
  external set persisted(bool value);
}
@JS()
@anonymous
abstract class PannerOptions{}
extension PannerOptionsExtension on PannerOptions {
  external num get coneInnerAngle;
  external set coneInnerAngle(num value);
  external num get coneOuterAngle;
  external set coneOuterAngle(num value);
  external num get coneOuterGain;
  external set coneOuterGain(num value);
  external DistanceModelType get distanceModel;
  external set distanceModel(DistanceModelType value);
  external num get maxDistance;
  external set maxDistance(num value);
  external num get orientationX;
  external set orientationX(num value);
  external num get orientationY;
  external set orientationY(num value);
  external num get orientationZ;
  external set orientationZ(num value);
  external PanningModelType get panningModel;
  external set panningModel(PanningModelType value);
  external num get positionX;
  external set positionX(num value);
  external num get positionY;
  external set positionY(num value);
  external num get positionZ;
  external set positionZ(num value);
  external num get refDistance;
  external set refDistance(num value);
  external num get rolloffFactor;
  external set rolloffFactor(num value);
}
@JS()
@anonymous
abstract class PayerErrors{}
extension PayerErrorsExtension on PayerErrors {
  external String get email;
  external set email(String value);
  external String get name;
  external set name(String value);
  external String get phone;
  external set phone(String value);
}
@JS()
@anonymous
abstract class PaymentCurrencyAmount{}
extension PaymentCurrencyAmountExtension on PaymentCurrencyAmount {
  external String get currency;
  external set currency(String value);
  external String get value;
  external set value(String value);
}
@JS()
@anonymous
abstract class PaymentDetailsBase{}
extension PaymentDetailsBaseExtension on PaymentDetailsBase {
  external List<PaymentItem> get displayItems;
  external set displayItems(List<PaymentItem> value);
  external List<PaymentDetailsModifier> get modifiers;
  external set modifiers(List<PaymentDetailsModifier> value);
  external List<PaymentShippingOption> get shippingOptions;
  external set shippingOptions(List<PaymentShippingOption> value);
}
@JS()
@anonymous
abstract class PaymentDetailsInit{}
extension PaymentDetailsInitExtension on PaymentDetailsInit {
  external String get id;
  external set id(String value);
  external PaymentItem get total;
  external set total(PaymentItem value);
}
@JS()
@anonymous
abstract class PaymentDetailsModifier{}
extension PaymentDetailsModifierExtension on PaymentDetailsModifier {
  external List<PaymentItem> get additionalDisplayItems;
  external set additionalDisplayItems(List<PaymentItem> value);
  external dynamic get data;
  external set data(dynamic value);
  external String get supportedMethods;
  external set supportedMethods(String value);
  external PaymentItem get total;
  external set total(PaymentItem value);
}
@JS()
@anonymous
abstract class PaymentDetailsUpdate{}
extension PaymentDetailsUpdateExtension on PaymentDetailsUpdate {
  external String get error;
  external set error(String value);
  external dynamic get paymentMethodErrors;
  external set paymentMethodErrors(dynamic value);
  external AddressErrors get shippingAddressErrors;
  external set shippingAddressErrors(AddressErrors value);
  external PaymentItem get total;
  external set total(PaymentItem value);
}
@JS()
@anonymous
abstract class PaymentItem{}
extension PaymentItemExtension on PaymentItem {
  external PaymentCurrencyAmount get amount;
  external set amount(PaymentCurrencyAmount value);
  external String get label;
  external set label(String value);
  external bool get pending;
  external set pending(bool value);
}
@JS()
@anonymous
abstract class PaymentMethodChangeEventInit{}
extension PaymentMethodChangeEventInitExtension on PaymentMethodChangeEventInit {
  external dynamic get methodDetails;
  external set methodDetails(dynamic value);
  external String get methodName;
  external set methodName(String value);
}
@JS()
@anonymous
abstract class PaymentMethodData{}
extension PaymentMethodDataExtension on PaymentMethodData {
  external dynamic get data;
  external set data(dynamic value);
  external String get supportedMethods;
  external set supportedMethods(String value);
}
@JS()
@anonymous
abstract class PaymentOptions{}
extension PaymentOptionsExtension on PaymentOptions {
  external bool get requestPayerEmail;
  external set requestPayerEmail(bool value);
  external bool get requestPayerName;
  external set requestPayerName(bool value);
  external bool get requestPayerPhone;
  external set requestPayerPhone(bool value);
  external bool get requestShipping;
  external set requestShipping(bool value);
  external PaymentShippingType get shippingType;
  external set shippingType(PaymentShippingType value);
}
@JS()
@anonymous
abstract class PaymentRequestUpdateEventInit{}
extension PaymentRequestUpdateEventInitExtension on PaymentRequestUpdateEventInit {
}
@JS()
@anonymous
abstract class PaymentShippingOption{}
extension PaymentShippingOptionExtension on PaymentShippingOption {
  external PaymentCurrencyAmount get amount;
  external set amount(PaymentCurrencyAmount value);
  external String get id;
  external set id(String value);
  external String get label;
  external set label(String value);
  external bool get selected;
  external set selected(bool value);
}
@JS()
@anonymous
abstract class PaymentValidationErrors{}
extension PaymentValidationErrorsExtension on PaymentValidationErrors {
  external String get error;
  external set error(String value);
  external PayerErrors get payer;
  external set payer(PayerErrors value);
  external AddressErrors get shippingAddress;
  external set shippingAddress(AddressErrors value);
}
@JS()
@anonymous
abstract class Pbkdf2Params{}
extension Pbkdf2ParamsExtension on Pbkdf2Params {
  external HashAlgorithmIdentifier get hash;
  external set hash(HashAlgorithmIdentifier value);
  external num get iterations;
  external set iterations(num value);
  external BufferSource get salt;
  external set salt(BufferSource value);
}
@JS()
@anonymous
abstract class PerformanceMarkOptions{}
extension PerformanceMarkOptionsExtension on PerformanceMarkOptions {
  external dynamic get detail;
  external set detail(dynamic value);
  external DOMHighResTimeStamp get startTime;
  external set startTime(DOMHighResTimeStamp value);
}
@JS()
@anonymous
abstract class PerformanceMeasureOptions{}
extension PerformanceMeasureOptionsExtension on PerformanceMeasureOptions {
  external dynamic get detail;
  external set detail(dynamic value);
  external DOMHighResTimeStamp get duration;
  external set duration(DOMHighResTimeStamp value);
  external dynamic /* String|DOMHighResTimeStamp */ get end;
  external set end(dynamic /* String|DOMHighResTimeStamp */ value);
  external dynamic /* String|DOMHighResTimeStamp */ get start;
  external set start(dynamic /* String|DOMHighResTimeStamp */ value);
}
@JS()
@anonymous
abstract class PerformanceObserverInit{}
extension PerformanceObserverInitExtension on PerformanceObserverInit {
  external bool get buffered;
  external set buffered(bool value);
  external List<String> get entryTypes;
  external set entryTypes(List<String> value);
  external String get type;
  external set type(String value);
}
@JS()
@anonymous
abstract class PeriodicWaveConstraints{}
extension PeriodicWaveConstraintsExtension on PeriodicWaveConstraints {
  external bool get disableNormalization;
  external set disableNormalization(bool value);
}
@JS()
@anonymous
abstract class PeriodicWaveOptions{}
extension PeriodicWaveOptionsExtension on PeriodicWaveOptions {
  external dynamic /* List<num>|Float32Array */ get imag;
  external set imag(dynamic /* List<num>|Float32Array */ value);
  external dynamic /* List<num>|Float32Array */ get real;
  external set real(dynamic /* List<num>|Float32Array */ value);
}
@JS()
@anonymous
abstract class PermissionDescriptor{}
extension PermissionDescriptorExtension on PermissionDescriptor {
  external PermissionName get name;
  external set name(PermissionName value);
}
@JS()
@anonymous
abstract class PictureInPictureEventInit{}
extension PictureInPictureEventInitExtension on PictureInPictureEventInit {
  external PictureInPictureWindow get pictureInPictureWindow;
  external set pictureInPictureWindow(PictureInPictureWindow value);
}
@JS()
@anonymous
abstract class PlaneLayout{}
extension PlaneLayoutExtension on PlaneLayout {
  external num get offset;
  external set offset(num value);
  external num get stride;
  external set stride(num value);
}
@JS()
@anonymous
abstract class PointerEventInit{}
extension PointerEventInitExtension on PointerEventInit {
  external num get altitudeAngle;
  external set altitudeAngle(num value);
  external num get azimuthAngle;
  external set azimuthAngle(num value);
  external List<PointerEvent> get coalescedEvents;
  external set coalescedEvents(List<PointerEvent> value);
  external num get height;
  external set height(num value);
  external bool get isPrimary;
  external set isPrimary(bool value);
  external num get pointerId;
  external set pointerId(num value);
  external String get pointerType;
  external set pointerType(String value);
  external List<PointerEvent> get predictedEvents;
  external set predictedEvents(List<PointerEvent> value);
  external num get pressure;
  external set pressure(num value);
  external num get tangentialPressure;
  external set tangentialPressure(num value);
  external num get tiltX;
  external set tiltX(num value);
  external num get tiltY;
  external set tiltY(num value);
  external num get twist;
  external set twist(num value);
  external num get width;
  external set width(num value);
}
@JS()
@anonymous
abstract class PointerLockOptions{}
extension PointerLockOptionsExtension on PointerLockOptions {
  external bool get unadjustedMovement;
  external set unadjustedMovement(bool value);
}
@JS()
@anonymous
abstract class PopStateEventInit{}
extension PopStateEventInitExtension on PopStateEventInit {
  external dynamic get state;
  external set state(dynamic value);
}
@JS()
@anonymous
abstract class PositionOptions{}
extension PositionOptionsExtension on PositionOptions {
  external bool get enableHighAccuracy;
  external set enableHighAccuracy(bool value);
  external num get maximumAge;
  external set maximumAge(num value);
  external num get timeout;
  external set timeout(num value);
}
@JS()
@anonymous
abstract class ProgressEventInit{}
extension ProgressEventInitExtension on ProgressEventInit {
  external bool get lengthComputable;
  external set lengthComputable(bool value);
  external num get loaded;
  external set loaded(num value);
  external num get total;
  external set total(num value);
}
@JS()
@anonymous
abstract class PromiseRejectionEventInit{}
extension PromiseRejectionEventInitExtension on PromiseRejectionEventInit {
  external Future<dynamic> get promise;
  external set promise(Future<dynamic> value);
  external dynamic get reason;
  external set reason(dynamic value);
}
@JS()
@anonymous
abstract class PropertyDefinition{}
extension PropertyDefinitionExtension on PropertyDefinition {
  external bool get inherits;
  external set inherits(bool value);
  external String get initialValue;
  external set initialValue(String value);
  external String get name;
  external set name(String value);
  external String get syntax;
  external set syntax(String value);
}
@JS()
@anonymous
abstract class PropertyIndexedKeyframes{}
extension PropertyIndexedKeyframesExtension on PropertyIndexedKeyframes {
  external dynamic /* CompositeOperationOrAuto|List<CompositeOperationOrAuto> */ get composite;
  external set composite(dynamic /* CompositeOperationOrAuto|List<CompositeOperationOrAuto> */ value);
  external dynamic /* String|List<String> */ get easing;
  external set easing(dynamic /* String|List<String> */ value);
  external dynamic /* num|List<num?> */ get offset;
  external set offset(dynamic /* num|List<num?> */ value);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS()
@anonymous
abstract class PublicKeyCredentialCreationOptions{}
extension PublicKeyCredentialCreationOptionsExtension on PublicKeyCredentialCreationOptions {
  external AttestationConveyancePreference get attestation;
  external set attestation(AttestationConveyancePreference value);
  external AuthenticatorSelectionCriteria get authenticatorSelection;
  external set authenticatorSelection(AuthenticatorSelectionCriteria value);
  external BufferSource get challenge;
  external set challenge(BufferSource value);
  external List<PublicKeyCredentialDescriptor> get excludeCredentials;
  external set excludeCredentials(List<PublicKeyCredentialDescriptor> value);
  external AuthenticationExtensionsClientInputs get extensions;
  external set extensions(AuthenticationExtensionsClientInputs value);
  external List<PublicKeyCredentialParameters> get pubKeyCredParams;
  external set pubKeyCredParams(List<PublicKeyCredentialParameters> value);
  external PublicKeyCredentialRpEntity get rp;
  external set rp(PublicKeyCredentialRpEntity value);
  external num get timeout;
  external set timeout(num value);
  external PublicKeyCredentialUserEntity get user;
  external set user(PublicKeyCredentialUserEntity value);
}
@JS()
@anonymous
abstract class PublicKeyCredentialCreationOptionsJSON{}
extension PublicKeyCredentialCreationOptionsJSONExtension on PublicKeyCredentialCreationOptionsJSON {
  external String get attestation;
  external set attestation(String value);
  external AuthenticatorSelectionCriteria get authenticatorSelection;
  external set authenticatorSelection(AuthenticatorSelectionCriteria value);
  external Base64URLString get challenge;
  external set challenge(Base64URLString value);
  external List<PublicKeyCredentialDescriptorJSON> get excludeCredentials;
  external set excludeCredentials(List<PublicKeyCredentialDescriptorJSON> value);
  external AuthenticationExtensionsClientInputsJSON get extensions;
  external set extensions(AuthenticationExtensionsClientInputsJSON value);
  external List<String> get hints;
  external set hints(List<String> value);
  external List<PublicKeyCredentialParameters> get pubKeyCredParams;
  external set pubKeyCredParams(List<PublicKeyCredentialParameters> value);
  external PublicKeyCredentialRpEntity get rp;
  external set rp(PublicKeyCredentialRpEntity value);
  external num get timeout;
  external set timeout(num value);
  external PublicKeyCredentialUserEntityJSON get user;
  external set user(PublicKeyCredentialUserEntityJSON value);
}
@JS()
@anonymous
abstract class PublicKeyCredentialDescriptor{}
extension PublicKeyCredentialDescriptorExtension on PublicKeyCredentialDescriptor {
  external BufferSource get id;
  external set id(BufferSource value);
  external List<AuthenticatorTransport> get transports;
  external set transports(List<AuthenticatorTransport> value);
  external PublicKeyCredentialType get type;
  external set type(PublicKeyCredentialType value);
}
@JS()
@anonymous
abstract class PublicKeyCredentialDescriptorJSON{}
extension PublicKeyCredentialDescriptorJSONExtension on PublicKeyCredentialDescriptorJSON {
  external Base64URLString get id;
  external set id(Base64URLString value);
  external List<String> get transports;
  external set transports(List<String> value);
  external String get type;
  external set type(String value);
}
@JS()
@anonymous
abstract class PublicKeyCredentialEntity{}
extension PublicKeyCredentialEntityExtension on PublicKeyCredentialEntity {
  external String get name;
  external set name(String value);
}
@JS()
@anonymous
abstract class PublicKeyCredentialParameters{}
extension PublicKeyCredentialParametersExtension on PublicKeyCredentialParameters {
  external COSEAlgorithmIdentifier get alg;
  external set alg(COSEAlgorithmIdentifier value);
  external PublicKeyCredentialType get type;
  external set type(PublicKeyCredentialType value);
}
@JS()
@anonymous
abstract class PublicKeyCredentialRequestOptions{}
extension PublicKeyCredentialRequestOptionsExtension on PublicKeyCredentialRequestOptions {
  external List<PublicKeyCredentialDescriptor> get allowCredentials;
  external set allowCredentials(List<PublicKeyCredentialDescriptor> value);
  external BufferSource get challenge;
  external set challenge(BufferSource value);
  external AuthenticationExtensionsClientInputs get extensions;
  external set extensions(AuthenticationExtensionsClientInputs value);
  external String get rpId;
  external set rpId(String value);
  external num get timeout;
  external set timeout(num value);
  external UserVerificationRequirement get userVerification;
  external set userVerification(UserVerificationRequirement value);
}
@JS()
@anonymous
abstract class PublicKeyCredentialRequestOptionsJSON{}
extension PublicKeyCredentialRequestOptionsJSONExtension on PublicKeyCredentialRequestOptionsJSON {
  external List<PublicKeyCredentialDescriptorJSON> get allowCredentials;
  external set allowCredentials(List<PublicKeyCredentialDescriptorJSON> value);
  external Base64URLString get challenge;
  external set challenge(Base64URLString value);
  external AuthenticationExtensionsClientInputsJSON get extensions;
  external set extensions(AuthenticationExtensionsClientInputsJSON value);
  external List<String> get hints;
  external set hints(List<String> value);
  external String get rpId;
  external set rpId(String value);
  external num get timeout;
  external set timeout(num value);
  external String get userVerification;
  external set userVerification(String value);
}
@JS()
@anonymous
abstract class PublicKeyCredentialRpEntity{}
extension PublicKeyCredentialRpEntityExtension on PublicKeyCredentialRpEntity {
  external String get id;
  external set id(String value);
}
@JS()
@anonymous
abstract class PublicKeyCredentialUserEntity{}
extension PublicKeyCredentialUserEntityExtension on PublicKeyCredentialUserEntity {
  external String get displayName;
  external set displayName(String value);
  external BufferSource get id;
  external set id(BufferSource value);
}
@JS()
@anonymous
abstract class PublicKeyCredentialUserEntityJSON{}
extension PublicKeyCredentialUserEntityJSONExtension on PublicKeyCredentialUserEntityJSON {
  external String get displayName;
  external set displayName(String value);
  external Base64URLString get id;
  external set id(Base64URLString value);
  external String get name;
  external set name(String value);
}
@JS()
@anonymous
abstract class PushSubscriptionJSON{}
extension PushSubscriptionJSONExtension on PushSubscriptionJSON {
  external String get endpoint;
  external set endpoint(String value);
  external EpochTimeStamp? get expirationTime;
  external set expirationTime(EpochTimeStamp? value);
  external Record<String, String> get keys;
  external set keys(Record<String, String> value);
}
@JS()
@anonymous
abstract class PushSubscriptionOptionsInit{}
extension PushSubscriptionOptionsInitExtension on PushSubscriptionOptionsInit {
  external dynamic /* BufferSource|String */ get applicationServerKey;
  external set applicationServerKey(dynamic /* BufferSource|String */ value);
  external bool get userVisibleOnly;
  external set userVisibleOnly(bool value);
}
@JS()
@anonymous
abstract class QueuingStrategy{}
extension QueuingStrategyExtension on QueuingStrategy {
  external num get highWaterMark;
  external set highWaterMark(num value);
  external QueuingStrategySize<T> get size;
  external set size(QueuingStrategySize<T> value);
}
@JS()
@anonymous
abstract class QueuingStrategyInit{}
extension QueuingStrategyInitExtension on QueuingStrategyInit {
  external num get highWaterMark;
  external set highWaterMark(num value);
}
@JS()
@anonymous
abstract class RTCAnswerOptions{}
extension RTCAnswerOptionsExtension on RTCAnswerOptions {
}
@JS()
@anonymous
abstract class RTCCertificateExpiration{}
extension RTCCertificateExpirationExtension on RTCCertificateExpiration {
  external num get expires;
  external set expires(num value);
}
@JS()
@anonymous
abstract class RTCConfiguration{}
extension RTCConfigurationExtension on RTCConfiguration {
  external RTCBundlePolicy get bundlePolicy;
  external set bundlePolicy(RTCBundlePolicy value);
  external List<RTCCertificate> get certificates;
  external set certificates(List<RTCCertificate> value);
  external num get iceCandidatePoolSize;
  external set iceCandidatePoolSize(num value);
  external List<RTCIceServer> get iceServers;
  external set iceServers(List<RTCIceServer> value);
  external RTCIceTransportPolicy get iceTransportPolicy;
  external set iceTransportPolicy(RTCIceTransportPolicy value);
  external RTCRtcpMuxPolicy get rtcpMuxPolicy;
  external set rtcpMuxPolicy(RTCRtcpMuxPolicy value);
}
@JS()
@anonymous
abstract class RTCDTMFToneChangeEventInit{}
extension RTCDTMFToneChangeEventInitExtension on RTCDTMFToneChangeEventInit {
  external String get tone;
  external set tone(String value);
}
@JS()
@anonymous
abstract class RTCDataChannelEventInit{}
extension RTCDataChannelEventInitExtension on RTCDataChannelEventInit {
  external RTCDataChannel get channel;
  external set channel(RTCDataChannel value);
}
@JS()
@anonymous
abstract class RTCDataChannelInit{}
extension RTCDataChannelInitExtension on RTCDataChannelInit {
  external num get id;
  external set id(num value);
  external num get maxPacketLifeTime;
  external set maxPacketLifeTime(num value);
  external num get maxRetransmits;
  external set maxRetransmits(num value);
  external bool get negotiated;
  external set negotiated(bool value);
  external bool get ordered;
  external set ordered(bool value);
  external String get protocol;
  external set protocol(String value);
}
@JS()
@anonymous
abstract class RTCDtlsFingerprint{}
extension RTCDtlsFingerprintExtension on RTCDtlsFingerprint {
  external String get algorithm;
  external set algorithm(String value);
  external String get value;
  external set value(String value);
}
@JS()
@anonymous
abstract class RTCEncodedAudioFrameMetadata{}
extension RTCEncodedAudioFrameMetadataExtension on RTCEncodedAudioFrameMetadata {
  external List<num> get contributingSources;
  external set contributingSources(List<num> value);
  external num get payloadType;
  external set payloadType(num value);
  external num get sequenceNumber;
  external set sequenceNumber(num value);
  external num get synchronizationSource;
  external set synchronizationSource(num value);
}
@JS()
@anonymous
abstract class RTCEncodedVideoFrameMetadata{}
extension RTCEncodedVideoFrameMetadataExtension on RTCEncodedVideoFrameMetadata {
  external List<num> get contributingSources;
  external set contributingSources(List<num> value);
  external List<num> get dependencies;
  external set dependencies(List<num> value);
  external num get frameId;
  external set frameId(num value);
  external num get height;
  external set height(num value);
  external num get payloadType;
  external set payloadType(num value);
  external num get spatialIndex;
  external set spatialIndex(num value);
  external num get synchronizationSource;
  external set synchronizationSource(num value);
  external num get temporalIndex;
  external set temporalIndex(num value);
  external num get timestamp;
  external set timestamp(num value);
  external num get width;
  external set width(num value);
}
@JS()
@anonymous
abstract class RTCErrorEventInit{}
extension RTCErrorEventInitExtension on RTCErrorEventInit {
  external RTCError get error;
  external set error(RTCError value);
}
@JS()
@anonymous
abstract class RTCErrorInit{}
extension RTCErrorInitExtension on RTCErrorInit {
  external RTCErrorDetailType get errorDetail;
  external set errorDetail(RTCErrorDetailType value);
  external num get httpRequestStatusCode;
  external set httpRequestStatusCode(num value);
  external num get receivedAlert;
  external set receivedAlert(num value);
  external num get sctpCauseCode;
  external set sctpCauseCode(num value);
  external num get sdpLineNumber;
  external set sdpLineNumber(num value);
  external num get sentAlert;
  external set sentAlert(num value);
}
@JS()
@anonymous
abstract class RTCIceCandidateInit{}
extension RTCIceCandidateInitExtension on RTCIceCandidateInit {
  external String get candidate;
  external set candidate(String value);
  external num? get sdpMLineIndex;
  external set sdpMLineIndex(num? value);
  external String? get sdpMid;
  external set sdpMid(String? value);
  external String? get usernameFragment;
  external set usernameFragment(String? value);
}
@JS()
@anonymous
abstract class RTCIceCandidatePairStats{}
extension RTCIceCandidatePairStatsExtension on RTCIceCandidatePairStats {
  external num get availableIncomingBitrate;
  external set availableIncomingBitrate(num value);
  external num get availableOutgoingBitrate;
  external set availableOutgoingBitrate(num value);
  external num get bytesDiscardedOnSend;
  external set bytesDiscardedOnSend(num value);
  external num get bytesReceived;
  external set bytesReceived(num value);
  external num get bytesSent;
  external set bytesSent(num value);
  external num get consentRequestsSent;
  external set consentRequestsSent(num value);
  external num get currentRoundTripTime;
  external set currentRoundTripTime(num value);
  external DOMHighResTimeStamp get lastPacketReceivedTimestamp;
  external set lastPacketReceivedTimestamp(DOMHighResTimeStamp value);
  external DOMHighResTimeStamp get lastPacketSentTimestamp;
  external set lastPacketSentTimestamp(DOMHighResTimeStamp value);
  external String get localCandidateId;
  external set localCandidateId(String value);
  external bool get nominated;
  external set nominated(bool value);
  external num get packetsDiscardedOnSend;
  external set packetsDiscardedOnSend(num value);
  external num get packetsReceived;
  external set packetsReceived(num value);
  external num get packetsSent;
  external set packetsSent(num value);
  external String get remoteCandidateId;
  external set remoteCandidateId(String value);
  external num get requestsReceived;
  external set requestsReceived(num value);
  external num get requestsSent;
  external set requestsSent(num value);
  external num get responsesReceived;
  external set responsesReceived(num value);
  external num get responsesSent;
  external set responsesSent(num value);
  external RTCStatsIceCandidatePairState get state;
  external set state(RTCStatsIceCandidatePairState value);
  external num get totalRoundTripTime;
  external set totalRoundTripTime(num value);
  external String get transportId;
  external set transportId(String value);
}
@JS()
@anonymous
abstract class RTCIceServer{}
extension RTCIceServerExtension on RTCIceServer {
  external String get credential;
  external set credential(String value);
  external dynamic /* String|List<String> */ get urls;
  external set urls(dynamic /* String|List<String> */ value);
  external String get username;
  external set username(String value);
}
@JS()
@anonymous
abstract class RTCInboundRtpStreamStats{}
extension RTCInboundRtpStreamStatsExtension on RTCInboundRtpStreamStats {
  external num get audioLevel;
  external set audioLevel(num value);
  external num get bytesReceived;
  external set bytesReceived(num value);
  external num get concealedSamples;
  external set concealedSamples(num value);
  external num get concealmentEvents;
  external set concealmentEvents(num value);
  external String get decoderImplementation;
  external set decoderImplementation(String value);
  external DOMHighResTimeStamp get estimatedPlayoutTimestamp;
  external set estimatedPlayoutTimestamp(DOMHighResTimeStamp value);
  external num get fecBytesReceived;
  external set fecBytesReceived(num value);
  external num get fecPacketsDiscarded;
  external set fecPacketsDiscarded(num value);
  external num get fecPacketsReceived;
  external set fecPacketsReceived(num value);
  external num get fecSsrc;
  external set fecSsrc(num value);
  external num get firCount;
  external set firCount(num value);
  external num get frameHeight;
  external set frameHeight(num value);
  external num get frameWidth;
  external set frameWidth(num value);
  external num get framesAssembledFromMultiplePackets;
  external set framesAssembledFromMultiplePackets(num value);
  external num get framesDecoded;
  external set framesDecoded(num value);
  external num get framesDropped;
  external set framesDropped(num value);
  external num get framesPerSecond;
  external set framesPerSecond(num value);
  external num get framesReceived;
  external set framesReceived(num value);
  external num get framesRendered;
  external set framesRendered(num value);
  external num get freezeCount;
  external set freezeCount(num value);
  external num get headerBytesReceived;
  external set headerBytesReceived(num value);
  external num get insertedSamplesForDeceleration;
  external set insertedSamplesForDeceleration(num value);
  external num get jitterBufferDelay;
  external set jitterBufferDelay(num value);
  external num get jitterBufferEmittedCount;
  external set jitterBufferEmittedCount(num value);
  external num get jitterBufferMinimumDelay;
  external set jitterBufferMinimumDelay(num value);
  external num get jitterBufferTargetDelay;
  external set jitterBufferTargetDelay(num value);
  external num get keyFramesDecoded;
  external set keyFramesDecoded(num value);
  external DOMHighResTimeStamp get lastPacketReceivedTimestamp;
  external set lastPacketReceivedTimestamp(DOMHighResTimeStamp value);
  external String get mid;
  external set mid(String value);
  external num get nackCount;
  external set nackCount(num value);
  external num get packetsDiscarded;
  external set packetsDiscarded(num value);
  external num get pauseCount;
  external set pauseCount(num value);
  external String get playoutId;
  external set playoutId(String value);
  external num get pliCount;
  external set pliCount(num value);
  external num get qpSum;
  external set qpSum(num value);
  external String get remoteId;
  external set remoteId(String value);
  external num get removedSamplesForAcceleration;
  external set removedSamplesForAcceleration(num value);
  external num get retransmittedBytesReceived;
  external set retransmittedBytesReceived(num value);
  external num get retransmittedPacketsReceived;
  external set retransmittedPacketsReceived(num value);
  external num get rtxSsrc;
  external set rtxSsrc(num value);
  external num get silentConcealedSamples;
  external set silentConcealedSamples(num value);
  external num get totalAssemblyTime;
  external set totalAssemblyTime(num value);
  external num get totalAudioEnergy;
  external set totalAudioEnergy(num value);
  external num get totalDecodeTime;
  external set totalDecodeTime(num value);
  external num get totalFreezesDuration;
  external set totalFreezesDuration(num value);
  external num get totalInterFrameDelay;
  external set totalInterFrameDelay(num value);
  external num get totalPausesDuration;
  external set totalPausesDuration(num value);
  external num get totalProcessingDelay;
  external set totalProcessingDelay(num value);
  external num get totalSamplesDuration;
  external set totalSamplesDuration(num value);
  external num get totalSamplesReceived;
  external set totalSamplesReceived(num value);
  external num get totalSquaredInterFrameDelay;
  external set totalSquaredInterFrameDelay(num value);
  external String get trackIdentifier;
  external set trackIdentifier(String value);
}
@JS()
@anonymous
abstract class RTCLocalSessionDescriptionInit{}
extension RTCLocalSessionDescriptionInitExtension on RTCLocalSessionDescriptionInit {
  external String get sdp;
  external set sdp(String value);
  external RTCSdpType get type;
  external set type(RTCSdpType value);
}
@JS()
@anonymous
abstract class RTCOfferAnswerOptions{}
extension RTCOfferAnswerOptionsExtension on RTCOfferAnswerOptions {
}
@JS()
@anonymous
abstract class RTCOfferOptions{}
extension RTCOfferOptionsExtension on RTCOfferOptions {
  external bool get iceRestart;
  external set iceRestart(bool value);
  external bool get offerToReceiveAudio;
  external set offerToReceiveAudio(bool value);
  external bool get offerToReceiveVideo;
  external set offerToReceiveVideo(bool value);
}
@JS()
@anonymous
abstract class RTCOutboundRtpStreamStats{}
extension RTCOutboundRtpStreamStatsExtension on RTCOutboundRtpStreamStats {
  external bool get active;
  external set active(bool value);
  external num get firCount;
  external set firCount(num value);
  external num get frameHeight;
  external set frameHeight(num value);
  external num get frameWidth;
  external set frameWidth(num value);
  external num get framesEncoded;
  external set framesEncoded(num value);
  external num get framesPerSecond;
  external set framesPerSecond(num value);
  external num get framesSent;
  external set framesSent(num value);
  external num get headerBytesSent;
  external set headerBytesSent(num value);
  external num get hugeFramesSent;
  external set hugeFramesSent(num value);
  external num get keyFramesEncoded;
  external set keyFramesEncoded(num value);
  external String get mediaSourceId;
  external set mediaSourceId(String value);
  external String get mid;
  external set mid(String value);
  external num get nackCount;
  external set nackCount(num value);
  external num get pliCount;
  external set pliCount(num value);
  external num get qpSum;
  external set qpSum(num value);
  external Record<String, num> get qualityLimitationDurations;
  external set qualityLimitationDurations(Record<String, num> value);
  external RTCQualityLimitationReason get qualityLimitationReason;
  external set qualityLimitationReason(RTCQualityLimitationReason value);
  external num get qualityLimitationResolutionChanges;
  external set qualityLimitationResolutionChanges(num value);
  external String get remoteId;
  external set remoteId(String value);
  external num get retransmittedBytesSent;
  external set retransmittedBytesSent(num value);
  external num get retransmittedPacketsSent;
  external set retransmittedPacketsSent(num value);
  external String get rid;
  external set rid(String value);
  external num get rtxSsrc;
  external set rtxSsrc(num value);
  external String get scalabilityMode;
  external set scalabilityMode(String value);
  external num get targetBitrate;
  external set targetBitrate(num value);
  external num get totalEncodeTime;
  external set totalEncodeTime(num value);
  external num get totalEncodedBytesTarget;
  external set totalEncodedBytesTarget(num value);
  external num get totalPacketSendDelay;
  external set totalPacketSendDelay(num value);
}
@JS()
@anonymous
abstract class RTCPeerConnectionIceErrorEventInit{}
extension RTCPeerConnectionIceErrorEventInitExtension on RTCPeerConnectionIceErrorEventInit {
  external String? get address;
  external set address(String? value);
  external num get errorCode;
  external set errorCode(num value);
  external String get errorText;
  external set errorText(String value);
  external num? get port;
  external set port(num? value);
  external String get url;
  external set url(String value);
}
@JS()
@anonymous
abstract class RTCPeerConnectionIceEventInit{}
extension RTCPeerConnectionIceEventInitExtension on RTCPeerConnectionIceEventInit {
  external RTCIceCandidate? get candidate;
  external set candidate(RTCIceCandidate? value);
  external String? get url;
  external set url(String? value);
}
@JS()
@anonymous
abstract class RTCReceivedRtpStreamStats{}
extension RTCReceivedRtpStreamStatsExtension on RTCReceivedRtpStreamStats {
  external num get jitter;
  external set jitter(num value);
  external num get packetsLost;
  external set packetsLost(num value);
  external num get packetsReceived;
  external set packetsReceived(num value);
}
@JS()
@anonymous
abstract class RTCRtcpParameters{}
extension RTCRtcpParametersExtension on RTCRtcpParameters {
  external String get cname;
  external set cname(String value);
  external bool get reducedSize;
  external set reducedSize(bool value);
}
@JS()
@anonymous
abstract class RTCRtpCapabilities{}
extension RTCRtpCapabilitiesExtension on RTCRtpCapabilities {
  external List<RTCRtpCodec> get codecs;
  external set codecs(List<RTCRtpCodec> value);
  external List<RTCRtpHeaderExtensionCapability> get headerExtensions;
  external set headerExtensions(List<RTCRtpHeaderExtensionCapability> value);
}
@JS()
@anonymous
abstract class RTCRtpCodec{}
extension RTCRtpCodecExtension on RTCRtpCodec {
  external num get channels;
  external set channels(num value);
  external num get clockRate;
  external set clockRate(num value);
  external String get mimeType;
  external set mimeType(String value);
  external String get sdpFmtpLine;
  external set sdpFmtpLine(String value);
}
@JS()
@anonymous
abstract class RTCRtpCodecParameters{}
extension RTCRtpCodecParametersExtension on RTCRtpCodecParameters {
  external num get payloadType;
  external set payloadType(num value);
}
@JS()
@anonymous
abstract class RTCRtpCodingParameters{}
extension RTCRtpCodingParametersExtension on RTCRtpCodingParameters {
  external String get rid;
  external set rid(String value);
}
@JS()
@anonymous
abstract class RTCRtpContributingSource{}
extension RTCRtpContributingSourceExtension on RTCRtpContributingSource {
  external num get audioLevel;
  external set audioLevel(num value);
  external num get rtpTimestamp;
  external set rtpTimestamp(num value);
  external num get source;
  external set source(num value);
  external DOMHighResTimeStamp get timestamp;
  external set timestamp(DOMHighResTimeStamp value);
}
@JS()
@anonymous
abstract class RTCRtpEncodingParameters{}
extension RTCRtpEncodingParametersExtension on RTCRtpEncodingParameters {
  external bool get active;
  external set active(bool value);
  external num get maxBitrate;
  external set maxBitrate(num value);
  external num get maxFramerate;
  external set maxFramerate(num value);
  external RTCPriorityType get networkPriority;
  external set networkPriority(RTCPriorityType value);
  external RTCPriorityType get priority;
  external set priority(RTCPriorityType value);
  external num get scaleResolutionDownBy;
  external set scaleResolutionDownBy(num value);
}
@JS()
@anonymous
abstract class RTCRtpHeaderExtensionCapability{}
extension RTCRtpHeaderExtensionCapabilityExtension on RTCRtpHeaderExtensionCapability {
  external String get uri;
  external set uri(String value);
}
@JS()
@anonymous
abstract class RTCRtpHeaderExtensionParameters{}
extension RTCRtpHeaderExtensionParametersExtension on RTCRtpHeaderExtensionParameters {
  external bool get encrypted;
  external set encrypted(bool value);
  external num get id;
  external set id(num value);
  external String get uri;
  external set uri(String value);
}
@JS()
@anonymous
abstract class RTCRtpParameters{}
extension RTCRtpParametersExtension on RTCRtpParameters {
  external List<RTCRtpCodecParameters> get codecs;
  external set codecs(List<RTCRtpCodecParameters> value);
  external List<RTCRtpHeaderExtensionParameters> get headerExtensions;
  external set headerExtensions(List<RTCRtpHeaderExtensionParameters> value);
  external RTCRtcpParameters get rtcp;
  external set rtcp(RTCRtcpParameters value);
}
@JS()
@anonymous
abstract class RTCRtpReceiveParameters{}
extension RTCRtpReceiveParametersExtension on RTCRtpReceiveParameters {
}
@JS()
@anonymous
abstract class RTCRtpSendParameters{}
extension RTCRtpSendParametersExtension on RTCRtpSendParameters {
  external RTCDegradationPreference get degradationPreference;
  external set degradationPreference(RTCDegradationPreference value);
  external List<RTCRtpEncodingParameters> get encodings;
  external set encodings(List<RTCRtpEncodingParameters> value);
  external String get transactionId;
  external set transactionId(String value);
}
@JS()
@anonymous
abstract class RTCRtpStreamStats{}
extension RTCRtpStreamStatsExtension on RTCRtpStreamStats {
  external String get codecId;
  external set codecId(String value);
  external String get kind;
  external set kind(String value);
  external num get ssrc;
  external set ssrc(num value);
  external String get transportId;
  external set transportId(String value);
}
@JS()
@anonymous
abstract class RTCRtpSynchronizationSource{}
extension RTCRtpSynchronizationSourceExtension on RTCRtpSynchronizationSource {
}
@JS()
@anonymous
abstract class RTCRtpTransceiverInit{}
extension RTCRtpTransceiverInitExtension on RTCRtpTransceiverInit {
  external RTCRtpTransceiverDirection get direction;
  external set direction(RTCRtpTransceiverDirection value);
  external List<RTCRtpEncodingParameters> get sendEncodings;
  external set sendEncodings(List<RTCRtpEncodingParameters> value);
  external List<MediaStream> get streams;
  external set streams(List<MediaStream> value);
}
@JS()
@anonymous
abstract class RTCSentRtpStreamStats{}
extension RTCSentRtpStreamStatsExtension on RTCSentRtpStreamStats {
  external num get bytesSent;
  external set bytesSent(num value);
  external num get packetsSent;
  external set packetsSent(num value);
}
@JS()
@anonymous
abstract class RTCSessionDescriptionInit{}
extension RTCSessionDescriptionInitExtension on RTCSessionDescriptionInit {
  external String get sdp;
  external set sdp(String value);
  external RTCSdpType get type;
  external set type(RTCSdpType value);
}
@JS()
@anonymous
abstract class RTCSetParameterOptions{}
extension RTCSetParameterOptionsExtension on RTCSetParameterOptions {
}
@JS()
@anonymous
abstract class RTCStats{}
extension RTCStatsExtension on RTCStats {
  external String get id;
  external set id(String value);
  external DOMHighResTimeStamp get timestamp;
  external set timestamp(DOMHighResTimeStamp value);
  external RTCStatsType get type;
  external set type(RTCStatsType value);
}
@JS()
@anonymous
abstract class RTCTrackEventInit{}
extension RTCTrackEventInitExtension on RTCTrackEventInit {
  external RTCRtpReceiver get receiver;
  external set receiver(RTCRtpReceiver value);
  external List<MediaStream> get streams;
  external set streams(List<MediaStream> value);
  external MediaStreamTrack get track;
  external set track(MediaStreamTrack value);
  external RTCRtpTransceiver get transceiver;
  external set transceiver(RTCRtpTransceiver value);
}
@JS()
@anonymous
abstract class RTCTransportStats{}
extension RTCTransportStatsExtension on RTCTransportStats {
  external num get bytesReceived;
  external set bytesReceived(num value);
  external num get bytesSent;
  external set bytesSent(num value);
  external String get dtlsCipher;
  external set dtlsCipher(String value);
  external RTCDtlsRole get dtlsRole;
  external set dtlsRole(RTCDtlsRole value);
  external RTCDtlsTransportState get dtlsState;
  external set dtlsState(RTCDtlsTransportState value);
  external String get iceLocalUsernameFragment;
  external set iceLocalUsernameFragment(String value);
  external RTCIceRole get iceRole;
  external set iceRole(RTCIceRole value);
  external RTCIceTransportState get iceState;
  external set iceState(RTCIceTransportState value);
  external String get localCertificateId;
  external set localCertificateId(String value);
  external num get packetsReceived;
  external set packetsReceived(num value);
  external num get packetsSent;
  external set packetsSent(num value);
  external String get remoteCertificateId;
  external set remoteCertificateId(String value);
  external num get selectedCandidatePairChanges;
  external set selectedCandidatePairChanges(num value);
  external String get selectedCandidatePairId;
  external set selectedCandidatePairId(String value);
  external String get srtpCipher;
  external set srtpCipher(String value);
  external String get tlsVersion;
  external set tlsVersion(String value);
}
@JS()
@anonymous
abstract class ReadableStreamGetReaderOptions{}
extension ReadableStreamGetReaderOptionsExtension on ReadableStreamGetReaderOptions {
  external ReadableStreamReaderMode get mode;
  external set mode(ReadableStreamReaderMode value);
}
@JS()
@anonymous
abstract class ReadableStreamIteratorOptions{}
extension ReadableStreamIteratorOptionsExtension on ReadableStreamIteratorOptions {
  external bool get preventCancel;
  external set preventCancel(bool value);
}
@JS()
@anonymous
abstract class ReadableStreamReadDoneResult{}
extension ReadableStreamReadDoneResultExtension on ReadableStreamReadDoneResult {
  external bool get done;
  external set done(bool value);
  external T get value;
  external set value(T value);
}
@JS()
@anonymous
abstract class ReadableStreamReadValueResult{}
extension ReadableStreamReadValueResultExtension on ReadableStreamReadValueResult {
  external bool get done;
  external set done(bool value);
  external T get value;
  external set value(T value);
}
@JS()
@anonymous
abstract class ReadableWritablePair{}
extension ReadableWritablePairExtension on ReadableWritablePair {
  external ReadableStream<R> get readable;
  external set readable(ReadableStream<R> value);
  external WritableStream<W> get writable;
  external set writable(WritableStream<W> value);
}
@JS()
@anonymous
abstract class RegistrationOptions{}
extension RegistrationOptionsExtension on RegistrationOptions {
  external String get scope;
  external set scope(String value);
  external WorkerType get type;
  external set type(WorkerType value);
  external ServiceWorkerUpdateViaCache get updateViaCache;
  external set updateViaCache(ServiceWorkerUpdateViaCache value);
}
@JS()
@anonymous
abstract class ReportingObserverOptions{}
extension ReportingObserverOptionsExtension on ReportingObserverOptions {
  external bool get buffered;
  external set buffered(bool value);
  external List<String> get types;
  external set types(List<String> value);
}
@JS()
@anonymous
abstract class RequestInit{}
extension RequestInitExtension on RequestInit {
  external BodyInit? get body;
  external set body(BodyInit? value);
  external RequestCache get cache;
  external set cache(RequestCache value);
  external RequestCredentials get credentials;
  external set credentials(RequestCredentials value);
  external HeadersInit get headers;
  external set headers(HeadersInit value);
  external String get integrity;
  external set integrity(String value);
  external bool get keepalive;
  external set keepalive(bool value);
  external String get method;
  external set method(String value);
  external RequestMode get mode;
  external set mode(RequestMode value);
  external RequestPriority get priority;
  external set priority(RequestPriority value);
  external RequestRedirect get redirect;
  external set redirect(RequestRedirect value);
  external String get referrer;
  external set referrer(String value);
  external ReferrerPolicy get referrerPolicy;
  external set referrerPolicy(ReferrerPolicy value);
  external AbortSignal? get signal;
  external set signal(AbortSignal? value);
  external dynamic get window;
  external set window(dynamic value);
}
@JS()
@anonymous
abstract class ResizeObserverOptions{}
extension ResizeObserverOptionsExtension on ResizeObserverOptions {
  external ResizeObserverBoxOptions get box;
  external set box(ResizeObserverBoxOptions value);
}
@JS()
@anonymous
abstract class ResponseInit{}
extension ResponseInitExtension on ResponseInit {
  external HeadersInit get headers;
  external set headers(HeadersInit value);
  external num get status;
  external set status(num value);
  external String get statusText;
  external set statusText(String value);
}
@JS()
@anonymous
abstract class RsaHashedImportParams{}
extension RsaHashedImportParamsExtension on RsaHashedImportParams {
  external HashAlgorithmIdentifier get hash;
  external set hash(HashAlgorithmIdentifier value);
}
@JS()
@anonymous
abstract class RsaHashedKeyAlgorithm{}
extension RsaHashedKeyAlgorithmExtension on RsaHashedKeyAlgorithm {
  external KeyAlgorithm get hash;
  external set hash(KeyAlgorithm value);
}
@JS()
@anonymous
abstract class RsaHashedKeyGenParams{}
extension RsaHashedKeyGenParamsExtension on RsaHashedKeyGenParams {
  external HashAlgorithmIdentifier get hash;
  external set hash(HashAlgorithmIdentifier value);
}
@JS()
@anonymous
abstract class RsaKeyAlgorithm{}
extension RsaKeyAlgorithmExtension on RsaKeyAlgorithm {
  external num get modulusLength;
  external set modulusLength(num value);
  external BigInteger get publicExponent;
  external set publicExponent(BigInteger value);
}
@JS()
@anonymous
abstract class RsaKeyGenParams{}
extension RsaKeyGenParamsExtension on RsaKeyGenParams {
  external num get modulusLength;
  external set modulusLength(num value);
  external BigInteger get publicExponent;
  external set publicExponent(BigInteger value);
}
@JS()
@anonymous
abstract class RsaOaepParams{}
extension RsaOaepParamsExtension on RsaOaepParams {
  external BufferSource get label;
  external set label(BufferSource value);
}
@JS()
@anonymous
abstract class RsaOtherPrimesInfo{}
extension RsaOtherPrimesInfoExtension on RsaOtherPrimesInfo {
  external String get d;
  external set d(String value);
  external String get r;
  external set r(String value);
  external String get t;
  external set t(String value);
}
@JS()
@anonymous
abstract class RsaPssParams{}
extension RsaPssParamsExtension on RsaPssParams {
  external num get saltLength;
  external set saltLength(num value);
}
@JS()
@anonymous
abstract class SVGBoundingBoxOptions{}
extension SVGBoundingBoxOptionsExtension on SVGBoundingBoxOptions {
  external bool get clipped;
  external set clipped(bool value);
  external bool get fill;
  external set fill(bool value);
  external bool get markers;
  external set markers(bool value);
  external bool get stroke;
  external set stroke(bool value);
}
@JS()
@anonymous
abstract class ScrollIntoViewOptions{}
extension ScrollIntoViewOptionsExtension on ScrollIntoViewOptions {
  external ScrollLogicalPosition get block;
  external set block(ScrollLogicalPosition value);
  external ScrollLogicalPosition get inline;
  external set inline(ScrollLogicalPosition value);
}
@JS()
@anonymous
abstract class ScrollOptions{}
extension ScrollOptionsExtension on ScrollOptions {
  external ScrollBehavior get behavior;
  external set behavior(ScrollBehavior value);
}
@JS()
@anonymous
abstract class ScrollToOptions{}
extension ScrollToOptionsExtension on ScrollToOptions {
  external num get left;
  external set left(num value);
  external num get top;
  external set top(num value);
}
@JS()
@anonymous
abstract class SecurityPolicyViolationEventInit{}
extension SecurityPolicyViolationEventInitExtension on SecurityPolicyViolationEventInit {
  external String get blockedURI;
  external set blockedURI(String value);
  external num get columnNumber;
  external set columnNumber(num value);
  external SecurityPolicyViolationEventDisposition get disposition;
  external set disposition(SecurityPolicyViolationEventDisposition value);
  external String get documentURI;
  external set documentURI(String value);
  external String get effectiveDirective;
  external set effectiveDirective(String value);
  external num get lineNumber;
  external set lineNumber(num value);
  external String get originalPolicy;
  external set originalPolicy(String value);
  external String get referrer;
  external set referrer(String value);
  external String get sample;
  external set sample(String value);
  external String get sourceFile;
  external set sourceFile(String value);
  external num get statusCode;
  external set statusCode(num value);
  external String get violatedDirective;
  external set violatedDirective(String value);
}
@JS()
@anonymous
abstract class ShadowRootInit{}
extension ShadowRootInitExtension on ShadowRootInit {
  external bool get delegatesFocus;
  external set delegatesFocus(bool value);
  external ShadowRootMode get mode;
  external set mode(ShadowRootMode value);
  external bool get serializable;
  external set serializable(bool value);
  external SlotAssignmentMode get slotAssignment;
  external set slotAssignment(SlotAssignmentMode value);
}
@JS()
@anonymous
abstract class ShareData{}
extension ShareDataExtension on ShareData {
  external List<File> get files;
  external set files(List<File> value);
  external String get text;
  external set text(String value);
  external String get title;
  external set title(String value);
  external String get url;
  external set url(String value);
}
@JS()
@anonymous
abstract class SpeechSynthesisErrorEventInit{}
extension SpeechSynthesisErrorEventInitExtension on SpeechSynthesisErrorEventInit {
  external SpeechSynthesisErrorCode get error;
  external set error(SpeechSynthesisErrorCode value);
}
@JS()
@anonymous
abstract class SpeechSynthesisEventInit{}
extension SpeechSynthesisEventInitExtension on SpeechSynthesisEventInit {
  external num get charIndex;
  external set charIndex(num value);
  external num get charLength;
  external set charLength(num value);
  external num get elapsedTime;
  external set elapsedTime(num value);
  external String get name;
  external set name(String value);
  external SpeechSynthesisUtterance get utterance;
  external set utterance(SpeechSynthesisUtterance value);
}
@JS()
@anonymous
abstract class StaticRangeInit{}
extension StaticRangeInitExtension on StaticRangeInit {
  external Node get endContainer;
  external set endContainer(Node value);
  external num get endOffset;
  external set endOffset(num value);
  external Node get startContainer;
  external set startContainer(Node value);
  external num get startOffset;
  external set startOffset(num value);
}
@JS()
@anonymous
abstract class StereoPannerOptions{}
extension StereoPannerOptionsExtension on StereoPannerOptions {
  external num get pan;
  external set pan(num value);
}
@JS()
@anonymous
abstract class StorageEstimate{}
extension StorageEstimateExtension on StorageEstimate {
  external num get quota;
  external set quota(num value);
  external num get usage;
  external set usage(num value);
}
@JS()
@anonymous
abstract class StorageEventInit{}
extension StorageEventInitExtension on StorageEventInit {
  external String? get key;
  external set key(String? value);
  external String? get newValue;
  external set newValue(String? value);
  external String? get oldValue;
  external set oldValue(String? value);
  external Storage? get storageArea;
  external set storageArea(Storage? value);
  external String get url;
  external set url(String value);
}
@JS()
@anonymous
abstract class StreamPipeOptions{}
extension StreamPipeOptionsExtension on StreamPipeOptions {
  external bool get preventAbort;
  external set preventAbort(bool value);
  external bool get preventCancel;
  external set preventCancel(bool value);
  external bool get preventClose;
  external set preventClose(bool value);
  external AbortSignal get signal;
  external set signal(AbortSignal value);
}
@JS()
@anonymous
abstract class StructuredSerializeOptions{}
extension StructuredSerializeOptionsExtension on StructuredSerializeOptions {
  external List<Transferable> get transfer;
  external set transfer(List<Transferable> value);
}
@JS()
@anonymous
abstract class SubmitEventInit{}
extension SubmitEventInitExtension on SubmitEventInit {
  external HTMLElement? get submitter;
  external set submitter(HTMLElement? value);
}
@JS()
@anonymous
abstract class TextDecodeOptions{}
extension TextDecodeOptionsExtension on TextDecodeOptions {
  external bool get stream;
  external set stream(bool value);
}
@JS()
@anonymous
abstract class TextDecoderOptions{}
extension TextDecoderOptionsExtension on TextDecoderOptions {
  external bool get fatal;
  external set fatal(bool value);
  external bool get ignoreBOM;
  external set ignoreBOM(bool value);
}
@JS()
@anonymous
abstract class TextEncoderEncodeIntoResult{}
extension TextEncoderEncodeIntoResultExtension on TextEncoderEncodeIntoResult {
  external num get read;
  external set read(num value);
  external num get written;
  external set written(num value);
}
@JS()
@anonymous
abstract class ToggleEventInit{}
extension ToggleEventInitExtension on ToggleEventInit {
  external String get newState;
  external set newState(String value);
  external String get oldState;
  external set oldState(String value);
}
@JS()
@anonymous
abstract class TouchEventInit{}
extension TouchEventInitExtension on TouchEventInit {
  external List<Touch> get changedTouches;
  external set changedTouches(List<Touch> value);
  external List<Touch> get targetTouches;
  external set targetTouches(List<Touch> value);
  external List<Touch> get touches;
  external set touches(List<Touch> value);
}
@JS()
@anonymous
abstract class TouchInit{}
extension TouchInitExtension on TouchInit {
  external num get altitudeAngle;
  external set altitudeAngle(num value);
  external num get azimuthAngle;
  external set azimuthAngle(num value);
  external num get clientX;
  external set clientX(num value);
  external num get clientY;
  external set clientY(num value);
  external num get force;
  external set force(num value);
  external num get identifier;
  external set identifier(num value);
  external num get pageX;
  external set pageX(num value);
  external num get pageY;
  external set pageY(num value);
  external num get radiusX;
  external set radiusX(num value);
  external num get radiusY;
  external set radiusY(num value);
  external num get rotationAngle;
  external set rotationAngle(num value);
  external num get screenX;
  external set screenX(num value);
  external num get screenY;
  external set screenY(num value);
  external EventTarget get target;
  external set target(EventTarget value);
  external TouchType get touchType;
  external set touchType(TouchType value);
}
@JS()
@anonymous
abstract class TrackEventInit{}
extension TrackEventInitExtension on TrackEventInit {
  external TextTrack? get track;
  external set track(TextTrack? value);
}
@JS()
@anonymous
abstract class Transformer{}
extension TransformerExtension on Transformer {
  external TransformerFlushCallback<O> get flush;
  external set flush(TransformerFlushCallback<O> value);
  external dynamic get readableType;
  external set readableType(dynamic value);
  external TransformerStartCallback<O> get start;
  external set start(TransformerStartCallback<O> value);
  external TransformerTransformCallback<I, O> get transform;
  external set transform(TransformerTransformCallback<I, O> value);
  external dynamic get writableType;
  external set writableType(dynamic value);
}
@JS()
@anonymous
abstract class TransitionEventInit{}
extension TransitionEventInitExtension on TransitionEventInit {
  external num get elapsedTime;
  external set elapsedTime(num value);
  external String get propertyName;
  external set propertyName(String value);
  external String get pseudoElement;
  external set pseudoElement(String value);
}
@JS()
@anonymous
abstract class UIEventInit{}
extension UIEventInitExtension on UIEventInit {
  external num get detail;
  external set detail(num value);
  external Window? get view;
  external set view(Window? value);
  external num get which;
  external set which(num value);
}
@JS()
@anonymous
abstract class ULongRange{}
extension ULongRangeExtension on ULongRange {
  external num get max;
  external set max(num value);
  external num get min;
  external set min(num value);
}
@JS()
@anonymous
abstract class UnderlyingByteSource{}
extension UnderlyingByteSourceExtension on UnderlyingByteSource {
  external num get autoAllocateChunkSize;
  external set autoAllocateChunkSize(num value);
  external UnderlyingSourceCancelCallback get cancel;
  external set cancel(UnderlyingSourceCancelCallback value);
  external dynamic /* void|PromiseLike<void> */ Function(ReadableByteStreamController) get pull;
  external set pull(dynamic /* void|PromiseLike<void> */ Function(ReadableByteStreamController) value);
  external dynamic Function(ReadableByteStreamController) get start;
  external set start(dynamic Function(ReadableByteStreamController) value);
  external String get type;
  external set type(String value);
}
@JS()
@anonymous
abstract class UnderlyingDefaultSource{}
extension UnderlyingDefaultSourceExtension on UnderlyingDefaultSource {
  external UnderlyingSourceCancelCallback get cancel;
  external set cancel(UnderlyingSourceCancelCallback value);
  external dynamic /* void|PromiseLike<void> */ Function(ReadableStreamDefaultController<R>) get pull;
  external set pull(dynamic /* void|PromiseLike<void> */ Function(ReadableStreamDefaultController<R>) value);
  external dynamic Function(ReadableStreamDefaultController<R>) get start;
  external set start(dynamic Function(ReadableStreamDefaultController<R>) value);
  external dynamic get type;
  external set type(dynamic value);
}
@JS()
@anonymous
abstract class UnderlyingSink{}
extension UnderlyingSinkExtension on UnderlyingSink {
  external UnderlyingSinkAbortCallback get abort;
  external set abort(UnderlyingSinkAbortCallback value);
  external UnderlyingSinkCloseCallback get close;
  external set close(UnderlyingSinkCloseCallback value);
  external UnderlyingSinkStartCallback get start;
  external set start(UnderlyingSinkStartCallback value);
  external dynamic get type;
  external set type(dynamic value);
  external UnderlyingSinkWriteCallback<W> get write;
  external set write(UnderlyingSinkWriteCallback<W> value);
}
@JS()
@anonymous
abstract class UnderlyingSource{}
extension UnderlyingSourceExtension on UnderlyingSource {
  external num get autoAllocateChunkSize;
  external set autoAllocateChunkSize(num value);
  external UnderlyingSourceCancelCallback get cancel;
  external set cancel(UnderlyingSourceCancelCallback value);
  external UnderlyingSourcePullCallback<R> get pull;
  external set pull(UnderlyingSourcePullCallback<R> value);
  external UnderlyingSourceStartCallback<R> get start;
  external set start(UnderlyingSourceStartCallback<R> value);
  external ReadableStreamType get type;
  external set type(ReadableStreamType value);
}
@JS()
@anonymous
abstract class ValidityStateFlags{}
extension ValidityStateFlagsExtension on ValidityStateFlags {
  external bool get badInput;
  external set badInput(bool value);
  external bool get customError;
  external set customError(bool value);
  external bool get patternMismatch;
  external set patternMismatch(bool value);
  external bool get rangeOverflow;
  external set rangeOverflow(bool value);
  external bool get rangeUnderflow;
  external set rangeUnderflow(bool value);
  external bool get stepMismatch;
  external set stepMismatch(bool value);
  external bool get tooLong;
  external set tooLong(bool value);
  external bool get tooShort;
  external set tooShort(bool value);
  external bool get typeMismatch;
  external set typeMismatch(bool value);
  external bool get valueMissing;
  external set valueMissing(bool value);
}
@JS()
@anonymous
abstract class VideoColorSpaceInit{}
extension VideoColorSpaceInitExtension on VideoColorSpaceInit {
  external bool? get fullRange;
  external set fullRange(bool? value);
  external VideoMatrixCoefficients? get matrix;
  external set matrix(VideoMatrixCoefficients? value);
  external VideoColorPrimaries? get primaries;
  external set primaries(VideoColorPrimaries? value);
  external VideoTransferCharacteristics? get transfer;
  external set transfer(VideoTransferCharacteristics? value);
}
@JS()
@anonymous
abstract class VideoConfiguration{}
extension VideoConfigurationExtension on VideoConfiguration {
  external num get bitrate;
  external set bitrate(num value);
  external ColorGamut get colorGamut;
  external set colorGamut(ColorGamut value);
  external String get contentType;
  external set contentType(String value);
  external num get framerate;
  external set framerate(num value);
  external bool get hasAlphaChannel;
  external set hasAlphaChannel(bool value);
  external HdrMetadataType get hdrMetadataType;
  external set hdrMetadataType(HdrMetadataType value);
  external num get height;
  external set height(num value);
  external String get scalabilityMode;
  external set scalabilityMode(String value);
  external TransferFunction get transferFunction;
  external set transferFunction(TransferFunction value);
  external num get width;
  external set width(num value);
}
@JS()
@anonymous
abstract class VideoDecoderConfig{}
extension VideoDecoderConfigExtension on VideoDecoderConfig {
  external String get codec;
  external set codec(String value);
  external num get codedHeight;
  external set codedHeight(num value);
  external num get codedWidth;
  external set codedWidth(num value);
  external VideoColorSpaceInit get colorSpace;
  external set colorSpace(VideoColorSpaceInit value);
  external AllowSharedBufferSource get description;
  external set description(AllowSharedBufferSource value);
  external num get displayAspectHeight;
  external set displayAspectHeight(num value);
  external num get displayAspectWidth;
  external set displayAspectWidth(num value);
  external HardwareAcceleration get hardwareAcceleration;
  external set hardwareAcceleration(HardwareAcceleration value);
  external bool get optimizeForLatency;
  external set optimizeForLatency(bool value);
}
@JS()
@anonymous
abstract class VideoDecoderInit{}
extension VideoDecoderInitExtension on VideoDecoderInit {
  external WebCodecsErrorCallback get error;
  external set error(WebCodecsErrorCallback value);
  external VideoFrameOutputCallback get output;
  external set output(VideoFrameOutputCallback value);
}
@JS()
@anonymous
abstract class VideoDecoderSupport{}
extension VideoDecoderSupportExtension on VideoDecoderSupport {
  external VideoDecoderConfig get config;
  external set config(VideoDecoderConfig value);
  external bool get supported;
  external set supported(bool value);
}
@JS()
@anonymous
abstract class VideoEncoderConfig{}
extension VideoEncoderConfigExtension on VideoEncoderConfig {
  external AlphaOption get alpha;
  external set alpha(AlphaOption value);
  external AvcEncoderConfig get avc;
  external set avc(AvcEncoderConfig value);
  external num get bitrate;
  external set bitrate(num value);
  external VideoEncoderBitrateMode get bitrateMode;
  external set bitrateMode(VideoEncoderBitrateMode value);
  external String get codec;
  external set codec(String value);
  external String get contentHint;
  external set contentHint(String value);
  external num get displayHeight;
  external set displayHeight(num value);
  external num get displayWidth;
  external set displayWidth(num value);
  external num get framerate;
  external set framerate(num value);
  external HardwareAcceleration get hardwareAcceleration;
  external set hardwareAcceleration(HardwareAcceleration value);
  external num get height;
  external set height(num value);
  external LatencyMode get latencyMode;
  external set latencyMode(LatencyMode value);
  external String get scalabilityMode;
  external set scalabilityMode(String value);
  external num get width;
  external set width(num value);
}
@JS()
@anonymous
abstract class VideoEncoderEncodeOptions{}
extension VideoEncoderEncodeOptionsExtension on VideoEncoderEncodeOptions {
  external VideoEncoderEncodeOptionsForAvc get avc;
  external set avc(VideoEncoderEncodeOptionsForAvc value);
  external bool get keyFrame;
  external set keyFrame(bool value);
}
@JS()
@anonymous
abstract class VideoEncoderEncodeOptionsForAvc{}
extension VideoEncoderEncodeOptionsForAvcExtension on VideoEncoderEncodeOptionsForAvc {
  external num? get quantizer;
  external set quantizer(num? value);
}
@JS()
@anonymous
abstract class VideoEncoderInit{}
extension VideoEncoderInitExtension on VideoEncoderInit {
  external WebCodecsErrorCallback get error;
  external set error(WebCodecsErrorCallback value);
  external EncodedVideoChunkOutputCallback get output;
  external set output(EncodedVideoChunkOutputCallback value);
}
@JS()
@anonymous
abstract class VideoEncoderSupport{}
extension VideoEncoderSupportExtension on VideoEncoderSupport {
  external VideoEncoderConfig get config;
  external set config(VideoEncoderConfig value);
  external bool get supported;
  external set supported(bool value);
}
@JS()
@anonymous
abstract class VideoFrameBufferInit{}
extension VideoFrameBufferInitExtension on VideoFrameBufferInit {
  external num get codedHeight;
  external set codedHeight(num value);
  external num get codedWidth;
  external set codedWidth(num value);
  external VideoColorSpaceInit get colorSpace;
  external set colorSpace(VideoColorSpaceInit value);
  external num get displayHeight;
  external set displayHeight(num value);
  external num get displayWidth;
  external set displayWidth(num value);
  external num get duration;
  external set duration(num value);
  external VideoPixelFormat get format;
  external set format(VideoPixelFormat value);
  external List<PlaneLayout> get layout;
  external set layout(List<PlaneLayout> value);
  external num get timestamp;
  external set timestamp(num value);
  external DOMRectInit get visibleRect;
  external set visibleRect(DOMRectInit value);
}
@JS()
@anonymous
abstract class VideoFrameCallbackMetadata{}
extension VideoFrameCallbackMetadataExtension on VideoFrameCallbackMetadata {
  external DOMHighResTimeStamp get captureTime;
  external set captureTime(DOMHighResTimeStamp value);
  external DOMHighResTimeStamp get expectedDisplayTime;
  external set expectedDisplayTime(DOMHighResTimeStamp value);
  external num get height;
  external set height(num value);
  external num get mediaTime;
  external set mediaTime(num value);
  external DOMHighResTimeStamp get presentationTime;
  external set presentationTime(DOMHighResTimeStamp value);
  external num get presentedFrames;
  external set presentedFrames(num value);
  external num get processingDuration;
  external set processingDuration(num value);
  external DOMHighResTimeStamp get receiveTime;
  external set receiveTime(DOMHighResTimeStamp value);
  external num get rtpTimestamp;
  external set rtpTimestamp(num value);
  external num get width;
  external set width(num value);
}
@JS()
@anonymous
abstract class VideoFrameCopyToOptions{}
extension VideoFrameCopyToOptionsExtension on VideoFrameCopyToOptions {
  external PredefinedColorSpace get colorSpace;
  external set colorSpace(PredefinedColorSpace value);
  external VideoPixelFormat get format;
  external set format(VideoPixelFormat value);
  external List<PlaneLayout> get layout;
  external set layout(List<PlaneLayout> value);
  external DOMRectInit get rect;
  external set rect(DOMRectInit value);
}
@JS()
@anonymous
abstract class VideoFrameInit{}
extension VideoFrameInitExtension on VideoFrameInit {
  external AlphaOption get alpha;
  external set alpha(AlphaOption value);
  external num get displayHeight;
  external set displayHeight(num value);
  external num get displayWidth;
  external set displayWidth(num value);
  external num get duration;
  external set duration(num value);
  external num get timestamp;
  external set timestamp(num value);
  external DOMRectInit get visibleRect;
  external set visibleRect(DOMRectInit value);
}
@JS()
@anonymous
abstract class WaveShaperOptions{}
extension WaveShaperOptionsExtension on WaveShaperOptions {
  external dynamic /* List<num>|Float32Array */ get curve;
  external set curve(dynamic /* List<num>|Float32Array */ value);
  external OverSampleType get oversample;
  external set oversample(OverSampleType value);
}
@JS()
@anonymous
abstract class WebGLContextAttributes{}
extension WebGLContextAttributesExtension on WebGLContextAttributes {
  external bool get alpha;
  external set alpha(bool value);
  external bool get antialias;
  external set antialias(bool value);
  external bool get depth;
  external set depth(bool value);
  external bool get desynchronized;
  external set desynchronized(bool value);
  external bool get failIfMajorPerformanceCaveat;
  external set failIfMajorPerformanceCaveat(bool value);
  external WebGLPowerPreference get powerPreference;
  external set powerPreference(WebGLPowerPreference value);
  external bool get premultipliedAlpha;
  external set premultipliedAlpha(bool value);
  external bool get preserveDrawingBuffer;
  external set preserveDrawingBuffer(bool value);
  external bool get stencil;
  external set stencil(bool value);
}
@JS()
@anonymous
abstract class WebGLContextEventInit{}
extension WebGLContextEventInitExtension on WebGLContextEventInit {
  external String get statusMessage;
  external set statusMessage(String value);
}
@JS()
@anonymous
abstract class WebTransportCloseInfo{}
extension WebTransportCloseInfoExtension on WebTransportCloseInfo {
  external num get closeCode;
  external set closeCode(num value);
  external String get reason;
  external set reason(String value);
}
@JS()
@anonymous
abstract class WebTransportErrorOptions{}
extension WebTransportErrorOptionsExtension on WebTransportErrorOptions {
  external WebTransportErrorSource get source;
  external set source(WebTransportErrorSource value);
  external num? get streamErrorCode;
  external set streamErrorCode(num? value);
}
@JS()
@anonymous
abstract class WebTransportHash{}
extension WebTransportHashExtension on WebTransportHash {
  external String get algorithm;
  external set algorithm(String value);
  external BufferSource get value;
  external set value(BufferSource value);
}
@JS()
@anonymous
abstract class WebTransportOptions{}
extension WebTransportOptionsExtension on WebTransportOptions {
  external bool get allowPooling;
  external set allowPooling(bool value);
  external WebTransportCongestionControl get congestionControl;
  external set congestionControl(WebTransportCongestionControl value);
  external bool get requireUnreliable;
  external set requireUnreliable(bool value);
  external List<WebTransportHash> get serverCertificateHashes;
  external set serverCertificateHashes(List<WebTransportHash> value);
}
@JS()
@anonymous
abstract class WebTransportSendStreamOptions{}
extension WebTransportSendStreamOptionsExtension on WebTransportSendStreamOptions {
  external num get sendOrder;
  external set sendOrder(num value);
}
@JS()
@anonymous
abstract class WheelEventInit{}
extension WheelEventInitExtension on WheelEventInit {
  external num get deltaMode;
  external set deltaMode(num value);
  external num get deltaX;
  external set deltaX(num value);
  external num get deltaY;
  external set deltaY(num value);
  external num get deltaZ;
  external set deltaZ(num value);
}
@JS()
@anonymous
abstract class WindowPostMessageOptions{}
extension WindowPostMessageOptionsExtension on WindowPostMessageOptions {
  external String get targetOrigin;
  external set targetOrigin(String value);
}
@JS()
@anonymous
abstract class WorkerOptions{}
extension WorkerOptionsExtension on WorkerOptions {
  external RequestCredentials get credentials;
  external set credentials(RequestCredentials value);
  external String get name;
  external set name(String value);
  external WorkerType get type;
  external set type(WorkerType value);
}
@JS()
@anonymous
abstract class WorkletOptions{}
extension WorkletOptionsExtension on WorkletOptions {
  external RequestCredentials get credentials;
  external set credentials(RequestCredentials value);
}
@JS()
@anonymous
abstract class WriteParams{}
extension WriteParamsExtension on WriteParams {
  external dynamic /* BufferSource|Blob|String */ get data;
  external set data(dynamic /* BufferSource|Blob|String */ value);
  external num? get position;
  external set position(num? value);
  external num? get size;
  external set size(num? value);
  external WriteCommandType get type;
  external set type(WriteCommandType value);
}
typedef NodeFilter = dynamic /* num Function(Node)|dynamic */;
@JS("NodeFilter")
external AnonInterface$26 NodeFilter;
typedef XPathNSResolver = dynamic /* String? Function(String?)|dynamic */;
@JS()
@anonymous
abstract class ANGLE_instanced_arrays{}
extension ANGLE_instanced_arraysExtension on ANGLE_instanced_arrays {
  external num get VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE;
  @JS("drawArraysInstancedANGLE")
  external void drawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
  @JS("drawElementsInstancedANGLE")
  external void drawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, GLintptr offset, GLsizei primcount);
  @JS("vertexAttribDivisorANGLE")
  external void vertexAttribDivisorANGLE(GLuint index, GLuint divisor);
}
@JS()
@anonymous
abstract class ARIAMixin{}
extension ARIAMixinExtension on ARIAMixin {
  external String? get ariaAtomic;
  external set ariaAtomic(String? value);
  external String? get ariaAutoComplete;
  external set ariaAutoComplete(String? value);
  external String? get ariaBrailleLabel;
  external set ariaBrailleLabel(String? value);
  external String? get ariaBrailleRoleDescription;
  external set ariaBrailleRoleDescription(String? value);
  external String? get ariaBusy;
  external set ariaBusy(String? value);
  external String? get ariaChecked;
  external set ariaChecked(String? value);
  external String? get ariaColCount;
  external set ariaColCount(String? value);
  external String? get ariaColIndex;
  external set ariaColIndex(String? value);
  external String? get ariaColIndexText;
  external set ariaColIndexText(String? value);
  external String? get ariaColSpan;
  external set ariaColSpan(String? value);
  external String? get ariaCurrent;
  external set ariaCurrent(String? value);
  external String? get ariaDescription;
  external set ariaDescription(String? value);
  external String? get ariaDisabled;
  external set ariaDisabled(String? value);
  external String? get ariaExpanded;
  external set ariaExpanded(String? value);
  external String? get ariaHasPopup;
  external set ariaHasPopup(String? value);
  external String? get ariaHidden;
  external set ariaHidden(String? value);
  external String? get ariaInvalid;
  external set ariaInvalid(String? value);
  external String? get ariaKeyShortcuts;
  external set ariaKeyShortcuts(String? value);
  external String? get ariaLabel;
  external set ariaLabel(String? value);
  external String? get ariaLevel;
  external set ariaLevel(String? value);
  external String? get ariaLive;
  external set ariaLive(String? value);
  external String? get ariaModal;
  external set ariaModal(String? value);
  external String? get ariaMultiLine;
  external set ariaMultiLine(String? value);
  external String? get ariaMultiSelectable;
  external set ariaMultiSelectable(String? value);
  external String? get ariaOrientation;
  external set ariaOrientation(String? value);
  external String? get ariaPlaceholder;
  external set ariaPlaceholder(String? value);
  external String? get ariaPosInSet;
  external set ariaPosInSet(String? value);
  external String? get ariaPressed;
  external set ariaPressed(String? value);
  external String? get ariaReadOnly;
  external set ariaReadOnly(String? value);
  external String? get ariaRelevant;
  external set ariaRelevant(String? value);
  external String? get ariaRequired;
  external set ariaRequired(String? value);
  external String? get ariaRoleDescription;
  external set ariaRoleDescription(String? value);
  external String? get ariaRowCount;
  external set ariaRowCount(String? value);
  external String? get ariaRowIndex;
  external set ariaRowIndex(String? value);
  external String? get ariaRowIndexText;
  external set ariaRowIndexText(String? value);
  external String? get ariaRowSpan;
  external set ariaRowSpan(String? value);
  external String? get ariaSelected;
  external set ariaSelected(String? value);
  external String? get ariaSetSize;
  external set ariaSetSize(String? value);
  external String? get ariaSort;
  external set ariaSort(String? value);
  external String? get ariaValueMax;
  external set ariaValueMax(String? value);
  external String? get ariaValueMin;
  external set ariaValueMin(String? value);
  external String? get ariaValueNow;
  external set ariaValueNow(String? value);
  external String? get ariaValueText;
  external set ariaValueText(String? value);
  external String? get role;
  external set role(String? value);
}
@JS()
@anonymous
abstract class AbortController{}
extension AbortControllerExtension on AbortController {
  external AbortSignal get signal;
  @JS("abort")
  external void abort([dynamic reason]);
}
@JS("AbortController")
external AnonInterface$28 AbortController;
@JS()
@anonymous
abstract class AbortSignalEventMap{}
extension AbortSignalEventMapExtension on AbortSignalEventMap {
  external Event get "abort";
  external set "abort"(Event value);
}
@JS()
@anonymous
abstract class AbortSignal{}
extension AbortSignalExtension on AbortSignal {
  external bool get aborted;
  external dynamic Function(AbortSignal, Event)? get onabort;
  external set onabort(dynamic Function(AbortSignal, Event)? value);
  external dynamic get reason;
  @JS("throwIfAborted")
  external void throwIfAborted();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(AbortSignal, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(AbortSignal, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("AbortSignal")
external AnonInterface$29 AbortSignal;
@JS()
@anonymous
abstract class AbstractRange{}
extension AbstractRangeExtension on AbstractRange {
  external bool get collapsed;
  external Node get endContainer;
  external num get endOffset;
  external Node get startContainer;
  external num get startOffset;
}
@JS("AbstractRange")
external AnonInterface$30 AbstractRange;
@JS()
@anonymous
abstract class AbstractWorkerEventMap{}
extension AbstractWorkerEventMapExtension on AbstractWorkerEventMap {
  external ErrorEvent get "error";
  external set "error"(ErrorEvent value);
}
@JS()
@anonymous
abstract class AbstractWorker{}
extension AbstractWorkerExtension on AbstractWorker {
  external dynamic Function(AbstractWorker, ErrorEvent)? get onerror;
  external set onerror(dynamic Function(AbstractWorker, ErrorEvent)? value);
  @JS("addEventListener")
  external void addEventListener_1(K type, dynamic Function(AbstractWorker, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener_2(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener_1(K type, dynamic Function(AbstractWorker, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener_2(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS()
@anonymous
abstract class AnalyserNode{}
extension AnalyserNodeExtension on AnalyserNode {
  external num get fftSize;
  external set fftSize(num value);
  external num get frequencyBinCount;
  external num get maxDecibels;
  external set maxDecibels(num value);
  external num get minDecibels;
  external set minDecibels(num value);
  external num get smoothingTimeConstant;
  external set smoothingTimeConstant(num value);
  @JS("getByteFrequencyData")
  external void getByteFrequencyData(Uint8Array array);
  @JS("getByteTimeDomainData")
  external void getByteTimeDomainData(Uint8Array array);
  @JS("getFloatFrequencyData")
  external void getFloatFrequencyData(Float32Array array);
  @JS("getFloatTimeDomainData")
  external void getFloatTimeDomainData(Float32Array array);
}
@JS("AnalyserNode")
external AnonInterface$31 AnalyserNode;
@JS()
@anonymous
abstract class Animatable{}
extension AnimatableExtension on Animatable {
  @JS("animate")
  external Animation animate(dynamic /* List<Keyframe>|PropertyIndexedKeyframes */ keyframes, [dynamic /* num|KeyframeAnimationOptions */ options]);
  @JS("getAnimations")
  external List<Animation> getAnimations([GetAnimationsOptions options]);
}
@JS()
@anonymous
abstract class AnimationEventMap{}
extension AnimationEventMapExtension on AnimationEventMap {
  external AnimationPlaybackEvent get "cancel";
  external set "cancel"(AnimationPlaybackEvent value);
  external AnimationPlaybackEvent get "finish";
  external set "finish"(AnimationPlaybackEvent value);
  external AnimationPlaybackEvent get "remove";
  external set "remove"(AnimationPlaybackEvent value);
}
@JS()
@anonymous
abstract class Animation{}
extension AnimationExtension on Animation {
  external CSSNumberish? get currentTime;
  external set currentTime(CSSNumberish? value);
  external AnimationEffect? get effect;
  external set effect(AnimationEffect? value);
  external Future<Animation> get finished;
  external String get id;
  external set id(String value);
  external dynamic Function(Animation, AnimationPlaybackEvent)? get oncancel;
  external set oncancel(dynamic Function(Animation, AnimationPlaybackEvent)? value);
  external dynamic Function(Animation, AnimationPlaybackEvent)? get onfinish;
  external set onfinish(dynamic Function(Animation, AnimationPlaybackEvent)? value);
  external dynamic Function(Animation, AnimationPlaybackEvent)? get onremove;
  external set onremove(dynamic Function(Animation, AnimationPlaybackEvent)? value);
  external bool get pending;
  external AnimationPlayState get playState;
  external num get playbackRate;
  external set playbackRate(num value);
  external Future<Animation> get ready;
  external AnimationReplaceState get replaceState;
  external CSSNumberish? get startTime;
  external set startTime(CSSNumberish? value);
  external AnimationTimeline? get timeline;
  external set timeline(AnimationTimeline? value);
  @JS("cancel")
  external void cancel();
  @JS("commitStyles")
  external void commitStyles();
  @JS("finish")
  external void finish();
  @JS("pause")
  external void pause();
  @JS("persist")
  external void persist();
  @JS("play")
  external void play();
  @JS("reverse")
  external void reverse();
  @JS("updatePlaybackRate")
  external void updatePlaybackRate(num playbackRate);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(Animation, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(Animation, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("Animation")
external AnonInterface$32 Animation;
@JS()
@anonymous
abstract class AnimationEffect{}
extension AnimationEffectExtension on AnimationEffect {
  @JS("getComputedTiming")
  external ComputedEffectTiming getComputedTiming();
  @JS("getTiming")
  external EffectTiming getTiming();
  @JS("updateTiming")
  external void updateTiming([OptionalEffectTiming timing]);
}
@JS("AnimationEffect")
external AnonInterface$33 AnimationEffect;
@JS()
@anonymous
abstract class AnimationEvent{}
extension AnimationEventExtension on AnimationEvent {
  external String get animationName;
  external num get elapsedTime;
  external String get pseudoElement;
}
@JS("AnimationEvent")
external AnonInterface$34 AnimationEvent;
@JS()
@anonymous
abstract class AnimationFrameProvider{}
extension AnimationFrameProviderExtension on AnimationFrameProvider {
  @JS("cancelAnimationFrame")
  external void cancelAnimationFrame(num handle);
  @JS("requestAnimationFrame")
  external num requestAnimationFrame(FrameRequestCallback callback);
}
@JS()
@anonymous
abstract class AnimationPlaybackEvent{}
extension AnimationPlaybackEventExtension on AnimationPlaybackEvent {
  external CSSNumberish? get currentTime;
  external CSSNumberish? get timelineTime;
}
@JS("AnimationPlaybackEvent")
external AnonInterface$35 AnimationPlaybackEvent;
@JS()
@anonymous
abstract class AnimationTimeline{}
extension AnimationTimelineExtension on AnimationTimeline {
  external CSSNumberish? get currentTime;
}
@JS("AnimationTimeline")
external AnonInterface$36 AnimationTimeline;
@JS()
@anonymous
abstract class Attr{}
extension AttrExtension on Attr {
  external String get localName;
  external String get name;
  external String? get namespaceURI;
  external Document get ownerDocument;
  external Element? get ownerElement;
  external String? get prefix;
  external bool get specified;
  external String get value;
  external set value(String value);
}
@JS("Attr")
external AnonInterface$37 Attr;
@JS()
@anonymous
abstract class AudioBuffer{}
extension AudioBufferExtension on AudioBuffer {
  external num get duration;
  external num get length;
  external num get numberOfChannels;
  external num get sampleRate;
  @JS("copyFromChannel")
  external void copyFromChannel(Float32Array destination, num channelNumber, [num bufferOffset]);
  @JS("copyToChannel")
  external void copyToChannel(Float32Array source, num channelNumber, [num bufferOffset]);
  @JS("getChannelData")
  external Float32Array getChannelData(num channel);
}
@JS("AudioBuffer")
external AnonInterface$38 AudioBuffer;
@JS()
@anonymous
abstract class AudioBufferSourceNode{}
extension AudioBufferSourceNodeExtension on AudioBufferSourceNode {
  external AudioBuffer? get buffer;
  external set buffer(AudioBuffer? value);
  external AudioParam get detune;
  external bool get loop;
  external set loop(bool value);
  external num get loopEnd;
  external set loopEnd(num value);
  external num get loopStart;
  external set loopStart(num value);
  external AudioParam get playbackRate;
  @JS("start")
  external void start([num when, num offset, num duration]);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(AudioBufferSourceNode, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(AudioBufferSourceNode, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("AudioBufferSourceNode")
external AnonInterface$39 AudioBufferSourceNode;
@JS()
@anonymous
abstract class AudioContext{}
extension AudioContextExtension on AudioContext {
  external num get baseLatency;
  external num get outputLatency;
  @JS("close")
  external Future<void> close();
  @JS("createMediaElementSource")
  external MediaElementAudioSourceNode createMediaElementSource(HTMLMediaElement mediaElement);
  @JS("createMediaStreamDestination")
  external MediaStreamAudioDestinationNode createMediaStreamDestination();
  @JS("createMediaStreamSource")
  external MediaStreamAudioSourceNode createMediaStreamSource(MediaStream mediaStream);
  @JS("getOutputTimestamp")
  external AudioTimestamp getOutputTimestamp();
  @JS("resume")
  external Future<void> resume();
  @JS("suspend")
  external Future<void> suspend();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(AudioContext, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(AudioContext, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("AudioContext")
external AnonInterface$40 AudioContext;
@JS()
@anonymous
abstract class AudioData{}
extension AudioDataExtension on AudioData {
  external num get duration;
  external AudioSampleFormat? get format;
  external num get numberOfChannels;
  external num get numberOfFrames;
  external num get sampleRate;
  external num get timestamp;
  @JS("allocationSize")
  external num allocationSize(AudioDataCopyToOptions options);
  @JS("clone")
  external AudioData clone();
  @JS("close")
  external void close();
  @JS("copyTo")
  external void copyTo(AllowSharedBufferSource destination, AudioDataCopyToOptions options);
}
@JS("AudioData")
external AnonInterface$41 AudioData;
@JS()
@anonymous
abstract class AudioDecoderEventMap{}
extension AudioDecoderEventMapExtension on AudioDecoderEventMap {
  external Event get "dequeue";
  external set "dequeue"(Event value);
}
@JS()
@anonymous
abstract class AudioDecoder{}
extension AudioDecoderExtension on AudioDecoder {
  external num get decodeQueueSize;
  external dynamic Function(AudioDecoder, Event)? get ondequeue;
  external set ondequeue(dynamic Function(AudioDecoder, Event)? value);
  external CodecState get state;
  @JS("close")
  external void close();
  @JS("configure")
  external void configure(AudioDecoderConfig config);
  @JS("decode")
  external void decode(EncodedAudioChunk chunk);
  @JS("flush")
  external Future<void> flush();
  @JS("reset")
  external void reset();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(AudioDecoder, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(AudioDecoder, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("AudioDecoder")
external AnonInterface$42 AudioDecoder;
@JS()
@anonymous
abstract class AudioDestinationNode{}
extension AudioDestinationNodeExtension on AudioDestinationNode {
  external num get maxChannelCount;
}
@JS("AudioDestinationNode")
external AnonInterface$43 AudioDestinationNode;
@JS()
@anonymous
abstract class AudioEncoderEventMap{}
extension AudioEncoderEventMapExtension on AudioEncoderEventMap {
  external Event get "dequeue";
  external set "dequeue"(Event value);
}
@JS()
@anonymous
abstract class AudioEncoder{}
extension AudioEncoderExtension on AudioEncoder {
  external num get encodeQueueSize;
  external dynamic Function(AudioEncoder, Event)? get ondequeue;
  external set ondequeue(dynamic Function(AudioEncoder, Event)? value);
  external CodecState get state;
  @JS("close")
  external void close();
  @JS("configure")
  external void configure(AudioEncoderConfig config);
  @JS("encode")
  external void encode(AudioData data);
  @JS("flush")
  external Future<void> flush();
  @JS("reset")
  external void reset();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(AudioEncoder, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(AudioEncoder, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("AudioEncoder")
external AnonInterface$44 AudioEncoder;
@JS()
@anonymous
abstract class AudioListener{}
extension AudioListenerExtension on AudioListener {
  external AudioParam get forwardX;
  external AudioParam get forwardY;
  external AudioParam get forwardZ;
  external AudioParam get positionX;
  external AudioParam get positionY;
  external AudioParam get positionZ;
  external AudioParam get upX;
  external AudioParam get upY;
  external AudioParam get upZ;
  @JS("setOrientation")
  external void setOrientation(num x, num y, num z, num xUp, num yUp, num zUp);
  @JS("setPosition")
  external void setPosition(num x, num y, num z);
}
@JS("AudioListener")
external AnonInterface$45 AudioListener;
@JS()
@anonymous
abstract class AudioNode{}
extension AudioNodeExtension on AudioNode {
  external num get channelCount;
  external set channelCount(num value);
  external ChannelCountMode get channelCountMode;
  external set channelCountMode(ChannelCountMode value);
  external ChannelInterpretation get channelInterpretation;
  external set channelInterpretation(ChannelInterpretation value);
  external BaseAudioContext get context;
  external num get numberOfInputs;
  external num get numberOfOutputs;
  @JS("connect")
  external AudioNode connect(AudioNode destinationNode, [num output, num input]);
  @JS("connect")
  external void connect(AudioParam destinationParam, [num output]);
  @JS("disconnect")
  external void disconnect();
  @JS("disconnect")
  external void disconnect(num output);
  @JS("disconnect")
  external void disconnect(AudioNode destinationNode);
  @JS("disconnect")
  external void disconnect(AudioNode destinationNode, num output);
  @JS("disconnect")
  external void disconnect(AudioNode destinationNode, num output, num input);
  @JS("disconnect")
  external void disconnect(AudioParam destinationParam);
  @JS("disconnect")
  external void disconnect(AudioParam destinationParam, num output);
}
@JS("AudioNode")
external AnonInterface$46 AudioNode;
@JS()
@anonymous
abstract class AudioParam{}
extension AudioParamExtension on AudioParam {
  external AutomationRate get automationRate;
  external set automationRate(AutomationRate value);
  external num get defaultValue;
  external num get maxValue;
  external num get minValue;
  external num get value;
  external set value(num value);
  @JS("cancelAndHoldAtTime")
  external AudioParam cancelAndHoldAtTime(num cancelTime);
  @JS("cancelScheduledValues")
  external AudioParam cancelScheduledValues(num cancelTime);
  @JS("exponentialRampToValueAtTime")
  external AudioParam exponentialRampToValueAtTime(num value, num endTime);
  @JS("linearRampToValueAtTime")
  external AudioParam linearRampToValueAtTime(num value, num endTime);
  @JS("setTargetAtTime")
  external AudioParam setTargetAtTime(num target, num startTime, num timeConstant);
  @JS("setValueAtTime")
  external AudioParam setValueAtTime(num value, num startTime);
  @JS("setValueCurveAtTime")
  external AudioParam setValueCurveAtTime(dynamic /* List<num>|Float32Array */ values, num startTime, num duration);
}
@JS("AudioParam")
external AnonInterface$47 AudioParam;
@JS()
@anonymous
abstract class AudioParamMap{}
extension AudioParamMapExtension on AudioParamMap {
  @JS("forEach")
  external void forEach(void Function(AudioParam, String, AudioParamMap) callbackfn, [dynamic thisArg]);
}
@JS("AudioParamMap")
external AnonInterface$48 AudioParamMap;
@JS()
@anonymous
abstract class AudioProcessingEvent{}
extension AudioProcessingEventExtension on AudioProcessingEvent {
  external AudioBuffer get inputBuffer;
  external AudioBuffer get outputBuffer;
  external num get playbackTime;
}
@JS("AudioProcessingEvent")
external AnonInterface$49 AudioProcessingEvent;
@JS()
@anonymous
abstract class AudioScheduledSourceNodeEventMap{}
extension AudioScheduledSourceNodeEventMapExtension on AudioScheduledSourceNodeEventMap {
  external Event get "ended";
  external set "ended"(Event value);
}
@JS()
@anonymous
abstract class AudioScheduledSourceNode{}
extension AudioScheduledSourceNodeExtension on AudioScheduledSourceNode {
  external dynamic Function(AudioScheduledSourceNode, Event)? get onended;
  external set onended(dynamic Function(AudioScheduledSourceNode, Event)? value);
  @JS("start")
  external void start([num when]);
  @JS("stop")
  external void stop([num when]);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(AudioScheduledSourceNode, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(AudioScheduledSourceNode, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("AudioScheduledSourceNode")
external AnonInterface$50 AudioScheduledSourceNode;
@JS()
@anonymous
abstract class AudioWorklet{}
extension AudioWorkletExtension on AudioWorklet {
}
@JS("AudioWorklet")
external AnonInterface$51 AudioWorklet;
@JS()
@anonymous
abstract class AudioWorkletNodeEventMap{}
extension AudioWorkletNodeEventMapExtension on AudioWorkletNodeEventMap {
  external ErrorEvent get "processorerror";
  external set "processorerror"(ErrorEvent value);
}
@JS()
@anonymous
abstract class AudioWorkletNode{}
extension AudioWorkletNodeExtension on AudioWorkletNode {
  external dynamic Function(AudioWorkletNode, ErrorEvent)? get onprocessorerror;
  external set onprocessorerror(dynamic Function(AudioWorkletNode, ErrorEvent)? value);
  external AudioParamMap get parameters;
  external MessagePort get port;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(AudioWorkletNode, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(AudioWorkletNode, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("AudioWorkletNode")
external AnonInterface$52 AudioWorkletNode;
@JS()
@anonymous
abstract class AuthenticatorAssertionResponse{}
extension AuthenticatorAssertionResponseExtension on AuthenticatorAssertionResponse {
  external ArrayBuffer get authenticatorData;
  external ArrayBuffer get signature;
  external ArrayBuffer? get userHandle;
}
@JS("AuthenticatorAssertionResponse")
external AnonInterface$53 AuthenticatorAssertionResponse;
@JS()
@anonymous
abstract class AuthenticatorAttestationResponse{}
extension AuthenticatorAttestationResponseExtension on AuthenticatorAttestationResponse {
  external ArrayBuffer get attestationObject;
  @JS("getAuthenticatorData")
  external ArrayBuffer getAuthenticatorData();
  @JS("getPublicKey")
  external ArrayBuffer? getPublicKey();
  @JS("getPublicKeyAlgorithm")
  external COSEAlgorithmIdentifier getPublicKeyAlgorithm();
  @JS("getTransports")
  external List<String> getTransports();
}
@JS("AuthenticatorAttestationResponse")
external AnonInterface$54 AuthenticatorAttestationResponse;
@JS()
@anonymous
abstract class AuthenticatorResponse{}
extension AuthenticatorResponseExtension on AuthenticatorResponse {
  external ArrayBuffer get clientDataJSON;
}
@JS("AuthenticatorResponse")
external AnonInterface$55 AuthenticatorResponse;
@JS()
@anonymous
abstract class BarProp{}
extension BarPropExtension on BarProp {
  external bool get visible;
}
@JS("BarProp")
external AnonInterface$56 BarProp;
@JS()
@anonymous
abstract class BaseAudioContextEventMap{}
extension BaseAudioContextEventMapExtension on BaseAudioContextEventMap {
  external Event get "statechange";
  external set "statechange"(Event value);
}
@JS()
@anonymous
abstract class BaseAudioContext{}
extension BaseAudioContextExtension on BaseAudioContext {
  external AudioWorklet get audioWorklet;
  external num get currentTime;
  external AudioDestinationNode get destination;
  external AudioListener get listener;
  external dynamic Function(BaseAudioContext, Event)? get onstatechange;
  external set onstatechange(dynamic Function(BaseAudioContext, Event)? value);
  external num get sampleRate;
  external AudioContextState get state;
  @JS("createAnalyser")
  external AnalyserNode createAnalyser();
  @JS("createBiquadFilter")
  external BiquadFilterNode createBiquadFilter();
  @JS("createBuffer")
  external AudioBuffer createBuffer(num numberOfChannels, num length, num sampleRate);
  @JS("createBufferSource")
  external AudioBufferSourceNode createBufferSource();
  @JS("createChannelMerger")
  external ChannelMergerNode createChannelMerger([num numberOfInputs]);
  @JS("createChannelSplitter")
  external ChannelSplitterNode createChannelSplitter([num numberOfOutputs]);
  @JS("createConstantSource")
  external ConstantSourceNode createConstantSource();
  @JS("createConvolver")
  external ConvolverNode createConvolver();
  @JS("createDelay")
  external DelayNode createDelay([num maxDelayTime]);
  @JS("createDynamicsCompressor")
  external DynamicsCompressorNode createDynamicsCompressor();
  @JS("createGain")
  external GainNode createGain();
  @JS("createIIRFilter")
  external IIRFilterNode createIIRFilter(List<num> feedforward, List<num> feedback);
  @JS("createOscillator")
  external OscillatorNode createOscillator();
  @JS("createPanner")
  external PannerNode createPanner();
  @JS("createPeriodicWave")
  external PeriodicWave createPeriodicWave(dynamic /* List<num>|Float32Array */ real, dynamic /* List<num>|Float32Array */ imag, [PeriodicWaveConstraints constraints]);
  @JS("createScriptProcessor")
  external ScriptProcessorNode createScriptProcessor([num bufferSize, num numberOfInputChannels, num numberOfOutputChannels]);
  @JS("createStereoPanner")
  external StereoPannerNode createStereoPanner();
  @JS("createWaveShaper")
  external WaveShaperNode createWaveShaper();
  @JS("decodeAudioData")
  external Future<AudioBuffer> decodeAudioData(ArrayBuffer audioData, [DecodeSuccessCallback? successCallback, DecodeErrorCallback? errorCallback]);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(BaseAudioContext, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(BaseAudioContext, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("BaseAudioContext")
external AnonInterface$57 BaseAudioContext;
@JS()
@anonymous
abstract class BeforeUnloadEvent{}
extension BeforeUnloadEventExtension on BeforeUnloadEvent {
  external dynamic get returnValue;
  external set returnValue(dynamic value);
}
@JS("BeforeUnloadEvent")
external AnonInterface$58 BeforeUnloadEvent;
@JS()
@anonymous
abstract class BiquadFilterNode{}
extension BiquadFilterNodeExtension on BiquadFilterNode {
  external AudioParam get Q;
  external AudioParam get detune;
  external AudioParam get frequency;
  external AudioParam get gain;
  external BiquadFilterType get type;
  external set type(BiquadFilterType value);
  @JS("getFrequencyResponse")
  external void getFrequencyResponse(Float32Array frequencyHz, Float32Array magResponse, Float32Array phaseResponse);
}
@JS("BiquadFilterNode")
external AnonInterface$59 BiquadFilterNode;
@JS()
@anonymous
abstract class Blob{}
extension BlobExtension on Blob {
  external num get size;
  external String get type;
  @JS("arrayBuffer")
  external Future<ArrayBuffer> arrayBuffer();
  @JS("bytes")
  external Future<Uint8Array> bytes();
  @JS("slice")
  external Blob slice([num start, num end, String contentType]);
  @JS("stream")
  external ReadableStream<Uint8Array> stream();
  @JS("text")
  external Future<String> text();
}
@JS("Blob")
external AnonInterface$60 Blob;
@JS()
@anonymous
abstract class BlobEvent{}
extension BlobEventExtension on BlobEvent {
  external Blob get data;
  external DOMHighResTimeStamp get timecode;
}
@JS("BlobEvent")
external AnonInterface$61 BlobEvent;
@JS()
@anonymous
abstract class Body{}
extension BodyExtension on Body {
  external ReadableStream<Uint8Array>? get body;
  external bool get bodyUsed;
  @JS("arrayBuffer")
  external Future<ArrayBuffer> arrayBuffer();
  @JS("blob")
  external Future<Blob> blob();
  @JS("bytes")
  external Future<Uint8Array> bytes();
  @JS("formData")
  external Future<FormData> formData();
  @JS("json")
  external Future<dynamic> json();
  @JS("text")
  external Future<String> text();
}
@JS()
@anonymous
abstract class BroadcastChannelEventMap{}
extension BroadcastChannelEventMapExtension on BroadcastChannelEventMap {
  external MessageEvent get "message";
  external set "message"(MessageEvent value);
  external MessageEvent get "messageerror";
  external set "messageerror"(MessageEvent value);
}
@JS()
@anonymous
abstract class BroadcastChannel{}
extension BroadcastChannelExtension on BroadcastChannel {
  external String get name;
  external dynamic Function(BroadcastChannel, MessageEvent)? get onmessage;
  external set onmessage(dynamic Function(BroadcastChannel, MessageEvent)? value);
  external dynamic Function(BroadcastChannel, MessageEvent)? get onmessageerror;
  external set onmessageerror(dynamic Function(BroadcastChannel, MessageEvent)? value);
  @JS("close")
  external void close();
  @JS("postMessage")
  external void postMessage(dynamic message);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(BroadcastChannel, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(BroadcastChannel, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("BroadcastChannel")
external AnonInterface$62 BroadcastChannel;
@JS()
@anonymous
abstract class ByteLengthQueuingStrategy{}
extension ByteLengthQueuingStrategyExtension on ByteLengthQueuingStrategy {
  external num get highWaterMark;
  external QueuingStrategySize<ArrayBufferView> get size;
}
@JS("ByteLengthQueuingStrategy")
external AnonInterface$63 ByteLengthQueuingStrategy;
@JS()
@anonymous
abstract class CDATASection{}
extension CDATASectionExtension on CDATASection {
}
@JS("CDATASection")
external AnonInterface$64 CDATASection;
@JS()
@anonymous
abstract class CSSAnimation{}
extension CSSAnimationExtension on CSSAnimation {
  external String get animationName;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(CSSAnimation, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(CSSAnimation, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("CSSAnimation")
external AnonInterface$65 CSSAnimation;
@JS()
@anonymous
abstract class CSSConditionRule{}
extension CSSConditionRuleExtension on CSSConditionRule {
  external String get conditionText;
}
@JS("CSSConditionRule")
external AnonInterface$66 CSSConditionRule;
@JS()
@anonymous
abstract class CSSContainerRule{}
extension CSSContainerRuleExtension on CSSContainerRule {
  external String get containerName;
  external String get containerQuery;
}
@JS("CSSContainerRule")
external AnonInterface$67 CSSContainerRule;
@JS()
@anonymous
abstract class CSSCounterStyleRule{}
extension CSSCounterStyleRuleExtension on CSSCounterStyleRule {
  external String get additiveSymbols;
  external set additiveSymbols(String value);
  external String get fallback;
  external set fallback(String value);
  external String get name;
  external set name(String value);
  external String get negative;
  external set negative(String value);
  external String get pad;
  external set pad(String value);
  external String get prefix;
  external set prefix(String value);
  external String get range;
  external set range(String value);
  external String get speakAs;
  external set speakAs(String value);
  external String get suffix;
  external set suffix(String value);
  external String get symbols;
  external set symbols(String value);
  external String get system;
  external set system(String value);
}
@JS("CSSCounterStyleRule")
external AnonInterface$68 CSSCounterStyleRule;
@JS()
@anonymous
abstract class CSSFontFaceRule{}
extension CSSFontFaceRuleExtension on CSSFontFaceRule {
  external CSSStyleDeclaration get style;
  external set style(String cssText);
}
@JS("CSSFontFaceRule")
external AnonInterface$69 CSSFontFaceRule;
@JS()
@anonymous
abstract class CSSFontFeatureValuesRule{}
extension CSSFontFeatureValuesRuleExtension on CSSFontFeatureValuesRule {
  external String get fontFamily;
  external set fontFamily(String value);
}
@JS("CSSFontFeatureValuesRule")
external AnonInterface$70 CSSFontFeatureValuesRule;
@JS()
@anonymous
abstract class CSSFontPaletteValuesRule{}
extension CSSFontPaletteValuesRuleExtension on CSSFontPaletteValuesRule {
  external String get basePalette;
  external String get fontFamily;
  external String get name;
  external String get overrideColors;
}
@JS("CSSFontPaletteValuesRule")
external AnonInterface$71 CSSFontPaletteValuesRule;
@JS()
@anonymous
abstract class CSSGroupingRule{}
extension CSSGroupingRuleExtension on CSSGroupingRule {
  external CSSRuleList get cssRules;
  @JS("deleteRule")
  external void deleteRule(num index);
  @JS("insertRule")
  external num insertRule(String rule, [num index]);
}
@JS("CSSGroupingRule")
external AnonInterface$72 CSSGroupingRule;
@JS()
@anonymous
abstract class CSSImageValue{}
extension CSSImageValueExtension on CSSImageValue {
}
@JS("CSSImageValue")
external AnonInterface$73 CSSImageValue;
@JS()
@anonymous
abstract class CSSImportRule{}
extension CSSImportRuleExtension on CSSImportRule {
  external String get href;
  external String? get layerName;
  external CSSStyleSheet? get styleSheet;
  external String? get supportsText;
  external MediaList get media;
  external set media(String mediaText);
}
@JS("CSSImportRule")
external AnonInterface$74 CSSImportRule;
@JS()
@anonymous
abstract class CSSKeyframeRule{}
extension CSSKeyframeRuleExtension on CSSKeyframeRule {
  external String get keyText;
  external set keyText(String value);
  external CSSStyleDeclaration get style;
  external set style(String cssText);
}
@JS("CSSKeyframeRule")
external AnonInterface$75 CSSKeyframeRule;
@JS()
@anonymous
abstract class CSSKeyframesRule{}
extension CSSKeyframesRuleExtension on CSSKeyframesRule {
  external CSSRuleList get cssRules;
  external num get length;
  external String get name;
  external set name(String value);
  @JS("appendRule")
  external void appendRule(String rule);
  @JS("deleteRule")
  external void deleteRule(String select);
  @JS("findRule")
  external CSSKeyframeRule? findRule(String select);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("CSSKeyframesRule")
external AnonInterface$76 CSSKeyframesRule;
@JS()
@anonymous
abstract class CSSKeywordValue{}
extension CSSKeywordValueExtension on CSSKeywordValue {
  external String get value;
  external set value(String value);
}
@JS("CSSKeywordValue")
external AnonInterface$77 CSSKeywordValue;
@JS()
@anonymous
abstract class CSSLayerBlockRule{}
extension CSSLayerBlockRuleExtension on CSSLayerBlockRule {
  external String get name;
}
@JS("CSSLayerBlockRule")
external AnonInterface$78 CSSLayerBlockRule;
@JS()
@anonymous
abstract class CSSLayerStatementRule{}
extension CSSLayerStatementRuleExtension on CSSLayerStatementRule {
  external ReadonlyArray<String> get nameList;
}
@JS("CSSLayerStatementRule")
external AnonInterface$79 CSSLayerStatementRule;
@JS()
@anonymous
abstract class CSSMathClamp{}
extension CSSMathClampExtension on CSSMathClamp {
  external CSSNumericValue get lower;
  external CSSNumericValue get upper;
  external CSSNumericValue get value;
}
@JS("CSSMathClamp")
external AnonInterface$80 CSSMathClamp;
@JS()
@anonymous
abstract class CSSMathInvert{}
extension CSSMathInvertExtension on CSSMathInvert {
  external CSSNumericValue get value;
}
@JS("CSSMathInvert")
external AnonInterface$81 CSSMathInvert;
@JS()
@anonymous
abstract class CSSMathMax{}
extension CSSMathMaxExtension on CSSMathMax {
  external CSSNumericArray get values;
}
@JS("CSSMathMax")
external AnonInterface$82 CSSMathMax;
@JS()
@anonymous
abstract class CSSMathMin{}
extension CSSMathMinExtension on CSSMathMin {
  external CSSNumericArray get values;
}
@JS("CSSMathMin")
external AnonInterface$83 CSSMathMin;
@JS()
@anonymous
abstract class CSSMathNegate{}
extension CSSMathNegateExtension on CSSMathNegate {
  external CSSNumericValue get value;
}
@JS("CSSMathNegate")
external AnonInterface$84 CSSMathNegate;
@JS()
@anonymous
abstract class CSSMathProduct{}
extension CSSMathProductExtension on CSSMathProduct {
  external CSSNumericArray get values;
}
@JS("CSSMathProduct")
external AnonInterface$85 CSSMathProduct;
@JS()
@anonymous
abstract class CSSMathSum{}
extension CSSMathSumExtension on CSSMathSum {
  external CSSNumericArray get values;
}
@JS("CSSMathSum")
external AnonInterface$86 CSSMathSum;
@JS()
@anonymous
abstract class CSSMathValue{}
extension CSSMathValueExtension on CSSMathValue {
  external CSSMathOperator get operator;
}
@JS("CSSMathValue")
external AnonInterface$87 CSSMathValue;
@JS()
@anonymous
abstract class CSSMatrixComponent{}
extension CSSMatrixComponentExtension on CSSMatrixComponent {
  external DOMMatrix get matrix;
  external set matrix(DOMMatrix value);
}
@JS("CSSMatrixComponent")
external AnonInterface$88 CSSMatrixComponent;
@JS()
@anonymous
abstract class CSSMediaRule{}
extension CSSMediaRuleExtension on CSSMediaRule {
  external MediaList get media;
  external set media(String mediaText);
}
@JS("CSSMediaRule")
external AnonInterface$89 CSSMediaRule;
@JS()
@anonymous
abstract class CSSNamespaceRule{}
extension CSSNamespaceRuleExtension on CSSNamespaceRule {
  external String get namespaceURI;
  external String get prefix;
}
@JS("CSSNamespaceRule")
external AnonInterface$90 CSSNamespaceRule;
@JS()
@anonymous
abstract class CSSNestedDeclarations{}
extension CSSNestedDeclarationsExtension on CSSNestedDeclarations {
  external CSSStyleDeclaration get style;
  external set style(String cssText);
}
@JS("CSSNestedDeclarations")
external AnonInterface$91 CSSNestedDeclarations;
@JS()
@anonymous
abstract class CSSNumericArray{}
extension CSSNumericArrayExtension on CSSNumericArray {
  external num get length;
  @JS("forEach")
  external void forEach(void Function(CSSNumericValue, num, CSSNumericArray) callbackfn, [dynamic thisArg]);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("CSSNumericArray")
external AnonInterface$92 CSSNumericArray;
@JS()
@anonymous
abstract class CSSNumericValue{}
extension CSSNumericValueExtension on CSSNumericValue {
  @JS("add")
  external CSSNumericValue add([/* rest */ List<CSSNumberish> values]);
  @JS("div")
  external CSSNumericValue div([/* rest */ List<CSSNumberish> values]);
  @JS("equals")
  external bool equals([/* rest */ List<CSSNumberish> value]);
  @JS("max")
  external CSSNumericValue max([/* rest */ List<CSSNumberish> values]);
  @JS("min")
  external CSSNumericValue min([/* rest */ List<CSSNumberish> values]);
  @JS("mul")
  external CSSNumericValue mul([/* rest */ List<CSSNumberish> values]);
  @JS("sub")
  external CSSNumericValue sub([/* rest */ List<CSSNumberish> values]);
  @JS("to")
  external CSSUnitValue to(String unit);
  @JS("toSum")
  external CSSMathSum toSum([/* rest */ List<String> units]);
  @JS("type")
  external CSSNumericType type();
}
@JS("CSSNumericValue")
external AnonInterface$93 CSSNumericValue;
@JS()
@anonymous
abstract class CSSPageRule{}
extension CSSPageRuleExtension on CSSPageRule {
  external String get selectorText;
  external set selectorText(String value);
  external CSSStyleDeclaration get style;
  external set style(String cssText);
}
@JS("CSSPageRule")
external AnonInterface$94 CSSPageRule;
@JS()
@anonymous
abstract class CSSPerspective{}
extension CSSPerspectiveExtension on CSSPerspective {
  external CSSPerspectiveValue get length;
  external set length(CSSPerspectiveValue value);
}
@JS("CSSPerspective")
external AnonInterface$95 CSSPerspective;
@JS()
@anonymous
abstract class CSSPropertyRule{}
extension CSSPropertyRuleExtension on CSSPropertyRule {
  external bool get inherits;
  external String? get initialValue;
  external String get name;
  external String get syntax;
}
@JS("CSSPropertyRule")
external AnonInterface$96 CSSPropertyRule;
@JS()
@anonymous
abstract class CSSRotate{}
extension CSSRotateExtension on CSSRotate {
  external CSSNumericValue get angle;
  external set angle(CSSNumericValue value);
  external CSSNumberish get x;
  external set x(CSSNumberish value);
  external CSSNumberish get y;
  external set y(CSSNumberish value);
  external CSSNumberish get z;
  external set z(CSSNumberish value);
}
@JS("CSSRotate")
external AnonInterface$97 CSSRotate;
@JS()
@anonymous
abstract class CSSRule{}
extension CSSRuleExtension on CSSRule {
  external String get cssText;
  external set cssText(String value);
  external CSSRule? get parentRule;
  external CSSStyleSheet? get parentStyleSheet;
  external num get type;
  external num get STYLE_RULE;
  external num get CHARSET_RULE;
  external num get IMPORT_RULE;
  external num get MEDIA_RULE;
  external num get FONT_FACE_RULE;
  external num get PAGE_RULE;
  external num get NAMESPACE_RULE;
  external num get KEYFRAMES_RULE;
  external num get KEYFRAME_RULE;
  external num get SUPPORTS_RULE;
  external num get COUNTER_STYLE_RULE;
  external num get FONT_FEATURE_VALUES_RULE;
}
@JS("CSSRule")
external AnonInterface$98 CSSRule;
@JS()
@anonymous
abstract class CSSRuleList{}
extension CSSRuleListExtension on CSSRuleList {
  external num get length;
  @JS("item")
  external CSSRule? item(num index);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("CSSRuleList")
external AnonInterface$99 CSSRuleList;
@JS()
@anonymous
abstract class CSSScale{}
extension CSSScaleExtension on CSSScale {
  external CSSNumberish get x;
  external set x(CSSNumberish value);
  external CSSNumberish get y;
  external set y(CSSNumberish value);
  external CSSNumberish get z;
  external set z(CSSNumberish value);
}
@JS("CSSScale")
external AnonInterface$100 CSSScale;
@JS()
@anonymous
abstract class CSSScopeRule{}
extension CSSScopeRuleExtension on CSSScopeRule {
  external String? get end;
  external String? get start;
}
@JS("CSSScopeRule")
external AnonInterface$101 CSSScopeRule;
@JS()
@anonymous
abstract class CSSSkew{}
extension CSSSkewExtension on CSSSkew {
  external CSSNumericValue get ax;
  external set ax(CSSNumericValue value);
  external CSSNumericValue get ay;
  external set ay(CSSNumericValue value);
}
@JS("CSSSkew")
external AnonInterface$102 CSSSkew;
@JS()
@anonymous
abstract class CSSSkewX{}
extension CSSSkewXExtension on CSSSkewX {
  external CSSNumericValue get ax;
  external set ax(CSSNumericValue value);
}
@JS("CSSSkewX")
external AnonInterface$103 CSSSkewX;
@JS()
@anonymous
abstract class CSSSkewY{}
extension CSSSkewYExtension on CSSSkewY {
  external CSSNumericValue get ay;
  external set ay(CSSNumericValue value);
}
@JS("CSSSkewY")
external AnonInterface$104 CSSSkewY;
@JS()
@anonymous
abstract class CSSStartingStyleRule{}
extension CSSStartingStyleRuleExtension on CSSStartingStyleRule {
}
@JS("CSSStartingStyleRule")
external AnonInterface$105 CSSStartingStyleRule;
@JS()
@anonymous
abstract class CSSStyleDeclaration{}
extension CSSStyleDeclarationExtension on CSSStyleDeclaration {
  external String get accentColor;
  external set accentColor(String value);
  external String get alignContent;
  external set alignContent(String value);
  external String get alignItems;
  external set alignItems(String value);
  external String get alignSelf;
  external set alignSelf(String value);
  external String get alignmentBaseline;
  external set alignmentBaseline(String value);
  external String get all;
  external set all(String value);
  external String get animation;
  external set animation(String value);
  external String get animationComposition;
  external set animationComposition(String value);
  external String get animationDelay;
  external set animationDelay(String value);
  external String get animationDirection;
  external set animationDirection(String value);
  external String get animationDuration;
  external set animationDuration(String value);
  external String get animationFillMode;
  external set animationFillMode(String value);
  external String get animationIterationCount;
  external set animationIterationCount(String value);
  external String get animationName;
  external set animationName(String value);
  external String get animationPlayState;
  external set animationPlayState(String value);
  external String get animationTimingFunction;
  external set animationTimingFunction(String value);
  external String get appearance;
  external set appearance(String value);
  external String get aspectRatio;
  external set aspectRatio(String value);
  external String get backdropFilter;
  external set backdropFilter(String value);
  external String get backfaceVisibility;
  external set backfaceVisibility(String value);
  external String get background;
  external set background(String value);
  external String get backgroundAttachment;
  external set backgroundAttachment(String value);
  external String get backgroundBlendMode;
  external set backgroundBlendMode(String value);
  external String get backgroundClip;
  external set backgroundClip(String value);
  external String get backgroundColor;
  external set backgroundColor(String value);
  external String get backgroundImage;
  external set backgroundImage(String value);
  external String get backgroundOrigin;
  external set backgroundOrigin(String value);
  external String get backgroundPosition;
  external set backgroundPosition(String value);
  external String get backgroundPositionX;
  external set backgroundPositionX(String value);
  external String get backgroundPositionY;
  external set backgroundPositionY(String value);
  external String get backgroundRepeat;
  external set backgroundRepeat(String value);
  external String get backgroundSize;
  external set backgroundSize(String value);
  external String get baselineShift;
  external set baselineShift(String value);
  external String get baselineSource;
  external set baselineSource(String value);
  external String get blockSize;
  external set blockSize(String value);
  external String get border;
  external set border(String value);
  external String get borderBlock;
  external set borderBlock(String value);
  external String get borderBlockColor;
  external set borderBlockColor(String value);
  external String get borderBlockEnd;
  external set borderBlockEnd(String value);
  external String get borderBlockEndColor;
  external set borderBlockEndColor(String value);
  external String get borderBlockEndStyle;
  external set borderBlockEndStyle(String value);
  external String get borderBlockEndWidth;
  external set borderBlockEndWidth(String value);
  external String get borderBlockStart;
  external set borderBlockStart(String value);
  external String get borderBlockStartColor;
  external set borderBlockStartColor(String value);
  external String get borderBlockStartStyle;
  external set borderBlockStartStyle(String value);
  external String get borderBlockStartWidth;
  external set borderBlockStartWidth(String value);
  external String get borderBlockStyle;
  external set borderBlockStyle(String value);
  external String get borderBlockWidth;
  external set borderBlockWidth(String value);
  external String get borderBottom;
  external set borderBottom(String value);
  external String get borderBottomColor;
  external set borderBottomColor(String value);
  external String get borderBottomLeftRadius;
  external set borderBottomLeftRadius(String value);
  external String get borderBottomRightRadius;
  external set borderBottomRightRadius(String value);
  external String get borderBottomStyle;
  external set borderBottomStyle(String value);
  external String get borderBottomWidth;
  external set borderBottomWidth(String value);
  external String get borderCollapse;
  external set borderCollapse(String value);
  external String get borderColor;
  external set borderColor(String value);
  external String get borderEndEndRadius;
  external set borderEndEndRadius(String value);
  external String get borderEndStartRadius;
  external set borderEndStartRadius(String value);
  external String get borderImage;
  external set borderImage(String value);
  external String get borderImageOutset;
  external set borderImageOutset(String value);
  external String get borderImageRepeat;
  external set borderImageRepeat(String value);
  external String get borderImageSlice;
  external set borderImageSlice(String value);
  external String get borderImageSource;
  external set borderImageSource(String value);
  external String get borderImageWidth;
  external set borderImageWidth(String value);
  external String get borderInline;
  external set borderInline(String value);
  external String get borderInlineColor;
  external set borderInlineColor(String value);
  external String get borderInlineEnd;
  external set borderInlineEnd(String value);
  external String get borderInlineEndColor;
  external set borderInlineEndColor(String value);
  external String get borderInlineEndStyle;
  external set borderInlineEndStyle(String value);
  external String get borderInlineEndWidth;
  external set borderInlineEndWidth(String value);
  external String get borderInlineStart;
  external set borderInlineStart(String value);
  external String get borderInlineStartColor;
  external set borderInlineStartColor(String value);
  external String get borderInlineStartStyle;
  external set borderInlineStartStyle(String value);
  external String get borderInlineStartWidth;
  external set borderInlineStartWidth(String value);
  external String get borderInlineStyle;
  external set borderInlineStyle(String value);
  external String get borderInlineWidth;
  external set borderInlineWidth(String value);
  external String get borderLeft;
  external set borderLeft(String value);
  external String get borderLeftColor;
  external set borderLeftColor(String value);
  external String get borderLeftStyle;
  external set borderLeftStyle(String value);
  external String get borderLeftWidth;
  external set borderLeftWidth(String value);
  external String get borderRadius;
  external set borderRadius(String value);
  external String get borderRight;
  external set borderRight(String value);
  external String get borderRightColor;
  external set borderRightColor(String value);
  external String get borderRightStyle;
  external set borderRightStyle(String value);
  external String get borderRightWidth;
  external set borderRightWidth(String value);
  external String get borderSpacing;
  external set borderSpacing(String value);
  external String get borderStartEndRadius;
  external set borderStartEndRadius(String value);
  external String get borderStartStartRadius;
  external set borderStartStartRadius(String value);
  external String get borderStyle;
  external set borderStyle(String value);
  external String get borderTop;
  external set borderTop(String value);
  external String get borderTopColor;
  external set borderTopColor(String value);
  external String get borderTopLeftRadius;
  external set borderTopLeftRadius(String value);
  external String get borderTopRightRadius;
  external set borderTopRightRadius(String value);
  external String get borderTopStyle;
  external set borderTopStyle(String value);
  external String get borderTopWidth;
  external set borderTopWidth(String value);
  external String get borderWidth;
  external set borderWidth(String value);
  external String get bottom;
  external set bottom(String value);
  external String get boxDecorationBreak;
  external set boxDecorationBreak(String value);
  external String get boxShadow;
  external set boxShadow(String value);
  external String get boxSizing;
  external set boxSizing(String value);
  external String get breakAfter;
  external set breakAfter(String value);
  external String get breakBefore;
  external set breakBefore(String value);
  external String get breakInside;
  external set breakInside(String value);
  external String get captionSide;
  external set captionSide(String value);
  external String get caretColor;
  external set caretColor(String value);
  external String get clear;
  external set clear(String value);
  external String get clip;
  external set clip(String value);
  external String get clipPath;
  external set clipPath(String value);
  external String get clipRule;
  external set clipRule(String value);
  external String get color;
  external set color(String value);
  external String get colorInterpolation;
  external set colorInterpolation(String value);
  external String get colorInterpolationFilters;
  external set colorInterpolationFilters(String value);
  external String get colorScheme;
  external set colorScheme(String value);
  external String get columnCount;
  external set columnCount(String value);
  external String get columnFill;
  external set columnFill(String value);
  external String get columnGap;
  external set columnGap(String value);
  external String get columnRule;
  external set columnRule(String value);
  external String get columnRuleColor;
  external set columnRuleColor(String value);
  external String get columnRuleStyle;
  external set columnRuleStyle(String value);
  external String get columnRuleWidth;
  external set columnRuleWidth(String value);
  external String get columnSpan;
  external set columnSpan(String value);
  external String get columnWidth;
  external set columnWidth(String value);
  external String get columns;
  external set columns(String value);
  external String get contain;
  external set contain(String value);
  external String get containIntrinsicBlockSize;
  external set containIntrinsicBlockSize(String value);
  external String get containIntrinsicHeight;
  external set containIntrinsicHeight(String value);
  external String get containIntrinsicInlineSize;
  external set containIntrinsicInlineSize(String value);
  external String get containIntrinsicSize;
  external set containIntrinsicSize(String value);
  external String get containIntrinsicWidth;
  external set containIntrinsicWidth(String value);
  external String get container;
  external set container(String value);
  external String get containerName;
  external set containerName(String value);
  external String get containerType;
  external set containerType(String value);
  external String get content;
  external set content(String value);
  external String get contentVisibility;
  external set contentVisibility(String value);
  external String get counterIncrement;
  external set counterIncrement(String value);
  external String get counterReset;
  external set counterReset(String value);
  external String get counterSet;
  external set counterSet(String value);
  external String get cssFloat;
  external set cssFloat(String value);
  external String get cssText;
  external set cssText(String value);
  external String get cursor;
  external set cursor(String value);
  external String get cx;
  external set cx(String value);
  external String get cy;
  external set cy(String value);
  external String get d;
  external set d(String value);
  external String get direction;
  external set direction(String value);
  external String get display;
  external set display(String value);
  external String get dominantBaseline;
  external set dominantBaseline(String value);
  external String get emptyCells;
  external set emptyCells(String value);
  external String get fill;
  external set fill(String value);
  external String get fillOpacity;
  external set fillOpacity(String value);
  external String get fillRule;
  external set fillRule(String value);
  external String get filter;
  external set filter(String value);
  external String get flex;
  external set flex(String value);
  external String get flexBasis;
  external set flexBasis(String value);
  external String get flexDirection;
  external set flexDirection(String value);
  external String get flexFlow;
  external set flexFlow(String value);
  external String get flexGrow;
  external set flexGrow(String value);
  external String get flexShrink;
  external set flexShrink(String value);
  external String get flexWrap;
  external set flexWrap(String value);
  external String get float;
  external set float(String value);
  external String get floodColor;
  external set floodColor(String value);
  external String get floodOpacity;
  external set floodOpacity(String value);
  external String get font;
  external set font(String value);
  external String get fontFamily;
  external set fontFamily(String value);
  external String get fontFeatureSettings;
  external set fontFeatureSettings(String value);
  external String get fontKerning;
  external set fontKerning(String value);
  external String get fontOpticalSizing;
  external set fontOpticalSizing(String value);
  external String get fontPalette;
  external set fontPalette(String value);
  external String get fontSize;
  external set fontSize(String value);
  external String get fontSizeAdjust;
  external set fontSizeAdjust(String value);
  external String get fontStretch;
  external set fontStretch(String value);
  external String get fontStyle;
  external set fontStyle(String value);
  external String get fontSynthesis;
  external set fontSynthesis(String value);
  external String get fontSynthesisSmallCaps;
  external set fontSynthesisSmallCaps(String value);
  external String get fontSynthesisStyle;
  external set fontSynthesisStyle(String value);
  external String get fontSynthesisWeight;
  external set fontSynthesisWeight(String value);
  external String get fontVariant;
  external set fontVariant(String value);
  external String get fontVariantAlternates;
  external set fontVariantAlternates(String value);
  external String get fontVariantCaps;
  external set fontVariantCaps(String value);
  external String get fontVariantEastAsian;
  external set fontVariantEastAsian(String value);
  external String get fontVariantLigatures;
  external set fontVariantLigatures(String value);
  external String get fontVariantNumeric;
  external set fontVariantNumeric(String value);
  external String get fontVariantPosition;
  external set fontVariantPosition(String value);
  external String get fontVariationSettings;
  external set fontVariationSettings(String value);
  external String get fontWeight;
  external set fontWeight(String value);
  external String get forcedColorAdjust;
  external set forcedColorAdjust(String value);
  external String get gap;
  external set gap(String value);
  external String get grid;
  external set grid(String value);
  external String get gridArea;
  external set gridArea(String value);
  external String get gridAutoColumns;
  external set gridAutoColumns(String value);
  external String get gridAutoFlow;
  external set gridAutoFlow(String value);
  external String get gridAutoRows;
  external set gridAutoRows(String value);
  external String get gridColumn;
  external set gridColumn(String value);
  external String get gridColumnEnd;
  external set gridColumnEnd(String value);
  external String get gridColumnGap;
  external set gridColumnGap(String value);
  external String get gridColumnStart;
  external set gridColumnStart(String value);
  external String get gridGap;
  external set gridGap(String value);
  external String get gridRow;
  external set gridRow(String value);
  external String get gridRowEnd;
  external set gridRowEnd(String value);
  external String get gridRowGap;
  external set gridRowGap(String value);
  external String get gridRowStart;
  external set gridRowStart(String value);
  external String get gridTemplate;
  external set gridTemplate(String value);
  external String get gridTemplateAreas;
  external set gridTemplateAreas(String value);
  external String get gridTemplateColumns;
  external set gridTemplateColumns(String value);
  external String get gridTemplateRows;
  external set gridTemplateRows(String value);
  external String get height;
  external set height(String value);
  external String get hyphenateCharacter;
  external set hyphenateCharacter(String value);
  external String get hyphens;
  external set hyphens(String value);
  external String get imageOrientation;
  external set imageOrientation(String value);
  external String get imageRendering;
  external set imageRendering(String value);
  external String get inlineSize;
  external set inlineSize(String value);
  external String get inset;
  external set inset(String value);
  external String get insetBlock;
  external set insetBlock(String value);
  external String get insetBlockEnd;
  external set insetBlockEnd(String value);
  external String get insetBlockStart;
  external set insetBlockStart(String value);
  external String get insetInline;
  external set insetInline(String value);
  external String get insetInlineEnd;
  external set insetInlineEnd(String value);
  external String get insetInlineStart;
  external set insetInlineStart(String value);
  external String get isolation;
  external set isolation(String value);
  external String get justifyContent;
  external set justifyContent(String value);
  external String get justifyItems;
  external set justifyItems(String value);
  external String get justifySelf;
  external set justifySelf(String value);
  external String get left;
  external set left(String value);
  external num get length;
  external String get letterSpacing;
  external set letterSpacing(String value);
  external String get lightingColor;
  external set lightingColor(String value);
  external String get lineBreak;
  external set lineBreak(String value);
  external String get lineHeight;
  external set lineHeight(String value);
  external String get listStyle;
  external set listStyle(String value);
  external String get listStyleImage;
  external set listStyleImage(String value);
  external String get listStylePosition;
  external set listStylePosition(String value);
  external String get listStyleType;
  external set listStyleType(String value);
  external String get margin;
  external set margin(String value);
  external String get marginBlock;
  external set marginBlock(String value);
  external String get marginBlockEnd;
  external set marginBlockEnd(String value);
  external String get marginBlockStart;
  external set marginBlockStart(String value);
  external String get marginBottom;
  external set marginBottom(String value);
  external String get marginInline;
  external set marginInline(String value);
  external String get marginInlineEnd;
  external set marginInlineEnd(String value);
  external String get marginInlineStart;
  external set marginInlineStart(String value);
  external String get marginLeft;
  external set marginLeft(String value);
  external String get marginRight;
  external set marginRight(String value);
  external String get marginTop;
  external set marginTop(String value);
  external String get marker;
  external set marker(String value);
  external String get markerEnd;
  external set markerEnd(String value);
  external String get markerMid;
  external set markerMid(String value);
  external String get markerStart;
  external set markerStart(String value);
  external String get mask;
  external set mask(String value);
  external String get maskClip;
  external set maskClip(String value);
  external String get maskComposite;
  external set maskComposite(String value);
  external String get maskImage;
  external set maskImage(String value);
  external String get maskMode;
  external set maskMode(String value);
  external String get maskOrigin;
  external set maskOrigin(String value);
  external String get maskPosition;
  external set maskPosition(String value);
  external String get maskRepeat;
  external set maskRepeat(String value);
  external String get maskSize;
  external set maskSize(String value);
  external String get maskType;
  external set maskType(String value);
  external String get mathDepth;
  external set mathDepth(String value);
  external String get mathStyle;
  external set mathStyle(String value);
  external String get maxBlockSize;
  external set maxBlockSize(String value);
  external String get maxHeight;
  external set maxHeight(String value);
  external String get maxInlineSize;
  external set maxInlineSize(String value);
  external String get maxWidth;
  external set maxWidth(String value);
  external String get minBlockSize;
  external set minBlockSize(String value);
  external String get minHeight;
  external set minHeight(String value);
  external String get minInlineSize;
  external set minInlineSize(String value);
  external String get minWidth;
  external set minWidth(String value);
  external String get mixBlendMode;
  external set mixBlendMode(String value);
  external String get objectFit;
  external set objectFit(String value);
  external String get objectPosition;
  external set objectPosition(String value);
  external String get offset;
  external set offset(String value);
  external String get offsetAnchor;
  external set offsetAnchor(String value);
  external String get offsetDistance;
  external set offsetDistance(String value);
  external String get offsetPath;
  external set offsetPath(String value);
  external String get offsetPosition;
  external set offsetPosition(String value);
  external String get offsetRotate;
  external set offsetRotate(String value);
  external String get opacity;
  external set opacity(String value);
  external String get order;
  external set order(String value);
  external String get orphans;
  external set orphans(String value);
  external String get outline;
  external set outline(String value);
  external String get outlineColor;
  external set outlineColor(String value);
  external String get outlineOffset;
  external set outlineOffset(String value);
  external String get outlineStyle;
  external set outlineStyle(String value);
  external String get outlineWidth;
  external set outlineWidth(String value);
  external String get overflow;
  external set overflow(String value);
  external String get overflowAnchor;
  external set overflowAnchor(String value);
  external String get overflowClipMargin;
  external set overflowClipMargin(String value);
  external String get overflowWrap;
  external set overflowWrap(String value);
  external String get overflowX;
  external set overflowX(String value);
  external String get overflowY;
  external set overflowY(String value);
  external String get overscrollBehavior;
  external set overscrollBehavior(String value);
  external String get overscrollBehaviorBlock;
  external set overscrollBehaviorBlock(String value);
  external String get overscrollBehaviorInline;
  external set overscrollBehaviorInline(String value);
  external String get overscrollBehaviorX;
  external set overscrollBehaviorX(String value);
  external String get overscrollBehaviorY;
  external set overscrollBehaviorY(String value);
  external String get padding;
  external set padding(String value);
  external String get paddingBlock;
  external set paddingBlock(String value);
  external String get paddingBlockEnd;
  external set paddingBlockEnd(String value);
  external String get paddingBlockStart;
  external set paddingBlockStart(String value);
  external String get paddingBottom;
  external set paddingBottom(String value);
  external String get paddingInline;
  external set paddingInline(String value);
  external String get paddingInlineEnd;
  external set paddingInlineEnd(String value);
  external String get paddingInlineStart;
  external set paddingInlineStart(String value);
  external String get paddingLeft;
  external set paddingLeft(String value);
  external String get paddingRight;
  external set paddingRight(String value);
  external String get paddingTop;
  external set paddingTop(String value);
  external String get page;
  external set page(String value);
  external String get pageBreakAfter;
  external set pageBreakAfter(String value);
  external String get pageBreakBefore;
  external set pageBreakBefore(String value);
  external String get pageBreakInside;
  external set pageBreakInside(String value);
  external String get paintOrder;
  external set paintOrder(String value);
  external CSSRule? get parentRule;
  external String get perspective;
  external set perspective(String value);
  external String get perspectiveOrigin;
  external set perspectiveOrigin(String value);
  external String get placeContent;
  external set placeContent(String value);
  external String get placeItems;
  external set placeItems(String value);
  external String get placeSelf;
  external set placeSelf(String value);
  external String get pointerEvents;
  external set pointerEvents(String value);
  external String get position;
  external set position(String value);
  external String get printColorAdjust;
  external set printColorAdjust(String value);
  external String get quotes;
  external set quotes(String value);
  external String get r;
  external set r(String value);
  external String get resize;
  external set resize(String value);
  external String get right;
  external set right(String value);
  external String get rotate;
  external set rotate(String value);
  external String get rowGap;
  external set rowGap(String value);
  external String get rubyAlign;
  external set rubyAlign(String value);
  external String get rubyPosition;
  external set rubyPosition(String value);
  external String get rx;
  external set rx(String value);
  external String get ry;
  external set ry(String value);
  external String get scale;
  external set scale(String value);
  external String get scrollBehavior;
  external set scrollBehavior(String value);
  external String get scrollMargin;
  external set scrollMargin(String value);
  external String get scrollMarginBlock;
  external set scrollMarginBlock(String value);
  external String get scrollMarginBlockEnd;
  external set scrollMarginBlockEnd(String value);
  external String get scrollMarginBlockStart;
  external set scrollMarginBlockStart(String value);
  external String get scrollMarginBottom;
  external set scrollMarginBottom(String value);
  external String get scrollMarginInline;
  external set scrollMarginInline(String value);
  external String get scrollMarginInlineEnd;
  external set scrollMarginInlineEnd(String value);
  external String get scrollMarginInlineStart;
  external set scrollMarginInlineStart(String value);
  external String get scrollMarginLeft;
  external set scrollMarginLeft(String value);
  external String get scrollMarginRight;
  external set scrollMarginRight(String value);
  external String get scrollMarginTop;
  external set scrollMarginTop(String value);
  external String get scrollPadding;
  external set scrollPadding(String value);
  external String get scrollPaddingBlock;
  external set scrollPaddingBlock(String value);
  external String get scrollPaddingBlockEnd;
  external set scrollPaddingBlockEnd(String value);
  external String get scrollPaddingBlockStart;
  external set scrollPaddingBlockStart(String value);
  external String get scrollPaddingBottom;
  external set scrollPaddingBottom(String value);
  external String get scrollPaddingInline;
  external set scrollPaddingInline(String value);
  external String get scrollPaddingInlineEnd;
  external set scrollPaddingInlineEnd(String value);
  external String get scrollPaddingInlineStart;
  external set scrollPaddingInlineStart(String value);
  external String get scrollPaddingLeft;
  external set scrollPaddingLeft(String value);
  external String get scrollPaddingRight;
  external set scrollPaddingRight(String value);
  external String get scrollPaddingTop;
  external set scrollPaddingTop(String value);
  external String get scrollSnapAlign;
  external set scrollSnapAlign(String value);
  external String get scrollSnapStop;
  external set scrollSnapStop(String value);
  external String get scrollSnapType;
  external set scrollSnapType(String value);
  external String get scrollbarColor;
  external set scrollbarColor(String value);
  external String get scrollbarGutter;
  external set scrollbarGutter(String value);
  external String get scrollbarWidth;
  external set scrollbarWidth(String value);
  external String get shapeImageThreshold;
  external set shapeImageThreshold(String value);
  external String get shapeMargin;
  external set shapeMargin(String value);
  external String get shapeOutside;
  external set shapeOutside(String value);
  external String get shapeRendering;
  external set shapeRendering(String value);
  external String get stopColor;
  external set stopColor(String value);
  external String get stopOpacity;
  external set stopOpacity(String value);
  external String get stroke;
  external set stroke(String value);
  external String get strokeDasharray;
  external set strokeDasharray(String value);
  external String get strokeDashoffset;
  external set strokeDashoffset(String value);
  external String get strokeLinecap;
  external set strokeLinecap(String value);
  external String get strokeLinejoin;
  external set strokeLinejoin(String value);
  external String get strokeMiterlimit;
  external set strokeMiterlimit(String value);
  external String get strokeOpacity;
  external set strokeOpacity(String value);
  external String get strokeWidth;
  external set strokeWidth(String value);
  external String get tabSize;
  external set tabSize(String value);
  external String get tableLayout;
  external set tableLayout(String value);
  external String get textAlign;
  external set textAlign(String value);
  external String get textAlignLast;
  external set textAlignLast(String value);
  external String get textAnchor;
  external set textAnchor(String value);
  external String get textBox;
  external set textBox(String value);
  external String get textBoxEdge;
  external set textBoxEdge(String value);
  external String get textBoxTrim;
  external set textBoxTrim(String value);
  external String get textCombineUpright;
  external set textCombineUpright(String value);
  external String get textDecoration;
  external set textDecoration(String value);
  external String get textDecorationColor;
  external set textDecorationColor(String value);
  external String get textDecorationLine;
  external set textDecorationLine(String value);
  external String get textDecorationSkipInk;
  external set textDecorationSkipInk(String value);
  external String get textDecorationStyle;
  external set textDecorationStyle(String value);
  external String get textDecorationThickness;
  external set textDecorationThickness(String value);
  external String get textEmphasis;
  external set textEmphasis(String value);
  external String get textEmphasisColor;
  external set textEmphasisColor(String value);
  external String get textEmphasisPosition;
  external set textEmphasisPosition(String value);
  external String get textEmphasisStyle;
  external set textEmphasisStyle(String value);
  external String get textIndent;
  external set textIndent(String value);
  external String get textOrientation;
  external set textOrientation(String value);
  external String get textOverflow;
  external set textOverflow(String value);
  external String get textRendering;
  external set textRendering(String value);
  external String get textShadow;
  external set textShadow(String value);
  external String get textTransform;
  external set textTransform(String value);
  external String get textUnderlineOffset;
  external set textUnderlineOffset(String value);
  external String get textUnderlinePosition;
  external set textUnderlinePosition(String value);
  external String get textWrap;
  external set textWrap(String value);
  external String get textWrapMode;
  external set textWrapMode(String value);
  external String get textWrapStyle;
  external set textWrapStyle(String value);
  external String get top;
  external set top(String value);
  external String get touchAction;
  external set touchAction(String value);
  external String get transform;
  external set transform(String value);
  external String get transformBox;
  external set transformBox(String value);
  external String get transformOrigin;
  external set transformOrigin(String value);
  external String get transformStyle;
  external set transformStyle(String value);
  external String get transition;
  external set transition(String value);
  external String get transitionBehavior;
  external set transitionBehavior(String value);
  external String get transitionDelay;
  external set transitionDelay(String value);
  external String get transitionDuration;
  external set transitionDuration(String value);
  external String get transitionProperty;
  external set transitionProperty(String value);
  external String get transitionTimingFunction;
  external set transitionTimingFunction(String value);
  external String get translate;
  external set translate(String value);
  external String get unicodeBidi;
  external set unicodeBidi(String value);
  external String get userSelect;
  external set userSelect(String value);
  external String get vectorEffect;
  external set vectorEffect(String value);
  external String get verticalAlign;
  external set verticalAlign(String value);
  external String get viewTransitionClass;
  external set viewTransitionClass(String value);
  external String get viewTransitionName;
  external set viewTransitionName(String value);
  external String get visibility;
  external set visibility(String value);
  external String get webkitAlignContent;
  external set webkitAlignContent(String value);
  external String get webkitAlignItems;
  external set webkitAlignItems(String value);
  external String get webkitAlignSelf;
  external set webkitAlignSelf(String value);
  external String get webkitAnimation;
  external set webkitAnimation(String value);
  external String get webkitAnimationDelay;
  external set webkitAnimationDelay(String value);
  external String get webkitAnimationDirection;
  external set webkitAnimationDirection(String value);
  external String get webkitAnimationDuration;
  external set webkitAnimationDuration(String value);
  external String get webkitAnimationFillMode;
  external set webkitAnimationFillMode(String value);
  external String get webkitAnimationIterationCount;
  external set webkitAnimationIterationCount(String value);
  external String get webkitAnimationName;
  external set webkitAnimationName(String value);
  external String get webkitAnimationPlayState;
  external set webkitAnimationPlayState(String value);
  external String get webkitAnimationTimingFunction;
  external set webkitAnimationTimingFunction(String value);
  external String get webkitAppearance;
  external set webkitAppearance(String value);
  external String get webkitBackfaceVisibility;
  external set webkitBackfaceVisibility(String value);
  external String get webkitBackgroundClip;
  external set webkitBackgroundClip(String value);
  external String get webkitBackgroundOrigin;
  external set webkitBackgroundOrigin(String value);
  external String get webkitBackgroundSize;
  external set webkitBackgroundSize(String value);
  external String get webkitBorderBottomLeftRadius;
  external set webkitBorderBottomLeftRadius(String value);
  external String get webkitBorderBottomRightRadius;
  external set webkitBorderBottomRightRadius(String value);
  external String get webkitBorderRadius;
  external set webkitBorderRadius(String value);
  external String get webkitBorderTopLeftRadius;
  external set webkitBorderTopLeftRadius(String value);
  external String get webkitBorderTopRightRadius;
  external set webkitBorderTopRightRadius(String value);
  external String get webkitBoxAlign;
  external set webkitBoxAlign(String value);
  external String get webkitBoxFlex;
  external set webkitBoxFlex(String value);
  external String get webkitBoxOrdinalGroup;
  external set webkitBoxOrdinalGroup(String value);
  external String get webkitBoxOrient;
  external set webkitBoxOrient(String value);
  external String get webkitBoxPack;
  external set webkitBoxPack(String value);
  external String get webkitBoxShadow;
  external set webkitBoxShadow(String value);
  external String get webkitBoxSizing;
  external set webkitBoxSizing(String value);
  external String get webkitFilter;
  external set webkitFilter(String value);
  external String get webkitFlex;
  external set webkitFlex(String value);
  external String get webkitFlexBasis;
  external set webkitFlexBasis(String value);
  external String get webkitFlexDirection;
  external set webkitFlexDirection(String value);
  external String get webkitFlexFlow;
  external set webkitFlexFlow(String value);
  external String get webkitFlexGrow;
  external set webkitFlexGrow(String value);
  external String get webkitFlexShrink;
  external set webkitFlexShrink(String value);
  external String get webkitFlexWrap;
  external set webkitFlexWrap(String value);
  external String get webkitJustifyContent;
  external set webkitJustifyContent(String value);
  external String get webkitLineClamp;
  external set webkitLineClamp(String value);
  external String get webkitMask;
  external set webkitMask(String value);
  external String get webkitMaskBoxImage;
  external set webkitMaskBoxImage(String value);
  external String get webkitMaskBoxImageOutset;
  external set webkitMaskBoxImageOutset(String value);
  external String get webkitMaskBoxImageRepeat;
  external set webkitMaskBoxImageRepeat(String value);
  external String get webkitMaskBoxImageSlice;
  external set webkitMaskBoxImageSlice(String value);
  external String get webkitMaskBoxImageSource;
  external set webkitMaskBoxImageSource(String value);
  external String get webkitMaskBoxImageWidth;
  external set webkitMaskBoxImageWidth(String value);
  external String get webkitMaskClip;
  external set webkitMaskClip(String value);
  external String get webkitMaskComposite;
  external set webkitMaskComposite(String value);
  external String get webkitMaskImage;
  external set webkitMaskImage(String value);
  external String get webkitMaskOrigin;
  external set webkitMaskOrigin(String value);
  external String get webkitMaskPosition;
  external set webkitMaskPosition(String value);
  external String get webkitMaskRepeat;
  external set webkitMaskRepeat(String value);
  external String get webkitMaskSize;
  external set webkitMaskSize(String value);
  external String get webkitOrder;
  external set webkitOrder(String value);
  external String get webkitPerspective;
  external set webkitPerspective(String value);
  external String get webkitPerspectiveOrigin;
  external set webkitPerspectiveOrigin(String value);
  external String get webkitTextFillColor;
  external set webkitTextFillColor(String value);
  external String get webkitTextSizeAdjust;
  external set webkitTextSizeAdjust(String value);
  external String get webkitTextStroke;
  external set webkitTextStroke(String value);
  external String get webkitTextStrokeColor;
  external set webkitTextStrokeColor(String value);
  external String get webkitTextStrokeWidth;
  external set webkitTextStrokeWidth(String value);
  external String get webkitTransform;
  external set webkitTransform(String value);
  external String get webkitTransformOrigin;
  external set webkitTransformOrigin(String value);
  external String get webkitTransformStyle;
  external set webkitTransformStyle(String value);
  external String get webkitTransition;
  external set webkitTransition(String value);
  external String get webkitTransitionDelay;
  external set webkitTransitionDelay(String value);
  external String get webkitTransitionDuration;
  external set webkitTransitionDuration(String value);
  external String get webkitTransitionProperty;
  external set webkitTransitionProperty(String value);
  external String get webkitTransitionTimingFunction;
  external set webkitTransitionTimingFunction(String value);
  external String get webkitUserSelect;
  external set webkitUserSelect(String value);
  external String get whiteSpace;
  external set whiteSpace(String value);
  external String get whiteSpaceCollapse;
  external set whiteSpaceCollapse(String value);
  external String get widows;
  external set widows(String value);
  external String get width;
  external set width(String value);
  external String get willChange;
  external set willChange(String value);
  external String get wordBreak;
  external set wordBreak(String value);
  external String get wordSpacing;
  external set wordSpacing(String value);
  external String get wordWrap;
  external set wordWrap(String value);
  external String get writingMode;
  external set writingMode(String value);
  external String get x;
  external set x(String value);
  external String get y;
  external set y(String value);
  external String get zIndex;
  external set zIndex(String value);
  external String get zoom;
  external set zoom(String value);
  @JS("getPropertyPriority")
  external String getPropertyPriority(String property);
  @JS("getPropertyValue")
  external String getPropertyValue(String property);
  @JS("item")
  external String item(num index);
  @JS("removeProperty")
  external String removeProperty(String property);
  @JS("setProperty")
  external void setProperty(String property, String? value, [String priority]);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("CSSStyleDeclaration")
external AnonInterface$106 CSSStyleDeclaration;
@JS()
@anonymous
abstract class CSSStyleRule{}
extension CSSStyleRuleExtension on CSSStyleRule {
  external String get selectorText;
  external set selectorText(String value);
  external StylePropertyMap get styleMap;
  external CSSStyleDeclaration get style;
  external set style(String cssText);
}
@JS("CSSStyleRule")
external AnonInterface$107 CSSStyleRule;
@JS()
@anonymous
abstract class CSSStyleSheet{}
extension CSSStyleSheetExtension on CSSStyleSheet {
  external CSSRuleList get cssRules;
  external CSSRule? get ownerRule;
  external CSSRuleList get rules;
  @JS("addRule")
  external num addRule([String selector, String style, num index]);
  @JS("deleteRule")
  external void deleteRule(num index);
  @JS("insertRule")
  external num insertRule(String rule, [num index]);
  @JS("removeRule")
  external void removeRule([num index]);
  @JS("replace")
  external Future<CSSStyleSheet> replace(String text);
  @JS("replaceSync")
  external void replaceSync(String text);
}
@JS("CSSStyleSheet")
external AnonInterface$108 CSSStyleSheet;
@JS()
@anonymous
abstract class CSSStyleValue{}
extension CSSStyleValueExtension on CSSStyleValue {
  @JS("toString")
  external String toString();
}
@JS("CSSStyleValue")
external AnonInterface$109 CSSStyleValue;
@JS()
@anonymous
abstract class CSSSupportsRule{}
extension CSSSupportsRuleExtension on CSSSupportsRule {
}
@JS("CSSSupportsRule")
external AnonInterface$110 CSSSupportsRule;
@JS()
@anonymous
abstract class CSSTransformComponent{}
extension CSSTransformComponentExtension on CSSTransformComponent {
  external bool get is2D;
  external set is2D(bool value);
  @JS("toMatrix")
  external DOMMatrix toMatrix();
  @JS("toString")
  external String toString();
}
@JS("CSSTransformComponent")
external AnonInterface$111 CSSTransformComponent;
@JS()
@anonymous
abstract class CSSTransformValue{}
extension CSSTransformValueExtension on CSSTransformValue {
  external bool get is2D;
  external num get length;
  @JS("toMatrix")
  external DOMMatrix toMatrix();
  @JS("forEach")
  external void forEach(void Function(CSSTransformComponent, num, CSSTransformValue) callbackfn, [dynamic thisArg]);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("CSSTransformValue")
external AnonInterface$112 CSSTransformValue;
@JS()
@anonymous
abstract class CSSTransition{}
extension CSSTransitionExtension on CSSTransition {
  external String get transitionProperty;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(CSSTransition, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(CSSTransition, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("CSSTransition")
external AnonInterface$113 CSSTransition;
@JS()
@anonymous
abstract class CSSTranslate{}
extension CSSTranslateExtension on CSSTranslate {
  external CSSNumericValue get x;
  external set x(CSSNumericValue value);
  external CSSNumericValue get y;
  external set y(CSSNumericValue value);
  external CSSNumericValue get z;
  external set z(CSSNumericValue value);
}
@JS("CSSTranslate")
external AnonInterface$114 CSSTranslate;
@JS()
@anonymous
abstract class CSSUnitValue{}
extension CSSUnitValueExtension on CSSUnitValue {
  external String get unit;
  external num get value;
  external set value(num value);
}
@JS("CSSUnitValue")
external AnonInterface$115 CSSUnitValue;
@JS()
@anonymous
abstract class CSSUnparsedValue{}
extension CSSUnparsedValueExtension on CSSUnparsedValue {
  external num get length;
  @JS("forEach")
  external void forEach(void Function(CSSUnparsedSegment, num, CSSUnparsedValue) callbackfn, [dynamic thisArg]);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("CSSUnparsedValue")
external AnonInterface$116 CSSUnparsedValue;
@JS()
@anonymous
abstract class CSSVariableReferenceValue{}
extension CSSVariableReferenceValueExtension on CSSVariableReferenceValue {
  external CSSUnparsedValue? get fallback;
  external String get variable;
  external set variable(String value);
}
@JS("CSSVariableReferenceValue")
external AnonInterface$117 CSSVariableReferenceValue;
@JS()
@anonymous
abstract class CSSViewTransitionRule{}
extension CSSViewTransitionRuleExtension on CSSViewTransitionRule {
  external String get navigation;
  external ReadonlyArray<String> get types;
}
@JS("CSSViewTransitionRule")
external AnonInterface$118 CSSViewTransitionRule;
@JS()
@anonymous
abstract class Cache{}
extension CacheExtension on Cache {
  @JS("add")
  external Future<void> add(dynamic /* RequestInfo|URL */ request);
  @JS("addAll")
  external Future<void> addAll(List<RequestInfo> requests);
  @JS("delete")
  external Future<bool> delete(dynamic /* RequestInfo|URL */ request, [CacheQueryOptions options]);
  @JS("keys")
  external Future<ReadonlyArray<Request>> keys([dynamic /* RequestInfo|URL */ request, CacheQueryOptions options]);
  @JS("match")
  external Future<Response?> match(dynamic /* RequestInfo|URL */ request, [CacheQueryOptions options]);
  @JS("matchAll")
  external Future<ReadonlyArray<Response>> matchAll([dynamic /* RequestInfo|URL */ request, CacheQueryOptions options]);
  @JS("put")
  external Future<void> put(dynamic /* RequestInfo|URL */ request, Response response);
}
@JS("Cache")
external AnonInterface$119 Cache;
@JS()
@anonymous
abstract class CacheStorage{}
extension CacheStorageExtension on CacheStorage {
  @JS("delete")
  external Future<bool> delete(String cacheName);
  @JS("has")
  external Future<bool> has(String cacheName);
  @JS("keys")
  external Future<List<String>> keys();
  @JS("match")
  external Future<Response?> match(dynamic /* RequestInfo|URL */ request, [MultiCacheQueryOptions options]);
  @JS("open")
  external Future<Cache> open(String cacheName);
}
@JS("CacheStorage")
external AnonInterface$120 CacheStorage;
@JS()
@anonymous
abstract class CanvasCaptureMediaStreamTrack{}
extension CanvasCaptureMediaStreamTrackExtension on CanvasCaptureMediaStreamTrack {
  external HTMLCanvasElement get canvas;
  @JS("requestFrame")
  external void requestFrame();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(CanvasCaptureMediaStreamTrack, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(CanvasCaptureMediaStreamTrack, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("CanvasCaptureMediaStreamTrack")
external AnonInterface$121 CanvasCaptureMediaStreamTrack;
@JS()
@anonymous
abstract class CanvasCompositing{}
extension CanvasCompositingExtension on CanvasCompositing {
  external num get globalAlpha;
  external set globalAlpha(num value);
  external GlobalCompositeOperation get globalCompositeOperation;
  external set globalCompositeOperation(GlobalCompositeOperation value);
}
@JS()
@anonymous
abstract class CanvasDrawImage{}
extension CanvasDrawImageExtension on CanvasDrawImage {
  @JS("drawImage")
  external void drawImage_1(CanvasImageSource image, num dx, num dy);
  @JS("drawImage")
  external void drawImage_2(CanvasImageSource image, num dx, num dy, num dw, num dh);
  @JS("drawImage")
  external void drawImage_3(CanvasImageSource image, num sx, num sy, num sw, num sh, num dx, num dy, num dw, num dh);
}
@JS()
@anonymous
abstract class CanvasDrawPath{}
extension CanvasDrawPathExtension on CanvasDrawPath {
  @JS("beginPath")
  external void beginPath();
  @JS("clip")
  external void clip_1([CanvasFillRule fillRule]);
  @JS("clip")
  external void clip_2(Path2D path, [CanvasFillRule fillRule]);
  @JS("fill")
  external void fill_1([CanvasFillRule fillRule]);
  @JS("fill")
  external void fill_2(Path2D path, [CanvasFillRule fillRule]);
  @JS("isPointInPath")
  external bool isPointInPath_1(num x, num y, [CanvasFillRule fillRule]);
  @JS("isPointInPath")
  external bool isPointInPath_2(Path2D path, num x, num y, [CanvasFillRule fillRule]);
  @JS("isPointInStroke")
  external bool isPointInStroke_1(num x, num y);
  @JS("isPointInStroke")
  external bool isPointInStroke_2(Path2D path, num x, num y);
  @JS("stroke")
  external void stroke_1();
  @JS("stroke")
  external void stroke_2(Path2D path);
}
@JS()
@anonymous
abstract class CanvasFillStrokeStyles{}
extension CanvasFillStrokeStylesExtension on CanvasFillStrokeStyles {
  external dynamic /* String|CanvasGradient|CanvasPattern */ get fillStyle;
  external set fillStyle(dynamic /* String|CanvasGradient|CanvasPattern */ value);
  external dynamic /* String|CanvasGradient|CanvasPattern */ get strokeStyle;
  external set strokeStyle(dynamic /* String|CanvasGradient|CanvasPattern */ value);
  @JS("createConicGradient")
  external CanvasGradient createConicGradient(num startAngle, num x, num y);
  @JS("createLinearGradient")
  external CanvasGradient createLinearGradient(num x0, num y0, num x1, num y1);
  @JS("createPattern")
  external CanvasPattern? createPattern(CanvasImageSource image, String? repetition);
  @JS("createRadialGradient")
  external CanvasGradient createRadialGradient(num x0, num y0, num r0, num x1, num y1, num r1);
}
@JS()
@anonymous
abstract class CanvasFilters{}
extension CanvasFiltersExtension on CanvasFilters {
  external String get filter;
  external set filter(String value);
}
@JS()
@anonymous
abstract class CanvasGradient{}
extension CanvasGradientExtension on CanvasGradient {
  @JS("addColorStop")
  external void addColorStop(num offset, String color);
}
@JS("CanvasGradient")
external AnonInterface$122 CanvasGradient;
@JS()
@anonymous
abstract class CanvasImageData{}
extension CanvasImageDataExtension on CanvasImageData {
  @JS("createImageData")
  external ImageData createImageData_1(num sw, num sh, [ImageDataSettings settings]);
  @JS("createImageData")
  external ImageData createImageData_2(ImageData imagedata);
  @JS("getImageData")
  external ImageData getImageData(num sx, num sy, num sw, num sh, [ImageDataSettings settings]);
  @JS("putImageData")
  external void putImageData_1(ImageData imagedata, num dx, num dy);
  @JS("putImageData")
  external void putImageData_2(ImageData imagedata, num dx, num dy, num dirtyX, num dirtyY, num dirtyWidth, num dirtyHeight);
}
@JS()
@anonymous
abstract class CanvasImageSmoothing{}
extension CanvasImageSmoothingExtension on CanvasImageSmoothing {
  external bool get imageSmoothingEnabled;
  external set imageSmoothingEnabled(bool value);
  external ImageSmoothingQuality get imageSmoothingQuality;
  external set imageSmoothingQuality(ImageSmoothingQuality value);
}
@JS()
@anonymous
abstract class CanvasPath{}
extension CanvasPathExtension on CanvasPath {
  @JS("arc")
  external void arc(num x, num y, num radius, num startAngle, num endAngle, [bool counterclockwise]);
  @JS("arcTo")
  external void arcTo(num x1, num y1, num x2, num y2, num radius);
  @JS("bezierCurveTo")
  external void bezierCurveTo(num cp1x, num cp1y, num cp2x, num cp2y, num x, num y);
  @JS("closePath")
  external void closePath();
  @JS("ellipse")
  external void ellipse(num x, num y, num radiusX, num radiusY, num rotation, num startAngle, num endAngle, [bool counterclockwise]);
  @JS("lineTo")
  external void lineTo(num x, num y);
  @JS("moveTo")
  external void moveTo(num x, num y);
  @JS("quadraticCurveTo")
  external void quadraticCurveTo(num cpx, num cpy, num x, num y);
  @JS("rect")
  external void rect(num x, num y, num w, num h);
  @JS("roundRect")
  external void roundRect(num x, num y, num w, num h, [dynamic /* num|DOMPointInit|List<dynamic /* num|DOMPointInit */> */ radii]);
}
@JS()
@anonymous
abstract class CanvasPathDrawingStyles{}
extension CanvasPathDrawingStylesExtension on CanvasPathDrawingStyles {
  external CanvasLineCap get lineCap;
  external set lineCap(CanvasLineCap value);
  external num get lineDashOffset;
  external set lineDashOffset(num value);
  external CanvasLineJoin get lineJoin;
  external set lineJoin(CanvasLineJoin value);
  external num get lineWidth;
  external set lineWidth(num value);
  external num get miterLimit;
  external set miterLimit(num value);
  @JS("getLineDash")
  external List<num> getLineDash();
  @JS("setLineDash")
  external void setLineDash(List<num> segments);
}
@JS()
@anonymous
abstract class CanvasPattern{}
extension CanvasPatternExtension on CanvasPattern {
  @JS("setTransform")
  external void setTransform([DOMMatrix2DInit transform]);
}
@JS("CanvasPattern")
external AnonInterface$123 CanvasPattern;
@JS()
@anonymous
abstract class CanvasRect{}
extension CanvasRectExtension on CanvasRect {
  @JS("clearRect")
  external void clearRect(num x, num y, num w, num h);
  @JS("fillRect")
  external void fillRect(num x, num y, num w, num h);
  @JS("strokeRect")
  external void strokeRect(num x, num y, num w, num h);
}
@JS()
@anonymous
abstract class CanvasRenderingContext2D{}
extension CanvasRenderingContext2DExtension on CanvasRenderingContext2D {
  external HTMLCanvasElement get canvas;
}
@JS("CanvasRenderingContext2D")
external AnonInterface$124 CanvasRenderingContext2D;
@JS()
@anonymous
abstract class CanvasSettings{}
extension CanvasSettingsExtension on CanvasSettings {
  @JS("getContextAttributes")
  external CanvasRenderingContext2DSettings getContextAttributes();
}
@JS()
@anonymous
abstract class CanvasShadowStyles{}
extension CanvasShadowStylesExtension on CanvasShadowStyles {
  external num get shadowBlur;
  external set shadowBlur(num value);
  external String get shadowColor;
  external set shadowColor(String value);
  external num get shadowOffsetX;
  external set shadowOffsetX(num value);
  external num get shadowOffsetY;
  external set shadowOffsetY(num value);
}
@JS()
@anonymous
abstract class CanvasState{}
extension CanvasStateExtension on CanvasState {
  @JS("isContextLost")
  external bool isContextLost();
  @JS("reset")
  external void reset();
  @JS("restore")
  external void restore();
  @JS("save")
  external void save();
}
@JS()
@anonymous
abstract class CanvasText{}
extension CanvasTextExtension on CanvasText {
  @JS("fillText")
  external void fillText(String text, num x, num y, [num maxWidth]);
  @JS("measureText")
  external TextMetrics measureText(String text);
  @JS("strokeText")
  external void strokeText(String text, num x, num y, [num maxWidth]);
}
@JS()
@anonymous
abstract class CanvasTextDrawingStyles{}
extension CanvasTextDrawingStylesExtension on CanvasTextDrawingStyles {
  external CanvasDirection get direction;
  external set direction(CanvasDirection value);
  external String get font;
  external set font(String value);
  external CanvasFontKerning get fontKerning;
  external set fontKerning(CanvasFontKerning value);
  external CanvasFontStretch get fontStretch;
  external set fontStretch(CanvasFontStretch value);
  external CanvasFontVariantCaps get fontVariantCaps;
  external set fontVariantCaps(CanvasFontVariantCaps value);
  external String get letterSpacing;
  external set letterSpacing(String value);
  external CanvasTextAlign get textAlign;
  external set textAlign(CanvasTextAlign value);
  external CanvasTextBaseline get textBaseline;
  external set textBaseline(CanvasTextBaseline value);
  external CanvasTextRendering get textRendering;
  external set textRendering(CanvasTextRendering value);
  external String get wordSpacing;
  external set wordSpacing(String value);
}
@JS()
@anonymous
abstract class CanvasTransform{}
extension CanvasTransformExtension on CanvasTransform {
  @JS("getTransform")
  external DOMMatrix getTransform();
  @JS("resetTransform")
  external void resetTransform();
  @JS("rotate")
  external void rotate(num angle);
  @JS("scale")
  external void scale(num x, num y);
  @JS("setTransform")
  external void setTransform_1(num a, num b, num c, num d, num e, num f);
  @JS("setTransform")
  external void setTransform_2([DOMMatrix2DInit transform]);
  @JS("transform")
  external void transform(num a, num b, num c, num d, num e, num f);
  @JS("translate")
  external void translate(num x, num y);
}
@JS()
@anonymous
abstract class CanvasUserInterface{}
extension CanvasUserInterfaceExtension on CanvasUserInterface {
  @JS("drawFocusIfNeeded")
  external void drawFocusIfNeeded_1(Element element);
  @JS("drawFocusIfNeeded")
  external void drawFocusIfNeeded_2(Path2D path, Element element);
}
@JS()
@anonymous
abstract class CaretPosition{}
extension CaretPositionExtension on CaretPosition {
  external num get offset;
  external Node get offsetNode;
  @JS("getClientRect")
  external DOMRect? getClientRect();
}
@JS("CaretPosition")
external AnonInterface$125 CaretPosition;
@JS()
@anonymous
abstract class ChannelMergerNode{}
extension ChannelMergerNodeExtension on ChannelMergerNode {
}
@JS("ChannelMergerNode")
external AnonInterface$126 ChannelMergerNode;
@JS()
@anonymous
abstract class ChannelSplitterNode{}
extension ChannelSplitterNodeExtension on ChannelSplitterNode {
}
@JS("ChannelSplitterNode")
external AnonInterface$127 ChannelSplitterNode;
@JS()
@anonymous
abstract class CharacterData{}
extension CharacterDataExtension on CharacterData {
  external String get data;
  external set data(String value);
  external num get length;
  external Document get ownerDocument;
  @JS("appendData")
  external void appendData(String data);
  @JS("deleteData")
  external void deleteData(num offset, num count);
  @JS("insertData")
  external void insertData(num offset, String data);
  @JS("replaceData")
  external void replaceData(num offset, num count, String data);
  @JS("substringData")
  external String substringData(num offset, num count);
}
@JS("CharacterData")
external AnonInterface$128 CharacterData;
@JS()
@anonymous
abstract class ChildNode{}
extension ChildNodeExtension on ChildNode {
  @JS("after")
  external void after([/* rest */ List<dynamic /* Node|String */> nodes]);
  @JS("before")
  external void before([/* rest */ List<dynamic /* Node|String */> nodes]);
  @JS("remove")
  external void remove();
  @JS("replaceWith")
  external void replaceWith([/* rest */ List<dynamic /* Node|String */> nodes]);
}
@JS()
@anonymous
abstract class ClientRect{}
extension ClientRectExtension on ClientRect {
}
@JS()
@anonymous
abstract class Clipboard{}
extension ClipboardExtension on Clipboard {
  @JS("read")
  external Future<ClipboardItems> read();
  @JS("readText")
  external Future<String> readText();
  @JS("write")
  external Future<void> write(ClipboardItems data);
  @JS("writeText")
  external Future<void> writeText(String data);
}
@JS("Clipboard")
external AnonInterface$129 Clipboard;
@JS()
@anonymous
abstract class ClipboardEvent{}
extension ClipboardEventExtension on ClipboardEvent {
  external DataTransfer? get clipboardData;
}
@JS("ClipboardEvent")
external AnonInterface$130 ClipboardEvent;
@JS()
@anonymous
abstract class ClipboardItem{}
extension ClipboardItemExtension on ClipboardItem {
  external PresentationStyle get presentationStyle;
  external ReadonlyArray<String> get types;
  @JS("getType")
  external Future<Blob> getType(String type);
}
@JS("ClipboardItem")
external AnonInterface$131 ClipboardItem;
@JS()
@anonymous
abstract class CloseEvent{}
extension CloseEventExtension on CloseEvent {
  external num get code;
  external String get reason;
  external bool get wasClean;
}
@JS("CloseEvent")
external AnonInterface$132 CloseEvent;
@JS()
@anonymous
abstract class Comment{}
extension CommentExtension on Comment {
}
@JS("Comment")
external AnonInterface$133 Comment;
@JS()
@anonymous
abstract class CompositionEvent{}
extension CompositionEventExtension on CompositionEvent {
  external String get data;
  @JS("initCompositionEvent")
  external void initCompositionEvent(String typeArg, [bool bubblesArg, bool cancelableArg, WindowProxy? viewArg, String dataArg]);
}
@JS("CompositionEvent")
external AnonInterface$134 CompositionEvent;
@JS()
@anonymous
abstract class CompressionStream{}
extension CompressionStreamExtension on CompressionStream {
  external ReadableStream<Uint8Array> get readable;
  external WritableStream<BufferSource> get writable;
}
@JS("CompressionStream")
external AnonInterface$135 CompressionStream;
@JS()
@anonymous
abstract class ConstantSourceNode{}
extension ConstantSourceNodeExtension on ConstantSourceNode {
  external AudioParam get offset;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(ConstantSourceNode, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(ConstantSourceNode, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("ConstantSourceNode")
external AnonInterface$136 ConstantSourceNode;
@JS()
@anonymous
abstract class ContentVisibilityAutoStateChangeEvent{}
extension ContentVisibilityAutoStateChangeEventExtension on ContentVisibilityAutoStateChangeEvent {
  external bool get skipped;
}
@JS("ContentVisibilityAutoStateChangeEvent")
external AnonInterface$137 ContentVisibilityAutoStateChangeEvent;
@JS()
@anonymous
abstract class ConvolverNode{}
extension ConvolverNodeExtension on ConvolverNode {
  external AudioBuffer? get buffer;
  external set buffer(AudioBuffer? value);
  external bool get normalize;
  external set normalize(bool value);
}
@JS("ConvolverNode")
external AnonInterface$138 ConvolverNode;
@JS()
@anonymous
abstract class CountQueuingStrategy{}
extension CountQueuingStrategyExtension on CountQueuingStrategy {
  external num get highWaterMark;
  external QueuingStrategySize get size;
}
@JS("CountQueuingStrategy")
external AnonInterface$139 CountQueuingStrategy;
@JS()
@anonymous
abstract class Credential{}
extension CredentialExtension on Credential {
  external String get id;
  external String get type;
}
@JS("Credential")
external AnonInterface$140 Credential;
@JS()
@anonymous
abstract class CredentialsContainer{}
extension CredentialsContainerExtension on CredentialsContainer {
  @JS("create")
  external Future<Credential?> create([CredentialCreationOptions options]);
  @JS("get")
  external Future<Credential?> get([CredentialRequestOptions options]);
  @JS("preventSilentAccess")
  external Future<void> preventSilentAccess();
  @JS("store")
  external Future<void> store(Credential credential);
}
@JS("CredentialsContainer")
external AnonInterface$141 CredentialsContainer;
@JS()
@anonymous
abstract class Crypto{}
extension CryptoExtension on Crypto {
  external SubtleCrypto get subtle;
  @JS("getRandomValues")
  external T getRandomValues(T array);
  @JS("randomUUID")
  external dynamic randomUUID();
}
@JS("Crypto")
external AnonInterface$142 Crypto;
@JS()
@anonymous
abstract class CryptoKey{}
extension CryptoKeyExtension on CryptoKey {
  external KeyAlgorithm get algorithm;
  external bool get extractable;
  external KeyType get type;
  external List<KeyUsage> get usages;
}
@JS("CryptoKey")
external AnonInterface$143 CryptoKey;
@JS()
@anonymous
abstract class CustomElementRegistry{}
extension CustomElementRegistryExtension on CustomElementRegistry {
  @JS("define")
  external void define(String name, CustomElementConstructor constructor, [ElementDefinitionOptions options]);
  @JS("get")
  external CustomElementConstructor? get(String name);
  @JS("getName")
  external String? getName(CustomElementConstructor constructor);
  @JS("upgrade")
  external void upgrade(Node root);
  @JS("whenDefined")
  external Future<CustomElementConstructor> whenDefined(String name);
}
@JS("CustomElementRegistry")
external AnonInterface$144 CustomElementRegistry;
@JS()
@anonymous
abstract class CustomEvent{}
extension CustomEventExtension on CustomEvent {
  external T get detail;
  @JS("initCustomEvent")
  external void initCustomEvent(String type, [bool bubbles, bool cancelable, T detail]);
}
@JS("CustomEvent")
external AnonInterface$145 CustomEvent;
@JS()
@anonymous
abstract class CustomStateSet{}
extension CustomStateSetExtension on CustomStateSet {
  @JS("forEach")
  external void forEach(void Function(String, String, CustomStateSet) callbackfn, [dynamic thisArg]);
}
@JS("CustomStateSet")
external AnonInterface$146 CustomStateSet;
@JS()
@anonymous
abstract class DOMException{}
extension DOMExceptionExtension on DOMException {
  external num get code;
  external String get message;
  external String get name;
  external num get INDEX_SIZE_ERR;
  external num get DOMSTRING_SIZE_ERR;
  external num get HIERARCHY_REQUEST_ERR;
  external num get WRONG_DOCUMENT_ERR;
  external num get INVALID_CHARACTER_ERR;
  external num get NO_DATA_ALLOWED_ERR;
  external num get NO_MODIFICATION_ALLOWED_ERR;
  external num get NOT_FOUND_ERR;
  external num get NOT_SUPPORTED_ERR;
  external num get INUSE_ATTRIBUTE_ERR;
  external num get INVALID_STATE_ERR;
  external num get SYNTAX_ERR;
  external num get INVALID_MODIFICATION_ERR;
  external num get NAMESPACE_ERR;
  external num get INVALID_ACCESS_ERR;
  external num get VALIDATION_ERR;
  external num get TYPE_MISMATCH_ERR;
  external num get SECURITY_ERR;
  external num get NETWORK_ERR;
  external num get ABORT_ERR;
  external num get URL_MISMATCH_ERR;
  external num get QUOTA_EXCEEDED_ERR;
  external num get TIMEOUT_ERR;
  external num get INVALID_NODE_TYPE_ERR;
  external num get DATA_CLONE_ERR;
}
@JS("DOMException")
external AnonInterface$147 DOMException;
@JS()
@anonymous
abstract class DOMImplementation{}
extension DOMImplementationExtension on DOMImplementation {
  @JS("createDocument")
  external XMLDocument createDocument(String? namespace, String? qualifiedName, [DocumentType? doctype]);
  @JS("createDocumentType")
  external DocumentType createDocumentType(String qualifiedName, String publicId, String systemId);
  @JS("createHTMLDocument")
  external Document createHTMLDocument([String title]);
  @JS("hasFeature")
  external bool hasFeature([/* rest */ List<dynamic> args]);
}
@JS("DOMImplementation")
external AnonInterface$148 DOMImplementation;
@JS()
@anonymous
abstract class DOMMatrix{}
extension DOMMatrixExtension on DOMMatrix {
  external num get a;
  external set a(num value);
  external num get b;
  external set b(num value);
  external num get c;
  external set c(num value);
  external num get d;
  external set d(num value);
  external num get e;
  external set e(num value);
  external num get f;
  external set f(num value);
  external num get m11;
  external set m11(num value);
  external num get m12;
  external set m12(num value);
  external num get m13;
  external set m13(num value);
  external num get m14;
  external set m14(num value);
  external num get m21;
  external set m21(num value);
  external num get m22;
  external set m22(num value);
  external num get m23;
  external set m23(num value);
  external num get m24;
  external set m24(num value);
  external num get m31;
  external set m31(num value);
  external num get m32;
  external set m32(num value);
  external num get m33;
  external set m33(num value);
  external num get m34;
  external set m34(num value);
  external num get m41;
  external set m41(num value);
  external num get m42;
  external set m42(num value);
  external num get m43;
  external set m43(num value);
  external num get m44;
  external set m44(num value);
  @JS("invertSelf")
  external DOMMatrix invertSelf();
  @JS("multiplySelf")
  external DOMMatrix multiplySelf([DOMMatrixInit other]);
  @JS("preMultiplySelf")
  external DOMMatrix preMultiplySelf([DOMMatrixInit other]);
  @JS("rotateAxisAngleSelf")
  external DOMMatrix rotateAxisAngleSelf([num x, num y, num z, num angle]);
  @JS("rotateFromVectorSelf")
  external DOMMatrix rotateFromVectorSelf([num x, num y]);
  @JS("rotateSelf")
  external DOMMatrix rotateSelf([num rotX, num rotY, num rotZ]);
  @JS("scale3dSelf")
  external DOMMatrix scale3dSelf([num scale, num originX, num originY, num originZ]);
  @JS("scaleSelf")
  external DOMMatrix scaleSelf([num scaleX, num scaleY, num scaleZ, num originX, num originY, num originZ]);
  @JS("setMatrixValue")
  external DOMMatrix setMatrixValue(String transformList);
  @JS("skewXSelf")
  external DOMMatrix skewXSelf([num sx]);
  @JS("skewYSelf")
  external DOMMatrix skewYSelf([num sy]);
  @JS("translateSelf")
  external DOMMatrix translateSelf([num tx, num ty, num tz]);
}
@JS("DOMMatrix")
external AnonInterface$149 DOMMatrix;
typedef SVGMatrix = DOMMatrix;
@JS("SVGMatrix")
external dynamic SVGMatrix;
typedef WebKitCSSMatrix = DOMMatrix;
@JS("WebKitCSSMatrix")
external dynamic WebKitCSSMatrix;
@JS()
@anonymous
abstract class DOMMatrixReadOnly{}
extension DOMMatrixReadOnlyExtension on DOMMatrixReadOnly {
  external num get a;
  external num get b;
  external num get c;
  external num get d;
  external num get e;
  external num get f;
  external bool get is2D;
  external bool get isIdentity;
  external num get m11;
  external num get m12;
  external num get m13;
  external num get m14;
  external num get m21;
  external num get m22;
  external num get m23;
  external num get m24;
  external num get m31;
  external num get m32;
  external num get m33;
  external num get m34;
  external num get m41;
  external num get m42;
  external num get m43;
  external num get m44;
  @JS("flipX")
  external DOMMatrix flipX();
  @JS("flipY")
  external DOMMatrix flipY();
  @JS("inverse")
  external DOMMatrix inverse();
  @JS("multiply")
  external DOMMatrix multiply([DOMMatrixInit other]);
  @JS("rotate")
  external DOMMatrix rotate([num rotX, num rotY, num rotZ]);
  @JS("rotateAxisAngle")
  external DOMMatrix rotateAxisAngle([num x, num y, num z, num angle]);
  @JS("rotateFromVector")
  external DOMMatrix rotateFromVector([num x, num y]);
  @JS("scale")
  external DOMMatrix scale([num scaleX, num scaleY, num scaleZ, num originX, num originY, num originZ]);
  @JS("scale3d")
  external DOMMatrix scale3d([num scale, num originX, num originY, num originZ]);
  @JS("scaleNonUniform")
  external DOMMatrix scaleNonUniform([num scaleX, num scaleY]);
  @JS("skewX")
  external DOMMatrix skewX([num sx]);
  @JS("skewY")
  external DOMMatrix skewY([num sy]);
  @JS("toFloat32Array")
  external Float32Array toFloat32Array();
  @JS("toFloat64Array")
  external Float64Array toFloat64Array();
  @JS("toJSON")
  external dynamic toJSON();
  @JS("transformPoint")
  external DOMPoint transformPoint([DOMPointInit point]);
  @JS("translate")
  external DOMMatrix translate([num tx, num ty, num tz]);
  @JS("toString")
  external String toString();
}
@JS("DOMMatrixReadOnly")
external AnonInterface$150 DOMMatrixReadOnly;
@JS()
@anonymous
abstract class DOMParser{}
extension DOMParserExtension on DOMParser {
  @JS("parseFromString")
  external Document parseFromString(String string, DOMParserSupportedType type);
}
@JS("DOMParser")
external AnonInterface$151 DOMParser;
@JS()
@anonymous
abstract class DOMPoint{}
extension DOMPointExtension on DOMPoint {
  external num get w;
  external set w(num value);
  external num get x;
  external set x(num value);
  external num get y;
  external set y(num value);
  external num get z;
  external set z(num value);
}
@JS("DOMPoint")
external AnonInterface$152 DOMPoint;
typedef SVGPoint = DOMPoint;
@JS("SVGPoint")
external dynamic SVGPoint;
@JS()
@anonymous
abstract class DOMPointReadOnly{}
extension DOMPointReadOnlyExtension on DOMPointReadOnly {
  external num get w;
  external num get x;
  external num get y;
  external num get z;
  @JS("matrixTransform")
  external DOMPoint matrixTransform([DOMMatrixInit matrix]);
  @JS("toJSON")
  external dynamic toJSON();
}
@JS("DOMPointReadOnly")
external AnonInterface$153 DOMPointReadOnly;
@JS()
@anonymous
abstract class DOMQuad{}
extension DOMQuadExtension on DOMQuad {
  external DOMPoint get p1;
  external DOMPoint get p2;
  external DOMPoint get p3;
  external DOMPoint get p4;
  @JS("getBounds")
  external DOMRect getBounds();
  @JS("toJSON")
  external dynamic toJSON();
}
@JS("DOMQuad")
external AnonInterface$154 DOMQuad;
@JS()
@anonymous
abstract class DOMRect{}
extension DOMRectExtension on DOMRect {
  external num get height;
  external set height(num value);
  external num get width;
  external set width(num value);
  external num get x;
  external set x(num value);
  external num get y;
  external set y(num value);
}
@JS("DOMRect")
external AnonInterface$155 DOMRect;
typedef SVGRect = DOMRect;
@JS("SVGRect")
external dynamic SVGRect;
@JS()
@anonymous
abstract class DOMRectList{}
extension DOMRectListExtension on DOMRectList {
  external num get length;
  @JS("item")
  external DOMRect? item(num index);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("DOMRectList")
external AnonInterface$156 DOMRectList;
@JS()
@anonymous
abstract class DOMRectReadOnly{}
extension DOMRectReadOnlyExtension on DOMRectReadOnly {
  external num get bottom;
  external num get height;
  external num get left;
  external num get right;
  external num get top;
  external num get width;
  external num get x;
  external num get y;
  @JS("toJSON")
  external dynamic toJSON();
}
@JS("DOMRectReadOnly")
external AnonInterface$157 DOMRectReadOnly;
@JS()
@anonymous
abstract class DOMStringList{}
extension DOMStringListExtension on DOMStringList {
  external num get length;
  @JS("contains")
  external bool contains(String string);
  @JS("item")
  external String? item(num index);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("DOMStringList")
external AnonInterface$158 DOMStringList;
@JS()
@anonymous
abstract class DOMStringMap{}
extension DOMStringMapExtension on DOMStringMap {
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("DOMStringMap")
external AnonInterface$159 DOMStringMap;
@JS()
@anonymous
abstract class DOMTokenList{}
extension DOMTokenListExtension on DOMTokenList {
  external num get length;
  external String get value;
  external set value(String value);
  @JS("toString")
  external String toString();
  @JS("add")
  external void add([/* rest */ List<String> tokens]);
  @JS("contains")
  external bool contains(String token);
  @JS("item")
  external String? item(num index);
  @JS("remove")
  external void remove([/* rest */ List<String> tokens]);
  @JS("replace")
  external bool replace(String token, String newToken);
  @JS("supports")
  external bool supports(String token);
  @JS("toggle")
  external bool toggle(String token, [bool force]);
  @JS("forEach")
  external void forEach(void Function(String, num, DOMTokenList) callbackfn, [dynamic thisArg]);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("DOMTokenList")
external AnonInterface$160 DOMTokenList;
@JS()
@anonymous
abstract class DataTransfer{}
extension DataTransferExtension on DataTransfer {
  external String get dropEffect;
  external set dropEffect(String value);
  external String get effectAllowed;
  external set effectAllowed(String value);
  external FileList get files;
  external DataTransferItemList get items;
  external ReadonlyArray<String> get types;
  @JS("clearData")
  external void clearData([String format]);
  @JS("getData")
  external String getData(String format);
  @JS("setData")
  external void setData(String format, String data);
  @JS("setDragImage")
  external void setDragImage(Element image, num x, num y);
}
@JS("DataTransfer")
external AnonInterface$161 DataTransfer;
@JS()
@anonymous
abstract class DataTransferItem{}
extension DataTransferItemExtension on DataTransferItem {
  external String get kind;
  external String get type;
  @JS("getAsFile")
  external File? getAsFile();
  @JS("getAsString")
  external void getAsString(FunctionStringCallback? callback);
  @JS("webkitGetAsEntry")
  external FileSystemEntry? webkitGetAsEntry();
}
@JS("DataTransferItem")
external AnonInterface$162 DataTransferItem;
@JS()
@anonymous
abstract class DataTransferItemList{}
extension DataTransferItemListExtension on DataTransferItemList {
  external num get length;
  @JS("add")
  external DataTransferItem? add(String data, String type);
  @JS("add")
  external DataTransferItem? add(File data);
  @JS("clear")
  external void clear();
  @JS("remove")
  external void remove(num index);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("DataTransferItemList")
external AnonInterface$163 DataTransferItemList;
@JS()
@anonymous
abstract class DecompressionStream{}
extension DecompressionStreamExtension on DecompressionStream {
  external ReadableStream<Uint8Array> get readable;
  external WritableStream<BufferSource> get writable;
}
@JS("DecompressionStream")
external AnonInterface$164 DecompressionStream;
@JS()
@anonymous
abstract class DelayNode{}
extension DelayNodeExtension on DelayNode {
  external AudioParam get delayTime;
}
@JS("DelayNode")
external AnonInterface$165 DelayNode;
@JS()
@anonymous
abstract class DeviceMotionEvent{}
extension DeviceMotionEventExtension on DeviceMotionEvent {
  external DeviceMotionEventAcceleration? get acceleration;
  external DeviceMotionEventAcceleration? get accelerationIncludingGravity;
  external num get interval;
  external DeviceMotionEventRotationRate? get rotationRate;
}
@JS("DeviceMotionEvent")
external AnonInterface$166 DeviceMotionEvent;
@JS()
@anonymous
abstract class DeviceMotionEventAcceleration{}
extension DeviceMotionEventAccelerationExtension on DeviceMotionEventAcceleration {
  external num? get x;
  external num? get y;
  external num? get z;
}
@JS()
@anonymous
abstract class DeviceMotionEventRotationRate{}
extension DeviceMotionEventRotationRateExtension on DeviceMotionEventRotationRate {
  external num? get alpha;
  external num? get beta;
  external num? get gamma;
}
@JS()
@anonymous
abstract class DeviceOrientationEvent{}
extension DeviceOrientationEventExtension on DeviceOrientationEvent {
  external bool get absolute;
  external num? get alpha;
  external num? get beta;
  external num? get gamma;
}
@JS("DeviceOrientationEvent")
external AnonInterface$167 DeviceOrientationEvent;
@JS()
@anonymous
abstract class DocumentEventMap{}
extension DocumentEventMapExtension on DocumentEventMap {
  external Event get "DOMContentLoaded";
  external set "DOMContentLoaded"(Event value);
  external Event get "fullscreenchange";
  external set "fullscreenchange"(Event value);
  external Event get "fullscreenerror";
  external set "fullscreenerror"(Event value);
  external Event get "pointerlockchange";
  external set "pointerlockchange"(Event value);
  external Event get "pointerlockerror";
  external set "pointerlockerror"(Event value);
  external Event get "readystatechange";
  external set "readystatechange"(Event value);
  external Event get "visibilitychange";
  external set "visibilitychange"(Event value);
}
@JS()
@anonymous
abstract class Document{}
extension DocumentExtension on Document {
  external String get URL;
  external String get alinkColor;
  external set alinkColor(String value);
  external HTMLAllCollection get all;
  external HTMLCollectionOf<HTMLAnchorElement> get anchors;
  external HTMLCollection get applets;
  external String get bgColor;
  external set bgColor(String value);
  external HTMLElement get body;
  external set body(HTMLElement value);
  external String get characterSet;
  external String get charset;
  external String get compatMode;
  external String get contentType;
  external String get cookie;
  external set cookie(String value);
  external HTMLOrSVGScriptElement? get currentScript;
  external dynamic? get defaultView;
  external String get designMode;
  external set designMode(String value);
  external String get dir;
  external set dir(String value);
  external DocumentType? get doctype;
  external HTMLElement get documentElement;
  external String get documentURI;
  external String get domain;
  external set domain(String value);
  external HTMLCollectionOf<HTMLEmbedElement> get embeds;
  external String get fgColor;
  external set fgColor(String value);
  external HTMLCollectionOf<HTMLFormElement> get forms;
  external FragmentDirective get fragmentDirective;
  external bool get fullscreen;
  external bool get fullscreenEnabled;
  external HTMLHeadElement get head;
  external bool get hidden;
  external HTMLCollectionOf<HTMLImageElement> get images;
  external DOMImplementation get implementation;
  external String get inputEncoding;
  external String get lastModified;
  external String get linkColor;
  external set linkColor(String value);
  external HTMLCollectionOf<dynamic /* HTMLAnchorElement|HTMLAreaElement */> get links;
  external dynamic Function(Document, Event)? get onfullscreenchange;
  external set onfullscreenchange(dynamic Function(Document, Event)? value);
  external dynamic Function(Document, Event)? get onfullscreenerror;
  external set onfullscreenerror(dynamic Function(Document, Event)? value);
  external dynamic Function(Document, Event)? get onpointerlockchange;
  external set onpointerlockchange(dynamic Function(Document, Event)? value);
  external dynamic Function(Document, Event)? get onpointerlockerror;
  external set onpointerlockerror(dynamic Function(Document, Event)? value);
  external dynamic Function(Document, Event)? get onreadystatechange;
  external set onreadystatechange(dynamic Function(Document, Event)? value);
  external dynamic Function(Document, Event)? get onvisibilitychange;
  external set onvisibilitychange(dynamic Function(Document, Event)? value);
  external dynamic get ownerDocument;
  external bool get pictureInPictureEnabled;
  external HTMLCollectionOf<HTMLEmbedElement> get plugins;
  external DocumentReadyState get readyState;
  external String get referrer;
  external SVGSVGElement? get rootElement;
  external HTMLCollectionOf<HTMLScriptElement> get scripts;
  external Element? get scrollingElement;
  external DocumentTimeline get timeline;
  external String get title;
  external set title(String value);
  external DocumentVisibilityState get visibilityState;
  external String get vlinkColor;
  external set vlinkColor(String value);
  @JS("adoptNode")
  external T adoptNode(T node);
  @JS("captureEvents")
  external void captureEvents();
  @JS("caretPositionFromPoint")
  external CaretPosition? caretPositionFromPoint(num x, num y, [CaretPositionFromPointOptions options]);
  @JS("caretRangeFromPoint")
  external Range? caretRangeFromPoint(num x, num y);
  @JS("clear")
  external void clear();
  @JS("close")
  external void close();
  @JS("createAttribute")
  external Attr createAttribute(String localName);
  @JS("createAttributeNS")
  external Attr createAttributeNS(String? namespace, String qualifiedName);
  @JS("createCDATASection")
  external CDATASection createCDATASection(String data);
  @JS("createComment")
  external Comment createComment(String data);
  @JS("createDocumentFragment")
  external DocumentFragment createDocumentFragment();
  @JS("createElement")
  external dynamic createElement(K tagName, [ElementCreationOptions options]);
  @JS("createElement")
  external dynamic createElement(K tagName, [ElementCreationOptions options]);
  @JS("createElement")
  external HTMLElement createElement(String tagName, [ElementCreationOptions options]);
  @JS("createElementNS")
  external HTMLElement createElementNS(String namespaceURI, String qualifiedName);
  @JS("createElementNS")
  external dynamic createElementNS(String namespaceURI, K qualifiedName);
  @JS("createElementNS")
  external SVGElement createElementNS(String namespaceURI, String qualifiedName);
  @JS("createElementNS")
  external dynamic createElementNS(String namespaceURI, K qualifiedName);
  @JS("createElementNS")
  external MathMLElement createElementNS(String namespaceURI, String qualifiedName);
  @JS("createElementNS")
  external Element createElementNS(String? namespaceURI, String qualifiedName, [ElementCreationOptions options]);
  @JS("createElementNS")
  external Element createElementNS(String? namespace, String qualifiedName, [dynamic /* String|ElementCreationOptions */ options]);
  @JS("createEvent")
  external AnimationEvent createEvent(String eventInterface);
  @JS("createEvent")
  external AnimationPlaybackEvent createEvent(String eventInterface);
  @JS("createEvent")
  external AudioProcessingEvent createEvent(String eventInterface);
  @JS("createEvent")
  external BeforeUnloadEvent createEvent(String eventInterface);
  @JS("createEvent")
  external BlobEvent createEvent(String eventInterface);
  @JS("createEvent")
  external ClipboardEvent createEvent(String eventInterface);
  @JS("createEvent")
  external CloseEvent createEvent(String eventInterface);
  @JS("createEvent")
  external CompositionEvent createEvent(String eventInterface);
  @JS("createEvent")
  external ContentVisibilityAutoStateChangeEvent createEvent(String eventInterface);
  @JS("createEvent")
  external CustomEvent createEvent(String eventInterface);
  @JS("createEvent")
  external DeviceMotionEvent createEvent(String eventInterface);
  @JS("createEvent")
  external DeviceOrientationEvent createEvent(String eventInterface);
  @JS("createEvent")
  external DragEvent createEvent(String eventInterface);
  @JS("createEvent")
  external ErrorEvent createEvent(String eventInterface);
  @JS("createEvent")
  external Event createEvent(String eventInterface);
  @JS("createEvent")
  external Event createEvent(String eventInterface);
  @JS("createEvent")
  external FocusEvent createEvent(String eventInterface);
  @JS("createEvent")
  external FontFaceSetLoadEvent createEvent(String eventInterface);
  @JS("createEvent")
  external FormDataEvent createEvent(String eventInterface);
  @JS("createEvent")
  external GamepadEvent createEvent(String eventInterface);
  @JS("createEvent")
  external HashChangeEvent createEvent(String eventInterface);
  @JS("createEvent")
  external IDBVersionChangeEvent createEvent(String eventInterface);
  @JS("createEvent")
  external InputEvent createEvent(String eventInterface);
  @JS("createEvent")
  external KeyboardEvent createEvent(String eventInterface);
  @JS("createEvent")
  external MIDIConnectionEvent createEvent(String eventInterface);
  @JS("createEvent")
  external MIDIMessageEvent createEvent(String eventInterface);
  @JS("createEvent")
  external MediaEncryptedEvent createEvent(String eventInterface);
  @JS("createEvent")
  external MediaKeyMessageEvent createEvent(String eventInterface);
  @JS("createEvent")
  external MediaQueryListEvent createEvent(String eventInterface);
  @JS("createEvent")
  external MediaStreamTrackEvent createEvent(String eventInterface);
  @JS("createEvent")
  external MessageEvent createEvent(String eventInterface);
  @JS("createEvent")
  external MouseEvent createEvent(String eventInterface);
  @JS("createEvent")
  external MouseEvent createEvent(String eventInterface);
  @JS("createEvent")
  external OfflineAudioCompletionEvent createEvent(String eventInterface);
  @JS("createEvent")
  external PageRevealEvent createEvent(String eventInterface);
  @JS("createEvent")
  external PageSwapEvent createEvent(String eventInterface);
  @JS("createEvent")
  external PageTransitionEvent createEvent(String eventInterface);
  @JS("createEvent")
  external PaymentMethodChangeEvent createEvent(String eventInterface);
  @JS("createEvent")
  external PaymentRequestUpdateEvent createEvent(String eventInterface);
  @JS("createEvent")
  external PictureInPictureEvent createEvent(String eventInterface);
  @JS("createEvent")
  external PointerEvent createEvent(String eventInterface);
  @JS("createEvent")
  external PopStateEvent createEvent(String eventInterface);
  @JS("createEvent")
  external ProgressEvent createEvent(String eventInterface);
  @JS("createEvent")
  external PromiseRejectionEvent createEvent(String eventInterface);
  @JS("createEvent")
  external RTCDTMFToneChangeEvent createEvent(String eventInterface);
  @JS("createEvent")
  external RTCDataChannelEvent createEvent(String eventInterface);
  @JS("createEvent")
  external RTCErrorEvent createEvent(String eventInterface);
  @JS("createEvent")
  external RTCPeerConnectionIceErrorEvent createEvent(String eventInterface);
  @JS("createEvent")
  external RTCPeerConnectionIceEvent createEvent(String eventInterface);
  @JS("createEvent")
  external RTCTrackEvent createEvent(String eventInterface);
  @JS("createEvent")
  external SecurityPolicyViolationEvent createEvent(String eventInterface);
  @JS("createEvent")
  external SpeechSynthesisErrorEvent createEvent(String eventInterface);
  @JS("createEvent")
  external SpeechSynthesisEvent createEvent(String eventInterface);
  @JS("createEvent")
  external StorageEvent createEvent(String eventInterface);
  @JS("createEvent")
  external SubmitEvent createEvent(String eventInterface);
  @JS("createEvent")
  external TextEvent createEvent(String eventInterface);
  @JS("createEvent")
  external ToggleEvent createEvent(String eventInterface);
  @JS("createEvent")
  external TouchEvent createEvent(String eventInterface);
  @JS("createEvent")
  external TrackEvent createEvent(String eventInterface);
  @JS("createEvent")
  external TransitionEvent createEvent(String eventInterface);
  @JS("createEvent")
  external UIEvent createEvent(String eventInterface);
  @JS("createEvent")
  external UIEvent createEvent(String eventInterface);
  @JS("createEvent")
  external WebGLContextEvent createEvent(String eventInterface);
  @JS("createEvent")
  external WheelEvent createEvent(String eventInterface);
  @JS("createEvent")
  external Event createEvent(String eventInterface);
  @JS("createNodeIterator")
  external NodeIterator createNodeIterator(Node root, [num whatToShow, NodeFilter? filter]);
  @JS("createProcessingInstruction")
  external ProcessingInstruction createProcessingInstruction(String target, String data);
  @JS("createRange")
  external Range createRange();
  @JS("createTextNode")
  external Text createTextNode(String data);
  @JS("createTreeWalker")
  external TreeWalker createTreeWalker(Node root, [num whatToShow, NodeFilter? filter]);
  @JS("execCommand")
  external bool execCommand(String commandId, [bool showUI, String value]);
  @JS("exitFullscreen")
  external Future<void> exitFullscreen();
  @JS("exitPictureInPicture")
  external Future<void> exitPictureInPicture();
  @JS("exitPointerLock")
  external void exitPointerLock();
  @JS("getElementById")
  external HTMLElement? getElementById(String elementId);
  @JS("getElementsByClassName")
  external HTMLCollectionOf<Element> getElementsByClassName(String classNames);
  @JS("getElementsByName")
  external NodeListOf<HTMLElement> getElementsByName(String elementName);
  @JS("getElementsByTagName")
  external HTMLCollectionOf<dynamic> getElementsByTagName(K qualifiedName);
  @JS("getElementsByTagName")
  external HTMLCollectionOf<dynamic> getElementsByTagName(K qualifiedName);
  @JS("getElementsByTagName")
  external HTMLCollectionOf<dynamic> getElementsByTagName(K qualifiedName);
  @JS("getElementsByTagName")
  external HTMLCollectionOf<dynamic> getElementsByTagName(K qualifiedName);
  @JS("getElementsByTagName")
  external HTMLCollectionOf<Element> getElementsByTagName(String qualifiedName);
  @JS("getElementsByTagNameNS")
  external HTMLCollectionOf<HTMLElement> getElementsByTagNameNS(String namespaceURI, String localName);
  @JS("getElementsByTagNameNS")
  external HTMLCollectionOf<SVGElement> getElementsByTagNameNS(String namespaceURI, String localName);
  @JS("getElementsByTagNameNS")
  external HTMLCollectionOf<MathMLElement> getElementsByTagNameNS(String namespaceURI, String localName);
  @JS("getElementsByTagNameNS")
  external HTMLCollectionOf<Element> getElementsByTagNameNS(String? namespace, String localName);
  @JS("getSelection")
  external Selection? getSelection();
  @JS("hasFocus")
  external bool hasFocus();
  @JS("hasStorageAccess")
  external Future<bool> hasStorageAccess();
  @JS("importNode")
  external T importNode(T node, [bool subtree]);
  @JS("open")
  external Document open([String unused1, String unused2]);
  @JS("open")
  external WindowProxy? open(dynamic /* String|URL */ url, String name, String features);
  @JS("queryCommandEnabled")
  external bool queryCommandEnabled(String commandId);
  @JS("queryCommandIndeterm")
  external bool queryCommandIndeterm(String commandId);
  @JS("queryCommandState")
  external bool queryCommandState(String commandId);
  @JS("queryCommandSupported")
  external bool queryCommandSupported(String commandId);
  @JS("queryCommandValue")
  external String queryCommandValue(String commandId);
  @JS("releaseEvents")
  external void releaseEvents();
  @JS("requestStorageAccess")
  external Future<void> requestStorageAccess();
  @JS("startViewTransition")
  external ViewTransition startViewTransition([ViewTransitionUpdateCallback callbackOptions]);
  @JS("write")
  external void write([/* rest */ List<String> text]);
  @JS("writeln")
  external void writeln([/* rest */ List<String> text]);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(Document, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(Document, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
  external Location get location;
  external set location(String href);
}
@JS("Document")
external AnonInterface$168 Document;
@JS()
@anonymous
abstract class DocumentFragment{}
extension DocumentFragmentExtension on DocumentFragment {
  external Document get ownerDocument;
  @JS("getElementById")
  external HTMLElement? getElementById(String elementId);
}
@JS("DocumentFragment")
external AnonInterface$169 DocumentFragment;
@JS()
@anonymous
abstract class DocumentOrShadowRoot{}
extension DocumentOrShadowRootExtension on DocumentOrShadowRoot {
  external Element? get activeElement;
  external List<CSSStyleSheet> get adoptedStyleSheets;
  external set adoptedStyleSheets(List<CSSStyleSheet> value);
  external Element? get fullscreenElement;
  external Element? get pictureInPictureElement;
  external Element? get pointerLockElement;
  external StyleSheetList get styleSheets;
  @JS("elementFromPoint")
  external Element? elementFromPoint(num x, num y);
  @JS("elementsFromPoint")
  external List<Element> elementsFromPoint(num x, num y);
  @JS("getAnimations")
  external List<Animation> getAnimations();
}
@JS()
@anonymous
abstract class DocumentTimeline{}
extension DocumentTimelineExtension on DocumentTimeline {
}
@JS("DocumentTimeline")
external AnonInterface$170 DocumentTimeline;
@JS()
@anonymous
abstract class DocumentType{}
extension DocumentTypeExtension on DocumentType {
  external String get name;
  external Document get ownerDocument;
  external String get publicId;
  external String get systemId;
}
@JS("DocumentType")
external AnonInterface$171 DocumentType;
@JS()
@anonymous
abstract class DragEvent{}
extension DragEventExtension on DragEvent {
  external DataTransfer? get dataTransfer;
}
@JS("DragEvent")
external AnonInterface$172 DragEvent;
@JS()
@anonymous
abstract class DynamicsCompressorNode{}
extension DynamicsCompressorNodeExtension on DynamicsCompressorNode {
  external AudioParam get attack;
  external AudioParam get knee;
  external AudioParam get ratio;
  external num get reduction;
  external AudioParam get release;
  external AudioParam get threshold;
}
@JS("DynamicsCompressorNode")
external AnonInterface$173 DynamicsCompressorNode;
@JS()
@anonymous
abstract class EXT_blend_minmax{}
extension EXT_blend_minmaxExtension on EXT_blend_minmax {
  external num get MIN_EXT;
  external num get MAX_EXT;
}
@JS()
@anonymous
abstract class EXT_color_buffer_float{}
extension EXT_color_buffer_floatExtension on EXT_color_buffer_float {
}
@JS()
@anonymous
abstract class EXT_color_buffer_half_float{}
extension EXT_color_buffer_half_floatExtension on EXT_color_buffer_half_float {
  external num get RGBA16F_EXT;
  external num get RGB16F_EXT;
  external num get FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT;
  external num get UNSIGNED_NORMALIZED_EXT;
}
@JS()
@anonymous
abstract class EXT_float_blend{}
extension EXT_float_blendExtension on EXT_float_blend {
}
@JS()
@anonymous
abstract class EXT_frag_depth{}
extension EXT_frag_depthExtension on EXT_frag_depth {
}
@JS()
@anonymous
abstract class EXT_sRGB{}
extension EXT_sRGBExtension on EXT_sRGB {
  external num get SRGB_EXT;
  external num get SRGB_ALPHA_EXT;
  external num get SRGB8_ALPHA8_EXT;
  external num get FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT;
}
@JS()
@anonymous
abstract class EXT_shader_texture_lod{}
extension EXT_shader_texture_lodExtension on EXT_shader_texture_lod {
}
@JS()
@anonymous
abstract class EXT_texture_compression_bptc{}
extension EXT_texture_compression_bptcExtension on EXT_texture_compression_bptc {
  external num get COMPRESSED_RGBA_BPTC_UNORM_EXT;
  external num get COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT;
  external num get COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
  external num get COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
}
@JS()
@anonymous
abstract class EXT_texture_compression_rgtc{}
extension EXT_texture_compression_rgtcExtension on EXT_texture_compression_rgtc {
  external num get COMPRESSED_RED_RGTC1_EXT;
  external num get COMPRESSED_SIGNED_RED_RGTC1_EXT;
  external num get COMPRESSED_RED_GREEN_RGTC2_EXT;
  external num get COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
}
@JS()
@anonymous
abstract class EXT_texture_filter_anisotropic{}
extension EXT_texture_filter_anisotropicExtension on EXT_texture_filter_anisotropic {
  external num get TEXTURE_MAX_ANISOTROPY_EXT;
  external num get MAX_TEXTURE_MAX_ANISOTROPY_EXT;
}
@JS()
@anonymous
abstract class EXT_texture_norm16{}
extension EXT_texture_norm16Extension on EXT_texture_norm16 {
  external num get R16_EXT;
  external num get RG16_EXT;
  external num get RGB16_EXT;
  external num get RGBA16_EXT;
  external num get R16_SNORM_EXT;
  external num get RG16_SNORM_EXT;
  external num get RGB16_SNORM_EXT;
  external num get RGBA16_SNORM_EXT;
}
@JS()
@anonymous
abstract class ElementEventMap{}
extension ElementEventMapExtension on ElementEventMap {
  external Event get "fullscreenchange";
  external set "fullscreenchange"(Event value);
  external Event get "fullscreenerror";
  external set "fullscreenerror"(Event value);
}
@JS()
@anonymous
abstract class Element{}
extension ElementExtension on Element {
  external NamedNodeMap get attributes;
  external String get className;
  external set className(String value);
  external num get clientHeight;
  external num get clientLeft;
  external num get clientTop;
  external num get clientWidth;
  external num get currentCSSZoom;
  external String get id;
  external set id(String value);
  external String get innerHTML;
  external set innerHTML(String value);
  external String get localName;
  external String? get namespaceURI;
  external dynamic Function(Element, Event)? get onfullscreenchange;
  external set onfullscreenchange(dynamic Function(Element, Event)? value);
  external dynamic Function(Element, Event)? get onfullscreenerror;
  external set onfullscreenerror(dynamic Function(Element, Event)? value);
  external String get outerHTML;
  external set outerHTML(String value);
  external Document get ownerDocument;
  external String? get prefix;
  external num get scrollHeight;
  external num get scrollLeft;
  external set scrollLeft(num value);
  external num get scrollTop;
  external set scrollTop(num value);
  external num get scrollWidth;
  external ShadowRoot? get shadowRoot;
  external String get slot;
  external set slot(String value);
  external String get tagName;
  @JS("attachShadow")
  external ShadowRoot attachShadow(ShadowRootInit init);
  @JS("checkVisibility")
  external bool checkVisibility([CheckVisibilityOptions options]);
  @JS("closest")
  external dynamic? closest(K selector);
  @JS("closest")
  external dynamic? closest(K selector);
  @JS("closest")
  external dynamic? closest(K selector);
  @JS("closest")
  external E? closest(String selectors);
  @JS("computedStyleMap")
  external StylePropertyMapReadOnly computedStyleMap();
  @JS("getAttribute")
  external String? getAttribute(String qualifiedName);
  @JS("getAttributeNS")
  external String? getAttributeNS(String? namespace, String localName);
  @JS("getAttributeNames")
  external List<String> getAttributeNames();
  @JS("getAttributeNode")
  external Attr? getAttributeNode(String qualifiedName);
  @JS("getAttributeNodeNS")
  external Attr? getAttributeNodeNS(String? namespace, String localName);
  @JS("getBoundingClientRect")
  external DOMRect getBoundingClientRect();
  @JS("getClientRects")
  external DOMRectList getClientRects();
  @JS("getElementsByClassName")
  external HTMLCollectionOf<Element> getElementsByClassName(String classNames);
  @JS("getElementsByTagName")
  external HTMLCollectionOf<dynamic> getElementsByTagName(K qualifiedName);
  @JS("getElementsByTagName")
  external HTMLCollectionOf<dynamic> getElementsByTagName(K qualifiedName);
  @JS("getElementsByTagName")
  external HTMLCollectionOf<dynamic> getElementsByTagName(K qualifiedName);
  @JS("getElementsByTagName")
  external HTMLCollectionOf<dynamic> getElementsByTagName(K qualifiedName);
  @JS("getElementsByTagName")
  external HTMLCollectionOf<Element> getElementsByTagName(String qualifiedName);
  @JS("getElementsByTagNameNS")
  external HTMLCollectionOf<HTMLElement> getElementsByTagNameNS(String namespaceURI, String localName);
  @JS("getElementsByTagNameNS")
  external HTMLCollectionOf<SVGElement> getElementsByTagNameNS(String namespaceURI, String localName);
  @JS("getElementsByTagNameNS")
  external HTMLCollectionOf<MathMLElement> getElementsByTagNameNS(String namespaceURI, String localName);
  @JS("getElementsByTagNameNS")
  external HTMLCollectionOf<Element> getElementsByTagNameNS(String? namespace, String localName);
  @JS("getHTML")
  external String getHTML([GetHTMLOptions options]);
  @JS("hasAttribute")
  external bool hasAttribute(String qualifiedName);
  @JS("hasAttributeNS")
  external bool hasAttributeNS(String? namespace, String localName);
  @JS("hasAttributes")
  external bool hasAttributes();
  @JS("hasPointerCapture")
  external bool hasPointerCapture(num pointerId);
  @JS("insertAdjacentElement")
  external Element? insertAdjacentElement(InsertPosition where, Element element);
  @JS("insertAdjacentHTML")
  external void insertAdjacentHTML(InsertPosition position, String string);
  @JS("insertAdjacentText")
  external void insertAdjacentText(InsertPosition where, String data);
  @JS("matches")
  external bool matches(String selectors);
  @JS("releasePointerCapture")
  external void releasePointerCapture(num pointerId);
  @JS("removeAttribute")
  external void removeAttribute(String qualifiedName);
  @JS("removeAttributeNS")
  external void removeAttributeNS(String? namespace, String localName);
  @JS("removeAttributeNode")
  external Attr removeAttributeNode(Attr attr);
  @JS("requestFullscreen")
  external Future<void> requestFullscreen([FullscreenOptions options]);
  @JS("requestPointerLock")
  external Future<void> requestPointerLock([PointerLockOptions options]);
  @JS("scroll")
  external void scroll([ScrollToOptions options]);
  @JS("scroll")
  external void scroll(num x, num y);
  @JS("scrollBy")
  external void scrollBy([ScrollToOptions options]);
  @JS("scrollBy")
  external void scrollBy(num x, num y);
  @JS("scrollIntoView")
  external void scrollIntoView([dynamic /* bool|ScrollIntoViewOptions */ arg]);
  @JS("scrollTo")
  external void scrollTo([ScrollToOptions options]);
  @JS("scrollTo")
  external void scrollTo(num x, num y);
  @JS("setAttribute")
  external void setAttribute(String qualifiedName, String value);
  @JS("setAttributeNS")
  external void setAttributeNS(String? namespace, String qualifiedName, String value);
  @JS("setAttributeNode")
  external Attr? setAttributeNode(Attr attr);
  @JS("setAttributeNodeNS")
  external Attr? setAttributeNodeNS(Attr attr);
  @JS("setHTMLUnsafe")
  external void setHTMLUnsafe(String html);
  @JS("setPointerCapture")
  external void setPointerCapture(num pointerId);
  @JS("toggleAttribute")
  external bool toggleAttribute(String qualifiedName, [bool force]);
  @JS("webkitMatchesSelector")
  external bool webkitMatchesSelector(String selectors);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(Element, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(Element, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
  external DOMTokenList get classList;
  external DOMTokenList get part;
  external set classList(String value);
  external set part(String value);
}
@JS("Element")
external AnonInterface$174 Element;
@JS()
@anonymous
abstract class ElementCSSInlineStyle{}
extension ElementCSSInlineStyleExtension on ElementCSSInlineStyle {
  external StylePropertyMap get attributeStyleMap;
  external CSSStyleDeclaration get style;
  external set style(String cssText);
}
@JS()
@anonymous
abstract class ElementContentEditable{}
extension ElementContentEditableExtension on ElementContentEditable {
  external String get contentEditable;
  external set contentEditable(String value);
  external String get enterKeyHint;
  external set enterKeyHint(String value);
  external String get inputMode;
  external set inputMode(String value);
  external bool get isContentEditable;
}
@JS()
@anonymous
abstract class ElementInternals{}
extension ElementInternalsExtension on ElementInternals {
  external HTMLFormElement? get form;
  external NodeList get labels;
  external ShadowRoot? get shadowRoot;
  external CustomStateSet get states;
  external String get validationMessage;
  external ValidityState get validity;
  external bool get willValidate;
  @JS("checkValidity")
  external bool checkValidity();
  @JS("reportValidity")
  external bool reportValidity();
  @JS("setFormValue")
  external void setFormValue(dynamic /* File|String|FormData */ value, [dynamic /* File|String|FormData */ state]);
  @JS("setValidity")
  external void setValidity([ValidityStateFlags flags, String message, HTMLElement anchor]);
}
@JS("ElementInternals")
external AnonInterface$175 ElementInternals;
@JS()
@anonymous
abstract class EncodedAudioChunk{}
extension EncodedAudioChunkExtension on EncodedAudioChunk {
  external num get byteLength;
  external num? get duration;
  external num get timestamp;
  external EncodedAudioChunkType get type;
  @JS("copyTo")
  external void copyTo(AllowSharedBufferSource destination);
}
@JS("EncodedAudioChunk")
external AnonInterface$176 EncodedAudioChunk;
@JS()
@anonymous
abstract class EncodedVideoChunk{}
extension EncodedVideoChunkExtension on EncodedVideoChunk {
  external num get byteLength;
  external num? get duration;
  external num get timestamp;
  external EncodedVideoChunkType get type;
  @JS("copyTo")
  external void copyTo(AllowSharedBufferSource destination);
}
@JS("EncodedVideoChunk")
external AnonInterface$177 EncodedVideoChunk;
@JS()
@anonymous
abstract class ErrorEvent{}
extension ErrorEventExtension on ErrorEvent {
  external num get colno;
  external dynamic get error;
  external String get filename;
  external num get lineno;
  external String get message;
}
@JS("ErrorEvent")
external AnonInterface$178 ErrorEvent;
@JS()
@anonymous
abstract class Event{}
extension EventExtension on Event {
  external bool get bubbles;
  external bool get cancelBubble;
  external set cancelBubble(bool value);
  external bool get cancelable;
  external bool get composed;
  external EventTarget? get currentTarget;
  external bool get defaultPrevented;
  external num get eventPhase;
  external bool get isTrusted;
  external bool get returnValue;
  external set returnValue(bool value);
  external EventTarget? get srcElement;
  external EventTarget? get target;
  external DOMHighResTimeStamp get timeStamp;
  external String get type;
  external num get NONE;
  external num get CAPTURING_PHASE;
  external num get AT_TARGET;
  external num get BUBBLING_PHASE;
  @JS("composedPath")
  external List<EventTarget> composedPath();
  @JS("initEvent")
  external void initEvent(String type, [bool bubbles, bool cancelable]);
  @JS("preventDefault")
  external void preventDefault();
  @JS("stopImmediatePropagation")
  external void stopImmediatePropagation();
  @JS("stopPropagation")
  external void stopPropagation();
}
@JS("Event")
external AnonInterface$179 Event;
@JS()
@anonymous
abstract class EventCounts{}
extension EventCountsExtension on EventCounts {
  @JS("forEach")
  external void forEach(void Function(num, String, EventCounts) callbackfn, [dynamic thisArg]);
}
@JS("EventCounts")
external AnonInterface$180 EventCounts;
@JS()
@anonymous
abstract class EventListener{}
extension EventListenerExtension on EventListener {
}
@JS()
@anonymous
abstract class EventListenerObject{}
extension EventListenerObjectExtension on EventListenerObject {
  @JS("handleEvent")
  external void handleEvent(Event object);
}
@JS()
@anonymous
abstract class EventSourceEventMap{}
extension EventSourceEventMapExtension on EventSourceEventMap {
  external Event get "error";
  external set "error"(Event value);
  external MessageEvent get "message";
  external set "message"(MessageEvent value);
  external Event get "open";
  external set "open"(Event value);
}
@JS()
@anonymous
abstract class EventSource{}
extension EventSourceExtension on EventSource {
  external dynamic Function(EventSource, Event)? get onerror;
  external set onerror(dynamic Function(EventSource, Event)? value);
  external dynamic Function(EventSource, MessageEvent)? get onmessage;
  external set onmessage(dynamic Function(EventSource, MessageEvent)? value);
  external dynamic Function(EventSource, Event)? get onopen;
  external set onopen(dynamic Function(EventSource, Event)? value);
  external num get readyState;
  external String get url;
  external bool get withCredentials;
  external num get CONNECTING;
  external num get OPEN;
  external num get CLOSED;
  @JS("close")
  external void close();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(EventSource, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, dynamic Function(EventSource, MessageEvent) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(EventSource, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, dynamic Function(EventSource, MessageEvent) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("EventSource")
external AnonInterface$181 EventSource;
@JS()
@anonymous
abstract class EventTarget{}
extension EventTargetExtension on EventTarget {
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject? callback, [dynamic /* AddEventListenerOptions|bool */ options]);
  @JS("dispatchEvent")
  external bool dispatchEvent(Event event);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject? callback, [dynamic /* EventListenerOptions|bool */ options]);
}
@JS("EventTarget")
external AnonInterface$182 EventTarget;
@JS()
@anonymous
abstract class External{}
extension ExternalExtension on External {
  @JS("AddSearchProvider")
  external void AddSearchProvider();
  @JS("IsSearchProviderInstalled")
  external void IsSearchProviderInstalled();
}
@JS("External")
external AnonInterface$183 External;
@JS()
@anonymous
abstract class File{}
extension FileExtension on File {
  external num get lastModified;
  external String get name;
  external String get webkitRelativePath;
}
@JS("File")
external AnonInterface$184 File;
@JS()
@anonymous
abstract class FileList{}
extension FileListExtension on FileList {
  external num get length;
  @JS("item")
  external File? item(num index);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("FileList")
external AnonInterface$185 FileList;
@JS()
@anonymous
abstract class FileReaderEventMap{}
extension FileReaderEventMapExtension on FileReaderEventMap {
  external ProgressEvent<FileReader> get "abort";
  external set "abort"(ProgressEvent<FileReader> value);
  external ProgressEvent<FileReader> get "error";
  external set "error"(ProgressEvent<FileReader> value);
  external ProgressEvent<FileReader> get "load";
  external set "load"(ProgressEvent<FileReader> value);
  external ProgressEvent<FileReader> get "loadend";
  external set "loadend"(ProgressEvent<FileReader> value);
  external ProgressEvent<FileReader> get "loadstart";
  external set "loadstart"(ProgressEvent<FileReader> value);
  external ProgressEvent<FileReader> get "progress";
  external set "progress"(ProgressEvent<FileReader> value);
}
@JS()
@anonymous
abstract class FileReader{}
extension FileReaderExtension on FileReader {
  external DOMException? get error;
  external dynamic Function(FileReader, ProgressEvent<FileReader>)? get onabort;
  external set onabort(dynamic Function(FileReader, ProgressEvent<FileReader>)? value);
  external dynamic Function(FileReader, ProgressEvent<FileReader>)? get onerror;
  external set onerror(dynamic Function(FileReader, ProgressEvent<FileReader>)? value);
  external dynamic Function(FileReader, ProgressEvent<FileReader>)? get onload;
  external set onload(dynamic Function(FileReader, ProgressEvent<FileReader>)? value);
  external dynamic Function(FileReader, ProgressEvent<FileReader>)? get onloadend;
  external set onloadend(dynamic Function(FileReader, ProgressEvent<FileReader>)? value);
  external dynamic Function(FileReader, ProgressEvent<FileReader>)? get onloadstart;
  external set onloadstart(dynamic Function(FileReader, ProgressEvent<FileReader>)? value);
  external dynamic Function(FileReader, ProgressEvent<FileReader>)? get onprogress;
  external set onprogress(dynamic Function(FileReader, ProgressEvent<FileReader>)? value);
  external dynamic get readyState;
  external dynamic /* String|ArrayBuffer */ get result;
  external num get EMPTY;
  external num get LOADING;
  external num get DONE;
  @JS("abort")
  external void abort();
  @JS("readAsArrayBuffer")
  external void readAsArrayBuffer(Blob blob);
  @JS("readAsBinaryString")
  external void readAsBinaryString(Blob blob);
  @JS("readAsDataURL")
  external void readAsDataURL(Blob blob);
  @JS("readAsText")
  external void readAsText(Blob blob, [String encoding]);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(FileReader, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(FileReader, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("FileReader")
external AnonInterface$186 FileReader;
@JS()
@anonymous
abstract class FileSystem{}
extension FileSystemExtension on FileSystem {
  external String get name;
  external FileSystemDirectoryEntry get root;
}
@JS("FileSystem")
external AnonInterface$187 FileSystem;
@JS()
@anonymous
abstract class FileSystemDirectoryEntry{}
extension FileSystemDirectoryEntryExtension on FileSystemDirectoryEntry {
  @JS("createReader")
  external FileSystemDirectoryReader createReader();
  @JS("getDirectory")
  external void getDirectory([String? path, FileSystemFlags options, FileSystemEntryCallback successCallback, ErrorCallback errorCallback]);
  @JS("getFile")
  external void getFile([String? path, FileSystemFlags options, FileSystemEntryCallback successCallback, ErrorCallback errorCallback]);
}
@JS("FileSystemDirectoryEntry")
external AnonInterface$188 FileSystemDirectoryEntry;
@JS()
@anonymous
abstract class FileSystemDirectoryHandle{}
extension FileSystemDirectoryHandleExtension on FileSystemDirectoryHandle {
  external String get kind;
  @JS("getDirectoryHandle")
  external Future<FileSystemDirectoryHandle> getDirectoryHandle(String name, [FileSystemGetDirectoryOptions options]);
  @JS("getFileHandle")
  external Future<FileSystemFileHandle> getFileHandle(String name, [FileSystemGetFileOptions options]);
  @JS("removeEntry")
  external Future<void> removeEntry(String name, [FileSystemRemoveOptions options]);
  @JS("resolve")
  external Future<List<String>?> resolve(FileSystemHandle possibleDescendant);
}
@JS("FileSystemDirectoryHandle")
external AnonInterface$189 FileSystemDirectoryHandle;
@JS()
@anonymous
abstract class FileSystemDirectoryReader{}
extension FileSystemDirectoryReaderExtension on FileSystemDirectoryReader {
  @JS("readEntries")
  external void readEntries(FileSystemEntriesCallback successCallback, [ErrorCallback errorCallback]);
}
@JS("FileSystemDirectoryReader")
external AnonInterface$190 FileSystemDirectoryReader;
@JS()
@anonymous
abstract class FileSystemEntry{}
extension FileSystemEntryExtension on FileSystemEntry {
  external FileSystem get filesystem;
  external String get fullPath;
  external bool get isDirectory;
  external bool get isFile;
  external String get name;
  @JS("getParent")
  external void getParent([FileSystemEntryCallback successCallback, ErrorCallback errorCallback]);
}
@JS("FileSystemEntry")
external AnonInterface$191 FileSystemEntry;
@JS()
@anonymous
abstract class FileSystemFileEntry{}
extension FileSystemFileEntryExtension on FileSystemFileEntry {
  @JS("file")
  external void file(FileCallback successCallback, [ErrorCallback errorCallback]);
}
@JS("FileSystemFileEntry")
external AnonInterface$192 FileSystemFileEntry;
@JS()
@anonymous
abstract class FileSystemFileHandle{}
extension FileSystemFileHandleExtension on FileSystemFileHandle {
  external String get kind;
  @JS("createWritable")
  external Future<FileSystemWritableFileStream> createWritable([FileSystemCreateWritableOptions options]);
  @JS("getFile")
  external Future<File> getFile();
}
@JS("FileSystemFileHandle")
external AnonInterface$193 FileSystemFileHandle;
@JS()
@anonymous
abstract class FileSystemHandle{}
extension FileSystemHandleExtension on FileSystemHandle {
  external FileSystemHandleKind get kind;
  external String get name;
  @JS("isSameEntry")
  external Future<bool> isSameEntry(FileSystemHandle other);
}
@JS("FileSystemHandle")
external AnonInterface$194 FileSystemHandle;
@JS()
@anonymous
abstract class FileSystemWritableFileStream{}
extension FileSystemWritableFileStreamExtension on FileSystemWritableFileStream {
  @JS("seek")
  external Future<void> seek(num position);
  @JS("truncate")
  external Future<void> truncate(num size);
  @JS("write")
  external Future<void> write(FileSystemWriteChunkType data);
}
@JS("FileSystemWritableFileStream")
external AnonInterface$195 FileSystemWritableFileStream;
@JS()
@anonymous
abstract class FocusEvent{}
extension FocusEventExtension on FocusEvent {
  external EventTarget? get relatedTarget;
}
@JS("FocusEvent")
external AnonInterface$196 FocusEvent;
@JS()
@anonymous
abstract class FontFace{}
extension FontFaceExtension on FontFace {
  external String get ascentOverride;
  external set ascentOverride(String value);
  external String get descentOverride;
  external set descentOverride(String value);
  external FontDisplay get display;
  external set display(FontDisplay value);
  external String get family;
  external set family(String value);
  external String get featureSettings;
  external set featureSettings(String value);
  external String get lineGapOverride;
  external set lineGapOverride(String value);
  external Future<FontFace> get loaded;
  external FontFaceLoadStatus get status;
  external String get stretch;
  external set stretch(String value);
  external String get style;
  external set style(String value);
  external String get unicodeRange;
  external set unicodeRange(String value);
  external String get weight;
  external set weight(String value);
  @JS("load")
  external Future<FontFace> load();
}
@JS("FontFace")
external AnonInterface$197 FontFace;
@JS()
@anonymous
abstract class FontFaceSetEventMap{}
extension FontFaceSetEventMapExtension on FontFaceSetEventMap {
  external FontFaceSetLoadEvent get "loading";
  external set "loading"(FontFaceSetLoadEvent value);
  external FontFaceSetLoadEvent get "loadingdone";
  external set "loadingdone"(FontFaceSetLoadEvent value);
  external FontFaceSetLoadEvent get "loadingerror";
  external set "loadingerror"(FontFaceSetLoadEvent value);
}
@JS()
@anonymous
abstract class FontFaceSet{}
extension FontFaceSetExtension on FontFaceSet {
  external dynamic Function(FontFaceSet, FontFaceSetLoadEvent)? get onloading;
  external set onloading(dynamic Function(FontFaceSet, FontFaceSetLoadEvent)? value);
  external dynamic Function(FontFaceSet, FontFaceSetLoadEvent)? get onloadingdone;
  external set onloadingdone(dynamic Function(FontFaceSet, FontFaceSetLoadEvent)? value);
  external dynamic Function(FontFaceSet, FontFaceSetLoadEvent)? get onloadingerror;
  external set onloadingerror(dynamic Function(FontFaceSet, FontFaceSetLoadEvent)? value);
  external Future<FontFaceSet> get ready;
  external FontFaceSetLoadStatus get status;
  @JS("check")
  external bool check(String font, [String text]);
  @JS("load")
  external Future<List<FontFace>> load(String font, [String text]);
  @JS("forEach")
  external void forEach(void Function(FontFace, FontFace, FontFaceSet) callbackfn, [dynamic thisArg]);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(FontFaceSet, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(FontFaceSet, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("FontFaceSet")
external AnonInterface$198 FontFaceSet;
@JS()
@anonymous
abstract class FontFaceSetLoadEvent{}
extension FontFaceSetLoadEventExtension on FontFaceSetLoadEvent {
  external ReadonlyArray<FontFace> get fontfaces;
}
@JS("FontFaceSetLoadEvent")
external AnonInterface$199 FontFaceSetLoadEvent;
@JS()
@anonymous
abstract class FontFaceSource{}
extension FontFaceSourceExtension on FontFaceSource {
  external FontFaceSet get fonts;
}
@JS()
@anonymous
abstract class FormData{}
extension FormDataExtension on FormData {
  @JS("append")
  external void append(String name, dynamic /* String|Blob */ value);
  @JS("append")
  external void append(String name, String value);
  @JS("append")
  external void append(String name, Blob blobValue, [String filename]);
  @JS("delete")
  external void delete(String name);
  @JS("get")
  external FormDataEntryValue? get(String name);
  @JS("getAll")
  external List<FormDataEntryValue> getAll(String name);
  @JS("has")
  external bool has(String name);
  @JS("set")
  external void set(String name, dynamic /* String|Blob */ value);
  @JS("set")
  external void set(String name, String value);
  @JS("set")
  external void set(String name, Blob blobValue, [String filename]);
  @JS("forEach")
  external void forEach(void Function(FormDataEntryValue, String, FormData) callbackfn, [dynamic thisArg]);
}
@JS("FormData")
external AnonInterface$200 FormData;
@JS()
@anonymous
abstract class FormDataEvent{}
extension FormDataEventExtension on FormDataEvent {
  external FormData get formData;
}
@JS("FormDataEvent")
external AnonInterface$201 FormDataEvent;
@JS()
@anonymous
abstract class FragmentDirective{}
extension FragmentDirectiveExtension on FragmentDirective {
}
@JS("FragmentDirective")
external AnonInterface$202 FragmentDirective;
@JS()
@anonymous
abstract class GPUError{}
extension GPUErrorExtension on GPUError {
  external String get message;
}
@JS()
@anonymous
abstract class GainNode{}
extension GainNodeExtension on GainNode {
  external AudioParam get gain;
}
@JS("GainNode")
external AnonInterface$203 GainNode;
@JS()
@anonymous
abstract class Gamepad{}
extension GamepadExtension on Gamepad {
  external ReadonlyArray<num> get axes;
  external ReadonlyArray<GamepadButton> get buttons;
  external bool get connected;
  external String get id;
  external num get index;
  external GamepadMappingType get mapping;
  external DOMHighResTimeStamp get timestamp;
  external GamepadHapticActuator get vibrationActuator;
}
@JS("Gamepad")
external AnonInterface$204 Gamepad;
@JS()
@anonymous
abstract class GamepadButton{}
extension GamepadButtonExtension on GamepadButton {
  external bool get pressed;
  external bool get touched;
  external num get value;
}
@JS("GamepadButton")
external AnonInterface$205 GamepadButton;
@JS()
@anonymous
abstract class GamepadEvent{}
extension GamepadEventExtension on GamepadEvent {
  external Gamepad get gamepad;
}
@JS("GamepadEvent")
external AnonInterface$206 GamepadEvent;
@JS()
@anonymous
abstract class GamepadHapticActuator{}
extension GamepadHapticActuatorExtension on GamepadHapticActuator {
  @JS("playEffect")
  external Future<GamepadHapticsResult> playEffect(GamepadHapticEffectType type, [GamepadEffectParameters params]);
  @JS("reset")
  external Future<GamepadHapticsResult> reset();
}
@JS("GamepadHapticActuator")
external AnonInterface$207 GamepadHapticActuator;
@JS()
@anonymous
abstract class GenericTransformStream{}
extension GenericTransformStreamExtension on GenericTransformStream {
  external ReadableStream get readable;
  external WritableStream get writable;
}
@JS()
@anonymous
abstract class Geolocation{}
extension GeolocationExtension on Geolocation {
  @JS("clearWatch")
  external void clearWatch(num watchId);
  @JS("getCurrentPosition")
  external void getCurrentPosition(PositionCallback successCallback, [PositionErrorCallback? errorCallback, PositionOptions options]);
  @JS("watchPosition")
  external num watchPosition(PositionCallback successCallback, [PositionErrorCallback? errorCallback, PositionOptions options]);
}
@JS("Geolocation")
external AnonInterface$208 Geolocation;
@JS()
@anonymous
abstract class GeolocationCoordinates{}
extension GeolocationCoordinatesExtension on GeolocationCoordinates {
  external num get accuracy;
  external num? get altitude;
  external num? get altitudeAccuracy;
  external num? get heading;
  external num get latitude;
  external num get longitude;
  external num? get speed;
  @JS("toJSON")
  external dynamic toJSON();
}
@JS("GeolocationCoordinates")
external AnonInterface$209 GeolocationCoordinates;
@JS()
@anonymous
abstract class GeolocationPosition{}
extension GeolocationPositionExtension on GeolocationPosition {
  external GeolocationCoordinates get coords;
  external EpochTimeStamp get timestamp;
  @JS("toJSON")
  external dynamic toJSON();
}
@JS("GeolocationPosition")
external AnonInterface$210 GeolocationPosition;
@JS()
@anonymous
abstract class GeolocationPositionError{}
extension GeolocationPositionErrorExtension on GeolocationPositionError {
  external num get code;
  external String get message;
  external num get PERMISSION_DENIED;
  external num get POSITION_UNAVAILABLE;
  external num get TIMEOUT;
}
@JS("GeolocationPositionError")
external AnonInterface$211 GeolocationPositionError;
@JS()
@anonymous
abstract class GlobalEventHandlersEventMap{}
extension GlobalEventHandlersEventMapExtension on GlobalEventHandlersEventMap {
  external UIEvent get "abort";
  external set "abort"(UIEvent value);
  external AnimationEvent get "animationcancel";
  external set "animationcancel"(AnimationEvent value);
  external AnimationEvent get "animationend";
  external set "animationend"(AnimationEvent value);
  external AnimationEvent get "animationiteration";
  external set "animationiteration"(AnimationEvent value);
  external AnimationEvent get "animationstart";
  external set "animationstart"(AnimationEvent value);
  external MouseEvent get "auxclick";
  external set "auxclick"(MouseEvent value);
  external InputEvent get "beforeinput";
  external set "beforeinput"(InputEvent value);
  external Event get "beforetoggle";
  external set "beforetoggle"(Event value);
  external FocusEvent get "blur";
  external set "blur"(FocusEvent value);
  external Event get "cancel";
  external set "cancel"(Event value);
  external Event get "canplay";
  external set "canplay"(Event value);
  external Event get "canplaythrough";
  external set "canplaythrough"(Event value);
  external Event get "change";
  external set "change"(Event value);
  external MouseEvent get "click";
  external set "click"(MouseEvent value);
  external Event get "close";
  external set "close"(Event value);
  external CompositionEvent get "compositionend";
  external set "compositionend"(CompositionEvent value);
  external CompositionEvent get "compositionstart";
  external set "compositionstart"(CompositionEvent value);
  external CompositionEvent get "compositionupdate";
  external set "compositionupdate"(CompositionEvent value);
  external Event get "contextlost";
  external set "contextlost"(Event value);
  external MouseEvent get "contextmenu";
  external set "contextmenu"(MouseEvent value);
  external Event get "contextrestored";
  external set "contextrestored"(Event value);
  external ClipboardEvent get "copy";
  external set "copy"(ClipboardEvent value);
  external Event get "cuechange";
  external set "cuechange"(Event value);
  external ClipboardEvent get "cut";
  external set "cut"(ClipboardEvent value);
  external MouseEvent get "dblclick";
  external set "dblclick"(MouseEvent value);
  external DragEvent get "drag";
  external set "drag"(DragEvent value);
  external DragEvent get "dragend";
  external set "dragend"(DragEvent value);
  external DragEvent get "dragenter";
  external set "dragenter"(DragEvent value);
  external DragEvent get "dragleave";
  external set "dragleave"(DragEvent value);
  external DragEvent get "dragover";
  external set "dragover"(DragEvent value);
  external DragEvent get "dragstart";
  external set "dragstart"(DragEvent value);
  external DragEvent get "drop";
  external set "drop"(DragEvent value);
  external Event get "durationchange";
  external set "durationchange"(Event value);
  external Event get "emptied";
  external set "emptied"(Event value);
  external Event get "ended";
  external set "ended"(Event value);
  external ErrorEvent get "error";
  external set "error"(ErrorEvent value);
  external FocusEvent get "focus";
  external set "focus"(FocusEvent value);
  external FocusEvent get "focusin";
  external set "focusin"(FocusEvent value);
  external FocusEvent get "focusout";
  external set "focusout"(FocusEvent value);
  external FormDataEvent get "formdata";
  external set "formdata"(FormDataEvent value);
  external PointerEvent get "gotpointercapture";
  external set "gotpointercapture"(PointerEvent value);
  external Event get "input";
  external set "input"(Event value);
  external Event get "invalid";
  external set "invalid"(Event value);
  external KeyboardEvent get "keydown";
  external set "keydown"(KeyboardEvent value);
  external KeyboardEvent get "keypress";
  external set "keypress"(KeyboardEvent value);
  external KeyboardEvent get "keyup";
  external set "keyup"(KeyboardEvent value);
  external Event get "load";
  external set "load"(Event value);
  external Event get "loadeddata";
  external set "loadeddata"(Event value);
  external Event get "loadedmetadata";
  external set "loadedmetadata"(Event value);
  external Event get "loadstart";
  external set "loadstart"(Event value);
  external PointerEvent get "lostpointercapture";
  external set "lostpointercapture"(PointerEvent value);
  external MouseEvent get "mousedown";
  external set "mousedown"(MouseEvent value);
  external MouseEvent get "mouseenter";
  external set "mouseenter"(MouseEvent value);
  external MouseEvent get "mouseleave";
  external set "mouseleave"(MouseEvent value);
  external MouseEvent get "mousemove";
  external set "mousemove"(MouseEvent value);
  external MouseEvent get "mouseout";
  external set "mouseout"(MouseEvent value);
  external MouseEvent get "mouseover";
  external set "mouseover"(MouseEvent value);
  external MouseEvent get "mouseup";
  external set "mouseup"(MouseEvent value);
  external ClipboardEvent get "paste";
  external set "paste"(ClipboardEvent value);
  external Event get "pause";
  external set "pause"(Event value);
  external Event get "play";
  external set "play"(Event value);
  external Event get "playing";
  external set "playing"(Event value);
  external PointerEvent get "pointercancel";
  external set "pointercancel"(PointerEvent value);
  external PointerEvent get "pointerdown";
  external set "pointerdown"(PointerEvent value);
  external PointerEvent get "pointerenter";
  external set "pointerenter"(PointerEvent value);
  external PointerEvent get "pointerleave";
  external set "pointerleave"(PointerEvent value);
  external PointerEvent get "pointermove";
  external set "pointermove"(PointerEvent value);
  external PointerEvent get "pointerout";
  external set "pointerout"(PointerEvent value);
  external PointerEvent get "pointerover";
  external set "pointerover"(PointerEvent value);
  external PointerEvent get "pointerup";
  external set "pointerup"(PointerEvent value);
  external ProgressEvent get "progress";
  external set "progress"(ProgressEvent value);
  external Event get "ratechange";
  external set "ratechange"(Event value);
  external Event get "reset";
  external set "reset"(Event value);
  external UIEvent get "resize";
  external set "resize"(UIEvent value);
  external Event get "scroll";
  external set "scroll"(Event value);
  external Event get "scrollend";
  external set "scrollend"(Event value);
  external SecurityPolicyViolationEvent get "securitypolicyviolation";
  external set "securitypolicyviolation"(SecurityPolicyViolationEvent value);
  external Event get "seeked";
  external set "seeked"(Event value);
  external Event get "seeking";
  external set "seeking"(Event value);
  external Event get "select";
  external set "select"(Event value);
  external Event get "selectionchange";
  external set "selectionchange"(Event value);
  external Event get "selectstart";
  external set "selectstart"(Event value);
  external Event get "slotchange";
  external set "slotchange"(Event value);
  external Event get "stalled";
  external set "stalled"(Event value);
  external SubmitEvent get "submit";
  external set "submit"(SubmitEvent value);
  external Event get "suspend";
  external set "suspend"(Event value);
  external Event get "timeupdate";
  external set "timeupdate"(Event value);
  external Event get "toggle";
  external set "toggle"(Event value);
  external TouchEvent get "touchcancel";
  external set "touchcancel"(TouchEvent value);
  external TouchEvent get "touchend";
  external set "touchend"(TouchEvent value);
  external TouchEvent get "touchmove";
  external set "touchmove"(TouchEvent value);
  external TouchEvent get "touchstart";
  external set "touchstart"(TouchEvent value);
  external TransitionEvent get "transitioncancel";
  external set "transitioncancel"(TransitionEvent value);
  external TransitionEvent get "transitionend";
  external set "transitionend"(TransitionEvent value);
  external TransitionEvent get "transitionrun";
  external set "transitionrun"(TransitionEvent value);
  external TransitionEvent get "transitionstart";
  external set "transitionstart"(TransitionEvent value);
  external Event get "volumechange";
  external set "volumechange"(Event value);
  external Event get "waiting";
  external set "waiting"(Event value);
  external Event get "webkitanimationend";
  external set "webkitanimationend"(Event value);
  external Event get "webkitanimationiteration";
  external set "webkitanimationiteration"(Event value);
  external Event get "webkitanimationstart";
  external set "webkitanimationstart"(Event value);
  external Event get "webkittransitionend";
  external set "webkittransitionend"(Event value);
  external WheelEvent get "wheel";
  external set "wheel"(WheelEvent value);
}
@JS()
@anonymous
abstract class GlobalEventHandlers{}
extension GlobalEventHandlersExtension on GlobalEventHandlers {
  external dynamic Function(GlobalEventHandlers, UIEvent)? get onabort;
  external set onabort(dynamic Function(GlobalEventHandlers, UIEvent)? value);
  external dynamic Function(GlobalEventHandlers, AnimationEvent)? get onanimationcancel;
  external set onanimationcancel(dynamic Function(GlobalEventHandlers, AnimationEvent)? value);
  external dynamic Function(GlobalEventHandlers, AnimationEvent)? get onanimationend;
  external set onanimationend(dynamic Function(GlobalEventHandlers, AnimationEvent)? value);
  external dynamic Function(GlobalEventHandlers, AnimationEvent)? get onanimationiteration;
  external set onanimationiteration(dynamic Function(GlobalEventHandlers, AnimationEvent)? value);
  external dynamic Function(GlobalEventHandlers, AnimationEvent)? get onanimationstart;
  external set onanimationstart(dynamic Function(GlobalEventHandlers, AnimationEvent)? value);
  external dynamic Function(GlobalEventHandlers, MouseEvent)? get onauxclick;
  external set onauxclick(dynamic Function(GlobalEventHandlers, MouseEvent)? value);
  external dynamic Function(GlobalEventHandlers, InputEvent)? get onbeforeinput;
  external set onbeforeinput(dynamic Function(GlobalEventHandlers, InputEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onbeforetoggle;
  external set onbeforetoggle(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, FocusEvent)? get onblur;
  external set onblur(dynamic Function(GlobalEventHandlers, FocusEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get oncancel;
  external set oncancel(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get oncanplay;
  external set oncanplay(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get oncanplaythrough;
  external set oncanplaythrough(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onchange;
  external set onchange(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, MouseEvent)? get onclick;
  external set onclick(dynamic Function(GlobalEventHandlers, MouseEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onclose;
  external set onclose(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get oncontextlost;
  external set oncontextlost(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, MouseEvent)? get oncontextmenu;
  external set oncontextmenu(dynamic Function(GlobalEventHandlers, MouseEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get oncontextrestored;
  external set oncontextrestored(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, ClipboardEvent)? get oncopy;
  external set oncopy(dynamic Function(GlobalEventHandlers, ClipboardEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get oncuechange;
  external set oncuechange(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, ClipboardEvent)? get oncut;
  external set oncut(dynamic Function(GlobalEventHandlers, ClipboardEvent)? value);
  external dynamic Function(GlobalEventHandlers, MouseEvent)? get ondblclick;
  external set ondblclick(dynamic Function(GlobalEventHandlers, MouseEvent)? value);
  external dynamic Function(GlobalEventHandlers, DragEvent)? get ondrag;
  external set ondrag(dynamic Function(GlobalEventHandlers, DragEvent)? value);
  external dynamic Function(GlobalEventHandlers, DragEvent)? get ondragend;
  external set ondragend(dynamic Function(GlobalEventHandlers, DragEvent)? value);
  external dynamic Function(GlobalEventHandlers, DragEvent)? get ondragenter;
  external set ondragenter(dynamic Function(GlobalEventHandlers, DragEvent)? value);
  external dynamic Function(GlobalEventHandlers, DragEvent)? get ondragleave;
  external set ondragleave(dynamic Function(GlobalEventHandlers, DragEvent)? value);
  external dynamic Function(GlobalEventHandlers, DragEvent)? get ondragover;
  external set ondragover(dynamic Function(GlobalEventHandlers, DragEvent)? value);
  external dynamic Function(GlobalEventHandlers, DragEvent)? get ondragstart;
  external set ondragstart(dynamic Function(GlobalEventHandlers, DragEvent)? value);
  external dynamic Function(GlobalEventHandlers, DragEvent)? get ondrop;
  external set ondrop(dynamic Function(GlobalEventHandlers, DragEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get ondurationchange;
  external set ondurationchange(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onemptied;
  external set onemptied(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onended;
  external set onended(dynamic Function(GlobalEventHandlers, Event)? value);
  external OnErrorEventHandler get onerror;
  external set onerror(OnErrorEventHandler value);
  external dynamic Function(GlobalEventHandlers, FocusEvent)? get onfocus;
  external set onfocus(dynamic Function(GlobalEventHandlers, FocusEvent)? value);
  external dynamic Function(GlobalEventHandlers, FormDataEvent)? get onformdata;
  external set onformdata(dynamic Function(GlobalEventHandlers, FormDataEvent)? value);
  external dynamic Function(GlobalEventHandlers, PointerEvent)? get ongotpointercapture;
  external set ongotpointercapture(dynamic Function(GlobalEventHandlers, PointerEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get oninput;
  external set oninput(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get oninvalid;
  external set oninvalid(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, KeyboardEvent)? get onkeydown;
  external set onkeydown(dynamic Function(GlobalEventHandlers, KeyboardEvent)? value);
  external dynamic Function(GlobalEventHandlers, KeyboardEvent)? get onkeypress;
  external set onkeypress(dynamic Function(GlobalEventHandlers, KeyboardEvent)? value);
  external dynamic Function(GlobalEventHandlers, KeyboardEvent)? get onkeyup;
  external set onkeyup(dynamic Function(GlobalEventHandlers, KeyboardEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onload;
  external set onload(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onloadeddata;
  external set onloadeddata(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onloadedmetadata;
  external set onloadedmetadata(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onloadstart;
  external set onloadstart(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, PointerEvent)? get onlostpointercapture;
  external set onlostpointercapture(dynamic Function(GlobalEventHandlers, PointerEvent)? value);
  external dynamic Function(GlobalEventHandlers, MouseEvent)? get onmousedown;
  external set onmousedown(dynamic Function(GlobalEventHandlers, MouseEvent)? value);
  external dynamic Function(GlobalEventHandlers, MouseEvent)? get onmouseenter;
  external set onmouseenter(dynamic Function(GlobalEventHandlers, MouseEvent)? value);
  external dynamic Function(GlobalEventHandlers, MouseEvent)? get onmouseleave;
  external set onmouseleave(dynamic Function(GlobalEventHandlers, MouseEvent)? value);
  external dynamic Function(GlobalEventHandlers, MouseEvent)? get onmousemove;
  external set onmousemove(dynamic Function(GlobalEventHandlers, MouseEvent)? value);
  external dynamic Function(GlobalEventHandlers, MouseEvent)? get onmouseout;
  external set onmouseout(dynamic Function(GlobalEventHandlers, MouseEvent)? value);
  external dynamic Function(GlobalEventHandlers, MouseEvent)? get onmouseover;
  external set onmouseover(dynamic Function(GlobalEventHandlers, MouseEvent)? value);
  external dynamic Function(GlobalEventHandlers, MouseEvent)? get onmouseup;
  external set onmouseup(dynamic Function(GlobalEventHandlers, MouseEvent)? value);
  external dynamic Function(GlobalEventHandlers, ClipboardEvent)? get onpaste;
  external set onpaste(dynamic Function(GlobalEventHandlers, ClipboardEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onpause;
  external set onpause(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onplay;
  external set onplay(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onplaying;
  external set onplaying(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, PointerEvent)? get onpointercancel;
  external set onpointercancel(dynamic Function(GlobalEventHandlers, PointerEvent)? value);
  external dynamic Function(GlobalEventHandlers, PointerEvent)? get onpointerdown;
  external set onpointerdown(dynamic Function(GlobalEventHandlers, PointerEvent)? value);
  external dynamic Function(GlobalEventHandlers, PointerEvent)? get onpointerenter;
  external set onpointerenter(dynamic Function(GlobalEventHandlers, PointerEvent)? value);
  external dynamic Function(GlobalEventHandlers, PointerEvent)? get onpointerleave;
  external set onpointerleave(dynamic Function(GlobalEventHandlers, PointerEvent)? value);
  external dynamic Function(GlobalEventHandlers, PointerEvent)? get onpointermove;
  external set onpointermove(dynamic Function(GlobalEventHandlers, PointerEvent)? value);
  external dynamic Function(GlobalEventHandlers, PointerEvent)? get onpointerout;
  external set onpointerout(dynamic Function(GlobalEventHandlers, PointerEvent)? value);
  external dynamic Function(GlobalEventHandlers, PointerEvent)? get onpointerover;
  external set onpointerover(dynamic Function(GlobalEventHandlers, PointerEvent)? value);
  external dynamic Function(GlobalEventHandlers, PointerEvent)? get onpointerup;
  external set onpointerup(dynamic Function(GlobalEventHandlers, PointerEvent)? value);
  external dynamic Function(GlobalEventHandlers, ProgressEvent)? get onprogress;
  external set onprogress(dynamic Function(GlobalEventHandlers, ProgressEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onratechange;
  external set onratechange(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onreset;
  external set onreset(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, UIEvent)? get onresize;
  external set onresize(dynamic Function(GlobalEventHandlers, UIEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onscroll;
  external set onscroll(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onscrollend;
  external set onscrollend(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, SecurityPolicyViolationEvent)? get onsecuritypolicyviolation;
  external set onsecuritypolicyviolation(dynamic Function(GlobalEventHandlers, SecurityPolicyViolationEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onseeked;
  external set onseeked(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onseeking;
  external set onseeking(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onselect;
  external set onselect(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onselectionchange;
  external set onselectionchange(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onselectstart;
  external set onselectstart(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onslotchange;
  external set onslotchange(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onstalled;
  external set onstalled(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, SubmitEvent)? get onsubmit;
  external set onsubmit(dynamic Function(GlobalEventHandlers, SubmitEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onsuspend;
  external set onsuspend(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get ontimeupdate;
  external set ontimeupdate(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get ontoggle;
  external set ontoggle(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, TouchEvent)? get ontouchcancel;
  external set ontouchcancel(dynamic Function(GlobalEventHandlers, TouchEvent)? value);
  external dynamic Function(GlobalEventHandlers, TouchEvent)? get ontouchend;
  external set ontouchend(dynamic Function(GlobalEventHandlers, TouchEvent)? value);
  external dynamic Function(GlobalEventHandlers, TouchEvent)? get ontouchmove;
  external set ontouchmove(dynamic Function(GlobalEventHandlers, TouchEvent)? value);
  external dynamic Function(GlobalEventHandlers, TouchEvent)? get ontouchstart;
  external set ontouchstart(dynamic Function(GlobalEventHandlers, TouchEvent)? value);
  external dynamic Function(GlobalEventHandlers, TransitionEvent)? get ontransitioncancel;
  external set ontransitioncancel(dynamic Function(GlobalEventHandlers, TransitionEvent)? value);
  external dynamic Function(GlobalEventHandlers, TransitionEvent)? get ontransitionend;
  external set ontransitionend(dynamic Function(GlobalEventHandlers, TransitionEvent)? value);
  external dynamic Function(GlobalEventHandlers, TransitionEvent)? get ontransitionrun;
  external set ontransitionrun(dynamic Function(GlobalEventHandlers, TransitionEvent)? value);
  external dynamic Function(GlobalEventHandlers, TransitionEvent)? get ontransitionstart;
  external set ontransitionstart(dynamic Function(GlobalEventHandlers, TransitionEvent)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onvolumechange;
  external set onvolumechange(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onwaiting;
  external set onwaiting(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onwebkitanimationend;
  external set onwebkitanimationend(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onwebkitanimationiteration;
  external set onwebkitanimationiteration(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onwebkitanimationstart;
  external set onwebkitanimationstart(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, Event)? get onwebkittransitionend;
  external set onwebkittransitionend(dynamic Function(GlobalEventHandlers, Event)? value);
  external dynamic Function(GlobalEventHandlers, WheelEvent)? get onwheel;
  external set onwheel(dynamic Function(GlobalEventHandlers, WheelEvent)? value);
  @JS("addEventListener")
  external void addEventListener_1(K type, dynamic Function(GlobalEventHandlers, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener_2(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener_1(K type, dynamic Function(GlobalEventHandlers, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener_2(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS()
@anonymous
abstract class HTMLAllCollection{}
extension HTMLAllCollectionExtension on HTMLAllCollection {
  external num get length;
  @JS("item")
  external dynamic /* HTMLCollection|Element */ item([String nameOrIndex]);
  @JS("namedItem")
  external dynamic /* HTMLCollection|Element */ namedItem(String name);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("HTMLAllCollection")
external AnonInterface$212 HTMLAllCollection;
@JS()
@anonymous
abstract class HTMLAnchorElement{}
extension HTMLAnchorElementExtension on HTMLAnchorElement {
  external String get charset;
  external set charset(String value);
  external String get coords;
  external set coords(String value);
  external String get download;
  external set download(String value);
  external String get hreflang;
  external set hreflang(String value);
  external String get name;
  external set name(String value);
  external String get ping;
  external set ping(String value);
  external String get referrerPolicy;
  external set referrerPolicy(String value);
  external String get rel;
  external set rel(String value);
  external String get rev;
  external set rev(String value);
  external String get shape;
  external set shape(String value);
  external String get target;
  external set target(String value);
  external String get text;
  external set text(String value);
  external String get type;
  external set type(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLAnchorElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLAnchorElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
  external DOMTokenList get relList;
  external set relList(String value);
}
@JS("HTMLAnchorElement")
external AnonInterface$213 HTMLAnchorElement;
@JS()
@anonymous
abstract class HTMLAreaElement{}
extension HTMLAreaElementExtension on HTMLAreaElement {
  external String get alt;
  external set alt(String value);
  external String get coords;
  external set coords(String value);
  external String get download;
  external set download(String value);
  external bool get noHref;
  external set noHref(bool value);
  external String get ping;
  external set ping(String value);
  external String get referrerPolicy;
  external set referrerPolicy(String value);
  external String get rel;
  external set rel(String value);
  external String get shape;
  external set shape(String value);
  external String get target;
  external set target(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLAreaElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLAreaElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
  external DOMTokenList get relList;
  external set relList(String value);
}
@JS("HTMLAreaElement")
external AnonInterface$214 HTMLAreaElement;
@JS()
@anonymous
abstract class HTMLAudioElement{}
extension HTMLAudioElementExtension on HTMLAudioElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLAudioElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLAudioElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLAudioElement")
external AnonInterface$215 HTMLAudioElement;
@JS()
@anonymous
abstract class HTMLBRElement{}
extension HTMLBRElementExtension on HTMLBRElement {
  external String get clear;
  external set clear(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLBRElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLBRElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLBRElement")
external AnonInterface$216 HTMLBRElement;
@JS()
@anonymous
abstract class HTMLBaseElement{}
extension HTMLBaseElementExtension on HTMLBaseElement {
  external String get href;
  external set href(String value);
  external String get target;
  external set target(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLBaseElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLBaseElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLBaseElement")
external AnonInterface$217 HTMLBaseElement;
@JS()
@anonymous
abstract class HTMLBodyElementEventMap{}
extension HTMLBodyElementEventMapExtension on HTMLBodyElementEventMap {
}
@JS()
@anonymous
abstract class HTMLBodyElement{}
extension HTMLBodyElementExtension on HTMLBodyElement {
  external String get aLink;
  external set aLink(String value);
  external String get background;
  external set background(String value);
  external String get bgColor;
  external set bgColor(String value);
  external String get link;
  external set link(String value);
  external String get text;
  external set text(String value);
  external String get vLink;
  external set vLink(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLBodyElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLBodyElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLBodyElement")
external AnonInterface$218 HTMLBodyElement;
@JS()
@anonymous
abstract class HTMLButtonElement{}
extension HTMLButtonElementExtension on HTMLButtonElement {
  external bool get disabled;
  external set disabled(bool value);
  external HTMLFormElement? get form;
  external String get formAction;
  external set formAction(String value);
  external String get formEnctype;
  external set formEnctype(String value);
  external String get formMethod;
  external set formMethod(String value);
  external bool get formNoValidate;
  external set formNoValidate(bool value);
  external String get formTarget;
  external set formTarget(String value);
  external NodeListOf<HTMLLabelElement> get labels;
  external String get name;
  external set name(String value);
  external String get type;
  external set type(String value);
  external String get validationMessage;
  external ValidityState get validity;
  external String get value;
  external set value(String value);
  external bool get willValidate;
  @JS("checkValidity")
  external bool checkValidity();
  @JS("reportValidity")
  external bool reportValidity();
  @JS("setCustomValidity")
  external void setCustomValidity(String error);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLButtonElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLButtonElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLButtonElement")
external AnonInterface$219 HTMLButtonElement;
@JS()
@anonymous
abstract class HTMLCanvasElement{}
extension HTMLCanvasElementExtension on HTMLCanvasElement {
  external num get height;
  external set height(num value);
  external num get width;
  external set width(num value);
  @JS("captureStream")
  external MediaStream captureStream([num frameRequestRate]);
  @JS("getContext")
  external CanvasRenderingContext2D? getContext(String contextId, [CanvasRenderingContext2DSettings options]);
  @JS("getContext")
  external ImageBitmapRenderingContext? getContext(String contextId, [ImageBitmapRenderingContextSettings options]);
  @JS("getContext")
  external WebGLRenderingContext? getContext(String contextId, [WebGLContextAttributes options]);
  @JS("getContext")
  external WebGL2RenderingContext? getContext(String contextId, [WebGLContextAttributes options]);
  @JS("getContext")
  external RenderingContext? getContext(String contextId, [dynamic options]);
  @JS("toBlob")
  external void toBlob(BlobCallback callback, [String type, num quality]);
  @JS("toDataURL")
  external String toDataURL([String type, num quality]);
  @JS("transferControlToOffscreen")
  external OffscreenCanvas transferControlToOffscreen();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLCanvasElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLCanvasElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLCanvasElement")
external AnonInterface$220 HTMLCanvasElement;
@JS()
@anonymous
abstract class HTMLCollectionBase{}
extension HTMLCollectionBaseExtension on HTMLCollectionBase {
  external num get length;
  @JS("item")
  external Element? item(num index);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS()
@anonymous
abstract class HTMLCollection{}
extension HTMLCollectionExtension on HTMLCollection {
  @JS("namedItem")
  external Element? namedItem(String name);
}
@JS("HTMLCollection")
external AnonInterface$221 HTMLCollection;
@JS()
@anonymous
abstract class HTMLCollectionOf{}
extension HTMLCollectionOfExtension on HTMLCollectionOf {
  @JS("item")
  external T? item(num index);
  @JS("namedItem")
  external T? namedItem(String name);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS()
@anonymous
abstract class HTMLDListElement{}
extension HTMLDListElementExtension on HTMLDListElement {
  external bool get compact;
  external set compact(bool value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLDListElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLDListElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLDListElement")
external AnonInterface$222 HTMLDListElement;
@JS()
@anonymous
abstract class HTMLDataElement{}
extension HTMLDataElementExtension on HTMLDataElement {
  external String get value;
  external set value(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLDataElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLDataElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLDataElement")
external AnonInterface$223 HTMLDataElement;
@JS()
@anonymous
abstract class HTMLDataListElement{}
extension HTMLDataListElementExtension on HTMLDataListElement {
  external HTMLCollectionOf<HTMLOptionElement> get options;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLDataListElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLDataListElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLDataListElement")
external AnonInterface$224 HTMLDataListElement;
@JS()
@anonymous
abstract class HTMLDetailsElement{}
extension HTMLDetailsElementExtension on HTMLDetailsElement {
  external String get name;
  external set name(String value);
  external bool get open;
  external set open(bool value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLDetailsElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLDetailsElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLDetailsElement")
external AnonInterface$225 HTMLDetailsElement;
@JS()
@anonymous
abstract class HTMLDialogElement{}
extension HTMLDialogElementExtension on HTMLDialogElement {
  external bool get open;
  external set open(bool value);
  external String get returnValue;
  external set returnValue(String value);
  @JS("close")
  external void close([String returnValue]);
  @JS("show")
  external void show();
  @JS("showModal")
  external void showModal();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLDialogElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLDialogElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLDialogElement")
external AnonInterface$226 HTMLDialogElement;
@JS()
@anonymous
abstract class HTMLDirectoryElement{}
extension HTMLDirectoryElementExtension on HTMLDirectoryElement {
  external bool get compact;
  external set compact(bool value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLDirectoryElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLDirectoryElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLDirectoryElement")
external AnonInterface$227 HTMLDirectoryElement;
@JS()
@anonymous
abstract class HTMLDivElement{}
extension HTMLDivElementExtension on HTMLDivElement {
  external String get align;
  external set align(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLDivElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLDivElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLDivElement")
external AnonInterface$228 HTMLDivElement;
@JS()
@anonymous
abstract class HTMLDocument{}
extension HTMLDocumentExtension on HTMLDocument {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLDocument, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLDocument, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLDocument")
external AnonInterface$229 HTMLDocument;
@JS()
@anonymous
abstract class HTMLElementEventMap{}
extension HTMLElementEventMapExtension on HTMLElementEventMap {
}
@JS()
@anonymous
abstract class HTMLElement{}
extension HTMLElementExtension on HTMLElement {
  external String get accessKey;
  external set accessKey(String value);
  external String get accessKeyLabel;
  external String get autocapitalize;
  external set autocapitalize(String value);
  external String get dir;
  external set dir(String value);
  external bool get draggable;
  external set draggable(bool value);
  external bool get hidden;
  external set hidden(bool value);
  external bool get inert;
  external set inert(bool value);
  external String get innerText;
  external set innerText(String value);
  external String get lang;
  external set lang(String value);
  external num get offsetHeight;
  external num get offsetLeft;
  external Element? get offsetParent;
  external num get offsetTop;
  external num get offsetWidth;
  external String get outerText;
  external set outerText(String value);
  external String? get popover;
  external set popover(String? value);
  external bool get spellcheck;
  external set spellcheck(bool value);
  external String get title;
  external set title(String value);
  external bool get translate;
  external set translate(bool value);
  external String get writingSuggestions;
  external set writingSuggestions(String value);
  @JS("attachInternals")
  external ElementInternals attachInternals();
  @JS("click")
  external void click();
  @JS("hidePopover")
  external void hidePopover();
  @JS("showPopover")
  external void showPopover();
  @JS("togglePopover")
  external bool togglePopover([bool options]);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLElement")
external AnonInterface$230 HTMLElement;
@JS()
@anonymous
abstract class HTMLEmbedElement{}
extension HTMLEmbedElementExtension on HTMLEmbedElement {
  external String get align;
  external set align(String value);
  external String get height;
  external set height(String value);
  external String get name;
  external set name(String value);
  external String get src;
  external set src(String value);
  external String get type;
  external set type(String value);
  external String get width;
  external set width(String value);
  @JS("getSVGDocument")
  external Document? getSVGDocument();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLEmbedElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLEmbedElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLEmbedElement")
external AnonInterface$231 HTMLEmbedElement;
@JS()
@anonymous
abstract class HTMLFieldSetElement{}
extension HTMLFieldSetElementExtension on HTMLFieldSetElement {
  external bool get disabled;
  external set disabled(bool value);
  external HTMLCollection get elements;
  external HTMLFormElement? get form;
  external String get name;
  external set name(String value);
  external String get type;
  external String get validationMessage;
  external ValidityState get validity;
  external bool get willValidate;
  @JS("checkValidity")
  external bool checkValidity();
  @JS("reportValidity")
  external bool reportValidity();
  @JS("setCustomValidity")
  external void setCustomValidity(String error);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLFieldSetElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLFieldSetElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLFieldSetElement")
external AnonInterface$232 HTMLFieldSetElement;
@JS()
@anonymous
abstract class HTMLFontElement{}
extension HTMLFontElementExtension on HTMLFontElement {
  external String get color;
  external set color(String value);
  external String get face;
  external set face(String value);
  external String get size;
  external set size(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLFontElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLFontElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLFontElement")
external AnonInterface$233 HTMLFontElement;
@JS()
@anonymous
abstract class HTMLFormControlsCollection{}
extension HTMLFormControlsCollectionExtension on HTMLFormControlsCollection {
  @JS("namedItem")
  external dynamic /* RadioNodeList|Element */ namedItem(String name);
}
@JS("HTMLFormControlsCollection")
external AnonInterface$234 HTMLFormControlsCollection;
@JS()
@anonymous
abstract class HTMLFormElement{}
extension HTMLFormElementExtension on HTMLFormElement {
  external String get acceptCharset;
  external set acceptCharset(String value);
  external String get action;
  external set action(String value);
  external AutoFillBase get autocomplete;
  external set autocomplete(AutoFillBase value);
  external HTMLFormControlsCollection get elements;
  external String get encoding;
  external set encoding(String value);
  external String get enctype;
  external set enctype(String value);
  external num get length;
  external String get method;
  external set method(String value);
  external String get name;
  external set name(String value);
  external bool get noValidate;
  external set noValidate(bool value);
  external String get rel;
  external set rel(String value);
  external String get target;
  external set target(String value);
  @JS("checkValidity")
  external bool checkValidity();
  @JS("reportValidity")
  external bool reportValidity();
  @JS("requestSubmit")
  external void requestSubmit([HTMLElement? submitter]);
  @JS("reset")
  external void reset();
  @JS("submit")
  external void submit();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLFormElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLFormElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
  external DOMTokenList get relList;
  external set relList(String value);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("HTMLFormElement")
external AnonInterface$235 HTMLFormElement;
@JS()
@anonymous
abstract class HTMLFrameElement{}
extension HTMLFrameElementExtension on HTMLFrameElement {
  external Document? get contentDocument;
  external WindowProxy? get contentWindow;
  external String get frameBorder;
  external set frameBorder(String value);
  external String get longDesc;
  external set longDesc(String value);
  external String get marginHeight;
  external set marginHeight(String value);
  external String get marginWidth;
  external set marginWidth(String value);
  external String get name;
  external set name(String value);
  external bool get noResize;
  external set noResize(bool value);
  external String get scrolling;
  external set scrolling(String value);
  external String get src;
  external set src(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLFrameElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLFrameElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLFrameElement")
external AnonInterface$236 HTMLFrameElement;
@JS()
@anonymous
abstract class HTMLFrameSetElementEventMap{}
extension HTMLFrameSetElementEventMapExtension on HTMLFrameSetElementEventMap {
}
@JS()
@anonymous
abstract class HTMLFrameSetElement{}
extension HTMLFrameSetElementExtension on HTMLFrameSetElement {
  external String get cols;
  external set cols(String value);
  external String get rows;
  external set rows(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLFrameSetElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLFrameSetElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLFrameSetElement")
external AnonInterface$237 HTMLFrameSetElement;
@JS()
@anonymous
abstract class HTMLHRElement{}
extension HTMLHRElementExtension on HTMLHRElement {
  external String get align;
  external set align(String value);
  external String get color;
  external set color(String value);
  external bool get noShade;
  external set noShade(bool value);
  external String get size;
  external set size(String value);
  external String get width;
  external set width(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLHRElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLHRElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLHRElement")
external AnonInterface$238 HTMLHRElement;
@JS()
@anonymous
abstract class HTMLHeadElement{}
extension HTMLHeadElementExtension on HTMLHeadElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLHeadElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLHeadElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLHeadElement")
external AnonInterface$239 HTMLHeadElement;
@JS()
@anonymous
abstract class HTMLHeadingElement{}
extension HTMLHeadingElementExtension on HTMLHeadingElement {
  external String get align;
  external set align(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLHeadingElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLHeadingElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLHeadingElement")
external AnonInterface$240 HTMLHeadingElement;
@JS()
@anonymous
abstract class HTMLHtmlElement{}
extension HTMLHtmlElementExtension on HTMLHtmlElement {
  external String get version;
  external set version(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLHtmlElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLHtmlElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLHtmlElement")
external AnonInterface$241 HTMLHtmlElement;
@JS()
@anonymous
abstract class HTMLHyperlinkElementUtils{}
extension HTMLHyperlinkElementUtilsExtension on HTMLHyperlinkElementUtils {
  external String get hash;
  external set hash(String value);
  external String get host;
  external set host(String value);
  external String get hostname;
  external set hostname(String value);
  external String get href;
  external set href(String value);
  external String get origin;
  external String get password;
  external set password(String value);
  external String get pathname;
  external set pathname(String value);
  external String get port;
  external set port(String value);
  external String get protocol;
  external set protocol(String value);
  external String get search;
  external set search(String value);
  external String get username;
  external set username(String value);
  @JS("toString")
  external String toString();
}
@JS()
@anonymous
abstract class HTMLIFrameElement{}
extension HTMLIFrameElementExtension on HTMLIFrameElement {
  external String get align;
  external set align(String value);
  external String get allow;
  external set allow(String value);
  external bool get allowFullscreen;
  external set allowFullscreen(bool value);
  external Document? get contentDocument;
  external WindowProxy? get contentWindow;
  external String get frameBorder;
  external set frameBorder(String value);
  external String get height;
  external set height(String value);
  external String get loading;
  external set loading(String value);
  external String get longDesc;
  external set longDesc(String value);
  external String get marginHeight;
  external set marginHeight(String value);
  external String get marginWidth;
  external set marginWidth(String value);
  external String get name;
  external set name(String value);
  external ReferrerPolicy get referrerPolicy;
  external set referrerPolicy(ReferrerPolicy value);
  external String get scrolling;
  external set scrolling(String value);
  external String get src;
  external set src(String value);
  external String get srcdoc;
  external set srcdoc(String value);
  external String get width;
  external set width(String value);
  @JS("getSVGDocument")
  external Document? getSVGDocument();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLIFrameElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLIFrameElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
  external DOMTokenList get sandbox;
  external set sandbox(String value);
}
@JS("HTMLIFrameElement")
external AnonInterface$242 HTMLIFrameElement;
@JS()
@anonymous
abstract class HTMLImageElement{}
extension HTMLImageElementExtension on HTMLImageElement {
  external String get align;
  external set align(String value);
  external String get alt;
  external set alt(String value);
  external String get border;
  external set border(String value);
  external bool get complete;
  external String? get crossOrigin;
  external set crossOrigin(String? value);
  external String get currentSrc;
  external String get decoding;
  external set decoding(String value);
  external String get fetchPriority;
  external set fetchPriority(String value);
  external num get height;
  external set height(num value);
  external num get hspace;
  external set hspace(num value);
  external bool get isMap;
  external set isMap(bool value);
  external String get loading;
  external set loading(String value);
  external String get longDesc;
  external set longDesc(String value);
  external String get lowsrc;
  external set lowsrc(String value);
  external String get name;
  external set name(String value);
  external num get naturalHeight;
  external num get naturalWidth;
  external String get referrerPolicy;
  external set referrerPolicy(String value);
  external String get sizes;
  external set sizes(String value);
  external String get src;
  external set src(String value);
  external String get srcset;
  external set srcset(String value);
  external String get useMap;
  external set useMap(String value);
  external num get vspace;
  external set vspace(num value);
  external num get width;
  external set width(num value);
  external num get x;
  external num get y;
  @JS("decode")
  external Future<void> decode();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLImageElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLImageElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLImageElement")
external AnonInterface$243 HTMLImageElement;
@JS()
@anonymous
abstract class HTMLInputElement{}
extension HTMLInputElementExtension on HTMLInputElement {
  external String get accept;
  external set accept(String value);
  external String get align;
  external set align(String value);
  external String get alt;
  external set alt(String value);
  external AutoFill get autocomplete;
  external set autocomplete(AutoFill value);
  external String get capture;
  external set capture(String value);
  external bool get checked;
  external set checked(bool value);
  external bool get defaultChecked;
  external set defaultChecked(bool value);
  external String get defaultValue;
  external set defaultValue(String value);
  external String get dirName;
  external set dirName(String value);
  external bool get disabled;
  external set disabled(bool value);
  external FileList? get files;
  external set files(FileList? value);
  external HTMLFormElement? get form;
  external String get formAction;
  external set formAction(String value);
  external String get formEnctype;
  external set formEnctype(String value);
  external String get formMethod;
  external set formMethod(String value);
  external bool get formNoValidate;
  external set formNoValidate(bool value);
  external String get formTarget;
  external set formTarget(String value);
  external num get height;
  external set height(num value);
  external bool get indeterminate;
  external set indeterminate(bool value);
  external NodeListOf<HTMLLabelElement>? get labels;
  external HTMLDataListElement? get list;
  external String get max;
  external set max(String value);
  external num get maxLength;
  external set maxLength(num value);
  external String get min;
  external set min(String value);
  external num get minLength;
  external set minLength(num value);
  external bool get multiple;
  external set multiple(bool value);
  external String get name;
  external set name(String value);
  external String get pattern;
  external set pattern(String value);
  external String get placeholder;
  external set placeholder(String value);
  external bool get readOnly;
  external set readOnly(bool value);
  external bool get required;
  external set required(bool value);
  external String? get selectionDirection;
  external set selectionDirection(String? value);
  external num? get selectionEnd;
  external set selectionEnd(num? value);
  external num? get selectionStart;
  external set selectionStart(num? value);
  external num get size;
  external set size(num value);
  external String get src;
  external set src(String value);
  external String get step;
  external set step(String value);
  external String get type;
  external set type(String value);
  external String get useMap;
  external set useMap(String value);
  external String get validationMessage;
  external ValidityState get validity;
  external String get value;
  external set value(String value);
  external DateTime? get valueAsDate;
  external set valueAsDate(DateTime? value);
  external num get valueAsNumber;
  external set valueAsNumber(num value);
  external ReadonlyArray<FileSystemEntry> get webkitEntries;
  external bool get webkitdirectory;
  external set webkitdirectory(bool value);
  external num get width;
  external set width(num value);
  external bool get willValidate;
  @JS("checkValidity")
  external bool checkValidity();
  @JS("reportValidity")
  external bool reportValidity();
  @JS("select")
  external void select();
  @JS("setCustomValidity")
  external void setCustomValidity(String error);
  @JS("setRangeText")
  external void setRangeText(String replacement);
  @JS("setRangeText")
  external void setRangeText(String replacement, num start, num end, [SelectionMode selectionMode]);
  @JS("setSelectionRange")
  external void setSelectionRange(num? start, num? end, [String direction]);
  @JS("showPicker")
  external void showPicker();
  @JS("stepDown")
  external void stepDown([num n]);
  @JS("stepUp")
  external void stepUp([num n]);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLInputElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLInputElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLInputElement")
external AnonInterface$244 HTMLInputElement;
@JS()
@anonymous
abstract class HTMLLIElement{}
extension HTMLLIElementExtension on HTMLLIElement {
  external String get type;
  external set type(String value);
  external num get value;
  external set value(num value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLLIElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLLIElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLLIElement")
external AnonInterface$245 HTMLLIElement;
@JS()
@anonymous
abstract class HTMLLabelElement{}
extension HTMLLabelElementExtension on HTMLLabelElement {
  external HTMLElement? get control;
  external HTMLFormElement? get form;
  external String get htmlFor;
  external set htmlFor(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLLabelElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLLabelElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLLabelElement")
external AnonInterface$246 HTMLLabelElement;
@JS()
@anonymous
abstract class HTMLLegendElement{}
extension HTMLLegendElementExtension on HTMLLegendElement {
  external String get align;
  external set align(String value);
  external HTMLFormElement? get form;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLLegendElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLLegendElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLLegendElement")
external AnonInterface$247 HTMLLegendElement;
@JS()
@anonymous
abstract class HTMLLinkElement{}
extension HTMLLinkElementExtension on HTMLLinkElement {
  external String get as;
  external set as(String value);
  external String get charset;
  external set charset(String value);
  external String? get crossOrigin;
  external set crossOrigin(String? value);
  external bool get disabled;
  external set disabled(bool value);
  external String get fetchPriority;
  external set fetchPriority(String value);
  external String get href;
  external set href(String value);
  external String get hreflang;
  external set hreflang(String value);
  external String get imageSizes;
  external set imageSizes(String value);
  external String get imageSrcset;
  external set imageSrcset(String value);
  external String get integrity;
  external set integrity(String value);
  external String get media;
  external set media(String value);
  external String get referrerPolicy;
  external set referrerPolicy(String value);
  external String get rel;
  external set rel(String value);
  external String get rev;
  external set rev(String value);
  external String get target;
  external set target(String value);
  external String get type;
  external set type(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLLinkElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLLinkElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
  external DOMTokenList get blocking;
  external DOMTokenList get relList;
  external DOMTokenList get sizes;
  external set blocking(String value);
  external set relList(String value);
  external set sizes(String value);
}
@JS("HTMLLinkElement")
external AnonInterface$248 HTMLLinkElement;
@JS()
@anonymous
abstract class HTMLMapElement{}
extension HTMLMapElementExtension on HTMLMapElement {
  external HTMLCollection get areas;
  external String get name;
  external set name(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLMapElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLMapElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLMapElement")
external AnonInterface$249 HTMLMapElement;
@JS()
@anonymous
abstract class HTMLMarqueeElement{}
extension HTMLMarqueeElementExtension on HTMLMarqueeElement {
  external String get behavior;
  external set behavior(String value);
  external String get bgColor;
  external set bgColor(String value);
  external String get direction;
  external set direction(String value);
  external String get height;
  external set height(String value);
  external num get hspace;
  external set hspace(num value);
  external num get loop;
  external set loop(num value);
  external num get scrollAmount;
  external set scrollAmount(num value);
  external num get scrollDelay;
  external set scrollDelay(num value);
  external bool get trueSpeed;
  external set trueSpeed(bool value);
  external num get vspace;
  external set vspace(num value);
  external String get width;
  external set width(String value);
  @JS("start")
  external void start();
  @JS("stop")
  external void stop();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLMarqueeElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLMarqueeElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLMarqueeElement")
external AnonInterface$250 HTMLMarqueeElement;
@JS()
@anonymous
abstract class HTMLMediaElementEventMap{}
extension HTMLMediaElementEventMapExtension on HTMLMediaElementEventMap {
  external MediaEncryptedEvent get "encrypted";
  external set "encrypted"(MediaEncryptedEvent value);
  external Event get "waitingforkey";
  external set "waitingforkey"(Event value);
}
@JS()
@anonymous
abstract class HTMLMediaElement{}
extension HTMLMediaElementExtension on HTMLMediaElement {
  external bool get autoplay;
  external set autoplay(bool value);
  external TimeRanges get buffered;
  external bool get controls;
  external set controls(bool value);
  external String? get crossOrigin;
  external set crossOrigin(String? value);
  external String get currentSrc;
  external num get currentTime;
  external set currentTime(num value);
  external bool get defaultMuted;
  external set defaultMuted(bool value);
  external num get defaultPlaybackRate;
  external set defaultPlaybackRate(num value);
  external bool get disableRemotePlayback;
  external set disableRemotePlayback(bool value);
  external num get duration;
  external bool get ended;
  external MediaError? get error;
  external bool get loop;
  external set loop(bool value);
  external MediaKeys? get mediaKeys;
  external bool get muted;
  external set muted(bool value);
  external num get networkState;
  external dynamic Function(HTMLMediaElement, MediaEncryptedEvent)? get onencrypted;
  external set onencrypted(dynamic Function(HTMLMediaElement, MediaEncryptedEvent)? value);
  external dynamic Function(HTMLMediaElement, Event)? get onwaitingforkey;
  external set onwaitingforkey(dynamic Function(HTMLMediaElement, Event)? value);
  external bool get paused;
  external num get playbackRate;
  external set playbackRate(num value);
  external TimeRanges get played;
  external String get preload;
  external set preload(String value);
  external bool get preservesPitch;
  external set preservesPitch(bool value);
  external num get readyState;
  external RemotePlayback get remote;
  external TimeRanges get seekable;
  external bool get seeking;
  external String get sinkId;
  external String get src;
  external set src(String value);
  external MediaProvider? get srcObject;
  external set srcObject(MediaProvider? value);
  external TextTrackList get textTracks;
  external num get volume;
  external set volume(num value);
  external num get NETWORK_EMPTY;
  external num get NETWORK_IDLE;
  external num get NETWORK_LOADING;
  external num get NETWORK_NO_SOURCE;
  external num get HAVE_NOTHING;
  external num get HAVE_METADATA;
  external num get HAVE_CURRENT_DATA;
  external num get HAVE_FUTURE_DATA;
  external num get HAVE_ENOUGH_DATA;
  @JS("addTextTrack")
  external TextTrack addTextTrack(TextTrackKind kind, [String label, String language]);
  @JS("canPlayType")
  external CanPlayTypeResult canPlayType(String type);
  @JS("fastSeek")
  external void fastSeek(num time);
  @JS("load")
  external void load();
  @JS("pause")
  external void pause();
  @JS("play")
  external Future<void> play();
  @JS("setMediaKeys")
  external Future<void> setMediaKeys(MediaKeys? mediaKeys);
  @JS("setSinkId")
  external Future<void> setSinkId(String sinkId);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLMediaElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLMediaElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLMediaElement")
external AnonInterface$251 HTMLMediaElement;
@JS()
@anonymous
abstract class HTMLMenuElement{}
extension HTMLMenuElementExtension on HTMLMenuElement {
  external bool get compact;
  external set compact(bool value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLMenuElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLMenuElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLMenuElement")
external AnonInterface$252 HTMLMenuElement;
@JS()
@anonymous
abstract class HTMLMetaElement{}
extension HTMLMetaElementExtension on HTMLMetaElement {
  external String get content;
  external set content(String value);
  external String get httpEquiv;
  external set httpEquiv(String value);
  external String get media;
  external set media(String value);
  external String get name;
  external set name(String value);
  external String get scheme;
  external set scheme(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLMetaElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLMetaElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLMetaElement")
external AnonInterface$253 HTMLMetaElement;
@JS()
@anonymous
abstract class HTMLMeterElement{}
extension HTMLMeterElementExtension on HTMLMeterElement {
  external num get high;
  external set high(num value);
  external NodeListOf<HTMLLabelElement> get labels;
  external num get low;
  external set low(num value);
  external num get max;
  external set max(num value);
  external num get min;
  external set min(num value);
  external num get optimum;
  external set optimum(num value);
  external num get value;
  external set value(num value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLMeterElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLMeterElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLMeterElement")
external AnonInterface$254 HTMLMeterElement;
@JS()
@anonymous
abstract class HTMLModElement{}
extension HTMLModElementExtension on HTMLModElement {
  external String get cite;
  external set cite(String value);
  external String get dateTime;
  external set dateTime(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLModElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLModElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLModElement")
external AnonInterface$255 HTMLModElement;
@JS()
@anonymous
abstract class HTMLOListElement{}
extension HTMLOListElementExtension on HTMLOListElement {
  external bool get compact;
  external set compact(bool value);
  external bool get reversed;
  external set reversed(bool value);
  external num get start;
  external set start(num value);
  external String get type;
  external set type(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLOListElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLOListElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLOListElement")
external AnonInterface$256 HTMLOListElement;
@JS()
@anonymous
abstract class HTMLObjectElement{}
extension HTMLObjectElementExtension on HTMLObjectElement {
  external String get align;
  external set align(String value);
  external String get archive;
  external set archive(String value);
  external String get border;
  external set border(String value);
  external String get code;
  external set code(String value);
  external String get codeBase;
  external set codeBase(String value);
  external String get codeType;
  external set codeType(String value);
  external Document? get contentDocument;
  external WindowProxy? get contentWindow;
  external String get data;
  external set data(String value);
  external bool get declare;
  external set declare(bool value);
  external HTMLFormElement? get form;
  external String get height;
  external set height(String value);
  external num get hspace;
  external set hspace(num value);
  external String get name;
  external set name(String value);
  external String get standby;
  external set standby(String value);
  external String get type;
  external set type(String value);
  external String get useMap;
  external set useMap(String value);
  external String get validationMessage;
  external ValidityState get validity;
  external num get vspace;
  external set vspace(num value);
  external String get width;
  external set width(String value);
  external bool get willValidate;
  @JS("checkValidity")
  external bool checkValidity();
  @JS("getSVGDocument")
  external Document? getSVGDocument();
  @JS("reportValidity")
  external bool reportValidity();
  @JS("setCustomValidity")
  external void setCustomValidity(String error);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLObjectElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLObjectElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLObjectElement")
external AnonInterface$257 HTMLObjectElement;
@JS()
@anonymous
abstract class HTMLOptGroupElement{}
extension HTMLOptGroupElementExtension on HTMLOptGroupElement {
  external bool get disabled;
  external set disabled(bool value);
  external String get label;
  external set label(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLOptGroupElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLOptGroupElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLOptGroupElement")
external AnonInterface$258 HTMLOptGroupElement;
@JS()
@anonymous
abstract class HTMLOptionElement{}
extension HTMLOptionElementExtension on HTMLOptionElement {
  external bool get defaultSelected;
  external set defaultSelected(bool value);
  external bool get disabled;
  external set disabled(bool value);
  external HTMLFormElement? get form;
  external num get index;
  external String get label;
  external set label(String value);
  external bool get selected;
  external set selected(bool value);
  external String get text;
  external set text(String value);
  external String get value;
  external set value(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLOptionElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLOptionElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLOptionElement")
external AnonInterface$259 HTMLOptionElement;
@JS()
@anonymous
abstract class HTMLOptionsCollection{}
extension HTMLOptionsCollectionExtension on HTMLOptionsCollection {
  external num get length;
  external set length(num value);
  external num get selectedIndex;
  external set selectedIndex(num value);
  @JS("add")
  external void add(dynamic /* HTMLOptionElement|HTMLOptGroupElement */ element, [dynamic /* HTMLElement|num */ before]);
  @JS("remove")
  external void remove(num index);
}
@JS("HTMLOptionsCollection")
external AnonInterface$260 HTMLOptionsCollection;
@JS()
@anonymous
abstract class HTMLOrSVGElement{}
extension HTMLOrSVGElementExtension on HTMLOrSVGElement {
  external bool get autofocus;
  external set autofocus(bool value);
  external DOMStringMap get dataset;
  external String get nonce;
  external set nonce(String value);
  external num get tabIndex;
  external set tabIndex(num value);
  @JS("blur")
  external void blur();
  @JS("focus")
  external void focus([FocusOptions options]);
}
@JS()
@anonymous
abstract class HTMLOutputElement{}
extension HTMLOutputElementExtension on HTMLOutputElement {
  external String get defaultValue;
  external set defaultValue(String value);
  external HTMLFormElement? get form;
  external NodeListOf<HTMLLabelElement> get labels;
  external String get name;
  external set name(String value);
  external String get type;
  external String get validationMessage;
  external ValidityState get validity;
  external String get value;
  external set value(String value);
  external bool get willValidate;
  @JS("checkValidity")
  external bool checkValidity();
  @JS("reportValidity")
  external bool reportValidity();
  @JS("setCustomValidity")
  external void setCustomValidity(String error);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLOutputElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLOutputElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
  external DOMTokenList get htmlFor;
  external set htmlFor(String value);
}
@JS("HTMLOutputElement")
external AnonInterface$261 HTMLOutputElement;
@JS()
@anonymous
abstract class HTMLParagraphElement{}
extension HTMLParagraphElementExtension on HTMLParagraphElement {
  external String get align;
  external set align(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLParagraphElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLParagraphElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLParagraphElement")
external AnonInterface$262 HTMLParagraphElement;
@JS()
@anonymous
abstract class HTMLParamElement{}
extension HTMLParamElementExtension on HTMLParamElement {
  external String get name;
  external set name(String value);
  external String get type;
  external set type(String value);
  external String get value;
  external set value(String value);
  external String get valueType;
  external set valueType(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLParamElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLParamElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLParamElement")
external AnonInterface$263 HTMLParamElement;
@JS()
@anonymous
abstract class HTMLPictureElement{}
extension HTMLPictureElementExtension on HTMLPictureElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLPictureElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLPictureElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLPictureElement")
external AnonInterface$264 HTMLPictureElement;
@JS()
@anonymous
abstract class HTMLPreElement{}
extension HTMLPreElementExtension on HTMLPreElement {
  external num get width;
  external set width(num value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLPreElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLPreElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLPreElement")
external AnonInterface$265 HTMLPreElement;
@JS()
@anonymous
abstract class HTMLProgressElement{}
extension HTMLProgressElementExtension on HTMLProgressElement {
  external NodeListOf<HTMLLabelElement> get labels;
  external num get max;
  external set max(num value);
  external num get position;
  external num get value;
  external set value(num value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLProgressElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLProgressElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLProgressElement")
external AnonInterface$266 HTMLProgressElement;
@JS()
@anonymous
abstract class HTMLQuoteElement{}
extension HTMLQuoteElementExtension on HTMLQuoteElement {
  external String get cite;
  external set cite(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLQuoteElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLQuoteElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLQuoteElement")
external AnonInterface$267 HTMLQuoteElement;
@JS()
@anonymous
abstract class HTMLScriptElement{}
extension HTMLScriptElementExtension on HTMLScriptElement {
  external bool get async;
  external set async(bool value);
  external String get charset;
  external set charset(String value);
  external String? get crossOrigin;
  external set crossOrigin(String? value);
  external bool get defer;
  external set defer(bool value);
  external String get event;
  external set event(String value);
  external String get fetchPriority;
  external set fetchPriority(String value);
  external String get htmlFor;
  external set htmlFor(String value);
  external String get integrity;
  external set integrity(String value);
  external bool get noModule;
  external set noModule(bool value);
  external String get referrerPolicy;
  external set referrerPolicy(String value);
  external String get src;
  external set src(String value);
  external String get text;
  external set text(String value);
  external String get type;
  external set type(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLScriptElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLScriptElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
  external DOMTokenList get blocking;
  external set blocking(String value);
}
@JS("HTMLScriptElement")
external AnonInterface$268 HTMLScriptElement;
@JS()
@anonymous
abstract class HTMLSelectElement{}
extension HTMLSelectElementExtension on HTMLSelectElement {
  external AutoFill get autocomplete;
  external set autocomplete(AutoFill value);
  external bool get disabled;
  external set disabled(bool value);
  external HTMLFormElement? get form;
  external NodeListOf<HTMLLabelElement> get labels;
  external num get length;
  external set length(num value);
  external bool get multiple;
  external set multiple(bool value);
  external String get name;
  external set name(String value);
  external HTMLOptionsCollection get options;
  external bool get required;
  external set required(bool value);
  external num get selectedIndex;
  external set selectedIndex(num value);
  external HTMLCollectionOf<HTMLOptionElement> get selectedOptions;
  external num get size;
  external set size(num value);
  external String get type;
  external String get validationMessage;
  external ValidityState get validity;
  external String get value;
  external set value(String value);
  external bool get willValidate;
  @JS("add")
  external void add(dynamic /* HTMLOptionElement|HTMLOptGroupElement */ element, [dynamic /* HTMLElement|num */ before]);
  @JS("checkValidity")
  external bool checkValidity();
  @JS("item")
  external HTMLOptionElement? item(num index);
  @JS("namedItem")
  external HTMLOptionElement? namedItem(String name);
  @JS("remove")
  external void remove();
  @JS("remove")
  external void remove(num index);
  @JS("reportValidity")
  external bool reportValidity();
  @JS("setCustomValidity")
  external void setCustomValidity(String error);
  @JS("showPicker")
  external void showPicker();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLSelectElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLSelectElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("HTMLSelectElement")
external AnonInterface$269 HTMLSelectElement;
@JS()
@anonymous
abstract class HTMLSlotElement{}
extension HTMLSlotElementExtension on HTMLSlotElement {
  external String get name;
  external set name(String value);
  @JS("assign")
  external void assign([/* rest */ List<dynamic /* Element|Text */> nodes]);
  @JS("assignedElements")
  external List<Element> assignedElements([AssignedNodesOptions options]);
  @JS("assignedNodes")
  external List<Node> assignedNodes([AssignedNodesOptions options]);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLSlotElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLSlotElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLSlotElement")
external AnonInterface$270 HTMLSlotElement;
@JS()
@anonymous
abstract class HTMLSourceElement{}
extension HTMLSourceElementExtension on HTMLSourceElement {
  external num get height;
  external set height(num value);
  external String get media;
  external set media(String value);
  external String get sizes;
  external set sizes(String value);
  external String get src;
  external set src(String value);
  external String get srcset;
  external set srcset(String value);
  external String get type;
  external set type(String value);
  external num get width;
  external set width(num value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLSourceElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLSourceElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLSourceElement")
external AnonInterface$271 HTMLSourceElement;
@JS()
@anonymous
abstract class HTMLSpanElement{}
extension HTMLSpanElementExtension on HTMLSpanElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLSpanElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLSpanElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLSpanElement")
external AnonInterface$272 HTMLSpanElement;
@JS()
@anonymous
abstract class HTMLStyleElement{}
extension HTMLStyleElementExtension on HTMLStyleElement {
  external bool get disabled;
  external set disabled(bool value);
  external String get media;
  external set media(String value);
  external String get type;
  external set type(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLStyleElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLStyleElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
  external DOMTokenList get blocking;
  external set blocking(String value);
}
@JS("HTMLStyleElement")
external AnonInterface$273 HTMLStyleElement;
@JS()
@anonymous
abstract class HTMLTableCaptionElement{}
extension HTMLTableCaptionElementExtension on HTMLTableCaptionElement {
  external String get align;
  external set align(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLTableCaptionElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLTableCaptionElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLTableCaptionElement")
external AnonInterface$274 HTMLTableCaptionElement;
@JS()
@anonymous
abstract class HTMLTableCellElement{}
extension HTMLTableCellElementExtension on HTMLTableCellElement {
  external String get abbr;
  external set abbr(String value);
  external String get align;
  external set align(String value);
  external String get axis;
  external set axis(String value);
  external String get bgColor;
  external set bgColor(String value);
  external num get cellIndex;
  external String get ch;
  external set ch(String value);
  external String get chOff;
  external set chOff(String value);
  external num get colSpan;
  external set colSpan(num value);
  external String get headers;
  external set headers(String value);
  external String get height;
  external set height(String value);
  external bool get noWrap;
  external set noWrap(bool value);
  external num get rowSpan;
  external set rowSpan(num value);
  external String get scope;
  external set scope(String value);
  external String get vAlign;
  external set vAlign(String value);
  external String get width;
  external set width(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLTableCellElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLTableCellElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLTableCellElement")
external AnonInterface$275 HTMLTableCellElement;
@JS()
@anonymous
abstract class HTMLTableColElement{}
extension HTMLTableColElementExtension on HTMLTableColElement {
  external String get align;
  external set align(String value);
  external String get ch;
  external set ch(String value);
  external String get chOff;
  external set chOff(String value);
  external num get span;
  external set span(num value);
  external String get vAlign;
  external set vAlign(String value);
  external String get width;
  external set width(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLTableColElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLTableColElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLTableColElement")
external AnonInterface$276 HTMLTableColElement;
@JS()
@anonymous
abstract class HTMLTableDataCellElement{}
extension HTMLTableDataCellElementExtension on HTMLTableDataCellElement {
  @JS("addEventListener")
  external void addEventListener_1(K type, dynamic Function(HTMLTableDataCellElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener_2(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener_1(K type, dynamic Function(HTMLTableDataCellElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener_2(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS()
@anonymous
abstract class HTMLTableElement{}
extension HTMLTableElementExtension on HTMLTableElement {
  external String get align;
  external set align(String value);
  external String get bgColor;
  external set bgColor(String value);
  external String get border;
  external set border(String value);
  external HTMLTableCaptionElement? get caption;
  external set caption(HTMLTableCaptionElement? value);
  external String get cellPadding;
  external set cellPadding(String value);
  external String get cellSpacing;
  external set cellSpacing(String value);
  external String get frame;
  external set frame(String value);
  external HTMLCollectionOf<HTMLTableRowElement> get rows;
  external String get rules;
  external set rules(String value);
  external String get summary;
  external set summary(String value);
  external HTMLCollectionOf<HTMLTableSectionElement> get tBodies;
  external HTMLTableSectionElement? get tFoot;
  external set tFoot(HTMLTableSectionElement? value);
  external HTMLTableSectionElement? get tHead;
  external set tHead(HTMLTableSectionElement? value);
  external String get width;
  external set width(String value);
  @JS("createCaption")
  external HTMLTableCaptionElement createCaption();
  @JS("createTBody")
  external HTMLTableSectionElement createTBody();
  @JS("createTFoot")
  external HTMLTableSectionElement createTFoot();
  @JS("createTHead")
  external HTMLTableSectionElement createTHead();
  @JS("deleteCaption")
  external void deleteCaption();
  @JS("deleteRow")
  external void deleteRow(num index);
  @JS("deleteTFoot")
  external void deleteTFoot();
  @JS("deleteTHead")
  external void deleteTHead();
  @JS("insertRow")
  external HTMLTableRowElement insertRow([num index]);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLTableElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLTableElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLTableElement")
external AnonInterface$277 HTMLTableElement;
@JS()
@anonymous
abstract class HTMLTableHeaderCellElement{}
extension HTMLTableHeaderCellElementExtension on HTMLTableHeaderCellElement {
  @JS("addEventListener")
  external void addEventListener_1(K type, dynamic Function(HTMLTableHeaderCellElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener_2(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener_1(K type, dynamic Function(HTMLTableHeaderCellElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener_2(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS()
@anonymous
abstract class HTMLTableRowElement{}
extension HTMLTableRowElementExtension on HTMLTableRowElement {
  external String get align;
  external set align(String value);
  external String get bgColor;
  external set bgColor(String value);
  external HTMLCollectionOf<HTMLTableCellElement> get cells;
  external String get ch;
  external set ch(String value);
  external String get chOff;
  external set chOff(String value);
  external num get rowIndex;
  external num get sectionRowIndex;
  external String get vAlign;
  external set vAlign(String value);
  @JS("deleteCell")
  external void deleteCell(num index);
  @JS("insertCell")
  external HTMLTableCellElement insertCell([num index]);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLTableRowElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLTableRowElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLTableRowElement")
external AnonInterface$278 HTMLTableRowElement;
@JS()
@anonymous
abstract class HTMLTableSectionElement{}
extension HTMLTableSectionElementExtension on HTMLTableSectionElement {
  external String get align;
  external set align(String value);
  external String get ch;
  external set ch(String value);
  external String get chOff;
  external set chOff(String value);
  external HTMLCollectionOf<HTMLTableRowElement> get rows;
  external String get vAlign;
  external set vAlign(String value);
  @JS("deleteRow")
  external void deleteRow(num index);
  @JS("insertRow")
  external HTMLTableRowElement insertRow([num index]);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLTableSectionElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLTableSectionElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLTableSectionElement")
external AnonInterface$279 HTMLTableSectionElement;
@JS()
@anonymous
abstract class HTMLTemplateElement{}
extension HTMLTemplateElementExtension on HTMLTemplateElement {
  external DocumentFragment get content;
  external bool get shadowRootClonable;
  external set shadowRootClonable(bool value);
  external bool get shadowRootDelegatesFocus;
  external set shadowRootDelegatesFocus(bool value);
  external String get shadowRootMode;
  external set shadowRootMode(String value);
  external bool get shadowRootSerializable;
  external set shadowRootSerializable(bool value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLTemplateElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLTemplateElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLTemplateElement")
external AnonInterface$280 HTMLTemplateElement;
@JS()
@anonymous
abstract class HTMLTextAreaElement{}
extension HTMLTextAreaElementExtension on HTMLTextAreaElement {
  external AutoFill get autocomplete;
  external set autocomplete(AutoFill value);
  external num get cols;
  external set cols(num value);
  external String get defaultValue;
  external set defaultValue(String value);
  external String get dirName;
  external set dirName(String value);
  external bool get disabled;
  external set disabled(bool value);
  external HTMLFormElement? get form;
  external NodeListOf<HTMLLabelElement> get labels;
  external num get maxLength;
  external set maxLength(num value);
  external num get minLength;
  external set minLength(num value);
  external String get name;
  external set name(String value);
  external String get placeholder;
  external set placeholder(String value);
  external bool get readOnly;
  external set readOnly(bool value);
  external bool get required;
  external set required(bool value);
  external num get rows;
  external set rows(num value);
  external String get selectionDirection;
  external set selectionDirection(String value);
  external num get selectionEnd;
  external set selectionEnd(num value);
  external num get selectionStart;
  external set selectionStart(num value);
  external num get textLength;
  external String get type;
  external String get validationMessage;
  external ValidityState get validity;
  external String get value;
  external set value(String value);
  external bool get willValidate;
  external String get wrap;
  external set wrap(String value);
  @JS("checkValidity")
  external bool checkValidity();
  @JS("reportValidity")
  external bool reportValidity();
  @JS("select")
  external void select();
  @JS("setCustomValidity")
  external void setCustomValidity(String error);
  @JS("setRangeText")
  external void setRangeText(String replacement);
  @JS("setRangeText")
  external void setRangeText(String replacement, num start, num end, [SelectionMode selectionMode]);
  @JS("setSelectionRange")
  external void setSelectionRange(num? start, num? end, [String direction]);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLTextAreaElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLTextAreaElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLTextAreaElement")
external AnonInterface$281 HTMLTextAreaElement;
@JS()
@anonymous
abstract class HTMLTimeElement{}
extension HTMLTimeElementExtension on HTMLTimeElement {
  external String get dateTime;
  external set dateTime(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLTimeElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLTimeElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLTimeElement")
external AnonInterface$282 HTMLTimeElement;
@JS()
@anonymous
abstract class HTMLTitleElement{}
extension HTMLTitleElementExtension on HTMLTitleElement {
  external String get text;
  external set text(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLTitleElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLTitleElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLTitleElement")
external AnonInterface$283 HTMLTitleElement;
@JS()
@anonymous
abstract class HTMLTrackElement{}
extension HTMLTrackElementExtension on HTMLTrackElement {
  external bool get default;
  external set default(bool value);
  external String get kind;
  external set kind(String value);
  external String get label;
  external set label(String value);
  external num get readyState;
  external String get src;
  external set src(String value);
  external String get srclang;
  external set srclang(String value);
  external TextTrack get track;
  external num get NONE;
  external num get LOADING;
  external num get LOADED;
  external num get ERROR;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLTrackElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLTrackElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLTrackElement")
external AnonInterface$284 HTMLTrackElement;
@JS()
@anonymous
abstract class HTMLUListElement{}
extension HTMLUListElementExtension on HTMLUListElement {
  external bool get compact;
  external set compact(bool value);
  external String get type;
  external set type(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLUListElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLUListElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLUListElement")
external AnonInterface$285 HTMLUListElement;
@JS()
@anonymous
abstract class HTMLUnknownElement{}
extension HTMLUnknownElementExtension on HTMLUnknownElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLUnknownElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLUnknownElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLUnknownElement")
external AnonInterface$286 HTMLUnknownElement;
@JS()
@anonymous
abstract class HTMLVideoElementEventMap{}
extension HTMLVideoElementEventMapExtension on HTMLVideoElementEventMap {
  external PictureInPictureEvent get "enterpictureinpicture";
  external set "enterpictureinpicture"(PictureInPictureEvent value);
  external PictureInPictureEvent get "leavepictureinpicture";
  external set "leavepictureinpicture"(PictureInPictureEvent value);
}
@JS()
@anonymous
abstract class HTMLVideoElement{}
extension HTMLVideoElementExtension on HTMLVideoElement {
  external bool get disablePictureInPicture;
  external set disablePictureInPicture(bool value);
  external num get height;
  external set height(num value);
  external dynamic Function(HTMLVideoElement, PictureInPictureEvent)? get onenterpictureinpicture;
  external set onenterpictureinpicture(dynamic Function(HTMLVideoElement, PictureInPictureEvent)? value);
  external dynamic Function(HTMLVideoElement, PictureInPictureEvent)? get onleavepictureinpicture;
  external set onleavepictureinpicture(dynamic Function(HTMLVideoElement, PictureInPictureEvent)? value);
  external bool get playsInline;
  external set playsInline(bool value);
  external String get poster;
  external set poster(String value);
  external num get videoHeight;
  external num get videoWidth;
  external num get width;
  external set width(num value);
  @JS("cancelVideoFrameCallback")
  external void cancelVideoFrameCallback(num handle);
  @JS("getVideoPlaybackQuality")
  external VideoPlaybackQuality getVideoPlaybackQuality();
  @JS("requestPictureInPicture")
  external Future<PictureInPictureWindow> requestPictureInPicture();
  @JS("requestVideoFrameCallback")
  external num requestVideoFrameCallback(VideoFrameRequestCallback callback);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(HTMLVideoElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(HTMLVideoElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("HTMLVideoElement")
external AnonInterface$287 HTMLVideoElement;
@JS()
@anonymous
abstract class HashChangeEvent{}
extension HashChangeEventExtension on HashChangeEvent {
  external String get newURL;
  external String get oldURL;
}
@JS("HashChangeEvent")
external AnonInterface$288 HashChangeEvent;
@JS()
@anonymous
abstract class Headers{}
extension HeadersExtension on Headers {
  @JS("append")
  external void append(String name, String value);
  @JS("delete")
  external void delete(String name);
  @JS("get")
  external String? get(String name);
  @JS("getSetCookie")
  external List<String> getSetCookie();
  @JS("has")
  external bool has(String name);
  @JS("set")
  external void set(String name, String value);
  @JS("forEach")
  external void forEach(void Function(String, String, Headers) callbackfn, [dynamic thisArg]);
}
@JS("Headers")
external AnonInterface$289 Headers;
@JS()
@anonymous
abstract class Highlight{}
extension HighlightExtension on Highlight {
  external num get priority;
  external set priority(num value);
  external HighlightType get type;
  external set type(HighlightType value);
  @JS("forEach")
  external void forEach(void Function(AbstractRange, AbstractRange, Highlight) callbackfn, [dynamic thisArg]);
}
@JS("Highlight")
external AnonInterface$290 Highlight;
@JS()
@anonymous
abstract class HighlightRegistry{}
extension HighlightRegistryExtension on HighlightRegistry {
  @JS("forEach")
  external void forEach(void Function(Highlight, String, HighlightRegistry) callbackfn, [dynamic thisArg]);
}
@JS("HighlightRegistry")
external AnonInterface$291 HighlightRegistry;
@JS()
@anonymous
abstract class History{}
extension HistoryExtension on History {
  external num get length;
  external ScrollRestoration get scrollRestoration;
  external set scrollRestoration(ScrollRestoration value);
  external dynamic get state;
  @JS("back")
  external void back();
  @JS("forward")
  external void forward();
  @JS("go")
  external void go([num delta]);
  @JS("pushState")
  external void pushState(dynamic data, String unused, [dynamic /* String|URL */ url]);
  @JS("replaceState")
  external void replaceState(dynamic data, String unused, [dynamic /* String|URL */ url]);
}
@JS("History")
external AnonInterface$292 History;
@JS()
@anonymous
abstract class IDBCursor{}
extension IDBCursorExtension on IDBCursor {
  external IDBCursorDirection get direction;
  external IDBValidKey get key;
  external IDBValidKey get primaryKey;
  external IDBRequest get request;
  external dynamic /* IDBObjectStore|IDBIndex */ get source;
  @JS("advance")
  external void advance(num count);
  @JS("continue")
  external void continue([IDBValidKey key]);
  @JS("continuePrimaryKey")
  external void continuePrimaryKey(IDBValidKey key, IDBValidKey primaryKey);
  @JS("delete")
  external IDBRequest<dynamic> delete();
  @JS("update")
  external IDBRequest<IDBValidKey> update(dynamic value);
}
@JS("IDBCursor")
external AnonInterface$293 IDBCursor;
@JS()
@anonymous
abstract class IDBCursorWithValue{}
extension IDBCursorWithValueExtension on IDBCursorWithValue {
  external dynamic get value;
}
@JS("IDBCursorWithValue")
external AnonInterface$294 IDBCursorWithValue;
@JS()
@anonymous
abstract class IDBDatabaseEventMap{}
extension IDBDatabaseEventMapExtension on IDBDatabaseEventMap {
  external Event get "abort";
  external set "abort"(Event value);
  external Event get "close";
  external set "close"(Event value);
  external Event get "error";
  external set "error"(Event value);
  external IDBVersionChangeEvent get "versionchange";
  external set "versionchange"(IDBVersionChangeEvent value);
}
@JS()
@anonymous
abstract class IDBDatabase{}
extension IDBDatabaseExtension on IDBDatabase {
  external String get name;
  external DOMStringList get objectStoreNames;
  external dynamic Function(IDBDatabase, Event)? get onabort;
  external set onabort(dynamic Function(IDBDatabase, Event)? value);
  external dynamic Function(IDBDatabase, Event)? get onclose;
  external set onclose(dynamic Function(IDBDatabase, Event)? value);
  external dynamic Function(IDBDatabase, Event)? get onerror;
  external set onerror(dynamic Function(IDBDatabase, Event)? value);
  external dynamic Function(IDBDatabase, IDBVersionChangeEvent)? get onversionchange;
  external set onversionchange(dynamic Function(IDBDatabase, IDBVersionChangeEvent)? value);
  external num get version;
  @JS("close")
  external void close();
  @JS("createObjectStore")
  external IDBObjectStore createObjectStore(String name, [IDBObjectStoreParameters options]);
  @JS("deleteObjectStore")
  external void deleteObjectStore(String name);
  @JS("transaction")
  external IDBTransaction transaction(dynamic /* String|List<String> */ storeNames, [IDBTransactionMode mode, IDBTransactionOptions options]);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(IDBDatabase, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(IDBDatabase, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("IDBDatabase")
external AnonInterface$295 IDBDatabase;
@JS()
@anonymous
abstract class IDBFactory{}
extension IDBFactoryExtension on IDBFactory {
  @JS("cmp")
  external num cmp(dynamic first, dynamic second);
  @JS("databases")
  external Future<List<IDBDatabaseInfo>> databases();
  @JS("deleteDatabase")
  external IDBOpenDBRequest deleteDatabase(String name);
  @JS("open")
  external IDBOpenDBRequest open(String name, [num version]);
}
@JS("IDBFactory")
external AnonInterface$296 IDBFactory;
@JS()
@anonymous
abstract class IDBIndex{}
extension IDBIndexExtension on IDBIndex {
  external dynamic /* String|List<String> */ get keyPath;
  external bool get multiEntry;
  external String get name;
  external set name(String value);
  external IDBObjectStore get objectStore;
  external bool get unique;
  @JS("count")
  external IDBRequest<num> count([dynamic /* IDBValidKey|IDBKeyRange */ query]);
  @JS("get")
  external IDBRequest<dynamic> get(dynamic /* IDBValidKey|IDBKeyRange */ query);
  @JS("getAll")
  external IDBRequest<List<dynamic>> getAll([dynamic /* IDBValidKey|IDBKeyRange */ query, num count]);
  @JS("getAllKeys")
  external IDBRequest<List<IDBValidKey>> getAllKeys([dynamic /* IDBValidKey|IDBKeyRange */ query, num count]);
  @JS("getKey")
  external IDBRequest<IDBValidKey?> getKey(dynamic /* IDBValidKey|IDBKeyRange */ query);
  @JS("openCursor")
  external IDBRequest<IDBCursorWithValue?> openCursor([dynamic /* IDBValidKey|IDBKeyRange */ query, IDBCursorDirection direction]);
  @JS("openKeyCursor")
  external IDBRequest<IDBCursor?> openKeyCursor([dynamic /* IDBValidKey|IDBKeyRange */ query, IDBCursorDirection direction]);
}
@JS("IDBIndex")
external AnonInterface$297 IDBIndex;
@JS()
@anonymous
abstract class IDBKeyRange{}
extension IDBKeyRangeExtension on IDBKeyRange {
  external dynamic get lower;
  external bool get lowerOpen;
  external dynamic get upper;
  external bool get upperOpen;
  @JS("includes")
  external bool includes(dynamic key);
}
@JS("IDBKeyRange")
external AnonInterface$298 IDBKeyRange;
@JS()
@anonymous
abstract class IDBObjectStore{}
extension IDBObjectStoreExtension on IDBObjectStore {
  external bool get autoIncrement;
  external DOMStringList get indexNames;
  external dynamic /* String|List<String> */ get keyPath;
  external String get name;
  external set name(String value);
  external IDBTransaction get transaction;
  @JS("add")
  external IDBRequest<IDBValidKey> add(dynamic value, [IDBValidKey key]);
  @JS("clear")
  external IDBRequest<dynamic> clear();
  @JS("count")
  external IDBRequest<num> count([dynamic /* IDBValidKey|IDBKeyRange */ query]);
  @JS("createIndex")
  external IDBIndex createIndex(String name, dynamic /* String|List<String> */ keyPath, [IDBIndexParameters options]);
  @JS("delete")
  external IDBRequest<dynamic> delete(dynamic /* IDBValidKey|IDBKeyRange */ query);
  @JS("deleteIndex")
  external void deleteIndex(String name);
  @JS("get")
  external IDBRequest<dynamic> get(dynamic /* IDBValidKey|IDBKeyRange */ query);
  @JS("getAll")
  external IDBRequest<List<dynamic>> getAll([dynamic /* IDBValidKey|IDBKeyRange */ query, num count]);
  @JS("getAllKeys")
  external IDBRequest<List<IDBValidKey>> getAllKeys([dynamic /* IDBValidKey|IDBKeyRange */ query, num count]);
  @JS("getKey")
  external IDBRequest<IDBValidKey?> getKey(dynamic /* IDBValidKey|IDBKeyRange */ query);
  @JS("index")
  external IDBIndex index(String name);
  @JS("openCursor")
  external IDBRequest<IDBCursorWithValue?> openCursor([dynamic /* IDBValidKey|IDBKeyRange */ query, IDBCursorDirection direction]);
  @JS("openKeyCursor")
  external IDBRequest<IDBCursor?> openKeyCursor([dynamic /* IDBValidKey|IDBKeyRange */ query, IDBCursorDirection direction]);
  @JS("put")
  external IDBRequest<IDBValidKey> put(dynamic value, [IDBValidKey key]);
}
@JS("IDBObjectStore")
external AnonInterface$299 IDBObjectStore;
@JS()
@anonymous
abstract class IDBOpenDBRequestEventMap{}
extension IDBOpenDBRequestEventMapExtension on IDBOpenDBRequestEventMap {
  external IDBVersionChangeEvent get "blocked";
  external set "blocked"(IDBVersionChangeEvent value);
  external IDBVersionChangeEvent get "upgradeneeded";
  external set "upgradeneeded"(IDBVersionChangeEvent value);
}
@JS()
@anonymous
abstract class IDBOpenDBRequest{}
extension IDBOpenDBRequestExtension on IDBOpenDBRequest {
  external dynamic Function(IDBOpenDBRequest, IDBVersionChangeEvent)? get onblocked;
  external set onblocked(dynamic Function(IDBOpenDBRequest, IDBVersionChangeEvent)? value);
  external dynamic Function(IDBOpenDBRequest, IDBVersionChangeEvent)? get onupgradeneeded;
  external set onupgradeneeded(dynamic Function(IDBOpenDBRequest, IDBVersionChangeEvent)? value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(IDBOpenDBRequest, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(IDBOpenDBRequest, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("IDBOpenDBRequest")
external AnonInterface$300 IDBOpenDBRequest;
@JS()
@anonymous
abstract class IDBRequestEventMap{}
extension IDBRequestEventMapExtension on IDBRequestEventMap {
  external Event get "error";
  external set "error"(Event value);
  external Event get "success";
  external set "success"(Event value);
}
@JS()
@anonymous
abstract class IDBRequest{}
extension IDBRequestExtension on IDBRequest {
  external DOMException? get error;
  external dynamic Function(IDBRequest<T>, Event)? get onerror;
  external set onerror(dynamic Function(IDBRequest<T>, Event)? value);
  external dynamic Function(IDBRequest<T>, Event)? get onsuccess;
  external set onsuccess(dynamic Function(IDBRequest<T>, Event)? value);
  external IDBRequestReadyState get readyState;
  external T get result;
  external dynamic /* IDBObjectStore|IDBIndex|IDBCursor */ get source;
  external IDBTransaction? get transaction;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(IDBRequest<T>, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(IDBRequest<T>, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("IDBRequest")
external AnonInterface$301 IDBRequest;
@JS()
@anonymous
abstract class IDBTransactionEventMap{}
extension IDBTransactionEventMapExtension on IDBTransactionEventMap {
  external Event get "abort";
  external set "abort"(Event value);
  external Event get "complete";
  external set "complete"(Event value);
  external Event get "error";
  external set "error"(Event value);
}
@JS()
@anonymous
abstract class IDBTransaction{}
extension IDBTransactionExtension on IDBTransaction {
  external IDBDatabase get db;
  external IDBTransactionDurability get durability;
  external DOMException? get error;
  external IDBTransactionMode get mode;
  external DOMStringList get objectStoreNames;
  external dynamic Function(IDBTransaction, Event)? get onabort;
  external set onabort(dynamic Function(IDBTransaction, Event)? value);
  external dynamic Function(IDBTransaction, Event)? get oncomplete;
  external set oncomplete(dynamic Function(IDBTransaction, Event)? value);
  external dynamic Function(IDBTransaction, Event)? get onerror;
  external set onerror(dynamic Function(IDBTransaction, Event)? value);
  @JS("abort")
  external void abort();
  @JS("commit")
  external void commit();
  @JS("objectStore")
  external IDBObjectStore objectStore(String name);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(IDBTransaction, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(IDBTransaction, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("IDBTransaction")
external AnonInterface$302 IDBTransaction;
@JS()
@anonymous
abstract class IDBVersionChangeEvent{}
extension IDBVersionChangeEventExtension on IDBVersionChangeEvent {
  external num? get newVersion;
  external num get oldVersion;
}
@JS("IDBVersionChangeEvent")
external AnonInterface$303 IDBVersionChangeEvent;
@JS()
@anonymous
abstract class IIRFilterNode{}
extension IIRFilterNodeExtension on IIRFilterNode {
  @JS("getFrequencyResponse")
  external void getFrequencyResponse(Float32Array frequencyHz, Float32Array magResponse, Float32Array phaseResponse);
}
@JS("IIRFilterNode")
external AnonInterface$304 IIRFilterNode;
@JS()
@anonymous
abstract class IdleDeadline{}
extension IdleDeadlineExtension on IdleDeadline {
  external bool get didTimeout;
  @JS("timeRemaining")
  external DOMHighResTimeStamp timeRemaining();
}
@JS("IdleDeadline")
external AnonInterface$305 IdleDeadline;
@JS()
@anonymous
abstract class ImageBitmap{}
extension ImageBitmapExtension on ImageBitmap {
  external num get height;
  external num get width;
  @JS("close")
  external void close();
}
@JS("ImageBitmap")
external AnonInterface$306 ImageBitmap;
@JS()
@anonymous
abstract class ImageBitmapRenderingContext{}
extension ImageBitmapRenderingContextExtension on ImageBitmapRenderingContext {
  external dynamic /* HTMLCanvasElement|OffscreenCanvas */ get canvas;
  @JS("transferFromImageBitmap")
  external void transferFromImageBitmap(ImageBitmap? bitmap);
}
@JS("ImageBitmapRenderingContext")
external AnonInterface$307 ImageBitmapRenderingContext;
@JS()
@anonymous
abstract class ImageData{}
extension ImageDataExtension on ImageData {
  external PredefinedColorSpace get colorSpace;
  external Uint8ClampedArray get data;
  external num get height;
  external num get width;
}
@JS("ImageData")
external AnonInterface$308 ImageData;
@JS()
@anonymous
abstract class ImageDecoder{}
extension ImageDecoderExtension on ImageDecoder {
  external bool get complete;
  external Future<void> get completed;
  external ImageTrackList get tracks;
  external String get type;
  @JS("close")
  external void close();
  @JS("decode")
  external Future<ImageDecodeResult> decode([ImageDecodeOptions options]);
  @JS("reset")
  external void reset();
}
@JS("ImageDecoder")
external AnonInterface$309 ImageDecoder;
@JS()
@anonymous
abstract class ImageTrack{}
extension ImageTrackExtension on ImageTrack {
  external bool get animated;
  external num get frameCount;
  external num get repetitionCount;
  external bool get selected;
  external set selected(bool value);
}
@JS("ImageTrack")
external AnonInterface$310 ImageTrack;
@JS()
@anonymous
abstract class ImageTrackList{}
extension ImageTrackListExtension on ImageTrackList {
  external num get length;
  external Future<void> get ready;
  external num get selectedIndex;
  external ImageTrack? get selectedTrack;
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("ImageTrackList")
external AnonInterface$311 ImageTrackList;
@JS()
@anonymous
abstract class ImportMeta{}
extension ImportMetaExtension on ImportMeta {
  external String get url;
  external set url(String value);
  @JS("resolve")
  external String resolve(String specifier);
}
@JS()
@anonymous
abstract class InputDeviceInfo{}
extension InputDeviceInfoExtension on InputDeviceInfo {
  @JS("getCapabilities")
  external MediaTrackCapabilities getCapabilities();
}
@JS("InputDeviceInfo")
external AnonInterface$312 InputDeviceInfo;
@JS()
@anonymous
abstract class InputEvent{}
extension InputEventExtension on InputEvent {
  external String? get data;
  external DataTransfer? get dataTransfer;
  external String get inputType;
  external bool get isComposing;
  @JS("getTargetRanges")
  external List<StaticRange> getTargetRanges();
}
@JS("InputEvent")
external AnonInterface$313 InputEvent;
@JS()
@anonymous
abstract class IntersectionObserver{}
extension IntersectionObserverExtension on IntersectionObserver {
  external dynamic /* Element|Document */ get root;
  external String get rootMargin;
  external ReadonlyArray<num> get thresholds;
  @JS("disconnect")
  external void disconnect();
  @JS("observe")
  external void observe(Element target);
  @JS("takeRecords")
  external List<IntersectionObserverEntry> takeRecords();
  @JS("unobserve")
  external void unobserve(Element target);
}
@JS("IntersectionObserver")
external AnonInterface$314 IntersectionObserver;
@JS()
@anonymous
abstract class IntersectionObserverEntry{}
extension IntersectionObserverEntryExtension on IntersectionObserverEntry {
  external DOMRectReadOnly get boundingClientRect;
  external num get intersectionRatio;
  external DOMRectReadOnly get intersectionRect;
  external bool get isIntersecting;
  external DOMRectReadOnly? get rootBounds;
  external Element get target;
  external DOMHighResTimeStamp get time;
}
@JS("IntersectionObserverEntry")
external AnonInterface$315 IntersectionObserverEntry;
@JS()
@anonymous
abstract class KHR_parallel_shader_compile{}
extension KHR_parallel_shader_compileExtension on KHR_parallel_shader_compile {
  external num get COMPLETION_STATUS_KHR;
}
@JS()
@anonymous
abstract class KeyboardEvent{}
extension KeyboardEventExtension on KeyboardEvent {
  external bool get altKey;
  external num get charCode;
  external String get code;
  external bool get ctrlKey;
  external bool get isComposing;
  external String get key;
  external num get keyCode;
  external num get location;
  external bool get metaKey;
  external bool get repeat;
  external bool get shiftKey;
  external num get DOM_KEY_LOCATION_STANDARD;
  external num get DOM_KEY_LOCATION_LEFT;
  external num get DOM_KEY_LOCATION_RIGHT;
  external num get DOM_KEY_LOCATION_NUMPAD;
  @JS("getModifierState")
  external bool getModifierState(String keyArg);
  @JS("initKeyboardEvent")
  external void initKeyboardEvent(String typeArg, [bool bubblesArg, bool cancelableArg, Window? viewArg, String keyArg, num locationArg, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey]);
}
@JS("KeyboardEvent")
external AnonInterface$316 KeyboardEvent;
@JS()
@anonymous
abstract class KeyframeEffect{}
extension KeyframeEffectExtension on KeyframeEffect {
  external CompositeOperation get composite;
  external set composite(CompositeOperation value);
  external IterationCompositeOperation get iterationComposite;
  external set iterationComposite(IterationCompositeOperation value);
  external String? get pseudoElement;
  external set pseudoElement(String? value);
  external Element? get target;
  external set target(Element? value);
  @JS("getKeyframes")
  external List<ComputedKeyframe> getKeyframes();
  @JS("setKeyframes")
  external void setKeyframes(dynamic /* List<Keyframe>|PropertyIndexedKeyframes */ keyframes);
}
@JS("KeyframeEffect")
external AnonInterface$317 KeyframeEffect;
@JS()
@anonymous
abstract class LargestContentfulPaint{}
extension LargestContentfulPaintExtension on LargestContentfulPaint {
  external Element? get element;
  external String get id;
  external DOMHighResTimeStamp get loadTime;
  external DOMHighResTimeStamp get renderTime;
  external num get size;
  external String get url;
  @JS("toJSON")
  external dynamic toJSON();
}
@JS("LargestContentfulPaint")
external AnonInterface$318 LargestContentfulPaint;
@JS()
@anonymous
abstract class LinkStyle{}
extension LinkStyleExtension on LinkStyle {
  external CSSStyleSheet? get sheet;
}
@JS()
@anonymous
abstract class Location{}
extension LocationExtension on Location {
  external DOMStringList get ancestorOrigins;
  external String get hash;
  external set hash(String value);
  external String get host;
  external set host(String value);
  external String get hostname;
  external set hostname(String value);
  external String get href;
  external set href(String value);
  external String get origin;
  external String get pathname;
  external set pathname(String value);
  external String get port;
  external set port(String value);
  external String get protocol;
  external set protocol(String value);
  external String get search;
  external set search(String value);
  @JS("toString")
  external String toString();
  @JS("assign")
  external void assign(dynamic /* String|URL */ url);
  @JS("reload")
  external void reload();
  @JS("replace")
  external void replace(dynamic /* String|URL */ url);
}
@JS("Location")
external AnonInterface$319 Location;
@JS()
@anonymous
abstract class Lock{}
extension LockExtension on Lock {
  external LockMode get mode;
  external String get name;
}
@JS("Lock")
external AnonInterface$320 Lock;
@JS()
@anonymous
abstract class LockManager{}
extension LockManagerExtension on LockManager {
  @JS("query")
  external Future<LockManagerSnapshot> query();
  @JS("request")
  external Future<dynamic> request(String name, LockGrantedCallback callback);
  @JS("request")
  external Future<dynamic> request(String name, LockOptions options, LockGrantedCallback callback);
}
@JS("LockManager")
external AnonInterface$321 LockManager;
@JS()
@anonymous
abstract class MIDIAccessEventMap{}
extension MIDIAccessEventMapExtension on MIDIAccessEventMap {
  external MIDIConnectionEvent get "statechange";
  external set "statechange"(MIDIConnectionEvent value);
}
@JS()
@anonymous
abstract class MIDIAccess{}
extension MIDIAccessExtension on MIDIAccess {
  external MIDIInputMap get inputs;
  external dynamic Function(MIDIAccess, MIDIConnectionEvent)? get onstatechange;
  external set onstatechange(dynamic Function(MIDIAccess, MIDIConnectionEvent)? value);
  external MIDIOutputMap get outputs;
  external bool get sysexEnabled;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(MIDIAccess, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(MIDIAccess, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("MIDIAccess")
external AnonInterface$322 MIDIAccess;
@JS()
@anonymous
abstract class MIDIConnectionEvent{}
extension MIDIConnectionEventExtension on MIDIConnectionEvent {
  external MIDIPort? get port;
}
@JS("MIDIConnectionEvent")
external AnonInterface$323 MIDIConnectionEvent;
@JS()
@anonymous
abstract class MIDIInputEventMap{}
extension MIDIInputEventMapExtension on MIDIInputEventMap {
  external MIDIMessageEvent get "midimessage";
  external set "midimessage"(MIDIMessageEvent value);
}
@JS()
@anonymous
abstract class MIDIInput{}
extension MIDIInputExtension on MIDIInput {
  external dynamic Function(MIDIInput, MIDIMessageEvent)? get onmidimessage;
  external set onmidimessage(dynamic Function(MIDIInput, MIDIMessageEvent)? value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(MIDIInput, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(MIDIInput, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("MIDIInput")
external AnonInterface$324 MIDIInput;
@JS()
@anonymous
abstract class MIDIInputMap{}
extension MIDIInputMapExtension on MIDIInputMap {
  @JS("forEach")
  external void forEach(void Function(MIDIInput, String, MIDIInputMap) callbackfn, [dynamic thisArg]);
}
@JS("MIDIInputMap")
external AnonInterface$325 MIDIInputMap;
@JS()
@anonymous
abstract class MIDIMessageEvent{}
extension MIDIMessageEventExtension on MIDIMessageEvent {
  external Uint8Array? get data;
}
@JS("MIDIMessageEvent")
external AnonInterface$326 MIDIMessageEvent;
@JS()
@anonymous
abstract class MIDIOutput{}
extension MIDIOutputExtension on MIDIOutput {
  @JS("send")
  external void send(List<num> data, [DOMHighResTimeStamp timestamp]);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(MIDIOutput, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(MIDIOutput, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("MIDIOutput")
external AnonInterface$327 MIDIOutput;
@JS()
@anonymous
abstract class MIDIOutputMap{}
extension MIDIOutputMapExtension on MIDIOutputMap {
  @JS("forEach")
  external void forEach(void Function(MIDIOutput, String, MIDIOutputMap) callbackfn, [dynamic thisArg]);
}
@JS("MIDIOutputMap")
external AnonInterface$328 MIDIOutputMap;
@JS()
@anonymous
abstract class MIDIPortEventMap{}
extension MIDIPortEventMapExtension on MIDIPortEventMap {
  external MIDIConnectionEvent get "statechange";
  external set "statechange"(MIDIConnectionEvent value);
}
@JS()
@anonymous
abstract class MIDIPort{}
extension MIDIPortExtension on MIDIPort {
  external MIDIPortConnectionState get connection;
  external String get id;
  external String? get manufacturer;
  external String? get name;
  external dynamic Function(MIDIPort, MIDIConnectionEvent)? get onstatechange;
  external set onstatechange(dynamic Function(MIDIPort, MIDIConnectionEvent)? value);
  external MIDIPortDeviceState get state;
  external MIDIPortType get type;
  external String? get version;
  @JS("close")
  external Future<MIDIPort> close();
  @JS("open")
  external Future<MIDIPort> open();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(MIDIPort, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(MIDIPort, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("MIDIPort")
external AnonInterface$329 MIDIPort;
@JS()
@anonymous
abstract class MathMLElementEventMap{}
extension MathMLElementEventMapExtension on MathMLElementEventMap {
}
@JS()
@anonymous
abstract class MathMLElement{}
extension MathMLElementExtension on MathMLElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(MathMLElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(MathMLElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("MathMLElement")
external AnonInterface$330 MathMLElement;
@JS()
@anonymous
abstract class MediaCapabilities{}
extension MediaCapabilitiesExtension on MediaCapabilities {
  @JS("decodingInfo")
  external Future<MediaCapabilitiesDecodingInfo> decodingInfo(MediaDecodingConfiguration configuration);
  @JS("encodingInfo")
  external Future<MediaCapabilitiesEncodingInfo> encodingInfo(MediaEncodingConfiguration configuration);
}
@JS("MediaCapabilities")
external AnonInterface$331 MediaCapabilities;
@JS()
@anonymous
abstract class MediaDeviceInfo{}
extension MediaDeviceInfoExtension on MediaDeviceInfo {
  external String get deviceId;
  external String get groupId;
  external MediaDeviceKind get kind;
  external String get label;
  @JS("toJSON")
  external dynamic toJSON();
}
@JS("MediaDeviceInfo")
external AnonInterface$332 MediaDeviceInfo;
@JS()
@anonymous
abstract class MediaDevicesEventMap{}
extension MediaDevicesEventMapExtension on MediaDevicesEventMap {
  external Event get "devicechange";
  external set "devicechange"(Event value);
}
@JS()
@anonymous
abstract class MediaDevices{}
extension MediaDevicesExtension on MediaDevices {
  external dynamic Function(MediaDevices, Event)? get ondevicechange;
  external set ondevicechange(dynamic Function(MediaDevices, Event)? value);
  @JS("enumerateDevices")
  external Future<List<MediaDeviceInfo>> enumerateDevices();
  @JS("getDisplayMedia")
  external Future<MediaStream> getDisplayMedia([DisplayMediaStreamOptions options]);
  @JS("getSupportedConstraints")
  external MediaTrackSupportedConstraints getSupportedConstraints();
  @JS("getUserMedia")
  external Future<MediaStream> getUserMedia([MediaStreamConstraints constraints]);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(MediaDevices, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(MediaDevices, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("MediaDevices")
external AnonInterface$333 MediaDevices;
@JS()
@anonymous
abstract class MediaElementAudioSourceNode{}
extension MediaElementAudioSourceNodeExtension on MediaElementAudioSourceNode {
  external HTMLMediaElement get mediaElement;
}
@JS("MediaElementAudioSourceNode")
external AnonInterface$334 MediaElementAudioSourceNode;
@JS()
@anonymous
abstract class MediaEncryptedEvent{}
extension MediaEncryptedEventExtension on MediaEncryptedEvent {
  external ArrayBuffer? get initData;
  external String get initDataType;
}
@JS("MediaEncryptedEvent")
external AnonInterface$335 MediaEncryptedEvent;
@JS()
@anonymous
abstract class MediaError{}
extension MediaErrorExtension on MediaError {
  external num get code;
  external String get message;
  external num get MEDIA_ERR_ABORTED;
  external num get MEDIA_ERR_NETWORK;
  external num get MEDIA_ERR_DECODE;
  external num get MEDIA_ERR_SRC_NOT_SUPPORTED;
}
@JS("MediaError")
external AnonInterface$336 MediaError;
@JS()
@anonymous
abstract class MediaKeyMessageEvent{}
extension MediaKeyMessageEventExtension on MediaKeyMessageEvent {
  external ArrayBuffer get message;
  external MediaKeyMessageType get messageType;
}
@JS("MediaKeyMessageEvent")
external AnonInterface$337 MediaKeyMessageEvent;
@JS()
@anonymous
abstract class MediaKeySessionEventMap{}
extension MediaKeySessionEventMapExtension on MediaKeySessionEventMap {
  external Event get "keystatuseschange";
  external set "keystatuseschange"(Event value);
  external MediaKeyMessageEvent get "message";
  external set "message"(MediaKeyMessageEvent value);
}
@JS()
@anonymous
abstract class MediaKeySession{}
extension MediaKeySessionExtension on MediaKeySession {
  external Future<MediaKeySessionClosedReason> get closed;
  external num get expiration;
  external MediaKeyStatusMap get keyStatuses;
  external dynamic Function(MediaKeySession, Event)? get onkeystatuseschange;
  external set onkeystatuseschange(dynamic Function(MediaKeySession, Event)? value);
  external dynamic Function(MediaKeySession, MediaKeyMessageEvent)? get onmessage;
  external set onmessage(dynamic Function(MediaKeySession, MediaKeyMessageEvent)? value);
  external String get sessionId;
  @JS("close")
  external Future<void> close();
  @JS("generateRequest")
  external Future<void> generateRequest(String initDataType, BufferSource initData);
  @JS("load")
  external Future<bool> load(String sessionId);
  @JS("remove")
  external Future<void> remove();
  @JS("update")
  external Future<void> update(BufferSource response);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(MediaKeySession, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(MediaKeySession, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("MediaKeySession")
external AnonInterface$338 MediaKeySession;
@JS()
@anonymous
abstract class MediaKeyStatusMap{}
extension MediaKeyStatusMapExtension on MediaKeyStatusMap {
  external num get size;
  @JS("get")
  external MediaKeyStatus? get(BufferSource keyId);
  @JS("has")
  external bool has(BufferSource keyId);
  @JS("forEach")
  external void forEach(void Function(MediaKeyStatus, BufferSource, MediaKeyStatusMap) callbackfn, [dynamic thisArg]);
}
@JS("MediaKeyStatusMap")
external AnonInterface$339 MediaKeyStatusMap;
@JS()
@anonymous
abstract class MediaKeySystemAccess{}
extension MediaKeySystemAccessExtension on MediaKeySystemAccess {
  external String get keySystem;
  @JS("createMediaKeys")
  external Future<MediaKeys> createMediaKeys();
  @JS("getConfiguration")
  external MediaKeySystemConfiguration getConfiguration();
}
@JS("MediaKeySystemAccess")
external AnonInterface$340 MediaKeySystemAccess;
@JS()
@anonymous
abstract class MediaKeys{}
extension MediaKeysExtension on MediaKeys {
  @JS("createSession")
  external MediaKeySession createSession([MediaKeySessionType sessionType]);
  @JS("getStatusForPolicy")
  external Future<MediaKeyStatus> getStatusForPolicy([MediaKeysPolicy policy]);
  @JS("setServerCertificate")
  external Future<bool> setServerCertificate(BufferSource serverCertificate);
}
@JS("MediaKeys")
external AnonInterface$341 MediaKeys;
@JS()
@anonymous
abstract class MediaList{}
extension MediaListExtension on MediaList {
  external num get length;
  external String get mediaText;
  external set mediaText(String value);
  @JS("toString")
  external String toString();
  @JS("appendMedium")
  external void appendMedium(String medium);
  @JS("deleteMedium")
  external void deleteMedium(String medium);
  @JS("item")
  external String? item(num index);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("MediaList")
external AnonInterface$342 MediaList;
@JS()
@anonymous
abstract class MediaMetadata{}
extension MediaMetadataExtension on MediaMetadata {
  external String get album;
  external set album(String value);
  external String get artist;
  external set artist(String value);
  external ReadonlyArray<MediaImage> get artwork;
  external set artwork(ReadonlyArray<MediaImage> value);
  external String get title;
  external set title(String value);
}
@JS("MediaMetadata")
external AnonInterface$343 MediaMetadata;
@JS()
@anonymous
abstract class MediaQueryListEventMap{}
extension MediaQueryListEventMapExtension on MediaQueryListEventMap {
  external MediaQueryListEvent get "change";
  external set "change"(MediaQueryListEvent value);
}
@JS()
@anonymous
abstract class MediaQueryList{}
extension MediaQueryListExtension on MediaQueryList {
  external bool get matches;
  external String get media;
  external dynamic Function(MediaQueryList, MediaQueryListEvent)? get onchange;
  external set onchange(dynamic Function(MediaQueryList, MediaQueryListEvent)? value);
  @JS("addListener")
  external void addListener(dynamic Function(MediaQueryList, MediaQueryListEvent)? callback);
  @JS("removeListener")
  external void removeListener(dynamic Function(MediaQueryList, MediaQueryListEvent)? callback);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(MediaQueryList, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(MediaQueryList, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("MediaQueryList")
external AnonInterface$344 MediaQueryList;
@JS()
@anonymous
abstract class MediaQueryListEvent{}
extension MediaQueryListEventExtension on MediaQueryListEvent {
  external bool get matches;
  external String get media;
}
@JS("MediaQueryListEvent")
external AnonInterface$345 MediaQueryListEvent;
@JS()
@anonymous
abstract class MediaRecorderEventMap{}
extension MediaRecorderEventMapExtension on MediaRecorderEventMap {
  external BlobEvent get "dataavailable";
  external set "dataavailable"(BlobEvent value);
  external ErrorEvent get "error";
  external set "error"(ErrorEvent value);
  external Event get "pause";
  external set "pause"(Event value);
  external Event get "resume";
  external set "resume"(Event value);
  external Event get "start";
  external set "start"(Event value);
  external Event get "stop";
  external set "stop"(Event value);
}
@JS()
@anonymous
abstract class MediaRecorder{}
extension MediaRecorderExtension on MediaRecorder {
  external num get audioBitsPerSecond;
  external String get mimeType;
  external dynamic Function(MediaRecorder, BlobEvent)? get ondataavailable;
  external set ondataavailable(dynamic Function(MediaRecorder, BlobEvent)? value);
  external dynamic Function(MediaRecorder, ErrorEvent)? get onerror;
  external set onerror(dynamic Function(MediaRecorder, ErrorEvent)? value);
  external dynamic Function(MediaRecorder, Event)? get onpause;
  external set onpause(dynamic Function(MediaRecorder, Event)? value);
  external dynamic Function(MediaRecorder, Event)? get onresume;
  external set onresume(dynamic Function(MediaRecorder, Event)? value);
  external dynamic Function(MediaRecorder, Event)? get onstart;
  external set onstart(dynamic Function(MediaRecorder, Event)? value);
  external dynamic Function(MediaRecorder, Event)? get onstop;
  external set onstop(dynamic Function(MediaRecorder, Event)? value);
  external RecordingState get state;
  external MediaStream get stream;
  external num get videoBitsPerSecond;
  @JS("pause")
  external void pause();
  @JS("requestData")
  external void requestData();
  @JS("resume")
  external void resume();
  @JS("start")
  external void start([num timeslice]);
  @JS("stop")
  external void stop();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(MediaRecorder, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(MediaRecorder, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("MediaRecorder")
external AnonInterface$346 MediaRecorder;
@JS()
@anonymous
abstract class MediaSession{}
extension MediaSessionExtension on MediaSession {
  external MediaMetadata? get metadata;
  external set metadata(MediaMetadata? value);
  external MediaSessionPlaybackState get playbackState;
  external set playbackState(MediaSessionPlaybackState value);
  @JS("setActionHandler")
  external void setActionHandler(MediaSessionAction action, MediaSessionActionHandler? handler);
  @JS("setPositionState")
  external void setPositionState([MediaPositionState state]);
}
@JS("MediaSession")
external AnonInterface$347 MediaSession;
@JS()
@anonymous
abstract class MediaSourceEventMap{}
extension MediaSourceEventMapExtension on MediaSourceEventMap {
  external Event get "sourceclose";
  external set "sourceclose"(Event value);
  external Event get "sourceended";
  external set "sourceended"(Event value);
  external Event get "sourceopen";
  external set "sourceopen"(Event value);
}
@JS()
@anonymous
abstract class MediaSource{}
extension MediaSourceExtension on MediaSource {
  external SourceBufferList get activeSourceBuffers;
  external num get duration;
  external set duration(num value);
  external dynamic Function(MediaSource, Event)? get onsourceclose;
  external set onsourceclose(dynamic Function(MediaSource, Event)? value);
  external dynamic Function(MediaSource, Event)? get onsourceended;
  external set onsourceended(dynamic Function(MediaSource, Event)? value);
  external dynamic Function(MediaSource, Event)? get onsourceopen;
  external set onsourceopen(dynamic Function(MediaSource, Event)? value);
  external ReadyState get readyState;
  external SourceBufferList get sourceBuffers;
  @JS("addSourceBuffer")
  external SourceBuffer addSourceBuffer(String type);
  @JS("clearLiveSeekableRange")
  external void clearLiveSeekableRange();
  @JS("endOfStream")
  external void endOfStream([EndOfStreamError error]);
  @JS("removeSourceBuffer")
  external void removeSourceBuffer(SourceBuffer sourceBuffer);
  @JS("setLiveSeekableRange")
  external void setLiveSeekableRange(num start, num end);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(MediaSource, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(MediaSource, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("MediaSource")
external AnonInterface$348 MediaSource;
@JS()
@anonymous
abstract class MediaSourceHandle{}
extension MediaSourceHandleExtension on MediaSourceHandle {
}
@JS("MediaSourceHandle")
external AnonInterface$349 MediaSourceHandle;
@JS()
@anonymous
abstract class MediaStreamEventMap{}
extension MediaStreamEventMapExtension on MediaStreamEventMap {
  external MediaStreamTrackEvent get "addtrack";
  external set "addtrack"(MediaStreamTrackEvent value);
  external MediaStreamTrackEvent get "removetrack";
  external set "removetrack"(MediaStreamTrackEvent value);
}
@JS()
@anonymous
abstract class MediaStream{}
extension MediaStreamExtension on MediaStream {
  external bool get active;
  external String get id;
  external dynamic Function(MediaStream, MediaStreamTrackEvent)? get onaddtrack;
  external set onaddtrack(dynamic Function(MediaStream, MediaStreamTrackEvent)? value);
  external dynamic Function(MediaStream, MediaStreamTrackEvent)? get onremovetrack;
  external set onremovetrack(dynamic Function(MediaStream, MediaStreamTrackEvent)? value);
  @JS("addTrack")
  external void addTrack(MediaStreamTrack track);
  @JS("clone")
  external MediaStream clone();
  @JS("getAudioTracks")
  external List<MediaStreamTrack> getAudioTracks();
  @JS("getTrackById")
  external MediaStreamTrack? getTrackById(String trackId);
  @JS("getTracks")
  external List<MediaStreamTrack> getTracks();
  @JS("getVideoTracks")
  external List<MediaStreamTrack> getVideoTracks();
  @JS("removeTrack")
  external void removeTrack(MediaStreamTrack track);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(MediaStream, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(MediaStream, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("MediaStream")
external AnonInterface$350 MediaStream;
@JS()
@anonymous
abstract class MediaStreamAudioDestinationNode{}
extension MediaStreamAudioDestinationNodeExtension on MediaStreamAudioDestinationNode {
  external MediaStream get stream;
}
@JS("MediaStreamAudioDestinationNode")
external AnonInterface$351 MediaStreamAudioDestinationNode;
@JS()
@anonymous
abstract class MediaStreamAudioSourceNode{}
extension MediaStreamAudioSourceNodeExtension on MediaStreamAudioSourceNode {
  external MediaStream get mediaStream;
}
@JS("MediaStreamAudioSourceNode")
external AnonInterface$352 MediaStreamAudioSourceNode;
@JS()
@anonymous
abstract class MediaStreamTrackEventMap{}
extension MediaStreamTrackEventMapExtension on MediaStreamTrackEventMap {
  external Event get "ended";
  external set "ended"(Event value);
  external Event get "mute";
  external set "mute"(Event value);
  external Event get "unmute";
  external set "unmute"(Event value);
}
@JS()
@anonymous
abstract class MediaStreamTrack{}
extension MediaStreamTrackExtension on MediaStreamTrack {
  external String get contentHint;
  external set contentHint(String value);
  external bool get enabled;
  external set enabled(bool value);
  external String get id;
  external String get kind;
  external String get label;
  external bool get muted;
  external dynamic Function(MediaStreamTrack, Event)? get onended;
  external set onended(dynamic Function(MediaStreamTrack, Event)? value);
  external dynamic Function(MediaStreamTrack, Event)? get onmute;
  external set onmute(dynamic Function(MediaStreamTrack, Event)? value);
  external dynamic Function(MediaStreamTrack, Event)? get onunmute;
  external set onunmute(dynamic Function(MediaStreamTrack, Event)? value);
  external MediaStreamTrackState get readyState;
  @JS("applyConstraints")
  external Future<void> applyConstraints([MediaTrackConstraints constraints]);
  @JS("clone")
  external MediaStreamTrack clone();
  @JS("getCapabilities")
  external MediaTrackCapabilities getCapabilities();
  @JS("getConstraints")
  external MediaTrackConstraints getConstraints();
  @JS("getSettings")
  external MediaTrackSettings getSettings();
  @JS("stop")
  external void stop();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(MediaStreamTrack, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(MediaStreamTrack, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("MediaStreamTrack")
external AnonInterface$353 MediaStreamTrack;
@JS()
@anonymous
abstract class MediaStreamTrackEvent{}
extension MediaStreamTrackEventExtension on MediaStreamTrackEvent {
  external MediaStreamTrack get track;
}
@JS("MediaStreamTrackEvent")
external AnonInterface$354 MediaStreamTrackEvent;
@JS()
@anonymous
abstract class MessageChannel{}
extension MessageChannelExtension on MessageChannel {
  external MessagePort get port1;
  external MessagePort get port2;
}
@JS("MessageChannel")
external AnonInterface$355 MessageChannel;
@JS()
@anonymous
abstract class MessageEvent{}
extension MessageEventExtension on MessageEvent {
  external T get data;
  external String get lastEventId;
  external String get origin;
  external ReadonlyArray<MessagePort> get ports;
  external MessageEventSource? get source;
  @JS("initMessageEvent")
  external void initMessageEvent(String type, [bool bubbles, bool cancelable, dynamic data, String origin, String lastEventId, MessageEventSource? source, List<MessagePort> ports]);
}
@JS("MessageEvent")
external AnonInterface$356 MessageEvent;
@JS()
@anonymous
abstract class MessageEventTargetEventMap{}
extension MessageEventTargetEventMapExtension on MessageEventTargetEventMap {
  external MessageEvent get "message";
  external set "message"(MessageEvent value);
  external MessageEvent get "messageerror";
  external set "messageerror"(MessageEvent value);
}
@JS()
@anonymous
abstract class MessageEventTarget{}
extension MessageEventTargetExtension on MessageEventTarget {
  external dynamic Function(T, MessageEvent)? get onmessage;
  external set onmessage(dynamic Function(T, MessageEvent)? value);
  external dynamic Function(T, MessageEvent)? get onmessageerror;
  external set onmessageerror(dynamic Function(T, MessageEvent)? value);
  @JS("addEventListener")
  external void addEventListener_1(K type, dynamic Function(T, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener_2(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener_1(K type, dynamic Function(T, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener_2(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS()
@anonymous
abstract class MessagePortEventMap{}
extension MessagePortEventMapExtension on MessagePortEventMap {
  external MessageEvent get "message";
  external set "message"(MessageEvent value);
  external MessageEvent get "messageerror";
  external set "messageerror"(MessageEvent value);
}
@JS()
@anonymous
abstract class MessagePort{}
extension MessagePortExtension on MessagePort {
  @JS("close")
  external void close();
  @JS("postMessage")
  external void postMessage(dynamic message, List<Transferable> transfer);
  @JS("postMessage")
  external void postMessage(dynamic message, [StructuredSerializeOptions options]);
  @JS("start")
  external void start();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(MessagePort, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(MessagePort, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("MessagePort")
external AnonInterface$357 MessagePort;
@JS()
@anonymous
abstract class MimeType{}
extension MimeTypeExtension on MimeType {
  external String get description;
  external Plugin get enabledPlugin;
  external String get suffixes;
  external String get type;
}
@JS("MimeType")
external AnonInterface$358 MimeType;
@JS()
@anonymous
abstract class MimeTypeArray{}
extension MimeTypeArrayExtension on MimeTypeArray {
  external num get length;
  @JS("item")
  external MimeType? item(num index);
  @JS("namedItem")
  external MimeType? namedItem(String name);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("MimeTypeArray")
external AnonInterface$359 MimeTypeArray;
@JS()
@anonymous
abstract class MouseEvent{}
extension MouseEventExtension on MouseEvent {
  external bool get altKey;
  external num get button;
  external num get buttons;
  external num get clientX;
  external num get clientY;
  external bool get ctrlKey;
  external num get layerX;
  external num get layerY;
  external bool get metaKey;
  external num get movementX;
  external num get movementY;
  external num get offsetX;
  external num get offsetY;
  external num get pageX;
  external num get pageY;
  external EventTarget? get relatedTarget;
  external num get screenX;
  external num get screenY;
  external bool get shiftKey;
  external num get x;
  external num get y;
  @JS("getModifierState")
  external bool getModifierState(String keyArg);
  @JS("initMouseEvent")
  external void initMouseEvent(String typeArg, bool canBubbleArg, bool cancelableArg, Window viewArg, num detailArg, num screenXArg, num screenYArg, num clientXArg, num clientYArg, bool ctrlKeyArg, bool altKeyArg, bool shiftKeyArg, bool metaKeyArg, num buttonArg, EventTarget? relatedTargetArg);
}
@JS("MouseEvent")
external AnonInterface$360 MouseEvent;
@JS()
@anonymous
abstract class MutationObserver{}
extension MutationObserverExtension on MutationObserver {
  @JS("disconnect")
  external void disconnect();
  @JS("observe")
  external void observe(Node target, [MutationObserverInit options]);
  @JS("takeRecords")
  external List<MutationRecord> takeRecords();
}
@JS("MutationObserver")
external AnonInterface$361 MutationObserver;
@JS()
@anonymous
abstract class MutationRecord{}
extension MutationRecordExtension on MutationRecord {
  external NodeList get addedNodes;
  external String? get attributeName;
  external String? get attributeNamespace;
  external Node? get nextSibling;
  external String? get oldValue;
  external Node? get previousSibling;
  external NodeList get removedNodes;
  external Node get target;
  external MutationRecordType get type;
}
@JS("MutationRecord")
external AnonInterface$362 MutationRecord;
@JS()
@anonymous
abstract class NamedNodeMap{}
extension NamedNodeMapExtension on NamedNodeMap {
  external num get length;
  @JS("getNamedItem")
  external Attr? getNamedItem(String qualifiedName);
  @JS("getNamedItemNS")
  external Attr? getNamedItemNS(String? namespace, String localName);
  @JS("item")
  external Attr? item(num index);
  @JS("removeNamedItem")
  external Attr removeNamedItem(String qualifiedName);
  @JS("removeNamedItemNS")
  external Attr removeNamedItemNS(String? namespace, String localName);
  @JS("setNamedItem")
  external Attr? setNamedItem(Attr attr);
  @JS("setNamedItemNS")
  external Attr? setNamedItemNS(Attr attr);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("NamedNodeMap")
external AnonInterface$363 NamedNodeMap;
@JS()
@anonymous
abstract class NavigationActivation{}
extension NavigationActivationExtension on NavigationActivation {
  external NavigationHistoryEntry get entry;
  external NavigationHistoryEntry? get from;
  external NavigationType get navigationType;
}
@JS("NavigationActivation")
external AnonInterface$364 NavigationActivation;
@JS()
@anonymous
abstract class NavigationHistoryEntryEventMap{}
extension NavigationHistoryEntryEventMapExtension on NavigationHistoryEntryEventMap {
  external Event get "dispose";
  external set "dispose"(Event value);
}
@JS()
@anonymous
abstract class NavigationHistoryEntry{}
extension NavigationHistoryEntryExtension on NavigationHistoryEntry {
  external String get id;
  external num get index;
  external String get key;
  external dynamic Function(NavigationHistoryEntry, Event)? get ondispose;
  external set ondispose(dynamic Function(NavigationHistoryEntry, Event)? value);
  external bool get sameDocument;
  external String? get url;
  @JS("getState")
  external dynamic getState();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(NavigationHistoryEntry, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(NavigationHistoryEntry, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("NavigationHistoryEntry")
external AnonInterface$365 NavigationHistoryEntry;
@JS()
@anonymous
abstract class NavigationPreloadManager{}
extension NavigationPreloadManagerExtension on NavigationPreloadManager {
  @JS("disable")
  external Future<void> disable();
  @JS("enable")
  external Future<void> enable();
  @JS("getState")
  external Future<NavigationPreloadState> getState();
  @JS("setHeaderValue")
  external Future<void> setHeaderValue(String value);
}
@JS("NavigationPreloadManager")
external AnonInterface$366 NavigationPreloadManager;
@JS()
@anonymous
abstract class Navigator{}
extension NavigatorExtension on Navigator {
  external Clipboard get clipboard;
  external CredentialsContainer get credentials;
  external String? get doNotTrack;
  external Geolocation get geolocation;
  external num get maxTouchPoints;
  external MediaCapabilities get mediaCapabilities;
  external MediaDevices get mediaDevices;
  external MediaSession get mediaSession;
  external Permissions get permissions;
  external ServiceWorkerContainer get serviceWorker;
  external UserActivation get userActivation;
  external WakeLock get wakeLock;
  @JS("canShare")
  external bool canShare([ShareData data]);
  @JS("getGamepads")
  external List<Gamepad?> getGamepads();
  @JS("requestMIDIAccess")
  external Future<MIDIAccess> requestMIDIAccess([MIDIOptions options]);
  @JS("requestMediaKeySystemAccess")
  external Future<MediaKeySystemAccess> requestMediaKeySystemAccess(String keySystem, List<MediaKeySystemConfiguration> supportedConfigurations);
  @JS("sendBeacon")
  external bool sendBeacon(dynamic /* String|URL */ url, [BodyInit? data]);
  @JS("share")
  external Future<void> share([ShareData data]);
  @JS("vibrate")
  external bool vibrate(VibratePattern pattern);
}
@JS("Navigator")
external AnonInterface$367 Navigator;
@JS()
@anonymous
abstract class NavigatorAutomationInformation{}
extension NavigatorAutomationInformationExtension on NavigatorAutomationInformation {
  external bool get webdriver;
}
@JS()
@anonymous
abstract class NavigatorBadge{}
extension NavigatorBadgeExtension on NavigatorBadge {
  @JS("clearAppBadge")
  external Future<void> clearAppBadge();
  @JS("setAppBadge")
  external Future<void> setAppBadge([num contents]);
}
@JS()
@anonymous
abstract class NavigatorConcurrentHardware{}
extension NavigatorConcurrentHardwareExtension on NavigatorConcurrentHardware {
  external num get hardwareConcurrency;
}
@JS()
@anonymous
abstract class NavigatorContentUtils{}
extension NavigatorContentUtilsExtension on NavigatorContentUtils {
  @JS("registerProtocolHandler")
  external void registerProtocolHandler(String scheme, dynamic /* String|URL */ url);
}
@JS()
@anonymous
abstract class NavigatorCookies{}
extension NavigatorCookiesExtension on NavigatorCookies {
  external bool get cookieEnabled;
}
@JS()
@anonymous
abstract class NavigatorID{}
extension NavigatorIDExtension on NavigatorID {
  external String get appCodeName;
  external String get appName;
  external String get appVersion;
  external String get platform;
  external String get product;
  external String get productSub;
  external String get userAgent;
  external String get vendor;
  external String get vendorSub;
}
@JS()
@anonymous
abstract class NavigatorLanguage{}
extension NavigatorLanguageExtension on NavigatorLanguage {
  external String get language;
  external ReadonlyArray<String> get languages;
}
@JS()
@anonymous
abstract class NavigatorLocks{}
extension NavigatorLocksExtension on NavigatorLocks {
  external LockManager get locks;
}
@JS()
@anonymous
abstract class NavigatorOnLine{}
extension NavigatorOnLineExtension on NavigatorOnLine {
  external bool get onLine;
}
@JS()
@anonymous
abstract class NavigatorPlugins{}
extension NavigatorPluginsExtension on NavigatorPlugins {
  external MimeTypeArray get mimeTypes;
  external bool get pdfViewerEnabled;
  external PluginArray get plugins;
  @JS("javaEnabled")
  external bool javaEnabled();
}
@JS()
@anonymous
abstract class NavigatorStorage{}
extension NavigatorStorageExtension on NavigatorStorage {
  external StorageManager get storage;
}
@JS()
@anonymous
abstract class Node{}
extension NodeExtension on Node {
  external String get baseURI;
  external NodeListOf<ChildNode> get childNodes;
  external ChildNode? get firstChild;
  external bool get isConnected;
  external ChildNode? get lastChild;
  external ChildNode? get nextSibling;
  external String get nodeName;
  external num get nodeType;
  external String? get nodeValue;
  external set nodeValue(String? value);
  external Document? get ownerDocument;
  external HTMLElement? get parentElement;
  external ParentNode? get parentNode;
  external ChildNode? get previousSibling;
  external String? get textContent;
  external set textContent(String? value);
  external num get ELEMENT_NODE;
  external num get ATTRIBUTE_NODE;
  external num get TEXT_NODE;
  external num get CDATA_SECTION_NODE;
  external num get ENTITY_REFERENCE_NODE;
  external num get ENTITY_NODE;
  external num get PROCESSING_INSTRUCTION_NODE;
  external num get COMMENT_NODE;
  external num get DOCUMENT_NODE;
  external num get DOCUMENT_TYPE_NODE;
  external num get DOCUMENT_FRAGMENT_NODE;
  external num get NOTATION_NODE;
  external num get DOCUMENT_POSITION_DISCONNECTED;
  external num get DOCUMENT_POSITION_PRECEDING;
  external num get DOCUMENT_POSITION_FOLLOWING;
  external num get DOCUMENT_POSITION_CONTAINS;
  external num get DOCUMENT_POSITION_CONTAINED_BY;
  external num get DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC;
  @JS("appendChild")
  external T appendChild(T node);
  @JS("cloneNode")
  external Node cloneNode([bool subtree]);
  @JS("compareDocumentPosition")
  external num compareDocumentPosition(Node other);
  @JS("contains")
  external bool contains(Node? other);
  @JS("getRootNode")
  external Node getRootNode([GetRootNodeOptions options]);
  @JS("hasChildNodes")
  external bool hasChildNodes();
  @JS("insertBefore")
  external T insertBefore(T node, Node? child);
  @JS("isDefaultNamespace")
  external bool isDefaultNamespace(String? namespace);
  @JS("isEqualNode")
  external bool isEqualNode(Node? otherNode);
  @JS("isSameNode")
  external bool isSameNode(Node? otherNode);
  @JS("lookupNamespaceURI")
  external String? lookupNamespaceURI(String? prefix);
  @JS("lookupPrefix")
  external String? lookupPrefix(String? namespace);
  @JS("normalize")
  external void normalize();
  @JS("removeChild")
  external T removeChild(T child);
  @JS("replaceChild")
  external T replaceChild(Node node, T child);
}
@JS("Node")
external AnonInterface$368 Node;
@JS()
@anonymous
abstract class NodeIterator{}
extension NodeIteratorExtension on NodeIterator {
  external NodeFilter? get filter;
  external bool get pointerBeforeReferenceNode;
  external Node get referenceNode;
  external Node get root;
  external num get whatToShow;
  @JS("detach")
  external void detach();
  @JS("nextNode")
  external Node? nextNode();
  @JS("previousNode")
  external Node? previousNode();
}
@JS("NodeIterator")
external AnonInterface$369 NodeIterator;
@JS()
@anonymous
abstract class NodeList{}
extension NodeListExtension on NodeList {
  external num get length;
  @JS("item")
  external Node? item(num index);
  @JS("forEach")
  external void forEach(void Function(Node, num, NodeList) callbackfn, [dynamic thisArg]);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("NodeList")
external AnonInterface$370 NodeList;
@JS()
@anonymous
abstract class NodeListOf{}
extension NodeListOfExtension on NodeListOf {
  @JS("item")
  external TNode item(num index);
  @JS("forEach")
  external void forEach(void Function(TNode, num, NodeListOf<TNode>) callbackfn, [dynamic thisArg]);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS()
@anonymous
abstract class NonDocumentTypeChildNode{}
extension NonDocumentTypeChildNodeExtension on NonDocumentTypeChildNode {
  external Element? get nextElementSibling;
  external Element? get previousElementSibling;
}
@JS()
@anonymous
abstract class NonElementParentNode{}
extension NonElementParentNodeExtension on NonElementParentNode {
  @JS("getElementById")
  external Element? getElementById(String elementId);
}
@JS()
@anonymous
abstract class NotificationEventMap{}
extension NotificationEventMapExtension on NotificationEventMap {
  external Event get "click";
  external set "click"(Event value);
  external Event get "close";
  external set "close"(Event value);
  external Event get "error";
  external set "error"(Event value);
  external Event get "show";
  external set "show"(Event value);
}
@JS()
@anonymous
abstract class Notification{}
extension NotificationExtension on Notification {
  external String get badge;
  external String get body;
  external dynamic get data;
  external NotificationDirection get dir;
  external String get icon;
  external String get lang;
  external dynamic Function(Notification, Event)? get onclick;
  external set onclick(dynamic Function(Notification, Event)? value);
  external dynamic Function(Notification, Event)? get onclose;
  external set onclose(dynamic Function(Notification, Event)? value);
  external dynamic Function(Notification, Event)? get onerror;
  external set onerror(dynamic Function(Notification, Event)? value);
  external dynamic Function(Notification, Event)? get onshow;
  external set onshow(dynamic Function(Notification, Event)? value);
  external bool get requireInteraction;
  external bool? get silent;
  external String get tag;
  external String get title;
  @JS("close")
  external void close();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(Notification, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(Notification, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("Notification")
external AnonInterface$371 Notification;
@JS()
@anonymous
abstract class OES_draw_buffers_indexed{}
extension OES_draw_buffers_indexedExtension on OES_draw_buffers_indexed {
  @JS("blendEquationSeparateiOES")
  external void blendEquationSeparateiOES(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
  @JS("blendEquationiOES")
  external void blendEquationiOES(GLuint buf, GLenum mode);
  @JS("blendFuncSeparateiOES")
  external void blendFuncSeparateiOES(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
  @JS("blendFunciOES")
  external void blendFunciOES(GLuint buf, GLenum src, GLenum dst);
  @JS("colorMaskiOES")
  external void colorMaskiOES(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
  @JS("disableiOES")
  external void disableiOES(GLenum target, GLuint index);
  @JS("enableiOES")
  external void enableiOES(GLenum target, GLuint index);
}
@JS()
@anonymous
abstract class OES_element_index_uint{}
extension OES_element_index_uintExtension on OES_element_index_uint {
}
@JS()
@anonymous
abstract class OES_fbo_render_mipmap{}
extension OES_fbo_render_mipmapExtension on OES_fbo_render_mipmap {
}
@JS()
@anonymous
abstract class OES_standard_derivatives{}
extension OES_standard_derivativesExtension on OES_standard_derivatives {
  external num get FRAGMENT_SHADER_DERIVATIVE_HINT_OES;
}
@JS()
@anonymous
abstract class OES_texture_float{}
extension OES_texture_floatExtension on OES_texture_float {
}
@JS()
@anonymous
abstract class OES_texture_float_linear{}
extension OES_texture_float_linearExtension on OES_texture_float_linear {
}
@JS()
@anonymous
abstract class OES_texture_half_float{}
extension OES_texture_half_floatExtension on OES_texture_half_float {
  external num get HALF_FLOAT_OES;
}
@JS()
@anonymous
abstract class OES_texture_half_float_linear{}
extension OES_texture_half_float_linearExtension on OES_texture_half_float_linear {
}
@JS()
@anonymous
abstract class OES_vertex_array_object{}
extension OES_vertex_array_objectExtension on OES_vertex_array_object {
  external num get VERTEX_ARRAY_BINDING_OES;
  @JS("bindVertexArrayOES")
  external void bindVertexArrayOES(WebGLVertexArrayObjectOES? arrayObject);
  @JS("createVertexArrayOES")
  external WebGLVertexArrayObjectOES createVertexArrayOES();
  @JS("deleteVertexArrayOES")
  external void deleteVertexArrayOES(WebGLVertexArrayObjectOES? arrayObject);
  @JS("isVertexArrayOES")
  external GLboolean isVertexArrayOES(WebGLVertexArrayObjectOES? arrayObject);
}
@JS()
@anonymous
abstract class OVR_multiview2{}
extension OVR_multiview2Extension on OVR_multiview2 {
  external num get FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR;
  external num get FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR;
  external num get MAX_VIEWS_OVR;
  external num get FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR;
  @JS("framebufferTextureMultiviewOVR")
  external void framebufferTextureMultiviewOVR(GLenum target, GLenum attachment, WebGLTexture? texture, GLint level, GLint baseViewIndex, GLsizei numViews);
}
@JS()
@anonymous
abstract class OfflineAudioCompletionEvent{}
extension OfflineAudioCompletionEventExtension on OfflineAudioCompletionEvent {
  external AudioBuffer get renderedBuffer;
}
@JS("OfflineAudioCompletionEvent")
external AnonInterface$372 OfflineAudioCompletionEvent;
@JS()
@anonymous
abstract class OfflineAudioContextEventMap{}
extension OfflineAudioContextEventMapExtension on OfflineAudioContextEventMap {
  external OfflineAudioCompletionEvent get "complete";
  external set "complete"(OfflineAudioCompletionEvent value);
}
@JS()
@anonymous
abstract class OfflineAudioContext{}
extension OfflineAudioContextExtension on OfflineAudioContext {
  external num get length;
  external dynamic Function(OfflineAudioContext, OfflineAudioCompletionEvent)? get oncomplete;
  external set oncomplete(dynamic Function(OfflineAudioContext, OfflineAudioCompletionEvent)? value);
  @JS("resume")
  external Future<void> resume();
  @JS("startRendering")
  external Future<AudioBuffer> startRendering();
  @JS("suspend")
  external Future<void> suspend(num suspendTime);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(OfflineAudioContext, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(OfflineAudioContext, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("OfflineAudioContext")
external AnonInterface$373 OfflineAudioContext;
@JS()
@anonymous
abstract class OffscreenCanvasEventMap{}
extension OffscreenCanvasEventMapExtension on OffscreenCanvasEventMap {
  external Event get "contextlost";
  external set "contextlost"(Event value);
  external Event get "contextrestored";
  external set "contextrestored"(Event value);
}
@JS()
@anonymous
abstract class OffscreenCanvas{}
extension OffscreenCanvasExtension on OffscreenCanvas {
  external num get height;
  external set height(num value);
  external dynamic Function(OffscreenCanvas, Event)? get oncontextlost;
  external set oncontextlost(dynamic Function(OffscreenCanvas, Event)? value);
  external dynamic Function(OffscreenCanvas, Event)? get oncontextrestored;
  external set oncontextrestored(dynamic Function(OffscreenCanvas, Event)? value);
  external num get width;
  external set width(num value);
  @JS("convertToBlob")
  external Future<Blob> convertToBlob([ImageEncodeOptions options]);
  @JS("getContext")
  external OffscreenCanvasRenderingContext2D? getContext(String contextId, [dynamic options]);
  @JS("getContext")
  external ImageBitmapRenderingContext? getContext(String contextId, [dynamic options]);
  @JS("getContext")
  external WebGLRenderingContext? getContext(String contextId, [dynamic options]);
  @JS("getContext")
  external WebGL2RenderingContext? getContext(String contextId, [dynamic options]);
  @JS("getContext")
  external OffscreenRenderingContext? getContext(OffscreenRenderingContextId contextId, [dynamic options]);
  @JS("transferToImageBitmap")
  external ImageBitmap transferToImageBitmap();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(OffscreenCanvas, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(OffscreenCanvas, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("OffscreenCanvas")
external AnonInterface$374 OffscreenCanvas;
@JS()
@anonymous
abstract class OffscreenCanvasRenderingContext2D{}
extension OffscreenCanvasRenderingContext2DExtension on OffscreenCanvasRenderingContext2D {
  external OffscreenCanvas get canvas;
}
@JS("OffscreenCanvasRenderingContext2D")
external AnonInterface$375 OffscreenCanvasRenderingContext2D;
@JS()
@anonymous
abstract class OscillatorNode{}
extension OscillatorNodeExtension on OscillatorNode {
  external AudioParam get detune;
  external AudioParam get frequency;
  external OscillatorType get type;
  external set type(OscillatorType value);
  @JS("setPeriodicWave")
  external void setPeriodicWave(PeriodicWave periodicWave);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(OscillatorNode, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(OscillatorNode, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("OscillatorNode")
external AnonInterface$376 OscillatorNode;
@JS()
@anonymous
abstract class OverconstrainedError{}
extension OverconstrainedErrorExtension on OverconstrainedError {
  external String get constraint;
}
@JS("OverconstrainedError")
external AnonInterface$377 OverconstrainedError;
@JS()
@anonymous
abstract class PageRevealEvent{}
extension PageRevealEventExtension on PageRevealEvent {
  external ViewTransition? get viewTransition;
}
@JS("PageRevealEvent")
external AnonInterface$378 PageRevealEvent;
@JS()
@anonymous
abstract class PageSwapEvent{}
extension PageSwapEventExtension on PageSwapEvent {
  external NavigationActivation? get activation;
  external ViewTransition? get viewTransition;
}
@JS("PageSwapEvent")
external AnonInterface$379 PageSwapEvent;
@JS()
@anonymous
abstract class PageTransitionEvent{}
extension PageTransitionEventExtension on PageTransitionEvent {
  external bool get persisted;
}
@JS("PageTransitionEvent")
external AnonInterface$380 PageTransitionEvent;
@JS()
@anonymous
abstract class PannerNode{}
extension PannerNodeExtension on PannerNode {
  external num get coneInnerAngle;
  external set coneInnerAngle(num value);
  external num get coneOuterAngle;
  external set coneOuterAngle(num value);
  external num get coneOuterGain;
  external set coneOuterGain(num value);
  external DistanceModelType get distanceModel;
  external set distanceModel(DistanceModelType value);
  external num get maxDistance;
  external set maxDistance(num value);
  external AudioParam get orientationX;
  external AudioParam get orientationY;
  external AudioParam get orientationZ;
  external PanningModelType get panningModel;
  external set panningModel(PanningModelType value);
  external AudioParam get positionX;
  external AudioParam get positionY;
  external AudioParam get positionZ;
  external num get refDistance;
  external set refDistance(num value);
  external num get rolloffFactor;
  external set rolloffFactor(num value);
  @JS("setOrientation")
  external void setOrientation(num x, num y, num z);
  @JS("setPosition")
  external void setPosition(num x, num y, num z);
}
@JS("PannerNode")
external AnonInterface$381 PannerNode;
@JS()
@anonymous
abstract class ParentNode{}
extension ParentNodeExtension on ParentNode {
  external num get childElementCount;
  external HTMLCollection get children;
  external Element? get firstElementChild;
  external Element? get lastElementChild;
  @JS("append")
  external void append([/* rest */ List<dynamic /* Node|String */> nodes]);
  @JS("prepend")
  external void prepend([/* rest */ List<dynamic /* Node|String */> nodes]);
  @JS("querySelector")
  external dynamic? querySelector_1(K selectors);
  @JS("querySelector")
  external dynamic? querySelector_2(K selectors);
  @JS("querySelector")
  external dynamic? querySelector_3(K selectors);
  @JS("querySelector")
  external dynamic? querySelector_4(K selectors);
  @JS("querySelector")
  external E? querySelector_5(String selectors);
  @JS("querySelectorAll")
  external NodeListOf<dynamic> querySelectorAll_1(K selectors);
  @JS("querySelectorAll")
  external NodeListOf<dynamic> querySelectorAll_2(K selectors);
  @JS("querySelectorAll")
  external NodeListOf<dynamic> querySelectorAll_3(K selectors);
  @JS("querySelectorAll")
  external NodeListOf<dynamic> querySelectorAll_4(K selectors);
  @JS("querySelectorAll")
  external NodeListOf<E> querySelectorAll_5(String selectors);
  @JS("replaceChildren")
  external void replaceChildren([/* rest */ List<dynamic /* Node|String */> nodes]);
}
@JS()
@anonymous
abstract class Path2D{}
extension Path2DExtension on Path2D {
  @JS("addPath")
  external void addPath(Path2D path, [DOMMatrix2DInit transform]);
}
@JS("Path2D")
external AnonInterface$382 Path2D;
@JS()
@anonymous
abstract class PaymentAddress{}
extension PaymentAddressExtension on PaymentAddress {
  external ReadonlyArray<String> get addressLine;
  external String get city;
  external String get country;
  external String get dependentLocality;
  external String get organization;
  external String get phone;
  external String get postalCode;
  external String get recipient;
  external String get region;
  external String get sortingCode;
  @JS("toJSON")
  external dynamic toJSON();
}
@JS("PaymentAddress")
external AnonInterface$383 PaymentAddress;
@JS()
@anonymous
abstract class PaymentMethodChangeEvent{}
extension PaymentMethodChangeEventExtension on PaymentMethodChangeEvent {
  external dynamic get methodDetails;
  external String get methodName;
}
@JS("PaymentMethodChangeEvent")
external AnonInterface$384 PaymentMethodChangeEvent;
@JS()
@anonymous
abstract class PaymentRequestEventMap{}
extension PaymentRequestEventMapExtension on PaymentRequestEventMap {
  external PaymentMethodChangeEvent get "paymentmethodchange";
  external set "paymentmethodchange"(PaymentMethodChangeEvent value);
  external PaymentRequestUpdateEvent get "shippingaddresschange";
  external set "shippingaddresschange"(PaymentRequestUpdateEvent value);
  external PaymentRequestUpdateEvent get "shippingoptionchange";
  external set "shippingoptionchange"(PaymentRequestUpdateEvent value);
}
@JS()
@anonymous
abstract class PaymentRequest{}
extension PaymentRequestExtension on PaymentRequest {
  external String get id;
  external dynamic Function(PaymentRequest, PaymentMethodChangeEvent)? get onpaymentmethodchange;
  external set onpaymentmethodchange(dynamic Function(PaymentRequest, PaymentMethodChangeEvent)? value);
  external dynamic Function(PaymentRequest, PaymentRequestUpdateEvent)? get onshippingaddresschange;
  external set onshippingaddresschange(dynamic Function(PaymentRequest, PaymentRequestUpdateEvent)? value);
  external dynamic Function(PaymentRequest, PaymentRequestUpdateEvent)? get onshippingoptionchange;
  external set onshippingoptionchange(dynamic Function(PaymentRequest, PaymentRequestUpdateEvent)? value);
  external PaymentAddress? get shippingAddress;
  external String? get shippingOption;
  external PaymentShippingType? get shippingType;
  @JS("abort")
  external Future<void> abort();
  @JS("canMakePayment")
  external Future<bool> canMakePayment();
  @JS("show")
  external Future<PaymentResponse> show([dynamic /* PaymentDetailsUpdate|PromiseLike<PaymentDetailsUpdate> */ detailsPromise]);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(PaymentRequest, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(PaymentRequest, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("PaymentRequest")
external AnonInterface$385 PaymentRequest;
@JS()
@anonymous
abstract class PaymentRequestUpdateEvent{}
extension PaymentRequestUpdateEventExtension on PaymentRequestUpdateEvent {
  @JS("updateWith")
  external void updateWith(dynamic /* PaymentDetailsUpdate|PromiseLike<PaymentDetailsUpdate> */ detailsPromise);
}
@JS("PaymentRequestUpdateEvent")
external AnonInterface$386 PaymentRequestUpdateEvent;
@JS()
@anonymous
abstract class PaymentResponseEventMap{}
extension PaymentResponseEventMapExtension on PaymentResponseEventMap {
  external PaymentRequestUpdateEvent get "payerdetailchange";
  external set "payerdetailchange"(PaymentRequestUpdateEvent value);
}
@JS()
@anonymous
abstract class PaymentResponse{}
extension PaymentResponseExtension on PaymentResponse {
  external dynamic get details;
  external String get methodName;
  external dynamic Function(PaymentResponse, PaymentRequestUpdateEvent)? get onpayerdetailchange;
  external set onpayerdetailchange(dynamic Function(PaymentResponse, PaymentRequestUpdateEvent)? value);
  external String? get payerEmail;
  external String? get payerName;
  external String? get payerPhone;
  external String get requestId;
  external PaymentAddress? get shippingAddress;
  external String? get shippingOption;
  @JS("complete")
  external Future<void> complete([PaymentComplete result]);
  @JS("retry")
  external Future<void> retry([PaymentValidationErrors errorFields]);
  @JS("toJSON")
  external dynamic toJSON();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(PaymentResponse, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(PaymentResponse, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("PaymentResponse")
external AnonInterface$387 PaymentResponse;
@JS()
@anonymous
abstract class PerformanceEventMap{}
extension PerformanceEventMapExtension on PerformanceEventMap {
  external Event get "resourcetimingbufferfull";
  external set "resourcetimingbufferfull"(Event value);
}
@JS()
@anonymous
abstract class Performance{}
extension PerformanceExtension on Performance {
  external EventCounts get eventCounts;
  external PerformanceNavigation get navigation;
  external dynamic Function(Performance, Event)? get onresourcetimingbufferfull;
  external set onresourcetimingbufferfull(dynamic Function(Performance, Event)? value);
  external DOMHighResTimeStamp get timeOrigin;
  external PerformanceTiming get timing;
  @JS("clearMarks")
  external void clearMarks([String markName]);
  @JS("clearMeasures")
  external void clearMeasures([String measureName]);
  @JS("clearResourceTimings")
  external void clearResourceTimings();
  @JS("getEntries")
  external PerformanceEntryList getEntries();
  @JS("getEntriesByName")
  external PerformanceEntryList getEntriesByName(String name, [String type]);
  @JS("getEntriesByType")
  external PerformanceEntryList getEntriesByType(String type);
  @JS("mark")
  external PerformanceMark mark(String markName, [PerformanceMarkOptions markOptions]);
  @JS("measure")
  external PerformanceMeasure measure(String measureName, [dynamic /* String|PerformanceMeasureOptions */ startOrMeasureOptions, String endMark]);
  @JS("now")
  external DOMHighResTimeStamp now();
  @JS("setResourceTimingBufferSize")
  external void setResourceTimingBufferSize(num maxSize);
  @JS("toJSON")
  external dynamic toJSON();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(Performance, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(Performance, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("Performance")
external AnonInterface$388 Performance;
@JS()
@anonymous
abstract class PerformanceEntry{}
extension PerformanceEntryExtension on PerformanceEntry {
  external DOMHighResTimeStamp get duration;
  external String get entryType;
  external String get name;
  external DOMHighResTimeStamp get startTime;
  @JS("toJSON")
  external dynamic toJSON();
}
@JS("PerformanceEntry")
external AnonInterface$389 PerformanceEntry;
@JS()
@anonymous
abstract class PerformanceEventTiming{}
extension PerformanceEventTimingExtension on PerformanceEventTiming {
  external bool get cancelable;
  external DOMHighResTimeStamp get processingEnd;
  external DOMHighResTimeStamp get processingStart;
  external Node? get target;
  @JS("toJSON")
  external dynamic toJSON();
}
@JS("PerformanceEventTiming")
external AnonInterface$390 PerformanceEventTiming;
@JS()
@anonymous
abstract class PerformanceMark{}
extension PerformanceMarkExtension on PerformanceMark {
  external dynamic get detail;
}
@JS("PerformanceMark")
external AnonInterface$391 PerformanceMark;
@JS()
@anonymous
abstract class PerformanceMeasure{}
extension PerformanceMeasureExtension on PerformanceMeasure {
  external dynamic get detail;
}
@JS("PerformanceMeasure")
external AnonInterface$392 PerformanceMeasure;
@JS()
@anonymous
abstract class PerformanceNavigation{}
extension PerformanceNavigationExtension on PerformanceNavigation {
  external num get redirectCount;
  external num get type;
  external num get TYPE_NAVIGATE;
  external num get TYPE_RELOAD;
  external num get TYPE_BACK_FORWARD;
  external num get TYPE_RESERVED;
  @JS("toJSON")
  external dynamic toJSON();
}
@JS("PerformanceNavigation")
external AnonInterface$393 PerformanceNavigation;
@JS()
@anonymous
abstract class PerformanceNavigationTiming{}
extension PerformanceNavigationTimingExtension on PerformanceNavigationTiming {
  external DOMHighResTimeStamp get domComplete;
  external DOMHighResTimeStamp get domContentLoadedEventEnd;
  external DOMHighResTimeStamp get domContentLoadedEventStart;
  external DOMHighResTimeStamp get domInteractive;
  external DOMHighResTimeStamp get loadEventEnd;
  external DOMHighResTimeStamp get loadEventStart;
  external num get redirectCount;
  external NavigationTimingType get type;
  external DOMHighResTimeStamp get unloadEventEnd;
  external DOMHighResTimeStamp get unloadEventStart;
  @JS("toJSON")
  external dynamic toJSON();
}
@JS("PerformanceNavigationTiming")
external AnonInterface$394 PerformanceNavigationTiming;
@JS()
@anonymous
abstract class PerformanceObserver{}
extension PerformanceObserverExtension on PerformanceObserver {
  @JS("disconnect")
  external void disconnect();
  @JS("observe")
  external void observe([PerformanceObserverInit options]);
  @JS("takeRecords")
  external PerformanceEntryList takeRecords();
}
@JS("PerformanceObserver")
external AnonInterface$395 PerformanceObserver;
@JS()
@anonymous
abstract class PerformanceObserverEntryList{}
extension PerformanceObserverEntryListExtension on PerformanceObserverEntryList {
  @JS("getEntries")
  external PerformanceEntryList getEntries();
  @JS("getEntriesByName")
  external PerformanceEntryList getEntriesByName(String name, [String type]);
  @JS("getEntriesByType")
  external PerformanceEntryList getEntriesByType(String type);
}
@JS("PerformanceObserverEntryList")
external AnonInterface$396 PerformanceObserverEntryList;
@JS()
@anonymous
abstract class PerformancePaintTiming{}
extension PerformancePaintTimingExtension on PerformancePaintTiming {
}
@JS("PerformancePaintTiming")
external AnonInterface$397 PerformancePaintTiming;
@JS()
@anonymous
abstract class PerformanceResourceTiming{}
extension PerformanceResourceTimingExtension on PerformanceResourceTiming {
  external DOMHighResTimeStamp get connectEnd;
  external DOMHighResTimeStamp get connectStart;
  external num get decodedBodySize;
  external DOMHighResTimeStamp get domainLookupEnd;
  external DOMHighResTimeStamp get domainLookupStart;
  external num get encodedBodySize;
  external DOMHighResTimeStamp get fetchStart;
  external String get initiatorType;
  external String get nextHopProtocol;
  external DOMHighResTimeStamp get redirectEnd;
  external DOMHighResTimeStamp get redirectStart;
  external DOMHighResTimeStamp get requestStart;
  external DOMHighResTimeStamp get responseEnd;
  external DOMHighResTimeStamp get responseStart;
  external num get responseStatus;
  external DOMHighResTimeStamp get secureConnectionStart;
  external ReadonlyArray<PerformanceServerTiming> get serverTiming;
  external num get transferSize;
  external DOMHighResTimeStamp get workerStart;
  @JS("toJSON")
  external dynamic toJSON();
}
@JS("PerformanceResourceTiming")
external AnonInterface$398 PerformanceResourceTiming;
@JS()
@anonymous
abstract class PerformanceServerTiming{}
extension PerformanceServerTimingExtension on PerformanceServerTiming {
  external String get description;
  external DOMHighResTimeStamp get duration;
  external String get name;
  @JS("toJSON")
  external dynamic toJSON();
}
@JS("PerformanceServerTiming")
external AnonInterface$399 PerformanceServerTiming;
@JS()
@anonymous
abstract class PerformanceTiming{}
extension PerformanceTimingExtension on PerformanceTiming {
  external num get connectEnd;
  external num get connectStart;
  external num get domComplete;
  external num get domContentLoadedEventEnd;
  external num get domContentLoadedEventStart;
  external num get domInteractive;
  external num get domLoading;
  external num get domainLookupEnd;
  external num get domainLookupStart;
  external num get fetchStart;
  external num get loadEventEnd;
  external num get loadEventStart;
  external num get navigationStart;
  external num get redirectEnd;
  external num get redirectStart;
  external num get requestStart;
  external num get responseEnd;
  external num get responseStart;
  external num get secureConnectionStart;
  external num get unloadEventEnd;
  external num get unloadEventStart;
  @JS("toJSON")
  external dynamic toJSON();
}
@JS("PerformanceTiming")
external AnonInterface$400 PerformanceTiming;
@JS()
@anonymous
abstract class PeriodicWave{}
extension PeriodicWaveExtension on PeriodicWave {
}
@JS("PeriodicWave")
external AnonInterface$401 PeriodicWave;
@JS()
@anonymous
abstract class PermissionStatusEventMap{}
extension PermissionStatusEventMapExtension on PermissionStatusEventMap {
  external Event get "change";
  external set "change"(Event value);
}
@JS()
@anonymous
abstract class PermissionStatus{}
extension PermissionStatusExtension on PermissionStatus {
  external String get name;
  external dynamic Function(PermissionStatus, Event)? get onchange;
  external set onchange(dynamic Function(PermissionStatus, Event)? value);
  external PermissionState get state;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(PermissionStatus, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(PermissionStatus, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("PermissionStatus")
external AnonInterface$402 PermissionStatus;
@JS()
@anonymous
abstract class Permissions{}
extension PermissionsExtension on Permissions {
  @JS("query")
  external Future<PermissionStatus> query(PermissionDescriptor permissionDesc);
}
@JS("Permissions")
external AnonInterface$403 Permissions;
@JS()
@anonymous
abstract class PictureInPictureEvent{}
extension PictureInPictureEventExtension on PictureInPictureEvent {
  external PictureInPictureWindow get pictureInPictureWindow;
}
@JS("PictureInPictureEvent")
external AnonInterface$404 PictureInPictureEvent;
@JS()
@anonymous
abstract class PictureInPictureWindowEventMap{}
extension PictureInPictureWindowEventMapExtension on PictureInPictureWindowEventMap {
  external Event get "resize";
  external set "resize"(Event value);
}
@JS()
@anonymous
abstract class PictureInPictureWindow{}
extension PictureInPictureWindowExtension on PictureInPictureWindow {
  external num get height;
  external dynamic Function(PictureInPictureWindow, Event)? get onresize;
  external set onresize(dynamic Function(PictureInPictureWindow, Event)? value);
  external num get width;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(PictureInPictureWindow, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(PictureInPictureWindow, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("PictureInPictureWindow")
external AnonInterface$405 PictureInPictureWindow;
@JS()
@anonymous
abstract class Plugin{}
extension PluginExtension on Plugin {
  external String get description;
  external String get filename;
  external num get length;
  external String get name;
  @JS("item")
  external MimeType? item(num index);
  @JS("namedItem")
  external MimeType? namedItem(String name);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("Plugin")
external AnonInterface$406 Plugin;
@JS()
@anonymous
abstract class PluginArray{}
extension PluginArrayExtension on PluginArray {
  external num get length;
  @JS("item")
  external Plugin? item(num index);
  @JS("namedItem")
  external Plugin? namedItem(String name);
  @JS("refresh")
  external void refresh();
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("PluginArray")
external AnonInterface$407 PluginArray;
@JS()
@anonymous
abstract class PointerEvent{}
extension PointerEventExtension on PointerEvent {
  external num get altitudeAngle;
  external num get azimuthAngle;
  external num get height;
  external bool get isPrimary;
  external num get pointerId;
  external String get pointerType;
  external num get pressure;
  external num get tangentialPressure;
  external num get tiltX;
  external num get tiltY;
  external num get twist;
  external num get width;
  @JS("getCoalescedEvents")
  external List<PointerEvent> getCoalescedEvents();
  @JS("getPredictedEvents")
  external List<PointerEvent> getPredictedEvents();
}
@JS("PointerEvent")
external AnonInterface$408 PointerEvent;
@JS()
@anonymous
abstract class PopStateEvent{}
extension PopStateEventExtension on PopStateEvent {
  external bool get hasUAVisualTransition;
  external dynamic get state;
}
@JS("PopStateEvent")
external AnonInterface$409 PopStateEvent;
@JS()
@anonymous
abstract class PopoverInvokerElement{}
extension PopoverInvokerElementExtension on PopoverInvokerElement {
  external String get popoverTargetAction;
  external set popoverTargetAction(String value);
  external Element? get popoverTargetElement;
  external set popoverTargetElement(Element? value);
}
@JS()
@anonymous
abstract class ProcessingInstruction{}
extension ProcessingInstructionExtension on ProcessingInstruction {
  external Document get ownerDocument;
  external String get target;
}
@JS("ProcessingInstruction")
external AnonInterface$410 ProcessingInstruction;
@JS()
@anonymous
abstract class ProgressEvent{}
extension ProgressEventExtension on ProgressEvent {
  external bool get lengthComputable;
  external num get loaded;
  external T? get target;
  external num get total;
}
@JS("ProgressEvent")
external AnonInterface$411 ProgressEvent;
@JS()
@anonymous
abstract class PromiseRejectionEvent{}
extension PromiseRejectionEventExtension on PromiseRejectionEvent {
  external Future<dynamic> get promise;
  external dynamic get reason;
}
@JS("PromiseRejectionEvent")
external AnonInterface$412 PromiseRejectionEvent;
@JS()
@anonymous
abstract class PublicKeyCredential{}
extension PublicKeyCredentialExtension on PublicKeyCredential {
  external String? get authenticatorAttachment;
  external ArrayBuffer get rawId;
  external AuthenticatorResponse get response;
  @JS("getClientExtensionResults")
  external AuthenticationExtensionsClientOutputs getClientExtensionResults();
  @JS("toJSON")
  external PublicKeyCredentialJSON toJSON();
}
@JS("PublicKeyCredential")
external AnonInterface$413 PublicKeyCredential;
@JS()
@anonymous
abstract class PushManager{}
extension PushManagerExtension on PushManager {
  @JS("getSubscription")
  external Future<PushSubscription?> getSubscription();
  @JS("permissionState")
  external Future<PermissionState> permissionState([PushSubscriptionOptionsInit options]);
  @JS("subscribe")
  external Future<PushSubscription> subscribe([PushSubscriptionOptionsInit options]);
}
@JS("PushManager")
external AnonInterface$414 PushManager;
@JS()
@anonymous
abstract class PushSubscription{}
extension PushSubscriptionExtension on PushSubscription {
  external String get endpoint;
  external EpochTimeStamp? get expirationTime;
  external PushSubscriptionOptions get options;
  @JS("getKey")
  external ArrayBuffer? getKey(PushEncryptionKeyName name);
  @JS("toJSON")
  external PushSubscriptionJSON toJSON();
  @JS("unsubscribe")
  external Future<bool> unsubscribe();
}
@JS("PushSubscription")
external AnonInterface$415 PushSubscription;
@JS()
@anonymous
abstract class PushSubscriptionOptions{}
extension PushSubscriptionOptionsExtension on PushSubscriptionOptions {
  external ArrayBuffer? get applicationServerKey;
  external bool get userVisibleOnly;
}
@JS("PushSubscriptionOptions")
external AnonInterface$416 PushSubscriptionOptions;
@JS()
@anonymous
abstract class RTCCertificate{}
extension RTCCertificateExtension on RTCCertificate {
  external EpochTimeStamp get expires;
  @JS("getFingerprints")
  external List<RTCDtlsFingerprint> getFingerprints();
}
@JS("RTCCertificate")
external AnonInterface$417 RTCCertificate;
@JS()
@anonymous
abstract class RTCDTMFSenderEventMap{}
extension RTCDTMFSenderEventMapExtension on RTCDTMFSenderEventMap {
  external RTCDTMFToneChangeEvent get "tonechange";
  external set "tonechange"(RTCDTMFToneChangeEvent value);
}
@JS()
@anonymous
abstract class RTCDTMFSender{}
extension RTCDTMFSenderExtension on RTCDTMFSender {
  external bool get canInsertDTMF;
  external dynamic Function(RTCDTMFSender, RTCDTMFToneChangeEvent)? get ontonechange;
  external set ontonechange(dynamic Function(RTCDTMFSender, RTCDTMFToneChangeEvent)? value);
  external String get toneBuffer;
  @JS("insertDTMF")
  external void insertDTMF(String tones, [num duration, num interToneGap]);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(RTCDTMFSender, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(RTCDTMFSender, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("RTCDTMFSender")
external AnonInterface$418 RTCDTMFSender;
@JS()
@anonymous
abstract class RTCDTMFToneChangeEvent{}
extension RTCDTMFToneChangeEventExtension on RTCDTMFToneChangeEvent {
  external String get tone;
}
@JS("RTCDTMFToneChangeEvent")
external AnonInterface$419 RTCDTMFToneChangeEvent;
@JS()
@anonymous
abstract class RTCDataChannelEventMap{}
extension RTCDataChannelEventMapExtension on RTCDataChannelEventMap {
  external Event get "bufferedamountlow";
  external set "bufferedamountlow"(Event value);
  external Event get "close";
  external set "close"(Event value);
  external Event get "closing";
  external set "closing"(Event value);
  external RTCErrorEvent get "error";
  external set "error"(RTCErrorEvent value);
  external MessageEvent get "message";
  external set "message"(MessageEvent value);
  external Event get "open";
  external set "open"(Event value);
}
@JS()
@anonymous
abstract class RTCDataChannel{}
extension RTCDataChannelExtension on RTCDataChannel {
  external BinaryType get binaryType;
  external set binaryType(BinaryType value);
  external num get bufferedAmount;
  external num get bufferedAmountLowThreshold;
  external set bufferedAmountLowThreshold(num value);
  external num? get id;
  external String get label;
  external num? get maxPacketLifeTime;
  external num? get maxRetransmits;
  external bool get negotiated;
  external dynamic Function(RTCDataChannel, Event)? get onbufferedamountlow;
  external set onbufferedamountlow(dynamic Function(RTCDataChannel, Event)? value);
  external dynamic Function(RTCDataChannel, Event)? get onclose;
  external set onclose(dynamic Function(RTCDataChannel, Event)? value);
  external dynamic Function(RTCDataChannel, Event)? get onclosing;
  external set onclosing(dynamic Function(RTCDataChannel, Event)? value);
  external dynamic Function(RTCDataChannel, RTCErrorEvent)? get onerror;
  external set onerror(dynamic Function(RTCDataChannel, RTCErrorEvent)? value);
  external dynamic Function(RTCDataChannel, MessageEvent)? get onmessage;
  external set onmessage(dynamic Function(RTCDataChannel, MessageEvent)? value);
  external dynamic Function(RTCDataChannel, Event)? get onopen;
  external set onopen(dynamic Function(RTCDataChannel, Event)? value);
  external bool get ordered;
  external String get protocol;
  external RTCDataChannelState get readyState;
  @JS("close")
  external void close();
  @JS("send")
  external void send(String data);
  @JS("send")
  external void send(Blob data);
  @JS("send")
  external void send(ArrayBuffer data);
  @JS("send")
  external void send(ArrayBufferView data);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(RTCDataChannel, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(RTCDataChannel, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("RTCDataChannel")
external AnonInterface$420 RTCDataChannel;
@JS()
@anonymous
abstract class RTCDataChannelEvent{}
extension RTCDataChannelEventExtension on RTCDataChannelEvent {
  external RTCDataChannel get channel;
}
@JS("RTCDataChannelEvent")
external AnonInterface$421 RTCDataChannelEvent;
@JS()
@anonymous
abstract class RTCDtlsTransportEventMap{}
extension RTCDtlsTransportEventMapExtension on RTCDtlsTransportEventMap {
  external RTCErrorEvent get "error";
  external set "error"(RTCErrorEvent value);
  external Event get "statechange";
  external set "statechange"(Event value);
}
@JS()
@anonymous
abstract class RTCDtlsTransport{}
extension RTCDtlsTransportExtension on RTCDtlsTransport {
  external RTCIceTransport get iceTransport;
  external dynamic Function(RTCDtlsTransport, RTCErrorEvent)? get onerror;
  external set onerror(dynamic Function(RTCDtlsTransport, RTCErrorEvent)? value);
  external dynamic Function(RTCDtlsTransport, Event)? get onstatechange;
  external set onstatechange(dynamic Function(RTCDtlsTransport, Event)? value);
  external RTCDtlsTransportState get state;
  @JS("getRemoteCertificates")
  external List<ArrayBuffer> getRemoteCertificates();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(RTCDtlsTransport, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(RTCDtlsTransport, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("RTCDtlsTransport")
external AnonInterface$422 RTCDtlsTransport;
@JS()
@anonymous
abstract class RTCEncodedAudioFrame{}
extension RTCEncodedAudioFrameExtension on RTCEncodedAudioFrame {
  external ArrayBuffer get data;
  external set data(ArrayBuffer value);
  external num get timestamp;
  @JS("getMetadata")
  external RTCEncodedAudioFrameMetadata getMetadata();
}
@JS("RTCEncodedAudioFrame")
external AnonInterface$423 RTCEncodedAudioFrame;
@JS()
@anonymous
abstract class RTCEncodedVideoFrame{}
extension RTCEncodedVideoFrameExtension on RTCEncodedVideoFrame {
  external ArrayBuffer get data;
  external set data(ArrayBuffer value);
  external num get timestamp;
  external RTCEncodedVideoFrameType get type;
  @JS("getMetadata")
  external RTCEncodedVideoFrameMetadata getMetadata();
}
@JS("RTCEncodedVideoFrame")
external AnonInterface$424 RTCEncodedVideoFrame;
@JS()
@anonymous
abstract class RTCError{}
extension RTCErrorExtension on RTCError {
  external RTCErrorDetailType get errorDetail;
  external num? get receivedAlert;
  external num? get sctpCauseCode;
  external num? get sdpLineNumber;
  external num? get sentAlert;
}
@JS("RTCError")
external AnonInterface$425 RTCError;
@JS()
@anonymous
abstract class RTCErrorEvent{}
extension RTCErrorEventExtension on RTCErrorEvent {
  external RTCError get error;
}
@JS("RTCErrorEvent")
external AnonInterface$426 RTCErrorEvent;
@JS()
@anonymous
abstract class RTCIceCandidate{}
extension RTCIceCandidateExtension on RTCIceCandidate {
  external String? get address;
  external String get candidate;
  external RTCIceComponent? get component;
  external String? get foundation;
  external num? get port;
  external num? get priority;
  external RTCIceProtocol? get protocol;
  external String? get relatedAddress;
  external num? get relatedPort;
  external num? get sdpMLineIndex;
  external String? get sdpMid;
  external RTCIceTcpCandidateType? get tcpType;
  external RTCIceCandidateType? get type;
  external String? get usernameFragment;
  @JS("toJSON")
  external RTCIceCandidateInit toJSON();
}
@JS("RTCIceCandidate")
external AnonInterface$427 RTCIceCandidate;
@JS()
@anonymous
abstract class RTCIceCandidatePair{}
extension RTCIceCandidatePairExtension on RTCIceCandidatePair {
  external RTCIceCandidate get local;
  external set local(RTCIceCandidate value);
  external RTCIceCandidate get remote;
  external set remote(RTCIceCandidate value);
}
@JS()
@anonymous
abstract class RTCIceTransportEventMap{}
extension RTCIceTransportEventMapExtension on RTCIceTransportEventMap {
  external Event get "gatheringstatechange";
  external set "gatheringstatechange"(Event value);
  external Event get "selectedcandidatepairchange";
  external set "selectedcandidatepairchange"(Event value);
  external Event get "statechange";
  external set "statechange"(Event value);
}
@JS()
@anonymous
abstract class RTCIceTransport{}
extension RTCIceTransportExtension on RTCIceTransport {
  external RTCIceGathererState get gatheringState;
  external dynamic Function(RTCIceTransport, Event)? get ongatheringstatechange;
  external set ongatheringstatechange(dynamic Function(RTCIceTransport, Event)? value);
  external dynamic Function(RTCIceTransport, Event)? get onselectedcandidatepairchange;
  external set onselectedcandidatepairchange(dynamic Function(RTCIceTransport, Event)? value);
  external dynamic Function(RTCIceTransport, Event)? get onstatechange;
  external set onstatechange(dynamic Function(RTCIceTransport, Event)? value);
  external RTCIceTransportState get state;
  @JS("getSelectedCandidatePair")
  external RTCIceCandidatePair? getSelectedCandidatePair();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(RTCIceTransport, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(RTCIceTransport, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("RTCIceTransport")
external AnonInterface$428 RTCIceTransport;
@JS()
@anonymous
abstract class RTCPeerConnectionEventMap{}
extension RTCPeerConnectionEventMapExtension on RTCPeerConnectionEventMap {
  external Event get "connectionstatechange";
  external set "connectionstatechange"(Event value);
  external RTCDataChannelEvent get "datachannel";
  external set "datachannel"(RTCDataChannelEvent value);
  external RTCPeerConnectionIceEvent get "icecandidate";
  external set "icecandidate"(RTCPeerConnectionIceEvent value);
  external RTCPeerConnectionIceErrorEvent get "icecandidateerror";
  external set "icecandidateerror"(RTCPeerConnectionIceErrorEvent value);
  external Event get "iceconnectionstatechange";
  external set "iceconnectionstatechange"(Event value);
  external Event get "icegatheringstatechange";
  external set "icegatheringstatechange"(Event value);
  external Event get "negotiationneeded";
  external set "negotiationneeded"(Event value);
  external Event get "signalingstatechange";
  external set "signalingstatechange"(Event value);
  external RTCTrackEvent get "track";
  external set "track"(RTCTrackEvent value);
}
@JS()
@anonymous
abstract class RTCPeerConnection{}
extension RTCPeerConnectionExtension on RTCPeerConnection {
  external bool? get canTrickleIceCandidates;
  external RTCPeerConnectionState get connectionState;
  external RTCSessionDescription? get currentLocalDescription;
  external RTCSessionDescription? get currentRemoteDescription;
  external RTCIceConnectionState get iceConnectionState;
  external RTCIceGatheringState get iceGatheringState;
  external RTCSessionDescription? get localDescription;
  external dynamic Function(RTCPeerConnection, Event)? get onconnectionstatechange;
  external set onconnectionstatechange(dynamic Function(RTCPeerConnection, Event)? value);
  external dynamic Function(RTCPeerConnection, RTCDataChannelEvent)? get ondatachannel;
  external set ondatachannel(dynamic Function(RTCPeerConnection, RTCDataChannelEvent)? value);
  external dynamic Function(RTCPeerConnection, RTCPeerConnectionIceEvent)? get onicecandidate;
  external set onicecandidate(dynamic Function(RTCPeerConnection, RTCPeerConnectionIceEvent)? value);
  external dynamic Function(RTCPeerConnection, RTCPeerConnectionIceErrorEvent)? get onicecandidateerror;
  external set onicecandidateerror(dynamic Function(RTCPeerConnection, RTCPeerConnectionIceErrorEvent)? value);
  external dynamic Function(RTCPeerConnection, Event)? get oniceconnectionstatechange;
  external set oniceconnectionstatechange(dynamic Function(RTCPeerConnection, Event)? value);
  external dynamic Function(RTCPeerConnection, Event)? get onicegatheringstatechange;
  external set onicegatheringstatechange(dynamic Function(RTCPeerConnection, Event)? value);
  external dynamic Function(RTCPeerConnection, Event)? get onnegotiationneeded;
  external set onnegotiationneeded(dynamic Function(RTCPeerConnection, Event)? value);
  external dynamic Function(RTCPeerConnection, Event)? get onsignalingstatechange;
  external set onsignalingstatechange(dynamic Function(RTCPeerConnection, Event)? value);
  external dynamic Function(RTCPeerConnection, RTCTrackEvent)? get ontrack;
  external set ontrack(dynamic Function(RTCPeerConnection, RTCTrackEvent)? value);
  external RTCSessionDescription? get pendingLocalDescription;
  external RTCSessionDescription? get pendingRemoteDescription;
  external RTCSessionDescription? get remoteDescription;
  external RTCSctpTransport? get sctp;
  external RTCSignalingState get signalingState;
  @JS("addIceCandidate")
  external Future<void> addIceCandidate([RTCIceCandidateInit? candidate]);
  @JS("addIceCandidate")
  external Future<void> addIceCandidate(RTCIceCandidateInit? candidate, VoidFunction successCallback, RTCPeerConnectionErrorCallback failureCallback);
  @JS("addTrack")
  external RTCRtpSender addTrack(MediaStreamTrack track, [/* rest */ List<MediaStream> streams]);
  @JS("addTransceiver")
  external RTCRtpTransceiver addTransceiver(dynamic /* MediaStreamTrack|String */ trackOrKind, [RTCRtpTransceiverInit init]);
  @JS("close")
  external void close();
  @JS("createAnswer")
  external Future<RTCSessionDescriptionInit> createAnswer([RTCAnswerOptions options]);
  @JS("createAnswer")
  external Future<void> createAnswer(RTCSessionDescriptionCallback successCallback, RTCPeerConnectionErrorCallback failureCallback);
  @JS("createDataChannel")
  external RTCDataChannel createDataChannel(String label, [RTCDataChannelInit dataChannelDict]);
  @JS("createOffer")
  external Future<RTCSessionDescriptionInit> createOffer([RTCOfferOptions options]);
  @JS("createOffer")
  external Future<void> createOffer(RTCSessionDescriptionCallback successCallback, RTCPeerConnectionErrorCallback failureCallback, [RTCOfferOptions options]);
  @JS("getConfiguration")
  external RTCConfiguration getConfiguration();
  @JS("getReceivers")
  external List<RTCRtpReceiver> getReceivers();
  @JS("getSenders")
  external List<RTCRtpSender> getSenders();
  @JS("getStats")
  external Future<RTCStatsReport> getStats([MediaStreamTrack? selector]);
  @JS("getTransceivers")
  external List<RTCRtpTransceiver> getTransceivers();
  @JS("removeTrack")
  external void removeTrack(RTCRtpSender sender);
  @JS("restartIce")
  external void restartIce();
  @JS("setConfiguration")
  external void setConfiguration([RTCConfiguration configuration]);
  @JS("setLocalDescription")
  external Future<void> setLocalDescription([RTCLocalSessionDescriptionInit description]);
  @JS("setLocalDescription")
  external Future<void> setLocalDescription(RTCLocalSessionDescriptionInit description, VoidFunction successCallback, RTCPeerConnectionErrorCallback failureCallback);
  @JS("setRemoteDescription")
  external Future<void> setRemoteDescription(RTCSessionDescriptionInit description);
  @JS("setRemoteDescription")
  external Future<void> setRemoteDescription(RTCSessionDescriptionInit description, VoidFunction successCallback, RTCPeerConnectionErrorCallback failureCallback);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(RTCPeerConnection, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(RTCPeerConnection, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("RTCPeerConnection")
external AnonInterface$429 RTCPeerConnection;
@JS()
@anonymous
abstract class RTCPeerConnectionIceErrorEvent{}
extension RTCPeerConnectionIceErrorEventExtension on RTCPeerConnectionIceErrorEvent {
  external String? get address;
  external num get errorCode;
  external String get errorText;
  external num? get port;
  external String get url;
}
@JS("RTCPeerConnectionIceErrorEvent")
external AnonInterface$430 RTCPeerConnectionIceErrorEvent;
@JS()
@anonymous
abstract class RTCPeerConnectionIceEvent{}
extension RTCPeerConnectionIceEventExtension on RTCPeerConnectionIceEvent {
  external RTCIceCandidate? get candidate;
}
@JS("RTCPeerConnectionIceEvent")
external AnonInterface$431 RTCPeerConnectionIceEvent;
@JS()
@anonymous
abstract class RTCRtpReceiver{}
extension RTCRtpReceiverExtension on RTCRtpReceiver {
  external DOMHighResTimeStamp? get jitterBufferTarget;
  external set jitterBufferTarget(DOMHighResTimeStamp? value);
  external MediaStreamTrack get track;
  external RTCRtpTransform? get transform;
  external set transform(RTCRtpTransform? value);
  external RTCDtlsTransport? get transport;
  @JS("getContributingSources")
  external List<RTCRtpContributingSource> getContributingSources();
  @JS("getParameters")
  external RTCRtpReceiveParameters getParameters();
  @JS("getStats")
  external Future<RTCStatsReport> getStats();
  @JS("getSynchronizationSources")
  external List<RTCRtpSynchronizationSource> getSynchronizationSources();
}
@JS("RTCRtpReceiver")
external AnonInterface$432 RTCRtpReceiver;
@JS()
@anonymous
abstract class RTCRtpScriptTransform{}
extension RTCRtpScriptTransformExtension on RTCRtpScriptTransform {
}
@JS("RTCRtpScriptTransform")
external AnonInterface$433 RTCRtpScriptTransform;
@JS()
@anonymous
abstract class RTCRtpSender{}
extension RTCRtpSenderExtension on RTCRtpSender {
  external RTCDTMFSender? get dtmf;
  external MediaStreamTrack? get track;
  external RTCRtpTransform? get transform;
  external set transform(RTCRtpTransform? value);
  external RTCDtlsTransport? get transport;
  @JS("getParameters")
  external RTCRtpSendParameters getParameters();
  @JS("getStats")
  external Future<RTCStatsReport> getStats();
  @JS("replaceTrack")
  external Future<void> replaceTrack(MediaStreamTrack? withTrack);
  @JS("setParameters")
  external Future<void> setParameters(RTCRtpSendParameters parameters, [RTCSetParameterOptions setParameterOptions]);
  @JS("setStreams")
  external void setStreams([/* rest */ List<MediaStream> streams]);
}
@JS("RTCRtpSender")
external AnonInterface$434 RTCRtpSender;
@JS()
@anonymous
abstract class RTCRtpTransceiver{}
extension RTCRtpTransceiverExtension on RTCRtpTransceiver {
  external RTCRtpTransceiverDirection? get currentDirection;
  external RTCRtpTransceiverDirection get direction;
  external set direction(RTCRtpTransceiverDirection value);
  external String? get mid;
  external RTCRtpReceiver get receiver;
  external RTCRtpSender get sender;
  @JS("setCodecPreferences")
  external void setCodecPreferences(List<RTCRtpCodec> codecs);
  @JS("stop")
  external void stop();
}
@JS("RTCRtpTransceiver")
external AnonInterface$435 RTCRtpTransceiver;
@JS()
@anonymous
abstract class RTCSctpTransportEventMap{}
extension RTCSctpTransportEventMapExtension on RTCSctpTransportEventMap {
  external Event get "statechange";
  external set "statechange"(Event value);
}
@JS()
@anonymous
abstract class RTCSctpTransport{}
extension RTCSctpTransportExtension on RTCSctpTransport {
  external num? get maxChannels;
  external num get maxMessageSize;
  external dynamic Function(RTCSctpTransport, Event)? get onstatechange;
  external set onstatechange(dynamic Function(RTCSctpTransport, Event)? value);
  external RTCSctpTransportState get state;
  external RTCDtlsTransport get transport;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(RTCSctpTransport, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(RTCSctpTransport, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("RTCSctpTransport")
external AnonInterface$436 RTCSctpTransport;
@JS()
@anonymous
abstract class RTCSessionDescription{}
extension RTCSessionDescriptionExtension on RTCSessionDescription {
  external String get sdp;
  external RTCSdpType get type;
  @JS("toJSON")
  external RTCSessionDescriptionInit toJSON();
}
@JS("RTCSessionDescription")
external AnonInterface$437 RTCSessionDescription;
@JS()
@anonymous
abstract class RTCStatsReport{}
extension RTCStatsReportExtension on RTCStatsReport {
  @JS("forEach")
  external void forEach(void Function(dynamic, String, RTCStatsReport) callbackfn, [dynamic thisArg]);
}
@JS("RTCStatsReport")
external AnonInterface$438 RTCStatsReport;
@JS()
@anonymous
abstract class RTCTrackEvent{}
extension RTCTrackEventExtension on RTCTrackEvent {
  external RTCRtpReceiver get receiver;
  external ReadonlyArray<MediaStream> get streams;
  external MediaStreamTrack get track;
  external RTCRtpTransceiver get transceiver;
}
@JS("RTCTrackEvent")
external AnonInterface$439 RTCTrackEvent;
@JS()
@anonymous
abstract class RadioNodeList{}
extension RadioNodeListExtension on RadioNodeList {
  external String get value;
  external set value(String value);
}
@JS("RadioNodeList")
external AnonInterface$440 RadioNodeList;
@JS()
@anonymous
abstract class Range{}
extension RangeExtension on Range {
  external Node get commonAncestorContainer;
  external num get START_TO_START;
  external num get START_TO_END;
  external num get END_TO_END;
  external num get END_TO_START;
  @JS("cloneContents")
  external DocumentFragment cloneContents();
  @JS("cloneRange")
  external Range cloneRange();
  @JS("collapse")
  external void collapse([bool toStart]);
  @JS("compareBoundaryPoints")
  external num compareBoundaryPoints(num how, Range sourceRange);
  @JS("comparePoint")
  external num comparePoint(Node node, num offset);
  @JS("createContextualFragment")
  external DocumentFragment createContextualFragment(String string);
  @JS("deleteContents")
  external void deleteContents();
  @JS("detach")
  external void detach();
  @JS("extractContents")
  external DocumentFragment extractContents();
  @JS("getBoundingClientRect")
  external DOMRect getBoundingClientRect();
  @JS("getClientRects")
  external DOMRectList getClientRects();
  @JS("insertNode")
  external void insertNode(Node node);
  @JS("intersectsNode")
  external bool intersectsNode(Node node);
  @JS("isPointInRange")
  external bool isPointInRange(Node node, num offset);
  @JS("selectNode")
  external void selectNode(Node node);
  @JS("selectNodeContents")
  external void selectNodeContents(Node node);
  @JS("setEnd")
  external void setEnd(Node node, num offset);
  @JS("setEndAfter")
  external void setEndAfter(Node node);
  @JS("setEndBefore")
  external void setEndBefore(Node node);
  @JS("setStart")
  external void setStart(Node node, num offset);
  @JS("setStartAfter")
  external void setStartAfter(Node node);
  @JS("setStartBefore")
  external void setStartBefore(Node node);
  @JS("surroundContents")
  external void surroundContents(Node newParent);
  @JS("toString")
  external String toString();
}
@JS("Range")
external AnonInterface$441 Range;
@JS()
@anonymous
abstract class ReadableByteStreamController{}
extension ReadableByteStreamControllerExtension on ReadableByteStreamController {
  external ReadableStreamBYOBRequest? get byobRequest;
  external num? get desiredSize;
  @JS("close")
  external void close();
  @JS("enqueue")
  external void enqueue(ArrayBufferView chunk);
  @JS("error")
  external void error([dynamic e]);
}
@JS("ReadableByteStreamController")
external AnonInterface$442 ReadableByteStreamController;
@JS()
@anonymous
abstract class ReadableStream{}
extension ReadableStreamExtension on ReadableStream {
  external bool get locked;
  @JS("cancel")
  external Future<void> cancel([dynamic reason]);
  @JS("getReader")
  external ReadableStreamBYOBReader getReader(AnonInterface$443 options);
  @JS("getReader")
  external ReadableStreamDefaultReader<R> getReader();
  @JS("getReader")
  external ReadableStreamReader<R> getReader([ReadableStreamGetReaderOptions options]);
  @JS("pipeThrough")
  external ReadableStream<T> pipeThrough(ReadableWritablePair<T, R> transform, [StreamPipeOptions options]);
  @JS("pipeTo")
  external Future<void> pipeTo(WritableStream<R> destination, [StreamPipeOptions options]);
  @JS("tee")
  external List<ReadableStream<R>> tee();
}
@JS("ReadableStream")
external AnonInterface$673 ReadableStream;
@JS()
@anonymous
abstract class ReadableStreamBYOBReader{}
extension ReadableStreamBYOBReaderExtension on ReadableStreamBYOBReader {
  @JS("read")
  external Future<ReadableStreamReadResult<T>> read(T view);
  @JS("releaseLock")
  external void releaseLock();
}
@JS("ReadableStreamBYOBReader")
external AnonInterface$446 ReadableStreamBYOBReader;
@JS()
@anonymous
abstract class ReadableStreamBYOBRequest{}
extension ReadableStreamBYOBRequestExtension on ReadableStreamBYOBRequest {
  external ArrayBufferView? get view;
  @JS("respond")
  external void respond(num bytesWritten);
  @JS("respondWithNewView")
  external void respondWithNewView(ArrayBufferView view);
}
@JS("ReadableStreamBYOBRequest")
external AnonInterface$447 ReadableStreamBYOBRequest;
@JS()
@anonymous
abstract class ReadableStreamDefaultController{}
extension ReadableStreamDefaultControllerExtension on ReadableStreamDefaultController {
  external num? get desiredSize;
  @JS("close")
  external void close();
  @JS("enqueue")
  external void enqueue([R chunk]);
  @JS("error")
  external void error([dynamic e]);
}
@JS("ReadableStreamDefaultController")
external AnonInterface$448 ReadableStreamDefaultController;
@JS()
@anonymous
abstract class ReadableStreamDefaultReader{}
extension ReadableStreamDefaultReaderExtension on ReadableStreamDefaultReader {
  @JS("read")
  external Future<ReadableStreamReadResult<R>> read();
  @JS("releaseLock")
  external void releaseLock();
}
@JS("ReadableStreamDefaultReader")
external AnonInterface$449 ReadableStreamDefaultReader;
@JS()
@anonymous
abstract class ReadableStreamGenericReader{}
extension ReadableStreamGenericReaderExtension on ReadableStreamGenericReader {
  external Future<void> get closed;
  @JS("cancel")
  external Future<void> cancel([dynamic reason]);
}
@JS()
@anonymous
abstract class RemotePlaybackEventMap{}
extension RemotePlaybackEventMapExtension on RemotePlaybackEventMap {
  external Event get "connect";
  external set "connect"(Event value);
  external Event get "connecting";
  external set "connecting"(Event value);
  external Event get "disconnect";
  external set "disconnect"(Event value);
}
@JS()
@anonymous
abstract class RemotePlayback{}
extension RemotePlaybackExtension on RemotePlayback {
  external dynamic Function(RemotePlayback, Event)? get onconnect;
  external set onconnect(dynamic Function(RemotePlayback, Event)? value);
  external dynamic Function(RemotePlayback, Event)? get onconnecting;
  external set onconnecting(dynamic Function(RemotePlayback, Event)? value);
  external dynamic Function(RemotePlayback, Event)? get ondisconnect;
  external set ondisconnect(dynamic Function(RemotePlayback, Event)? value);
  external RemotePlaybackState get state;
  @JS("cancelWatchAvailability")
  external Future<void> cancelWatchAvailability([num id]);
  @JS("prompt")
  external Future<void> prompt();
  @JS("watchAvailability")
  external Future<num> watchAvailability(RemotePlaybackAvailabilityCallback callback);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(RemotePlayback, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(RemotePlayback, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("RemotePlayback")
external AnonInterface$450 RemotePlayback;
@JS()
@anonymous
abstract class Report{}
extension ReportExtension on Report {
  external ReportBody? get body;
  external String get type;
  external String get url;
  @JS("toJSON")
  external dynamic toJSON();
}
@JS("Report")
external AnonInterface$451 Report;
@JS()
@anonymous
abstract class ReportBody{}
extension ReportBodyExtension on ReportBody {
  @JS("toJSON")
  external dynamic toJSON();
}
@JS("ReportBody")
external AnonInterface$452 ReportBody;
@JS()
@anonymous
abstract class ReportingObserver{}
extension ReportingObserverExtension on ReportingObserver {
  @JS("disconnect")
  external void disconnect();
  @JS("observe")
  external void observe();
  @JS("takeRecords")
  external ReportList takeRecords();
}
@JS("ReportingObserver")
external AnonInterface$453 ReportingObserver;
@JS()
@anonymous
abstract class Request{}
extension RequestExtension on Request {
  external RequestCache get cache;
  external RequestCredentials get credentials;
  external RequestDestination get destination;
  external Headers get headers;
  external String get integrity;
  external bool get keepalive;
  external String get method;
  external RequestMode get mode;
  external RequestRedirect get redirect;
  external String get referrer;
  external ReferrerPolicy get referrerPolicy;
  external AbortSignal get signal;
  external String get url;
  @JS("clone")
  external Request clone();
}
@JS("Request")
external AnonInterface$454 Request;
@JS()
@anonymous
abstract class ResizeObserver{}
extension ResizeObserverExtension on ResizeObserver {
  @JS("disconnect")
  external void disconnect();
  @JS("observe")
  external void observe(Element target, [ResizeObserverOptions options]);
  @JS("unobserve")
  external void unobserve(Element target);
}
@JS("ResizeObserver")
external AnonInterface$455 ResizeObserver;
@JS()
@anonymous
abstract class ResizeObserverEntry{}
extension ResizeObserverEntryExtension on ResizeObserverEntry {
  external ReadonlyArray<ResizeObserverSize> get borderBoxSize;
  external ReadonlyArray<ResizeObserverSize> get contentBoxSize;
  external DOMRectReadOnly get contentRect;
  external ReadonlyArray<ResizeObserverSize> get devicePixelContentBoxSize;
  external Element get target;
}
@JS("ResizeObserverEntry")
external AnonInterface$456 ResizeObserverEntry;
@JS()
@anonymous
abstract class ResizeObserverSize{}
extension ResizeObserverSizeExtension on ResizeObserverSize {
  external num get blockSize;
  external num get inlineSize;
}
@JS("ResizeObserverSize")
external AnonInterface$457 ResizeObserverSize;
@JS()
@anonymous
abstract class Response{}
extension ResponseExtension on Response {
  external Headers get headers;
  external bool get ok;
  external bool get redirected;
  external num get status;
  external String get statusText;
  external ResponseType get type;
  external String get url;
  @JS("clone")
  external Response clone();
}
@JS("Response")
external AnonInterface$458 Response;
@JS()
@anonymous
abstract class SVGAElement{}
extension SVGAElementExtension on SVGAElement {
  external String get rel;
  external set rel(String value);
  external SVGAnimatedString get target;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGAElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGAElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
  external DOMTokenList get relList;
  external set relList(String value);
}
@JS("SVGAElement")
external AnonInterface$459 SVGAElement;
@JS()
@anonymous
abstract class SVGAngle{}
extension SVGAngleExtension on SVGAngle {
  external num get unitType;
  external num get value;
  external set value(num value);
  external String get valueAsString;
  external set valueAsString(String value);
  external num get valueInSpecifiedUnits;
  external set valueInSpecifiedUnits(num value);
  external num get SVG_ANGLETYPE_UNKNOWN;
  external num get SVG_ANGLETYPE_UNSPECIFIED;
  external num get SVG_ANGLETYPE_DEG;
  external num get SVG_ANGLETYPE_RAD;
  external num get SVG_ANGLETYPE_GRAD;
  @JS("convertToSpecifiedUnits")
  external void convertToSpecifiedUnits(num unitType);
  @JS("newValueSpecifiedUnits")
  external void newValueSpecifiedUnits(num unitType, num valueInSpecifiedUnits);
}
@JS("SVGAngle")
external AnonInterface$460 SVGAngle;
@JS()
@anonymous
abstract class SVGAnimateElement{}
extension SVGAnimateElementExtension on SVGAnimateElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGAnimateElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGAnimateElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGAnimateElement")
external AnonInterface$461 SVGAnimateElement;
@JS()
@anonymous
abstract class SVGAnimateMotionElement{}
extension SVGAnimateMotionElementExtension on SVGAnimateMotionElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGAnimateMotionElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGAnimateMotionElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGAnimateMotionElement")
external AnonInterface$462 SVGAnimateMotionElement;
@JS()
@anonymous
abstract class SVGAnimateTransformElement{}
extension SVGAnimateTransformElementExtension on SVGAnimateTransformElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGAnimateTransformElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGAnimateTransformElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGAnimateTransformElement")
external AnonInterface$463 SVGAnimateTransformElement;
@JS()
@anonymous
abstract class SVGAnimatedAngle{}
extension SVGAnimatedAngleExtension on SVGAnimatedAngle {
  external SVGAngle get animVal;
  external SVGAngle get baseVal;
}
@JS("SVGAnimatedAngle")
external AnonInterface$464 SVGAnimatedAngle;
@JS()
@anonymous
abstract class SVGAnimatedBoolean{}
extension SVGAnimatedBooleanExtension on SVGAnimatedBoolean {
  external bool get animVal;
  external bool get baseVal;
  external set baseVal(bool value);
}
@JS("SVGAnimatedBoolean")
external AnonInterface$465 SVGAnimatedBoolean;
@JS()
@anonymous
abstract class SVGAnimatedEnumeration{}
extension SVGAnimatedEnumerationExtension on SVGAnimatedEnumeration {
  external num get animVal;
  external num get baseVal;
  external set baseVal(num value);
}
@JS("SVGAnimatedEnumeration")
external AnonInterface$466 SVGAnimatedEnumeration;
@JS()
@anonymous
abstract class SVGAnimatedInteger{}
extension SVGAnimatedIntegerExtension on SVGAnimatedInteger {
  external num get animVal;
  external num get baseVal;
  external set baseVal(num value);
}
@JS("SVGAnimatedInteger")
external AnonInterface$467 SVGAnimatedInteger;
@JS()
@anonymous
abstract class SVGAnimatedLength{}
extension SVGAnimatedLengthExtension on SVGAnimatedLength {
  external SVGLength get animVal;
  external SVGLength get baseVal;
}
@JS("SVGAnimatedLength")
external AnonInterface$468 SVGAnimatedLength;
@JS()
@anonymous
abstract class SVGAnimatedLengthList{}
extension SVGAnimatedLengthListExtension on SVGAnimatedLengthList {
  external SVGLengthList get animVal;
  external SVGLengthList get baseVal;
}
@JS("SVGAnimatedLengthList")
external AnonInterface$469 SVGAnimatedLengthList;
@JS()
@anonymous
abstract class SVGAnimatedNumber{}
extension SVGAnimatedNumberExtension on SVGAnimatedNumber {
  external num get animVal;
  external num get baseVal;
  external set baseVal(num value);
}
@JS("SVGAnimatedNumber")
external AnonInterface$470 SVGAnimatedNumber;
@JS()
@anonymous
abstract class SVGAnimatedNumberList{}
extension SVGAnimatedNumberListExtension on SVGAnimatedNumberList {
  external SVGNumberList get animVal;
  external SVGNumberList get baseVal;
}
@JS("SVGAnimatedNumberList")
external AnonInterface$471 SVGAnimatedNumberList;
@JS()
@anonymous
abstract class SVGAnimatedPoints{}
extension SVGAnimatedPointsExtension on SVGAnimatedPoints {
  external SVGPointList get animatedPoints;
  external SVGPointList get points;
}
@JS()
@anonymous
abstract class SVGAnimatedPreserveAspectRatio{}
extension SVGAnimatedPreserveAspectRatioExtension on SVGAnimatedPreserveAspectRatio {
  external SVGPreserveAspectRatio get animVal;
  external SVGPreserveAspectRatio get baseVal;
}
@JS("SVGAnimatedPreserveAspectRatio")
external AnonInterface$472 SVGAnimatedPreserveAspectRatio;
@JS()
@anonymous
abstract class SVGAnimatedRect{}
extension SVGAnimatedRectExtension on SVGAnimatedRect {
  external DOMRectReadOnly get animVal;
  external DOMRect get baseVal;
}
@JS("SVGAnimatedRect")
external AnonInterface$473 SVGAnimatedRect;
@JS()
@anonymous
abstract class SVGAnimatedString{}
extension SVGAnimatedStringExtension on SVGAnimatedString {
  external String get animVal;
  external String get baseVal;
  external set baseVal(String value);
}
@JS("SVGAnimatedString")
external AnonInterface$474 SVGAnimatedString;
@JS()
@anonymous
abstract class SVGAnimatedTransformList{}
extension SVGAnimatedTransformListExtension on SVGAnimatedTransformList {
  external SVGTransformList get animVal;
  external SVGTransformList get baseVal;
}
@JS("SVGAnimatedTransformList")
external AnonInterface$475 SVGAnimatedTransformList;
@JS()
@anonymous
abstract class SVGAnimationElement{}
extension SVGAnimationElementExtension on SVGAnimationElement {
  external SVGElement? get targetElement;
  @JS("beginElement")
  external void beginElement();
  @JS("beginElementAt")
  external void beginElementAt(num offset);
  @JS("endElement")
  external void endElement();
  @JS("endElementAt")
  external void endElementAt(num offset);
  @JS("getCurrentTime")
  external num getCurrentTime();
  @JS("getSimpleDuration")
  external num getSimpleDuration();
  @JS("getStartTime")
  external num getStartTime();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGAnimationElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGAnimationElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGAnimationElement")
external AnonInterface$476 SVGAnimationElement;
@JS()
@anonymous
abstract class SVGCircleElement{}
extension SVGCircleElementExtension on SVGCircleElement {
  external SVGAnimatedLength get cx;
  external SVGAnimatedLength get cy;
  external SVGAnimatedLength get r;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGCircleElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGCircleElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGCircleElement")
external AnonInterface$477 SVGCircleElement;
@JS()
@anonymous
abstract class SVGClipPathElement{}
extension SVGClipPathElementExtension on SVGClipPathElement {
  external SVGAnimatedEnumeration get clipPathUnits;
  external SVGAnimatedTransformList get transform;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGClipPathElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGClipPathElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGClipPathElement")
external AnonInterface$478 SVGClipPathElement;
@JS()
@anonymous
abstract class SVGComponentTransferFunctionElement{}
extension SVGComponentTransferFunctionElementExtension on SVGComponentTransferFunctionElement {
  external SVGAnimatedNumber get amplitude;
  external SVGAnimatedNumber get exponent;
  external SVGAnimatedNumber get intercept;
  external SVGAnimatedNumber get offset;
  external SVGAnimatedNumber get slope;
  external SVGAnimatedNumberList get tableValues;
  external SVGAnimatedEnumeration get type;
  external num get SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN;
  external num get SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY;
  external num get SVG_FECOMPONENTTRANSFER_TYPE_TABLE;
  external num get SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE;
  external num get SVG_FECOMPONENTTRANSFER_TYPE_LINEAR;
  external num get SVG_FECOMPONENTTRANSFER_TYPE_GAMMA;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGComponentTransferFunctionElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGComponentTransferFunctionElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGComponentTransferFunctionElement")
external AnonInterface$479 SVGComponentTransferFunctionElement;
@JS()
@anonymous
abstract class SVGDefsElement{}
extension SVGDefsElementExtension on SVGDefsElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGDefsElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGDefsElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGDefsElement")
external AnonInterface$480 SVGDefsElement;
@JS()
@anonymous
abstract class SVGDescElement{}
extension SVGDescElementExtension on SVGDescElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGDescElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGDescElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGDescElement")
external AnonInterface$481 SVGDescElement;
@JS()
@anonymous
abstract class SVGElementEventMap{}
extension SVGElementEventMapExtension on SVGElementEventMap {
}
@JS()
@anonymous
abstract class SVGElement{}
extension SVGElementExtension on SVGElement {
  external dynamic get className;
  external SVGSVGElement? get ownerSVGElement;
  external SVGElement? get viewportElement;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGElement")
external AnonInterface$482 SVGElement;
@JS()
@anonymous
abstract class SVGEllipseElement{}
extension SVGEllipseElementExtension on SVGEllipseElement {
  external SVGAnimatedLength get cx;
  external SVGAnimatedLength get cy;
  external SVGAnimatedLength get rx;
  external SVGAnimatedLength get ry;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGEllipseElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGEllipseElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGEllipseElement")
external AnonInterface$483 SVGEllipseElement;
@JS()
@anonymous
abstract class SVGFEBlendElement{}
extension SVGFEBlendElementExtension on SVGFEBlendElement {
  external SVGAnimatedString get in1;
  external SVGAnimatedString get in2;
  external SVGAnimatedEnumeration get mode;
  external num get SVG_FEBLEND_MODE_UNKNOWN;
  external num get SVG_FEBLEND_MODE_NORMAL;
  external num get SVG_FEBLEND_MODE_MULTIPLY;
  external num get SVG_FEBLEND_MODE_SCREEN;
  external num get SVG_FEBLEND_MODE_DARKEN;
  external num get SVG_FEBLEND_MODE_LIGHTEN;
  external num get SVG_FEBLEND_MODE_OVERLAY;
  external num get SVG_FEBLEND_MODE_COLOR_DODGE;
  external num get SVG_FEBLEND_MODE_COLOR_BURN;
  external num get SVG_FEBLEND_MODE_HARD_LIGHT;
  external num get SVG_FEBLEND_MODE_SOFT_LIGHT;
  external num get SVG_FEBLEND_MODE_DIFFERENCE;
  external num get SVG_FEBLEND_MODE_EXCLUSION;
  external num get SVG_FEBLEND_MODE_HUE;
  external num get SVG_FEBLEND_MODE_SATURATION;
  external num get SVG_FEBLEND_MODE_COLOR;
  external num get SVG_FEBLEND_MODE_LUMINOSITY;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFEBlendElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFEBlendElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFEBlendElement")
external AnonInterface$484 SVGFEBlendElement;
@JS()
@anonymous
abstract class SVGFEColorMatrixElement{}
extension SVGFEColorMatrixElementExtension on SVGFEColorMatrixElement {
  external SVGAnimatedString get in1;
  external SVGAnimatedEnumeration get type;
  external SVGAnimatedNumberList get values;
  external num get SVG_FECOLORMATRIX_TYPE_UNKNOWN;
  external num get SVG_FECOLORMATRIX_TYPE_MATRIX;
  external num get SVG_FECOLORMATRIX_TYPE_SATURATE;
  external num get SVG_FECOLORMATRIX_TYPE_HUEROTATE;
  external num get SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFEColorMatrixElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFEColorMatrixElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFEColorMatrixElement")
external AnonInterface$485 SVGFEColorMatrixElement;
@JS()
@anonymous
abstract class SVGFEComponentTransferElement{}
extension SVGFEComponentTransferElementExtension on SVGFEComponentTransferElement {
  external SVGAnimatedString get in1;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFEComponentTransferElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFEComponentTransferElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFEComponentTransferElement")
external AnonInterface$486 SVGFEComponentTransferElement;
@JS()
@anonymous
abstract class SVGFECompositeElement{}
extension SVGFECompositeElementExtension on SVGFECompositeElement {
  external SVGAnimatedString get in1;
  external SVGAnimatedString get in2;
  external SVGAnimatedNumber get k1;
  external SVGAnimatedNumber get k2;
  external SVGAnimatedNumber get k3;
  external SVGAnimatedNumber get k4;
  external SVGAnimatedEnumeration get operator;
  external num get SVG_FECOMPOSITE_OPERATOR_UNKNOWN;
  external num get SVG_FECOMPOSITE_OPERATOR_OVER;
  external num get SVG_FECOMPOSITE_OPERATOR_IN;
  external num get SVG_FECOMPOSITE_OPERATOR_OUT;
  external num get SVG_FECOMPOSITE_OPERATOR_ATOP;
  external num get SVG_FECOMPOSITE_OPERATOR_XOR;
  external num get SVG_FECOMPOSITE_OPERATOR_ARITHMETIC;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFECompositeElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFECompositeElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFECompositeElement")
external AnonInterface$487 SVGFECompositeElement;
@JS()
@anonymous
abstract class SVGFEConvolveMatrixElement{}
extension SVGFEConvolveMatrixElementExtension on SVGFEConvolveMatrixElement {
  external SVGAnimatedNumber get bias;
  external SVGAnimatedNumber get divisor;
  external SVGAnimatedEnumeration get edgeMode;
  external SVGAnimatedString get in1;
  external SVGAnimatedNumberList get kernelMatrix;
  external SVGAnimatedNumber get kernelUnitLengthX;
  external SVGAnimatedNumber get kernelUnitLengthY;
  external SVGAnimatedInteger get orderX;
  external SVGAnimatedInteger get orderY;
  external SVGAnimatedBoolean get preserveAlpha;
  external SVGAnimatedInteger get targetX;
  external SVGAnimatedInteger get targetY;
  external num get SVG_EDGEMODE_UNKNOWN;
  external num get SVG_EDGEMODE_DUPLICATE;
  external num get SVG_EDGEMODE_WRAP;
  external num get SVG_EDGEMODE_NONE;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFEConvolveMatrixElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFEConvolveMatrixElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFEConvolveMatrixElement")
external AnonInterface$488 SVGFEConvolveMatrixElement;
@JS()
@anonymous
abstract class SVGFEDiffuseLightingElement{}
extension SVGFEDiffuseLightingElementExtension on SVGFEDiffuseLightingElement {
  external SVGAnimatedNumber get diffuseConstant;
  external SVGAnimatedString get in1;
  external SVGAnimatedNumber get kernelUnitLengthX;
  external SVGAnimatedNumber get kernelUnitLengthY;
  external SVGAnimatedNumber get surfaceScale;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFEDiffuseLightingElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFEDiffuseLightingElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFEDiffuseLightingElement")
external AnonInterface$489 SVGFEDiffuseLightingElement;
@JS()
@anonymous
abstract class SVGFEDisplacementMapElement{}
extension SVGFEDisplacementMapElementExtension on SVGFEDisplacementMapElement {
  external SVGAnimatedString get in1;
  external SVGAnimatedString get in2;
  external SVGAnimatedNumber get scale;
  external SVGAnimatedEnumeration get xChannelSelector;
  external SVGAnimatedEnumeration get yChannelSelector;
  external num get SVG_CHANNEL_UNKNOWN;
  external num get SVG_CHANNEL_R;
  external num get SVG_CHANNEL_G;
  external num get SVG_CHANNEL_B;
  external num get SVG_CHANNEL_A;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFEDisplacementMapElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFEDisplacementMapElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFEDisplacementMapElement")
external AnonInterface$490 SVGFEDisplacementMapElement;
@JS()
@anonymous
abstract class SVGFEDistantLightElement{}
extension SVGFEDistantLightElementExtension on SVGFEDistantLightElement {
  external SVGAnimatedNumber get azimuth;
  external SVGAnimatedNumber get elevation;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFEDistantLightElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFEDistantLightElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFEDistantLightElement")
external AnonInterface$491 SVGFEDistantLightElement;
@JS()
@anonymous
abstract class SVGFEDropShadowElement{}
extension SVGFEDropShadowElementExtension on SVGFEDropShadowElement {
  external SVGAnimatedNumber get dx;
  external SVGAnimatedNumber get dy;
  external SVGAnimatedString get in1;
  external SVGAnimatedNumber get stdDeviationX;
  external SVGAnimatedNumber get stdDeviationY;
  @JS("setStdDeviation")
  external void setStdDeviation(num stdDeviationX, num stdDeviationY);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFEDropShadowElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFEDropShadowElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFEDropShadowElement")
external AnonInterface$492 SVGFEDropShadowElement;
@JS()
@anonymous
abstract class SVGFEFloodElement{}
extension SVGFEFloodElementExtension on SVGFEFloodElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFEFloodElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFEFloodElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFEFloodElement")
external AnonInterface$493 SVGFEFloodElement;
@JS()
@anonymous
abstract class SVGFEFuncAElement{}
extension SVGFEFuncAElementExtension on SVGFEFuncAElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFEFuncAElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFEFuncAElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFEFuncAElement")
external AnonInterface$494 SVGFEFuncAElement;
@JS()
@anonymous
abstract class SVGFEFuncBElement{}
extension SVGFEFuncBElementExtension on SVGFEFuncBElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFEFuncBElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFEFuncBElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFEFuncBElement")
external AnonInterface$495 SVGFEFuncBElement;
@JS()
@anonymous
abstract class SVGFEFuncGElement{}
extension SVGFEFuncGElementExtension on SVGFEFuncGElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFEFuncGElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFEFuncGElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFEFuncGElement")
external AnonInterface$496 SVGFEFuncGElement;
@JS()
@anonymous
abstract class SVGFEFuncRElement{}
extension SVGFEFuncRElementExtension on SVGFEFuncRElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFEFuncRElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFEFuncRElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFEFuncRElement")
external AnonInterface$497 SVGFEFuncRElement;
@JS()
@anonymous
abstract class SVGFEGaussianBlurElement{}
extension SVGFEGaussianBlurElementExtension on SVGFEGaussianBlurElement {
  external SVGAnimatedString get in1;
  external SVGAnimatedNumber get stdDeviationX;
  external SVGAnimatedNumber get stdDeviationY;
  @JS("setStdDeviation")
  external void setStdDeviation(num stdDeviationX, num stdDeviationY);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFEGaussianBlurElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFEGaussianBlurElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFEGaussianBlurElement")
external AnonInterface$498 SVGFEGaussianBlurElement;
@JS()
@anonymous
abstract class SVGFEImageElement{}
extension SVGFEImageElementExtension on SVGFEImageElement {
  external SVGAnimatedPreserveAspectRatio get preserveAspectRatio;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFEImageElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFEImageElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFEImageElement")
external AnonInterface$499 SVGFEImageElement;
@JS()
@anonymous
abstract class SVGFEMergeElement{}
extension SVGFEMergeElementExtension on SVGFEMergeElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFEMergeElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFEMergeElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFEMergeElement")
external AnonInterface$500 SVGFEMergeElement;
@JS()
@anonymous
abstract class SVGFEMergeNodeElement{}
extension SVGFEMergeNodeElementExtension on SVGFEMergeNodeElement {
  external SVGAnimatedString get in1;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFEMergeNodeElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFEMergeNodeElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFEMergeNodeElement")
external AnonInterface$501 SVGFEMergeNodeElement;
@JS()
@anonymous
abstract class SVGFEMorphologyElement{}
extension SVGFEMorphologyElementExtension on SVGFEMorphologyElement {
  external SVGAnimatedString get in1;
  external SVGAnimatedEnumeration get operator;
  external SVGAnimatedNumber get radiusX;
  external SVGAnimatedNumber get radiusY;
  external num get SVG_MORPHOLOGY_OPERATOR_UNKNOWN;
  external num get SVG_MORPHOLOGY_OPERATOR_ERODE;
  external num get SVG_MORPHOLOGY_OPERATOR_DILATE;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFEMorphologyElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFEMorphologyElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFEMorphologyElement")
external AnonInterface$502 SVGFEMorphologyElement;
@JS()
@anonymous
abstract class SVGFEOffsetElement{}
extension SVGFEOffsetElementExtension on SVGFEOffsetElement {
  external SVGAnimatedNumber get dx;
  external SVGAnimatedNumber get dy;
  external SVGAnimatedString get in1;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFEOffsetElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFEOffsetElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFEOffsetElement")
external AnonInterface$503 SVGFEOffsetElement;
@JS()
@anonymous
abstract class SVGFEPointLightElement{}
extension SVGFEPointLightElementExtension on SVGFEPointLightElement {
  external SVGAnimatedNumber get x;
  external SVGAnimatedNumber get y;
  external SVGAnimatedNumber get z;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFEPointLightElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFEPointLightElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFEPointLightElement")
external AnonInterface$504 SVGFEPointLightElement;
@JS()
@anonymous
abstract class SVGFESpecularLightingElement{}
extension SVGFESpecularLightingElementExtension on SVGFESpecularLightingElement {
  external SVGAnimatedString get in1;
  external SVGAnimatedNumber get kernelUnitLengthX;
  external SVGAnimatedNumber get kernelUnitLengthY;
  external SVGAnimatedNumber get specularConstant;
  external SVGAnimatedNumber get specularExponent;
  external SVGAnimatedNumber get surfaceScale;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFESpecularLightingElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFESpecularLightingElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFESpecularLightingElement")
external AnonInterface$505 SVGFESpecularLightingElement;
@JS()
@anonymous
abstract class SVGFESpotLightElement{}
extension SVGFESpotLightElementExtension on SVGFESpotLightElement {
  external SVGAnimatedNumber get limitingConeAngle;
  external SVGAnimatedNumber get pointsAtX;
  external SVGAnimatedNumber get pointsAtY;
  external SVGAnimatedNumber get pointsAtZ;
  external SVGAnimatedNumber get specularExponent;
  external SVGAnimatedNumber get x;
  external SVGAnimatedNumber get y;
  external SVGAnimatedNumber get z;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFESpotLightElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFESpotLightElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFESpotLightElement")
external AnonInterface$506 SVGFESpotLightElement;
@JS()
@anonymous
abstract class SVGFETileElement{}
extension SVGFETileElementExtension on SVGFETileElement {
  external SVGAnimatedString get in1;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFETileElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFETileElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFETileElement")
external AnonInterface$507 SVGFETileElement;
@JS()
@anonymous
abstract class SVGFETurbulenceElement{}
extension SVGFETurbulenceElementExtension on SVGFETurbulenceElement {
  external SVGAnimatedNumber get baseFrequencyX;
  external SVGAnimatedNumber get baseFrequencyY;
  external SVGAnimatedInteger get numOctaves;
  external SVGAnimatedNumber get seed;
  external SVGAnimatedEnumeration get stitchTiles;
  external SVGAnimatedEnumeration get type;
  external num get SVG_TURBULENCE_TYPE_UNKNOWN;
  external num get SVG_TURBULENCE_TYPE_FRACTALNOISE;
  external num get SVG_TURBULENCE_TYPE_TURBULENCE;
  external num get SVG_STITCHTYPE_UNKNOWN;
  external num get SVG_STITCHTYPE_STITCH;
  external num get SVG_STITCHTYPE_NOSTITCH;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFETurbulenceElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFETurbulenceElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFETurbulenceElement")
external AnonInterface$508 SVGFETurbulenceElement;
@JS()
@anonymous
abstract class SVGFilterElement{}
extension SVGFilterElementExtension on SVGFilterElement {
  external SVGAnimatedEnumeration get filterUnits;
  external SVGAnimatedLength get height;
  external SVGAnimatedEnumeration get primitiveUnits;
  external SVGAnimatedLength get width;
  external SVGAnimatedLength get x;
  external SVGAnimatedLength get y;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGFilterElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGFilterElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGFilterElement")
external AnonInterface$509 SVGFilterElement;
@JS()
@anonymous
abstract class SVGFilterPrimitiveStandardAttributes{}
extension SVGFilterPrimitiveStandardAttributesExtension on SVGFilterPrimitiveStandardAttributes {
  external SVGAnimatedLength get height;
  external SVGAnimatedString get result;
  external SVGAnimatedLength get width;
  external SVGAnimatedLength get x;
  external SVGAnimatedLength get y;
}
@JS()
@anonymous
abstract class SVGFitToViewBox{}
extension SVGFitToViewBoxExtension on SVGFitToViewBox {
  external SVGAnimatedPreserveAspectRatio get preserveAspectRatio;
  external SVGAnimatedRect get viewBox;
}
@JS()
@anonymous
abstract class SVGForeignObjectElement{}
extension SVGForeignObjectElementExtension on SVGForeignObjectElement {
  external SVGAnimatedLength get height;
  external SVGAnimatedLength get width;
  external SVGAnimatedLength get x;
  external SVGAnimatedLength get y;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGForeignObjectElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGForeignObjectElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGForeignObjectElement")
external AnonInterface$510 SVGForeignObjectElement;
@JS()
@anonymous
abstract class SVGGElement{}
extension SVGGElementExtension on SVGGElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGGElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGGElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGGElement")
external AnonInterface$511 SVGGElement;
@JS()
@anonymous
abstract class SVGGeometryElement{}
extension SVGGeometryElementExtension on SVGGeometryElement {
  external SVGAnimatedNumber get pathLength;
  @JS("getPointAtLength")
  external DOMPoint getPointAtLength(num distance);
  @JS("getTotalLength")
  external num getTotalLength();
  @JS("isPointInFill")
  external bool isPointInFill([DOMPointInit point]);
  @JS("isPointInStroke")
  external bool isPointInStroke([DOMPointInit point]);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGGeometryElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGGeometryElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGGeometryElement")
external AnonInterface$512 SVGGeometryElement;
@JS()
@anonymous
abstract class SVGGradientElement{}
extension SVGGradientElementExtension on SVGGradientElement {
  external SVGAnimatedTransformList get gradientTransform;
  external SVGAnimatedEnumeration get gradientUnits;
  external SVGAnimatedEnumeration get spreadMethod;
  external num get SVG_SPREADMETHOD_UNKNOWN;
  external num get SVG_SPREADMETHOD_PAD;
  external num get SVG_SPREADMETHOD_REFLECT;
  external num get SVG_SPREADMETHOD_REPEAT;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGGradientElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGGradientElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGGradientElement")
external AnonInterface$513 SVGGradientElement;
@JS()
@anonymous
abstract class SVGGraphicsElement{}
extension SVGGraphicsElementExtension on SVGGraphicsElement {
  external SVGAnimatedTransformList get transform;
  @JS("getBBox")
  external DOMRect getBBox([SVGBoundingBoxOptions options]);
  @JS("getCTM")
  external DOMMatrix? getCTM();
  @JS("getScreenCTM")
  external DOMMatrix? getScreenCTM();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGGraphicsElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGGraphicsElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGGraphicsElement")
external AnonInterface$514 SVGGraphicsElement;
@JS()
@anonymous
abstract class SVGImageElement{}
extension SVGImageElementExtension on SVGImageElement {
  external String? get crossOrigin;
  external set crossOrigin(String? value);
  external SVGAnimatedLength get height;
  external SVGAnimatedPreserveAspectRatio get preserveAspectRatio;
  external SVGAnimatedLength get width;
  external SVGAnimatedLength get x;
  external SVGAnimatedLength get y;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGImageElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGImageElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGImageElement")
external AnonInterface$515 SVGImageElement;
@JS()
@anonymous
abstract class SVGLength{}
extension SVGLengthExtension on SVGLength {
  external num get unitType;
  external num get value;
  external set value(num value);
  external String get valueAsString;
  external set valueAsString(String value);
  external num get valueInSpecifiedUnits;
  external set valueInSpecifiedUnits(num value);
  external num get SVG_LENGTHTYPE_UNKNOWN;
  external num get SVG_LENGTHTYPE_NUMBER;
  external num get SVG_LENGTHTYPE_PERCENTAGE;
  external num get SVG_LENGTHTYPE_EMS;
  external num get SVG_LENGTHTYPE_EXS;
  external num get SVG_LENGTHTYPE_PX;
  external num get SVG_LENGTHTYPE_CM;
  external num get SVG_LENGTHTYPE_MM;
  external num get SVG_LENGTHTYPE_IN;
  external num get SVG_LENGTHTYPE_PT;
  external num get SVG_LENGTHTYPE_PC;
  @JS("convertToSpecifiedUnits")
  external void convertToSpecifiedUnits(num unitType);
  @JS("newValueSpecifiedUnits")
  external void newValueSpecifiedUnits(num unitType, num valueInSpecifiedUnits);
}
@JS("SVGLength")
external AnonInterface$516 SVGLength;
@JS()
@anonymous
abstract class SVGLengthList{}
extension SVGLengthListExtension on SVGLengthList {
  external num get length;
  external num get numberOfItems;
  @JS("appendItem")
  external SVGLength appendItem(SVGLength newItem);
  @JS("clear")
  external void clear();
  @JS("getItem")
  external SVGLength getItem(num index);
  @JS("initialize")
  external SVGLength initialize(SVGLength newItem);
  @JS("insertItemBefore")
  external SVGLength insertItemBefore(SVGLength newItem, num index);
  @JS("removeItem")
  external SVGLength removeItem(num index);
  @JS("replaceItem")
  external SVGLength replaceItem(SVGLength newItem, num index);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("SVGLengthList")
external AnonInterface$517 SVGLengthList;
@JS()
@anonymous
abstract class SVGLineElement{}
extension SVGLineElementExtension on SVGLineElement {
  external SVGAnimatedLength get x1;
  external SVGAnimatedLength get x2;
  external SVGAnimatedLength get y1;
  external SVGAnimatedLength get y2;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGLineElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGLineElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGLineElement")
external AnonInterface$518 SVGLineElement;
@JS()
@anonymous
abstract class SVGLinearGradientElement{}
extension SVGLinearGradientElementExtension on SVGLinearGradientElement {
  external SVGAnimatedLength get x1;
  external SVGAnimatedLength get x2;
  external SVGAnimatedLength get y1;
  external SVGAnimatedLength get y2;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGLinearGradientElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGLinearGradientElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGLinearGradientElement")
external AnonInterface$519 SVGLinearGradientElement;
@JS()
@anonymous
abstract class SVGMPathElement{}
extension SVGMPathElementExtension on SVGMPathElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGMPathElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGMPathElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGMPathElement")
external AnonInterface$520 SVGMPathElement;
@JS()
@anonymous
abstract class SVGMarkerElement{}
extension SVGMarkerElementExtension on SVGMarkerElement {
  external SVGAnimatedLength get markerHeight;
  external SVGAnimatedEnumeration get markerUnits;
  external SVGAnimatedLength get markerWidth;
  external SVGAnimatedAngle get orientAngle;
  external SVGAnimatedEnumeration get orientType;
  external SVGAnimatedLength get refX;
  external SVGAnimatedLength get refY;
  external num get SVG_MARKERUNITS_UNKNOWN;
  external num get SVG_MARKERUNITS_USERSPACEONUSE;
  external num get SVG_MARKERUNITS_STROKEWIDTH;
  external num get SVG_MARKER_ORIENT_UNKNOWN;
  external num get SVG_MARKER_ORIENT_AUTO;
  external num get SVG_MARKER_ORIENT_ANGLE;
  @JS("setOrientToAngle")
  external void setOrientToAngle(SVGAngle angle);
  @JS("setOrientToAuto")
  external void setOrientToAuto();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGMarkerElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGMarkerElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGMarkerElement")
external AnonInterface$521 SVGMarkerElement;
@JS()
@anonymous
abstract class SVGMaskElement{}
extension SVGMaskElementExtension on SVGMaskElement {
  external SVGAnimatedLength get height;
  external SVGAnimatedEnumeration get maskContentUnits;
  external SVGAnimatedEnumeration get maskUnits;
  external SVGAnimatedLength get width;
  external SVGAnimatedLength get x;
  external SVGAnimatedLength get y;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGMaskElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGMaskElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGMaskElement")
external AnonInterface$522 SVGMaskElement;
@JS()
@anonymous
abstract class SVGMetadataElement{}
extension SVGMetadataElementExtension on SVGMetadataElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGMetadataElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGMetadataElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGMetadataElement")
external AnonInterface$523 SVGMetadataElement;
@JS()
@anonymous
abstract class SVGNumber{}
extension SVGNumberExtension on SVGNumber {
  external num get value;
  external set value(num value);
}
@JS("SVGNumber")
external AnonInterface$524 SVGNumber;
@JS()
@anonymous
abstract class SVGNumberList{}
extension SVGNumberListExtension on SVGNumberList {
  external num get length;
  external num get numberOfItems;
  @JS("appendItem")
  external SVGNumber appendItem(SVGNumber newItem);
  @JS("clear")
  external void clear();
  @JS("getItem")
  external SVGNumber getItem(num index);
  @JS("initialize")
  external SVGNumber initialize(SVGNumber newItem);
  @JS("insertItemBefore")
  external SVGNumber insertItemBefore(SVGNumber newItem, num index);
  @JS("removeItem")
  external SVGNumber removeItem(num index);
  @JS("replaceItem")
  external SVGNumber replaceItem(SVGNumber newItem, num index);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("SVGNumberList")
external AnonInterface$525 SVGNumberList;
@JS()
@anonymous
abstract class SVGPathElement{}
extension SVGPathElementExtension on SVGPathElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGPathElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGPathElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGPathElement")
external AnonInterface$526 SVGPathElement;
@JS()
@anonymous
abstract class SVGPatternElement{}
extension SVGPatternElementExtension on SVGPatternElement {
  external SVGAnimatedLength get height;
  external SVGAnimatedEnumeration get patternContentUnits;
  external SVGAnimatedTransformList get patternTransform;
  external SVGAnimatedEnumeration get patternUnits;
  external SVGAnimatedLength get width;
  external SVGAnimatedLength get x;
  external SVGAnimatedLength get y;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGPatternElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGPatternElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGPatternElement")
external AnonInterface$527 SVGPatternElement;
@JS()
@anonymous
abstract class SVGPointList{}
extension SVGPointListExtension on SVGPointList {
  external num get length;
  external num get numberOfItems;
  @JS("appendItem")
  external DOMPoint appendItem(DOMPoint newItem);
  @JS("clear")
  external void clear();
  @JS("getItem")
  external DOMPoint getItem(num index);
  @JS("initialize")
  external DOMPoint initialize(DOMPoint newItem);
  @JS("insertItemBefore")
  external DOMPoint insertItemBefore(DOMPoint newItem, num index);
  @JS("removeItem")
  external DOMPoint removeItem(num index);
  @JS("replaceItem")
  external DOMPoint replaceItem(DOMPoint newItem, num index);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("SVGPointList")
external AnonInterface$528 SVGPointList;
@JS()
@anonymous
abstract class SVGPolygonElement{}
extension SVGPolygonElementExtension on SVGPolygonElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGPolygonElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGPolygonElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGPolygonElement")
external AnonInterface$529 SVGPolygonElement;
@JS()
@anonymous
abstract class SVGPolylineElement{}
extension SVGPolylineElementExtension on SVGPolylineElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGPolylineElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGPolylineElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGPolylineElement")
external AnonInterface$530 SVGPolylineElement;
@JS()
@anonymous
abstract class SVGPreserveAspectRatio{}
extension SVGPreserveAspectRatioExtension on SVGPreserveAspectRatio {
  external num get align;
  external set align(num value);
  external num get meetOrSlice;
  external set meetOrSlice(num value);
  external num get SVG_PRESERVEASPECTRATIO_UNKNOWN;
  external num get SVG_PRESERVEASPECTRATIO_NONE;
  external num get SVG_PRESERVEASPECTRATIO_XMINYMIN;
  external num get SVG_PRESERVEASPECTRATIO_XMIDYMIN;
  external num get SVG_PRESERVEASPECTRATIO_XMAXYMIN;
  external num get SVG_PRESERVEASPECTRATIO_XMINYMID;
  external num get SVG_PRESERVEASPECTRATIO_XMIDYMID;
  external num get SVG_PRESERVEASPECTRATIO_XMAXYMID;
  external num get SVG_PRESERVEASPECTRATIO_XMINYMAX;
  external num get SVG_PRESERVEASPECTRATIO_XMIDYMAX;
  external num get SVG_PRESERVEASPECTRATIO_XMAXYMAX;
  external num get SVG_MEETORSLICE_UNKNOWN;
  external num get SVG_MEETORSLICE_MEET;
  external num get SVG_MEETORSLICE_SLICE;
}
@JS("SVGPreserveAspectRatio")
external AnonInterface$531 SVGPreserveAspectRatio;
@JS()
@anonymous
abstract class SVGRadialGradientElement{}
extension SVGRadialGradientElementExtension on SVGRadialGradientElement {
  external SVGAnimatedLength get cx;
  external SVGAnimatedLength get cy;
  external SVGAnimatedLength get fr;
  external SVGAnimatedLength get fx;
  external SVGAnimatedLength get fy;
  external SVGAnimatedLength get r;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGRadialGradientElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGRadialGradientElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGRadialGradientElement")
external AnonInterface$532 SVGRadialGradientElement;
@JS()
@anonymous
abstract class SVGRectElement{}
extension SVGRectElementExtension on SVGRectElement {
  external SVGAnimatedLength get height;
  external SVGAnimatedLength get rx;
  external SVGAnimatedLength get ry;
  external SVGAnimatedLength get width;
  external SVGAnimatedLength get x;
  external SVGAnimatedLength get y;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGRectElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGRectElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGRectElement")
external AnonInterface$533 SVGRectElement;
@JS()
@anonymous
abstract class SVGSVGElementEventMap{}
extension SVGSVGElementEventMapExtension on SVGSVGElementEventMap {
}
@JS()
@anonymous
abstract class SVGSVGElement{}
extension SVGSVGElementExtension on SVGSVGElement {
  external num get currentScale;
  external set currentScale(num value);
  external DOMPointReadOnly get currentTranslate;
  external SVGAnimatedLength get height;
  external SVGAnimatedLength get width;
  external SVGAnimatedLength get x;
  external SVGAnimatedLength get y;
  @JS("animationsPaused")
  external bool animationsPaused();
  @JS("checkEnclosure")
  external bool checkEnclosure(SVGElement element, DOMRectReadOnly rect);
  @JS("checkIntersection")
  external bool checkIntersection(SVGElement element, DOMRectReadOnly rect);
  @JS("createSVGAngle")
  external SVGAngle createSVGAngle();
  @JS("createSVGLength")
  external SVGLength createSVGLength();
  @JS("createSVGMatrix")
  external DOMMatrix createSVGMatrix();
  @JS("createSVGNumber")
  external SVGNumber createSVGNumber();
  @JS("createSVGPoint")
  external DOMPoint createSVGPoint();
  @JS("createSVGRect")
  external DOMRect createSVGRect();
  @JS("createSVGTransform")
  external SVGTransform createSVGTransform();
  @JS("createSVGTransformFromMatrix")
  external SVGTransform createSVGTransformFromMatrix([DOMMatrix2DInit matrix]);
  @JS("deselectAll")
  external void deselectAll();
  @JS("forceRedraw")
  external void forceRedraw();
  @JS("getCurrentTime")
  external num getCurrentTime();
  @JS("getElementById")
  external Element getElementById(String elementId);
  @JS("getEnclosureList")
  external NodeListOf<dynamic /* SVGCircleElement|SVGEllipseElement|SVGImageElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGTextElement|SVGUseElement */> getEnclosureList(DOMRectReadOnly rect, SVGElement? referenceElement);
  @JS("getIntersectionList")
  external NodeListOf<dynamic /* SVGCircleElement|SVGEllipseElement|SVGImageElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGTextElement|SVGUseElement */> getIntersectionList(DOMRectReadOnly rect, SVGElement? referenceElement);
  @JS("pauseAnimations")
  external void pauseAnimations();
  @JS("setCurrentTime")
  external void setCurrentTime(num seconds);
  @JS("suspendRedraw")
  external num suspendRedraw(num maxWaitMilliseconds);
  @JS("unpauseAnimations")
  external void unpauseAnimations();
  @JS("unsuspendRedraw")
  external void unsuspendRedraw(num suspendHandleID);
  @JS("unsuspendRedrawAll")
  external void unsuspendRedrawAll();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGSVGElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGSVGElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGSVGElement")
external AnonInterface$534 SVGSVGElement;
@JS()
@anonymous
abstract class SVGScriptElement{}
extension SVGScriptElementExtension on SVGScriptElement {
  external String get type;
  external set type(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGScriptElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGScriptElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGScriptElement")
external AnonInterface$535 SVGScriptElement;
@JS()
@anonymous
abstract class SVGSetElement{}
extension SVGSetElementExtension on SVGSetElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGSetElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGSetElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGSetElement")
external AnonInterface$536 SVGSetElement;
@JS()
@anonymous
abstract class SVGStopElement{}
extension SVGStopElementExtension on SVGStopElement {
  external SVGAnimatedNumber get offset;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGStopElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGStopElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGStopElement")
external AnonInterface$537 SVGStopElement;
@JS()
@anonymous
abstract class SVGStringList{}
extension SVGStringListExtension on SVGStringList {
  external num get length;
  external num get numberOfItems;
  @JS("appendItem")
  external String appendItem(String newItem);
  @JS("clear")
  external void clear();
  @JS("getItem")
  external String getItem(num index);
  @JS("initialize")
  external String initialize(String newItem);
  @JS("insertItemBefore")
  external String insertItemBefore(String newItem, num index);
  @JS("removeItem")
  external String removeItem(num index);
  @JS("replaceItem")
  external String replaceItem(String newItem, num index);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("SVGStringList")
external AnonInterface$538 SVGStringList;
@JS()
@anonymous
abstract class SVGStyleElement{}
extension SVGStyleElementExtension on SVGStyleElement {
  external bool get disabled;
  external set disabled(bool value);
  external String get media;
  external set media(String value);
  external String get title;
  external set title(String value);
  external String get type;
  external set type(String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGStyleElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGStyleElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGStyleElement")
external AnonInterface$539 SVGStyleElement;
@JS()
@anonymous
abstract class SVGSwitchElement{}
extension SVGSwitchElementExtension on SVGSwitchElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGSwitchElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGSwitchElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGSwitchElement")
external AnonInterface$540 SVGSwitchElement;
@JS()
@anonymous
abstract class SVGSymbolElement{}
extension SVGSymbolElementExtension on SVGSymbolElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGSymbolElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGSymbolElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGSymbolElement")
external AnonInterface$541 SVGSymbolElement;
@JS()
@anonymous
abstract class SVGTSpanElement{}
extension SVGTSpanElementExtension on SVGTSpanElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGTSpanElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGTSpanElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGTSpanElement")
external AnonInterface$542 SVGTSpanElement;
@JS()
@anonymous
abstract class SVGTests{}
extension SVGTestsExtension on SVGTests {
  external SVGStringList get requiredExtensions;
  external SVGStringList get systemLanguage;
}
@JS()
@anonymous
abstract class SVGTextContentElement{}
extension SVGTextContentElementExtension on SVGTextContentElement {
  external SVGAnimatedEnumeration get lengthAdjust;
  external SVGAnimatedLength get textLength;
  external num get LENGTHADJUST_UNKNOWN;
  external num get LENGTHADJUST_SPACING;
  external num get LENGTHADJUST_SPACINGANDGLYPHS;
  @JS("getCharNumAtPosition")
  external num getCharNumAtPosition([DOMPointInit point]);
  @JS("getComputedTextLength")
  external num getComputedTextLength();
  @JS("getEndPositionOfChar")
  external DOMPoint getEndPositionOfChar(num charnum);
  @JS("getExtentOfChar")
  external DOMRect getExtentOfChar(num charnum);
  @JS("getNumberOfChars")
  external num getNumberOfChars();
  @JS("getRotationOfChar")
  external num getRotationOfChar(num charnum);
  @JS("getStartPositionOfChar")
  external DOMPoint getStartPositionOfChar(num charnum);
  @JS("getSubStringLength")
  external num getSubStringLength(num charnum, num nchars);
  @JS("selectSubString")
  external void selectSubString(num charnum, num nchars);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGTextContentElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGTextContentElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGTextContentElement")
external AnonInterface$543 SVGTextContentElement;
@JS()
@anonymous
abstract class SVGTextElement{}
extension SVGTextElementExtension on SVGTextElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGTextElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGTextElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGTextElement")
external AnonInterface$544 SVGTextElement;
@JS()
@anonymous
abstract class SVGTextPathElement{}
extension SVGTextPathElementExtension on SVGTextPathElement {
  external SVGAnimatedEnumeration get method;
  external SVGAnimatedEnumeration get spacing;
  external SVGAnimatedLength get startOffset;
  external num get TEXTPATH_METHODTYPE_UNKNOWN;
  external num get TEXTPATH_METHODTYPE_ALIGN;
  external num get TEXTPATH_METHODTYPE_STRETCH;
  external num get TEXTPATH_SPACINGTYPE_UNKNOWN;
  external num get TEXTPATH_SPACINGTYPE_AUTO;
  external num get TEXTPATH_SPACINGTYPE_EXACT;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGTextPathElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGTextPathElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGTextPathElement")
external AnonInterface$545 SVGTextPathElement;
@JS()
@anonymous
abstract class SVGTextPositioningElement{}
extension SVGTextPositioningElementExtension on SVGTextPositioningElement {
  external SVGAnimatedLengthList get dx;
  external SVGAnimatedLengthList get dy;
  external SVGAnimatedNumberList get rotate;
  external SVGAnimatedLengthList get x;
  external SVGAnimatedLengthList get y;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGTextPositioningElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGTextPositioningElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGTextPositioningElement")
external AnonInterface$546 SVGTextPositioningElement;
@JS()
@anonymous
abstract class SVGTitleElement{}
extension SVGTitleElementExtension on SVGTitleElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGTitleElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGTitleElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGTitleElement")
external AnonInterface$547 SVGTitleElement;
@JS()
@anonymous
abstract class SVGTransform{}
extension SVGTransformExtension on SVGTransform {
  external num get angle;
  external DOMMatrix get matrix;
  external num get type;
  external num get SVG_TRANSFORM_UNKNOWN;
  external num get SVG_TRANSFORM_MATRIX;
  external num get SVG_TRANSFORM_TRANSLATE;
  external num get SVG_TRANSFORM_SCALE;
  external num get SVG_TRANSFORM_ROTATE;
  external num get SVG_TRANSFORM_SKEWX;
  external num get SVG_TRANSFORM_SKEWY;
  @JS("setMatrix")
  external void setMatrix([DOMMatrix2DInit matrix]);
  @JS("setRotate")
  external void setRotate(num angle, num cx, num cy);
  @JS("setScale")
  external void setScale(num sx, num sy);
  @JS("setSkewX")
  external void setSkewX(num angle);
  @JS("setSkewY")
  external void setSkewY(num angle);
  @JS("setTranslate")
  external void setTranslate(num tx, num ty);
}
@JS("SVGTransform")
external AnonInterface$548 SVGTransform;
@JS()
@anonymous
abstract class SVGTransformList{}
extension SVGTransformListExtension on SVGTransformList {
  external num get length;
  external num get numberOfItems;
  @JS("appendItem")
  external SVGTransform appendItem(SVGTransform newItem);
  @JS("clear")
  external void clear();
  @JS("consolidate")
  external SVGTransform? consolidate();
  @JS("createSVGTransformFromMatrix")
  external SVGTransform createSVGTransformFromMatrix([DOMMatrix2DInit matrix]);
  @JS("getItem")
  external SVGTransform getItem(num index);
  @JS("initialize")
  external SVGTransform initialize(SVGTransform newItem);
  @JS("insertItemBefore")
  external SVGTransform insertItemBefore(SVGTransform newItem, num index);
  @JS("removeItem")
  external SVGTransform removeItem(num index);
  @JS("replaceItem")
  external SVGTransform replaceItem(SVGTransform newItem, num index);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("SVGTransformList")
external AnonInterface$549 SVGTransformList;
@JS()
@anonymous
abstract class SVGURIReference{}
extension SVGURIReferenceExtension on SVGURIReference {
  external SVGAnimatedString get href;
}
@JS()
@anonymous
abstract class SVGUnitTypes{}
extension SVGUnitTypesExtension on SVGUnitTypes {
  external num get SVG_UNIT_TYPE_UNKNOWN;
  external num get SVG_UNIT_TYPE_USERSPACEONUSE;
  external num get SVG_UNIT_TYPE_OBJECTBOUNDINGBOX;
}
@JS("SVGUnitTypes")
external AnonInterface$550 SVGUnitTypes;
@JS()
@anonymous
abstract class SVGUseElement{}
extension SVGUseElementExtension on SVGUseElement {
  external SVGAnimatedLength get height;
  external SVGAnimatedLength get width;
  external SVGAnimatedLength get x;
  external SVGAnimatedLength get y;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGUseElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGUseElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGUseElement")
external AnonInterface$551 SVGUseElement;
@JS()
@anonymous
abstract class SVGViewElement{}
extension SVGViewElementExtension on SVGViewElement {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SVGViewElement, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SVGViewElement, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SVGViewElement")
external AnonInterface$552 SVGViewElement;
@JS()
@anonymous
abstract class Screen{}
extension ScreenExtension on Screen {
  external num get availHeight;
  external num get availWidth;
  external num get colorDepth;
  external num get height;
  external ScreenOrientation get orientation;
  external num get pixelDepth;
  external num get width;
}
@JS("Screen")
external AnonInterface$553 Screen;
@JS()
@anonymous
abstract class ScreenOrientationEventMap{}
extension ScreenOrientationEventMapExtension on ScreenOrientationEventMap {
  external Event get "change";
  external set "change"(Event value);
}
@JS()
@anonymous
abstract class ScreenOrientation{}
extension ScreenOrientationExtension on ScreenOrientation {
  external num get angle;
  external dynamic Function(ScreenOrientation, Event)? get onchange;
  external set onchange(dynamic Function(ScreenOrientation, Event)? value);
  external OrientationType get type;
  @JS("unlock")
  external void unlock();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(ScreenOrientation, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(ScreenOrientation, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("ScreenOrientation")
external AnonInterface$554 ScreenOrientation;
@JS()
@anonymous
abstract class ScriptProcessorNodeEventMap{}
extension ScriptProcessorNodeEventMapExtension on ScriptProcessorNodeEventMap {
  external AudioProcessingEvent get "audioprocess";
  external set "audioprocess"(AudioProcessingEvent value);
}
@JS()
@anonymous
abstract class ScriptProcessorNode{}
extension ScriptProcessorNodeExtension on ScriptProcessorNode {
  external num get bufferSize;
  external dynamic Function(ScriptProcessorNode, AudioProcessingEvent)? get onaudioprocess;
  external set onaudioprocess(dynamic Function(ScriptProcessorNode, AudioProcessingEvent)? value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(ScriptProcessorNode, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(ScriptProcessorNode, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("ScriptProcessorNode")
external AnonInterface$555 ScriptProcessorNode;
@JS()
@anonymous
abstract class SecurityPolicyViolationEvent{}
extension SecurityPolicyViolationEventExtension on SecurityPolicyViolationEvent {
  external String get blockedURI;
  external num get columnNumber;
  external SecurityPolicyViolationEventDisposition get disposition;
  external String get documentURI;
  external String get effectiveDirective;
  external num get lineNumber;
  external String get originalPolicy;
  external String get referrer;
  external String get sample;
  external String get sourceFile;
  external num get statusCode;
  external String get violatedDirective;
}
@JS("SecurityPolicyViolationEvent")
external AnonInterface$556 SecurityPolicyViolationEvent;
@JS()
@anonymous
abstract class Selection{}
extension SelectionExtension on Selection {
  external Node? get anchorNode;
  external num get anchorOffset;
  external String get direction;
  external Node? get focusNode;
  external num get focusOffset;
  external bool get isCollapsed;
  external num get rangeCount;
  external String get type;
  @JS("addRange")
  external void addRange(Range range);
  @JS("collapse")
  external void collapse(Node? node, [num offset]);
  @JS("collapseToEnd")
  external void collapseToEnd();
  @JS("collapseToStart")
  external void collapseToStart();
  @JS("containsNode")
  external bool containsNode(Node node, [bool allowPartialContainment]);
  @JS("deleteFromDocument")
  external void deleteFromDocument();
  @JS("empty")
  external void empty();
  @JS("extend")
  external void extend(Node node, [num offset]);
  @JS("getRangeAt")
  external Range getRangeAt(num index);
  @JS("modify")
  external void modify([String alter, String direction, String granularity]);
  @JS("removeAllRanges")
  external void removeAllRanges();
  @JS("removeRange")
  external void removeRange(Range range);
  @JS("selectAllChildren")
  external void selectAllChildren(Node node);
  @JS("setBaseAndExtent")
  external void setBaseAndExtent(Node anchorNode, num anchorOffset, Node focusNode, num focusOffset);
  @JS("setPosition")
  external void setPosition(Node? node, [num offset]);
  @JS("toString")
  external String toString();
}
@JS("Selection")
external AnonInterface$557 Selection;
@JS()
@anonymous
abstract class ServiceWorkerEventMap{}
extension ServiceWorkerEventMapExtension on ServiceWorkerEventMap {
  external Event get "statechange";
  external set "statechange"(Event value);
}
@JS()
@anonymous
abstract class ServiceWorker{}
extension ServiceWorkerExtension on ServiceWorker {
  external dynamic Function(ServiceWorker, Event)? get onstatechange;
  external set onstatechange(dynamic Function(ServiceWorker, Event)? value);
  external String get scriptURL;
  external ServiceWorkerState get state;
  @JS("postMessage")
  external void postMessage(dynamic message, List<Transferable> transfer);
  @JS("postMessage")
  external void postMessage(dynamic message, [StructuredSerializeOptions options]);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(ServiceWorker, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(ServiceWorker, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("ServiceWorker")
external AnonInterface$558 ServiceWorker;
@JS()
@anonymous
abstract class ServiceWorkerContainerEventMap{}
extension ServiceWorkerContainerEventMapExtension on ServiceWorkerContainerEventMap {
  external Event get "controllerchange";
  external set "controllerchange"(Event value);
  external MessageEvent get "message";
  external set "message"(MessageEvent value);
  external MessageEvent get "messageerror";
  external set "messageerror"(MessageEvent value);
}
@JS()
@anonymous
abstract class ServiceWorkerContainer{}
extension ServiceWorkerContainerExtension on ServiceWorkerContainer {
  external ServiceWorker? get controller;
  external dynamic Function(ServiceWorkerContainer, Event)? get oncontrollerchange;
  external set oncontrollerchange(dynamic Function(ServiceWorkerContainer, Event)? value);
  external dynamic Function(ServiceWorkerContainer, MessageEvent)? get onmessage;
  external set onmessage(dynamic Function(ServiceWorkerContainer, MessageEvent)? value);
  external dynamic Function(ServiceWorkerContainer, MessageEvent)? get onmessageerror;
  external set onmessageerror(dynamic Function(ServiceWorkerContainer, MessageEvent)? value);
  external Future<ServiceWorkerRegistration> get ready;
  @JS("getRegistration")
  external Future<ServiceWorkerRegistration?> getRegistration([dynamic /* String|URL */ clientURL]);
  @JS("getRegistrations")
  external Future<ReadonlyArray<ServiceWorkerRegistration>> getRegistrations();
  @JS("register")
  external Future<ServiceWorkerRegistration> register(dynamic /* String|URL */ scriptURL, [RegistrationOptions options]);
  @JS("startMessages")
  external void startMessages();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(ServiceWorkerContainer, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(ServiceWorkerContainer, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("ServiceWorkerContainer")
external AnonInterface$559 ServiceWorkerContainer;
@JS()
@anonymous
abstract class ServiceWorkerRegistrationEventMap{}
extension ServiceWorkerRegistrationEventMapExtension on ServiceWorkerRegistrationEventMap {
  external Event get "updatefound";
  external set "updatefound"(Event value);
}
@JS()
@anonymous
abstract class ServiceWorkerRegistration{}
extension ServiceWorkerRegistrationExtension on ServiceWorkerRegistration {
  external ServiceWorker? get active;
  external ServiceWorker? get installing;
  external NavigationPreloadManager get navigationPreload;
  external dynamic Function(ServiceWorkerRegistration, Event)? get onupdatefound;
  external set onupdatefound(dynamic Function(ServiceWorkerRegistration, Event)? value);
  external PushManager get pushManager;
  external String get scope;
  external ServiceWorkerUpdateViaCache get updateViaCache;
  external ServiceWorker? get waiting;
  @JS("getNotifications")
  external Future<List<Notification>> getNotifications([GetNotificationOptions filter]);
  @JS("showNotification")
  external Future<void> showNotification(String title, [NotificationOptions options]);
  @JS("unregister")
  external Future<bool> unregister();
  @JS("update")
  external Future<void> update();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(ServiceWorkerRegistration, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(ServiceWorkerRegistration, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("ServiceWorkerRegistration")
external AnonInterface$560 ServiceWorkerRegistration;
@JS()
@anonymous
abstract class ShadowRootEventMap{}
extension ShadowRootEventMapExtension on ShadowRootEventMap {
  external Event get "slotchange";
  external set "slotchange"(Event value);
}
@JS()
@anonymous
abstract class ShadowRoot{}
extension ShadowRootExtension on ShadowRoot {
  external bool get clonable;
  external bool get delegatesFocus;
  external Element get host;
  external String get innerHTML;
  external set innerHTML(String value);
  external ShadowRootMode get mode;
  external dynamic Function(ShadowRoot, Event)? get onslotchange;
  external set onslotchange(dynamic Function(ShadowRoot, Event)? value);
  external bool get serializable;
  external SlotAssignmentMode get slotAssignment;
  @JS("getHTML")
  external String getHTML([GetHTMLOptions options]);
  @JS("setHTMLUnsafe")
  external void setHTMLUnsafe(String html);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(ShadowRoot, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(ShadowRoot, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("ShadowRoot")
external AnonInterface$561 ShadowRoot;
@JS()
@anonymous
abstract class SharedWorker{}
extension SharedWorkerExtension on SharedWorker {
  external MessagePort get port;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SharedWorker, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SharedWorker, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SharedWorker")
external AnonInterface$562 SharedWorker;
@JS()
@anonymous
abstract class Slottable{}
extension SlottableExtension on Slottable {
  external HTMLSlotElement? get assignedSlot;
}
@JS()
@anonymous
abstract class SourceBufferEventMap{}
extension SourceBufferEventMapExtension on SourceBufferEventMap {
  external Event get "abort";
  external set "abort"(Event value);
  external Event get "error";
  external set "error"(Event value);
  external Event get "update";
  external set "update"(Event value);
  external Event get "updateend";
  external set "updateend"(Event value);
  external Event get "updatestart";
  external set "updatestart"(Event value);
}
@JS()
@anonymous
abstract class SourceBuffer{}
extension SourceBufferExtension on SourceBuffer {
  external num get appendWindowEnd;
  external set appendWindowEnd(num value);
  external num get appendWindowStart;
  external set appendWindowStart(num value);
  external TimeRanges get buffered;
  external AppendMode get mode;
  external set mode(AppendMode value);
  external dynamic Function(SourceBuffer, Event)? get onabort;
  external set onabort(dynamic Function(SourceBuffer, Event)? value);
  external dynamic Function(SourceBuffer, Event)? get onerror;
  external set onerror(dynamic Function(SourceBuffer, Event)? value);
  external dynamic Function(SourceBuffer, Event)? get onupdate;
  external set onupdate(dynamic Function(SourceBuffer, Event)? value);
  external dynamic Function(SourceBuffer, Event)? get onupdateend;
  external set onupdateend(dynamic Function(SourceBuffer, Event)? value);
  external dynamic Function(SourceBuffer, Event)? get onupdatestart;
  external set onupdatestart(dynamic Function(SourceBuffer, Event)? value);
  external num get timestampOffset;
  external set timestampOffset(num value);
  external bool get updating;
  @JS("abort")
  external void abort();
  @JS("appendBuffer")
  external void appendBuffer(BufferSource data);
  @JS("changeType")
  external void changeType(String type);
  @JS("remove")
  external void remove(num start, num end);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SourceBuffer, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SourceBuffer, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SourceBuffer")
external AnonInterface$563 SourceBuffer;
@JS()
@anonymous
abstract class SourceBufferListEventMap{}
extension SourceBufferListEventMapExtension on SourceBufferListEventMap {
  external Event get "addsourcebuffer";
  external set "addsourcebuffer"(Event value);
  external Event get "removesourcebuffer";
  external set "removesourcebuffer"(Event value);
}
@JS()
@anonymous
abstract class SourceBufferList{}
extension SourceBufferListExtension on SourceBufferList {
  external num get length;
  external dynamic Function(SourceBufferList, Event)? get onaddsourcebuffer;
  external set onaddsourcebuffer(dynamic Function(SourceBufferList, Event)? value);
  external dynamic Function(SourceBufferList, Event)? get onremovesourcebuffer;
  external set onremovesourcebuffer(dynamic Function(SourceBufferList, Event)? value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SourceBufferList, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SourceBufferList, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("SourceBufferList")
external AnonInterface$564 SourceBufferList;
@JS()
@anonymous
abstract class SpeechRecognitionAlternative{}
extension SpeechRecognitionAlternativeExtension on SpeechRecognitionAlternative {
  external num get confidence;
  external String get transcript;
}
@JS("SpeechRecognitionAlternative")
external AnonInterface$565 SpeechRecognitionAlternative;
@JS()
@anonymous
abstract class SpeechRecognitionResult{}
extension SpeechRecognitionResultExtension on SpeechRecognitionResult {
  external bool get isFinal;
  external num get length;
  @JS("item")
  external SpeechRecognitionAlternative item(num index);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("SpeechRecognitionResult")
external AnonInterface$566 SpeechRecognitionResult;
@JS()
@anonymous
abstract class SpeechRecognitionResultList{}
extension SpeechRecognitionResultListExtension on SpeechRecognitionResultList {
  external num get length;
  @JS("item")
  external SpeechRecognitionResult item(num index);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("SpeechRecognitionResultList")
external AnonInterface$567 SpeechRecognitionResultList;
@JS()
@anonymous
abstract class SpeechSynthesisEventMap{}
extension SpeechSynthesisEventMapExtension on SpeechSynthesisEventMap {
  external Event get "voiceschanged";
  external set "voiceschanged"(Event value);
}
@JS()
@anonymous
abstract class SpeechSynthesis{}
extension SpeechSynthesisExtension on SpeechSynthesis {
  external dynamic Function(SpeechSynthesis, Event)? get onvoiceschanged;
  external set onvoiceschanged(dynamic Function(SpeechSynthesis, Event)? value);
  external bool get paused;
  external bool get pending;
  external bool get speaking;
  @JS("cancel")
  external void cancel();
  @JS("getVoices")
  external List<SpeechSynthesisVoice> getVoices();
  @JS("pause")
  external void pause();
  @JS("resume")
  external void resume();
  @JS("speak")
  external void speak(SpeechSynthesisUtterance utterance);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SpeechSynthesis, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SpeechSynthesis, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SpeechSynthesis")
external AnonInterface$568 SpeechSynthesis;
@JS()
@anonymous
abstract class SpeechSynthesisErrorEvent{}
extension SpeechSynthesisErrorEventExtension on SpeechSynthesisErrorEvent {
  external SpeechSynthesisErrorCode get error;
}
@JS("SpeechSynthesisErrorEvent")
external AnonInterface$569 SpeechSynthesisErrorEvent;
@JS()
@anonymous
abstract class SpeechSynthesisEvent{}
extension SpeechSynthesisEventExtension on SpeechSynthesisEvent {
  external num get charIndex;
  external num get charLength;
  external num get elapsedTime;
  external String get name;
  external SpeechSynthesisUtterance get utterance;
}
@JS("SpeechSynthesisEvent")
external AnonInterface$570 SpeechSynthesisEvent;
@JS()
@anonymous
abstract class SpeechSynthesisUtteranceEventMap{}
extension SpeechSynthesisUtteranceEventMapExtension on SpeechSynthesisUtteranceEventMap {
  external SpeechSynthesisEvent get "boundary";
  external set "boundary"(SpeechSynthesisEvent value);
  external SpeechSynthesisEvent get "end";
  external set "end"(SpeechSynthesisEvent value);
  external SpeechSynthesisErrorEvent get "error";
  external set "error"(SpeechSynthesisErrorEvent value);
  external SpeechSynthesisEvent get "mark";
  external set "mark"(SpeechSynthesisEvent value);
  external SpeechSynthesisEvent get "pause";
  external set "pause"(SpeechSynthesisEvent value);
  external SpeechSynthesisEvent get "resume";
  external set "resume"(SpeechSynthesisEvent value);
  external SpeechSynthesisEvent get "start";
  external set "start"(SpeechSynthesisEvent value);
}
@JS()
@anonymous
abstract class SpeechSynthesisUtterance{}
extension SpeechSynthesisUtteranceExtension on SpeechSynthesisUtterance {
  external String get lang;
  external set lang(String value);
  external dynamic Function(SpeechSynthesisUtterance, SpeechSynthesisEvent)? get onboundary;
  external set onboundary(dynamic Function(SpeechSynthesisUtterance, SpeechSynthesisEvent)? value);
  external dynamic Function(SpeechSynthesisUtterance, SpeechSynthesisEvent)? get onend;
  external set onend(dynamic Function(SpeechSynthesisUtterance, SpeechSynthesisEvent)? value);
  external dynamic Function(SpeechSynthesisUtterance, SpeechSynthesisErrorEvent)? get onerror;
  external set onerror(dynamic Function(SpeechSynthesisUtterance, SpeechSynthesisErrorEvent)? value);
  external dynamic Function(SpeechSynthesisUtterance, SpeechSynthesisEvent)? get onmark;
  external set onmark(dynamic Function(SpeechSynthesisUtterance, SpeechSynthesisEvent)? value);
  external dynamic Function(SpeechSynthesisUtterance, SpeechSynthesisEvent)? get onpause;
  external set onpause(dynamic Function(SpeechSynthesisUtterance, SpeechSynthesisEvent)? value);
  external dynamic Function(SpeechSynthesisUtterance, SpeechSynthesisEvent)? get onresume;
  external set onresume(dynamic Function(SpeechSynthesisUtterance, SpeechSynthesisEvent)? value);
  external dynamic Function(SpeechSynthesisUtterance, SpeechSynthesisEvent)? get onstart;
  external set onstart(dynamic Function(SpeechSynthesisUtterance, SpeechSynthesisEvent)? value);
  external num get pitch;
  external set pitch(num value);
  external num get rate;
  external set rate(num value);
  external String get text;
  external set text(String value);
  external SpeechSynthesisVoice? get voice;
  external set voice(SpeechSynthesisVoice? value);
  external num get volume;
  external set volume(num value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(SpeechSynthesisUtterance, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(SpeechSynthesisUtterance, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("SpeechSynthesisUtterance")
external AnonInterface$571 SpeechSynthesisUtterance;
@JS()
@anonymous
abstract class SpeechSynthesisVoice{}
extension SpeechSynthesisVoiceExtension on SpeechSynthesisVoice {
  external bool get default;
  external String get lang;
  external bool get localService;
  external String get name;
  external String get voiceURI;
}
@JS("SpeechSynthesisVoice")
external AnonInterface$572 SpeechSynthesisVoice;
@JS()
@anonymous
abstract class StaticRange{}
extension StaticRangeExtension on StaticRange {
}
@JS("StaticRange")
external AnonInterface$573 StaticRange;
@JS()
@anonymous
abstract class StereoPannerNode{}
extension StereoPannerNodeExtension on StereoPannerNode {
  external AudioParam get pan;
}
@JS("StereoPannerNode")
external AnonInterface$574 StereoPannerNode;
@JS()
@anonymous
abstract class Storage{}
extension StorageExtension on Storage {
  external num get length;
  @JS("clear")
  external void clear();
  @JS("getItem")
  external String? getItem(String key);
  @JS("key")
  external String? key(num index);
  @JS("removeItem")
  external void removeItem(String key);
  @JS("setItem")
  external void setItem(String key, String value);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("Storage")
external AnonInterface$575 Storage;
@JS()
@anonymous
abstract class StorageEvent{}
extension StorageEventExtension on StorageEvent {
  external String? get key;
  external String? get newValue;
  external String? get oldValue;
  external Storage? get storageArea;
  external String get url;
  @JS("initStorageEvent")
  external void initStorageEvent(String type, [bool bubbles, bool cancelable, String? key, String? oldValue, String? newValue, dynamic /* String|URL */ url, Storage? storageArea]);
}
@JS("StorageEvent")
external AnonInterface$576 StorageEvent;
@JS()
@anonymous
abstract class StorageManager{}
extension StorageManagerExtension on StorageManager {
  @JS("estimate")
  external Future<StorageEstimate> estimate();
  @JS("getDirectory")
  external Future<FileSystemDirectoryHandle> getDirectory();
  @JS("persist")
  external Future<bool> persist();
  @JS("persisted")
  external Future<bool> persisted();
}
@JS("StorageManager")
external AnonInterface$577 StorageManager;
@JS()
@anonymous
abstract class StyleMedia{}
extension StyleMediaExtension on StyleMedia {
  external String get type;
  external set type(String value);
  @JS("matchMedium")
  external bool matchMedium(String mediaquery);
}
@JS()
@anonymous
abstract class StylePropertyMap{}
extension StylePropertyMapExtension on StylePropertyMap {
  @JS("append")
  external void append(String property, [/* rest */ List<dynamic /* CSSStyleValue|String */> values]);
  @JS("clear")
  external void clear();
  @JS("delete")
  external void delete(String property);
  @JS("set")
  external void set(String property, [/* rest */ List<dynamic /* CSSStyleValue|String */> values]);
}
@JS("StylePropertyMap")
external AnonInterface$578 StylePropertyMap;
@JS()
@anonymous
abstract class StylePropertyMapReadOnly{}
extension StylePropertyMapReadOnlyExtension on StylePropertyMapReadOnly {
  external num get size;
  @JS("get")
  external CSSStyleValue? get(String property);
  @JS("getAll")
  external List<CSSStyleValue> getAll(String property);
  @JS("has")
  external bool has(String property);
  @JS("forEach")
  external void forEach(void Function(List<CSSStyleValue>, String, StylePropertyMapReadOnly) callbackfn, [dynamic thisArg]);
}
@JS("StylePropertyMapReadOnly")
external AnonInterface$579 StylePropertyMapReadOnly;
@JS()
@anonymous
abstract class StyleSheet{}
extension StyleSheetExtension on StyleSheet {
  external bool get disabled;
  external set disabled(bool value);
  external String? get href;
  external dynamic /* Element|ProcessingInstruction */ get ownerNode;
  external CSSStyleSheet? get parentStyleSheet;
  external String? get title;
  external String get type;
  external MediaList get media;
  external set media(String mediaText);
}
@JS("StyleSheet")
external AnonInterface$580 StyleSheet;
@JS()
@anonymous
abstract class StyleSheetList{}
extension StyleSheetListExtension on StyleSheetList {
  external num get length;
  @JS("item")
  external CSSStyleSheet? item(num index);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("StyleSheetList")
external AnonInterface$581 StyleSheetList;
@JS()
@anonymous
abstract class SubmitEvent{}
extension SubmitEventExtension on SubmitEvent {
  external HTMLElement? get submitter;
}
@JS("SubmitEvent")
external AnonInterface$582 SubmitEvent;
@JS()
@anonymous
abstract class SubtleCrypto{}
extension SubtleCryptoExtension on SubtleCrypto {
  @JS("decrypt")
  external Future<ArrayBuffer> decrypt(dynamic /* AlgorithmIdentifier|RsaOaepParams|AesCtrParams|AesCbcParams|AesGcmParams */ algorithm, CryptoKey key, BufferSource data);
  @JS("deriveBits")
  external Future<ArrayBuffer> deriveBits(dynamic /* AlgorithmIdentifier|EcdhKeyDeriveParams|HkdfParams|Pbkdf2Params */ algorithm, CryptoKey baseKey, [num? length]);
  @JS("deriveKey")
  external Future<CryptoKey> deriveKey(dynamic /* AlgorithmIdentifier|EcdhKeyDeriveParams|HkdfParams|Pbkdf2Params */ algorithm, CryptoKey baseKey, dynamic /* AlgorithmIdentifier|AesDerivedKeyParams|HmacImportParams|HkdfParams|Pbkdf2Params */ derivedKeyType, bool extractable, List<KeyUsage> keyUsages);
  @JS("digest")
  external Future<ArrayBuffer> digest(AlgorithmIdentifier algorithm, BufferSource data);
  @JS("encrypt")
  external Future<ArrayBuffer> encrypt(dynamic /* AlgorithmIdentifier|RsaOaepParams|AesCtrParams|AesCbcParams|AesGcmParams */ algorithm, CryptoKey key, BufferSource data);
  @JS("exportKey")
  external Future<JsonWebKey> exportKey(String format, CryptoKey key);
  @JS("exportKey")
  external Future<ArrayBuffer> exportKey(Exclude<KeyFormat, String> format, CryptoKey key);
  @JS("exportKey")
  external Future<dynamic /* ArrayBuffer|JsonWebKey */> exportKey(KeyFormat format, CryptoKey key);
  @JS("generateKey")
  external Future<CryptoKeyPair> generateKey(dynamic /* String|dynamic */ algorithm, bool extractable, ReadonlyArray<String> keyUsages);
  @JS("generateKey")
  external Future<CryptoKeyPair> generateKey(dynamic /* RsaHashedKeyGenParams|EcKeyGenParams */ algorithm, bool extractable, ReadonlyArray<KeyUsage> keyUsages);
  @JS("generateKey")
  external Future<CryptoKey> generateKey(dynamic /* AesKeyGenParams|HmacKeyGenParams|Pbkdf2Params */ algorithm, bool extractable, ReadonlyArray<KeyUsage> keyUsages);
  @JS("generateKey")
  external Future<dynamic /* CryptoKeyPair|CryptoKey */> generateKey(AlgorithmIdentifier algorithm, bool extractable, List<KeyUsage> keyUsages);
  @JS("importKey")
  external Future<CryptoKey> importKey(String format, JsonWebKey keyData, dynamic /* AlgorithmIdentifier|RsaHashedImportParams|EcKeyImportParams|HmacImportParams|AesKeyAlgorithm */ algorithm, bool extractable, ReadonlyArray<KeyUsage> keyUsages);
  @JS("importKey")
  external Future<CryptoKey> importKey(Exclude<KeyFormat, String> format, BufferSource keyData, dynamic /* AlgorithmIdentifier|RsaHashedImportParams|EcKeyImportParams|HmacImportParams|AesKeyAlgorithm */ algorithm, bool extractable, List<KeyUsage> keyUsages);
  @JS("sign")
  external Future<ArrayBuffer> sign(dynamic /* AlgorithmIdentifier|RsaPssParams|EcdsaParams */ algorithm, CryptoKey key, BufferSource data);
  @JS("unwrapKey")
  external Future<CryptoKey> unwrapKey(KeyFormat format, BufferSource wrappedKey, CryptoKey unwrappingKey, dynamic /* AlgorithmIdentifier|RsaOaepParams|AesCtrParams|AesCbcParams|AesGcmParams */ unwrapAlgorithm, dynamic /* AlgorithmIdentifier|RsaHashedImportParams|EcKeyImportParams|HmacImportParams|AesKeyAlgorithm */ unwrappedKeyAlgorithm, bool extractable, List<KeyUsage> keyUsages);
  @JS("verify")
  external Future<bool> verify(dynamic /* AlgorithmIdentifier|RsaPssParams|EcdsaParams */ algorithm, CryptoKey key, BufferSource signature, BufferSource data);
  @JS("wrapKey")
  external Future<ArrayBuffer> wrapKey(KeyFormat format, CryptoKey key, CryptoKey wrappingKey, dynamic /* AlgorithmIdentifier|RsaOaepParams|AesCtrParams|AesCbcParams|AesGcmParams */ wrapAlgorithm);
}
@JS("SubtleCrypto")
external AnonInterface$584 SubtleCrypto;
@JS()
@anonymous
abstract class Text{}
extension TextExtension on Text {
  external String get wholeText;
  @JS("splitText")
  external Text splitText(num offset);
}
@JS("Text")
external AnonInterface$585 Text;
@JS()
@anonymous
abstract class TextDecoder{}
extension TextDecoderExtension on TextDecoder {
  @JS("decode")
  external String decode([AllowSharedBufferSource input, TextDecodeOptions options]);
}
@JS("TextDecoder")
external AnonInterface$586 TextDecoder;
@JS()
@anonymous
abstract class TextDecoderCommon{}
extension TextDecoderCommonExtension on TextDecoderCommon {
  external String get encoding;
  external bool get fatal;
  external bool get ignoreBOM;
}
@JS()
@anonymous
abstract class TextDecoderStream{}
extension TextDecoderStreamExtension on TextDecoderStream {
  external ReadableStream<String> get readable;
  external WritableStream<BufferSource> get writable;
}
@JS("TextDecoderStream")
external AnonInterface$587 TextDecoderStream;
@JS()
@anonymous
abstract class TextEncoder{}
extension TextEncoderExtension on TextEncoder {
  @JS("encode")
  external Uint8Array encode([String input]);
  @JS("encodeInto")
  external TextEncoderEncodeIntoResult encodeInto(String source, Uint8Array destination);
}
@JS("TextEncoder")
external AnonInterface$588 TextEncoder;
@JS()
@anonymous
abstract class TextEncoderCommon{}
extension TextEncoderCommonExtension on TextEncoderCommon {
  external String get encoding;
}
@JS()
@anonymous
abstract class TextEncoderStream{}
extension TextEncoderStreamExtension on TextEncoderStream {
  external ReadableStream<Uint8Array> get readable;
  external WritableStream<String> get writable;
}
@JS("TextEncoderStream")
external AnonInterface$589 TextEncoderStream;
@JS()
@anonymous
abstract class TextEvent{}
extension TextEventExtension on TextEvent {
  external String get data;
  @JS("initTextEvent")
  external void initTextEvent(String type, [bool bubbles, bool cancelable, Window? view, String data]);
}
@JS("TextEvent")
external AnonInterface$590 TextEvent;
@JS()
@anonymous
abstract class TextMetrics{}
extension TextMetricsExtension on TextMetrics {
  external num get actualBoundingBoxAscent;
  external num get actualBoundingBoxDescent;
  external num get actualBoundingBoxLeft;
  external num get actualBoundingBoxRight;
  external num get alphabeticBaseline;
  external num get emHeightAscent;
  external num get emHeightDescent;
  external num get fontBoundingBoxAscent;
  external num get fontBoundingBoxDescent;
  external num get hangingBaseline;
  external num get ideographicBaseline;
  external num get width;
}
@JS("TextMetrics")
external AnonInterface$591 TextMetrics;
@JS()
@anonymous
abstract class TextTrackEventMap{}
extension TextTrackEventMapExtension on TextTrackEventMap {
  external Event get "cuechange";
  external set "cuechange"(Event value);
}
@JS()
@anonymous
abstract class TextTrack{}
extension TextTrackExtension on TextTrack {
  external TextTrackCueList? get activeCues;
  external TextTrackCueList? get cues;
  external String get id;
  external String get inBandMetadataTrackDispatchType;
  external TextTrackKind get kind;
  external String get label;
  external String get language;
  external TextTrackMode get mode;
  external set mode(TextTrackMode value);
  external dynamic Function(TextTrack, Event)? get oncuechange;
  external set oncuechange(dynamic Function(TextTrack, Event)? value);
  @JS("addCue")
  external void addCue(TextTrackCue cue);
  @JS("removeCue")
  external void removeCue(TextTrackCue cue);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(TextTrack, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(TextTrack, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("TextTrack")
external AnonInterface$592 TextTrack;
@JS()
@anonymous
abstract class TextTrackCueEventMap{}
extension TextTrackCueEventMapExtension on TextTrackCueEventMap {
  external Event get "enter";
  external set "enter"(Event value);
  external Event get "exit";
  external set "exit"(Event value);
}
@JS()
@anonymous
abstract class TextTrackCue{}
extension TextTrackCueExtension on TextTrackCue {
  external num get endTime;
  external set endTime(num value);
  external String get id;
  external set id(String value);
  external dynamic Function(TextTrackCue, Event)? get onenter;
  external set onenter(dynamic Function(TextTrackCue, Event)? value);
  external dynamic Function(TextTrackCue, Event)? get onexit;
  external set onexit(dynamic Function(TextTrackCue, Event)? value);
  external bool get pauseOnExit;
  external set pauseOnExit(bool value);
  external num get startTime;
  external set startTime(num value);
  external TextTrack? get track;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(TextTrackCue, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(TextTrackCue, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("TextTrackCue")
external AnonInterface$593 TextTrackCue;
@JS()
@anonymous
abstract class TextTrackCueList{}
extension TextTrackCueListExtension on TextTrackCueList {
  external num get length;
  @JS("getCueById")
  external TextTrackCue? getCueById(String id);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("TextTrackCueList")
external AnonInterface$594 TextTrackCueList;
@JS()
@anonymous
abstract class TextTrackListEventMap{}
extension TextTrackListEventMapExtension on TextTrackListEventMap {
  external TrackEvent get "addtrack";
  external set "addtrack"(TrackEvent value);
  external Event get "change";
  external set "change"(Event value);
  external TrackEvent get "removetrack";
  external set "removetrack"(TrackEvent value);
}
@JS()
@anonymous
abstract class TextTrackList{}
extension TextTrackListExtension on TextTrackList {
  external num get length;
  external dynamic Function(TextTrackList, TrackEvent)? get onaddtrack;
  external set onaddtrack(dynamic Function(TextTrackList, TrackEvent)? value);
  external dynamic Function(TextTrackList, Event)? get onchange;
  external set onchange(dynamic Function(TextTrackList, Event)? value);
  external dynamic Function(TextTrackList, TrackEvent)? get onremovetrack;
  external set onremovetrack(dynamic Function(TextTrackList, TrackEvent)? value);
  @JS("getTrackById")
  external TextTrack? getTrackById(String id);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(TextTrackList, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(TextTrackList, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("TextTrackList")
external AnonInterface$595 TextTrackList;
@JS()
@anonymous
abstract class TimeRanges{}
extension TimeRangesExtension on TimeRanges {
  external num get length;
  @JS("end")
  external num end(num index);
  @JS("start")
  external num start(num index);
}
@JS("TimeRanges")
external AnonInterface$596 TimeRanges;
@JS()
@anonymous
abstract class ToggleEvent{}
extension ToggleEventExtension on ToggleEvent {
  external String get newState;
  external String get oldState;
}
@JS("ToggleEvent")
external AnonInterface$597 ToggleEvent;
@JS()
@anonymous
abstract class Touch{}
extension TouchExtension on Touch {
  external num get clientX;
  external num get clientY;
  external num get force;
  external num get identifier;
  external num get pageX;
  external num get pageY;
  external num get radiusX;
  external num get radiusY;
  external num get rotationAngle;
  external num get screenX;
  external num get screenY;
  external EventTarget get target;
}
@JS("Touch")
external AnonInterface$598 Touch;
@JS()
@anonymous
abstract class TouchEvent{}
extension TouchEventExtension on TouchEvent {
  external bool get altKey;
  external TouchList get changedTouches;
  external bool get ctrlKey;
  external bool get metaKey;
  external bool get shiftKey;
  external TouchList get targetTouches;
  external TouchList get touches;
}
@JS("TouchEvent")
external AnonInterface$599 TouchEvent;
@JS()
@anonymous
abstract class TouchList{}
extension TouchListExtension on TouchList {
  external num get length;
  @JS("item")
  external Touch? item(num index);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("TouchList")
external AnonInterface$600 TouchList;
@JS()
@anonymous
abstract class TrackEvent{}
extension TrackEventExtension on TrackEvent {
  external TextTrack? get track;
}
@JS("TrackEvent")
external AnonInterface$601 TrackEvent;
@JS()
@anonymous
abstract class TransformStream{}
extension TransformStreamExtension on TransformStream {
  external ReadableStream<O> get readable;
  external WritableStream<I> get writable;
}
@JS("TransformStream")
external AnonInterface$602 TransformStream;
@JS()
@anonymous
abstract class TransformStreamDefaultController{}
extension TransformStreamDefaultControllerExtension on TransformStreamDefaultController {
  external num? get desiredSize;
  @JS("enqueue")
  external void enqueue([O chunk]);
  @JS("error")
  external void error([dynamic reason]);
  @JS("terminate")
  external void terminate();
}
@JS("TransformStreamDefaultController")
external AnonInterface$603 TransformStreamDefaultController;
@JS()
@anonymous
abstract class TransitionEvent{}
extension TransitionEventExtension on TransitionEvent {
  external num get elapsedTime;
  external String get propertyName;
  external String get pseudoElement;
}
@JS("TransitionEvent")
external AnonInterface$604 TransitionEvent;
@JS()
@anonymous
abstract class TreeWalker{}
extension TreeWalkerExtension on TreeWalker {
  external Node get currentNode;
  external set currentNode(Node value);
  external NodeFilter? get filter;
  external Node get root;
  external num get whatToShow;
  @JS("firstChild")
  external Node? firstChild();
  @JS("lastChild")
  external Node? lastChild();
  @JS("nextNode")
  external Node? nextNode();
  @JS("nextSibling")
  external Node? nextSibling();
  @JS("parentNode")
  external Node? parentNode();
  @JS("previousNode")
  external Node? previousNode();
  @JS("previousSibling")
  external Node? previousSibling();
}
@JS("TreeWalker")
external AnonInterface$605 TreeWalker;
@JS()
@anonymous
abstract class UIEvent{}
extension UIEventExtension on UIEvent {
  external num get detail;
  external Window? get view;
  external num get which;
  @JS("initUIEvent")
  external void initUIEvent(String typeArg, [bool bubblesArg, bool cancelableArg, Window? viewArg, num detailArg]);
}
@JS("UIEvent")
external AnonInterface$606 UIEvent;
@JS()
@anonymous
abstract class URL{}
extension URLExtension on URL {
  external String get hash;
  external set hash(String value);
  external String get host;
  external set host(String value);
  external String get hostname;
  external set hostname(String value);
  external String get href;
  external set href(String value);
  external String get origin;
  external String get password;
  external set password(String value);
  external String get pathname;
  external set pathname(String value);
  external String get port;
  external set port(String value);
  external String get protocol;
  external set protocol(String value);
  external String get search;
  external set search(String value);
  external URLSearchParams get searchParams;
  external String get username;
  external set username(String value);
  @JS("toString")
  external String toString();
  @JS("toJSON")
  external String toJSON();
}
@JS("URL")
external AnonInterface$607 URL;
typedef webkitURL = URL;
@JS("webkitURL")
external dynamic webkitURL;
@JS()
@anonymous
abstract class URLSearchParams{}
extension URLSearchParamsExtension on URLSearchParams {
  external num get size;
  @JS("append")
  external void append(String name, String value);
  @JS("delete")
  external void delete(String name, [String value]);
  @JS("get")
  external String? get(String name);
  @JS("getAll")
  external List<String> getAll(String name);
  @JS("has")
  external bool has(String name, [String value]);
  @JS("set")
  external void set(String name, String value);
  @JS("sort")
  external void sort();
  @JS("toString")
  external String toString();
  @JS("forEach")
  external void forEach(void Function(String, String, URLSearchParams) callbackfn, [dynamic thisArg]);
}
@JS("URLSearchParams")
external AnonInterface$608 URLSearchParams;
@JS()
@anonymous
abstract class UserActivation{}
extension UserActivationExtension on UserActivation {
  external bool get hasBeenActive;
  external bool get isActive;
}
@JS("UserActivation")
external AnonInterface$609 UserActivation;
@JS()
@anonymous
abstract class VTTCue{}
extension VTTCueExtension on VTTCue {
  external AlignSetting get align;
  external set align(AlignSetting value);
  external LineAndPositionSetting get line;
  external set line(LineAndPositionSetting value);
  external LineAlignSetting get lineAlign;
  external set lineAlign(LineAlignSetting value);
  external LineAndPositionSetting get position;
  external set position(LineAndPositionSetting value);
  external PositionAlignSetting get positionAlign;
  external set positionAlign(PositionAlignSetting value);
  external VTTRegion? get region;
  external set region(VTTRegion? value);
  external num get size;
  external set size(num value);
  external bool get snapToLines;
  external set snapToLines(bool value);
  external String get text;
  external set text(String value);
  external DirectionSetting get vertical;
  external set vertical(DirectionSetting value);
  @JS("getCueAsHTML")
  external DocumentFragment getCueAsHTML();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(VTTCue, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(VTTCue, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("VTTCue")
external AnonInterface$610 VTTCue;
@JS()
@anonymous
abstract class VTTRegion{}
extension VTTRegionExtension on VTTRegion {
  external String get id;
  external set id(String value);
  external num get lines;
  external set lines(num value);
  external num get regionAnchorX;
  external set regionAnchorX(num value);
  external num get regionAnchorY;
  external set regionAnchorY(num value);
  external ScrollSetting get scroll;
  external set scroll(ScrollSetting value);
  external num get viewportAnchorX;
  external set viewportAnchorX(num value);
  external num get viewportAnchorY;
  external set viewportAnchorY(num value);
  external num get width;
  external set width(num value);
}
@JS("VTTRegion")
external AnonInterface$611 VTTRegion;
@JS()
@anonymous
abstract class ValidityState{}
extension ValidityStateExtension on ValidityState {
  external bool get badInput;
  external bool get customError;
  external bool get patternMismatch;
  external bool get rangeOverflow;
  external bool get rangeUnderflow;
  external bool get stepMismatch;
  external bool get tooLong;
  external bool get tooShort;
  external bool get typeMismatch;
  external bool get valid;
  external bool get valueMissing;
}
@JS("ValidityState")
external AnonInterface$612 ValidityState;
@JS()
@anonymous
abstract class VideoColorSpace{}
extension VideoColorSpaceExtension on VideoColorSpace {
  external bool? get fullRange;
  external VideoMatrixCoefficients? get matrix;
  external VideoColorPrimaries? get primaries;
  external VideoTransferCharacteristics? get transfer;
  @JS("toJSON")
  external VideoColorSpaceInit toJSON();
}
@JS("VideoColorSpace")
external AnonInterface$613 VideoColorSpace;
@JS()
@anonymous
abstract class VideoDecoderEventMap{}
extension VideoDecoderEventMapExtension on VideoDecoderEventMap {
  external Event get "dequeue";
  external set "dequeue"(Event value);
}
@JS()
@anonymous
abstract class VideoDecoder{}
extension VideoDecoderExtension on VideoDecoder {
  external num get decodeQueueSize;
  external dynamic Function(VideoDecoder, Event)? get ondequeue;
  external set ondequeue(dynamic Function(VideoDecoder, Event)? value);
  external CodecState get state;
  @JS("close")
  external void close();
  @JS("configure")
  external void configure(VideoDecoderConfig config);
  @JS("decode")
  external void decode(EncodedVideoChunk chunk);
  @JS("flush")
  external Future<void> flush();
  @JS("reset")
  external void reset();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(VideoDecoder, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(VideoDecoder, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("VideoDecoder")
external AnonInterface$614 VideoDecoder;
@JS()
@anonymous
abstract class VideoEncoderEventMap{}
extension VideoEncoderEventMapExtension on VideoEncoderEventMap {
  external Event get "dequeue";
  external set "dequeue"(Event value);
}
@JS()
@anonymous
abstract class VideoEncoder{}
extension VideoEncoderExtension on VideoEncoder {
  external num get encodeQueueSize;
  external dynamic Function(VideoEncoder, Event)? get ondequeue;
  external set ondequeue(dynamic Function(VideoEncoder, Event)? value);
  external CodecState get state;
  @JS("close")
  external void close();
  @JS("configure")
  external void configure(VideoEncoderConfig config);
  @JS("encode")
  external void encode(VideoFrame frame, [VideoEncoderEncodeOptions options]);
  @JS("flush")
  external Future<void> flush();
  @JS("reset")
  external void reset();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(VideoEncoder, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(VideoEncoder, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("VideoEncoder")
external AnonInterface$615 VideoEncoder;
@JS()
@anonymous
abstract class VideoFrame{}
extension VideoFrameExtension on VideoFrame {
  external num get codedHeight;
  external DOMRectReadOnly? get codedRect;
  external num get codedWidth;
  external VideoColorSpace get colorSpace;
  external num get displayHeight;
  external num get displayWidth;
  external num? get duration;
  external VideoPixelFormat? get format;
  external num get timestamp;
  external DOMRectReadOnly? get visibleRect;
  @JS("allocationSize")
  external num allocationSize([VideoFrameCopyToOptions options]);
  @JS("clone")
  external VideoFrame clone();
  @JS("close")
  external void close();
  @JS("copyTo")
  external Future<List<PlaneLayout>> copyTo(AllowSharedBufferSource destination, [VideoFrameCopyToOptions options]);
}
@JS("VideoFrame")
external AnonInterface$616 VideoFrame;
@JS()
@anonymous
abstract class VideoPlaybackQuality{}
extension VideoPlaybackQualityExtension on VideoPlaybackQuality {
  external num get corruptedVideoFrames;
  external DOMHighResTimeStamp get creationTime;
  external num get droppedVideoFrames;
  external num get totalVideoFrames;
}
@JS("VideoPlaybackQuality")
external AnonInterface$617 VideoPlaybackQuality;
@JS()
@anonymous
abstract class ViewTransition{}
extension ViewTransitionExtension on ViewTransition {
  external Future<void> get finished;
  external Future<void> get ready;
  external ViewTransitionTypeSet get types;
  external set types(ViewTransitionTypeSet value);
  external Future<void> get updateCallbackDone;
  @JS("skipTransition")
  external void skipTransition();
}
@JS("ViewTransition")
external AnonInterface$618 ViewTransition;
@JS()
@anonymous
abstract class ViewTransitionTypeSet{}
extension ViewTransitionTypeSetExtension on ViewTransitionTypeSet {
  @JS("forEach")
  external void forEach(void Function(String, String, ViewTransitionTypeSet) callbackfn, [dynamic thisArg]);
}
@JS("ViewTransitionTypeSet")
external AnonInterface$619 ViewTransitionTypeSet;
@JS()
@anonymous
abstract class VisualViewportEventMap{}
extension VisualViewportEventMapExtension on VisualViewportEventMap {
  external Event get "resize";
  external set "resize"(Event value);
  external Event get "scroll";
  external set "scroll"(Event value);
}
@JS()
@anonymous
abstract class VisualViewport{}
extension VisualViewportExtension on VisualViewport {
  external num get height;
  external num get offsetLeft;
  external num get offsetTop;
  external dynamic Function(VisualViewport, Event)? get onresize;
  external set onresize(dynamic Function(VisualViewport, Event)? value);
  external dynamic Function(VisualViewport, Event)? get onscroll;
  external set onscroll(dynamic Function(VisualViewport, Event)? value);
  external num get pageLeft;
  external num get pageTop;
  external num get scale;
  external num get width;
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(VisualViewport, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(VisualViewport, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("VisualViewport")
external AnonInterface$620 VisualViewport;
@JS()
@anonymous
abstract class WEBGL_color_buffer_float{}
extension WEBGL_color_buffer_floatExtension on WEBGL_color_buffer_float {
  external num get RGBA32F_EXT;
  external num get FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT;
  external num get UNSIGNED_NORMALIZED_EXT;
}
@JS()
@anonymous
abstract class WEBGL_compressed_texture_astc{}
extension WEBGL_compressed_texture_astcExtension on WEBGL_compressed_texture_astc {
  external num get COMPRESSED_RGBA_ASTC_4x4_KHR;
  external num get COMPRESSED_RGBA_ASTC_5x4_KHR;
  external num get COMPRESSED_RGBA_ASTC_5x5_KHR;
  external num get COMPRESSED_RGBA_ASTC_6x5_KHR;
  external num get COMPRESSED_RGBA_ASTC_6x6_KHR;
  external num get COMPRESSED_RGBA_ASTC_8x5_KHR;
  external num get COMPRESSED_RGBA_ASTC_8x6_KHR;
  external num get COMPRESSED_RGBA_ASTC_8x8_KHR;
  external num get COMPRESSED_RGBA_ASTC_10x5_KHR;
  external num get COMPRESSED_RGBA_ASTC_10x6_KHR;
  external num get COMPRESSED_RGBA_ASTC_10x8_KHR;
  external num get COMPRESSED_RGBA_ASTC_10x10_KHR;
  external num get COMPRESSED_RGBA_ASTC_12x10_KHR;
  external num get COMPRESSED_RGBA_ASTC_12x12_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR;
  external num get COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR;
  @JS("getSupportedProfiles")
  external List<String> getSupportedProfiles();
}
@JS()
@anonymous
abstract class WEBGL_compressed_texture_etc{}
extension WEBGL_compressed_texture_etcExtension on WEBGL_compressed_texture_etc {
  external num get COMPRESSED_R11_EAC;
  external num get COMPRESSED_SIGNED_R11_EAC;
  external num get COMPRESSED_RG11_EAC;
  external num get COMPRESSED_SIGNED_RG11_EAC;
  external num get COMPRESSED_RGB8_ETC2;
  external num get COMPRESSED_SRGB8_ETC2;
  external num get COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;
  external num get COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;
  external num get COMPRESSED_RGBA8_ETC2_EAC;
  external num get COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;
}
@JS()
@anonymous
abstract class WEBGL_compressed_texture_etc1{}
extension WEBGL_compressed_texture_etc1Extension on WEBGL_compressed_texture_etc1 {
  external num get COMPRESSED_RGB_ETC1_WEBGL;
}
@JS()
@anonymous
abstract class WEBGL_compressed_texture_pvrtc{}
extension WEBGL_compressed_texture_pvrtcExtension on WEBGL_compressed_texture_pvrtc {
  external num get COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
  external num get COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
  external num get COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
  external num get COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
}
@JS()
@anonymous
abstract class WEBGL_compressed_texture_s3tc{}
extension WEBGL_compressed_texture_s3tcExtension on WEBGL_compressed_texture_s3tc {
  external num get COMPRESSED_RGB_S3TC_DXT1_EXT;
  external num get COMPRESSED_RGBA_S3TC_DXT1_EXT;
  external num get COMPRESSED_RGBA_S3TC_DXT3_EXT;
  external num get COMPRESSED_RGBA_S3TC_DXT5_EXT;
}
@JS()
@anonymous
abstract class WEBGL_compressed_texture_s3tc_srgb{}
extension WEBGL_compressed_texture_s3tc_srgbExtension on WEBGL_compressed_texture_s3tc_srgb {
  external num get COMPRESSED_SRGB_S3TC_DXT1_EXT;
  external num get COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
  external num get COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
  external num get COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
}
@JS()
@anonymous
abstract class WEBGL_debug_renderer_info{}
extension WEBGL_debug_renderer_infoExtension on WEBGL_debug_renderer_info {
  external num get UNMASKED_VENDOR_WEBGL;
  external num get UNMASKED_RENDERER_WEBGL;
}
@JS()
@anonymous
abstract class WEBGL_debug_shaders{}
extension WEBGL_debug_shadersExtension on WEBGL_debug_shaders {
  @JS("getTranslatedShaderSource")
  external String getTranslatedShaderSource(WebGLShader shader);
}
@JS()
@anonymous
abstract class WEBGL_depth_texture{}
extension WEBGL_depth_textureExtension on WEBGL_depth_texture {
  external num get UNSIGNED_INT_24_8_WEBGL;
}
@JS()
@anonymous
abstract class WEBGL_draw_buffers{}
extension WEBGL_draw_buffersExtension on WEBGL_draw_buffers {
  external num get COLOR_ATTACHMENT0_WEBGL;
  external num get COLOR_ATTACHMENT1_WEBGL;
  external num get COLOR_ATTACHMENT2_WEBGL;
  external num get COLOR_ATTACHMENT3_WEBGL;
  external num get COLOR_ATTACHMENT4_WEBGL;
  external num get COLOR_ATTACHMENT5_WEBGL;
  external num get COLOR_ATTACHMENT6_WEBGL;
  external num get COLOR_ATTACHMENT7_WEBGL;
  external num get COLOR_ATTACHMENT8_WEBGL;
  external num get COLOR_ATTACHMENT9_WEBGL;
  external num get COLOR_ATTACHMENT10_WEBGL;
  external num get COLOR_ATTACHMENT11_WEBGL;
  external num get COLOR_ATTACHMENT12_WEBGL;
  external num get COLOR_ATTACHMENT13_WEBGL;
  external num get COLOR_ATTACHMENT14_WEBGL;
  external num get COLOR_ATTACHMENT15_WEBGL;
  external num get DRAW_BUFFER0_WEBGL;
  external num get DRAW_BUFFER1_WEBGL;
  external num get DRAW_BUFFER2_WEBGL;
  external num get DRAW_BUFFER3_WEBGL;
  external num get DRAW_BUFFER4_WEBGL;
  external num get DRAW_BUFFER5_WEBGL;
  external num get DRAW_BUFFER6_WEBGL;
  external num get DRAW_BUFFER7_WEBGL;
  external num get DRAW_BUFFER8_WEBGL;
  external num get DRAW_BUFFER9_WEBGL;
  external num get DRAW_BUFFER10_WEBGL;
  external num get DRAW_BUFFER11_WEBGL;
  external num get DRAW_BUFFER12_WEBGL;
  external num get DRAW_BUFFER13_WEBGL;
  external num get DRAW_BUFFER14_WEBGL;
  external num get DRAW_BUFFER15_WEBGL;
  external num get MAX_COLOR_ATTACHMENTS_WEBGL;
  external num get MAX_DRAW_BUFFERS_WEBGL;
  @JS("drawBuffersWEBGL")
  external void drawBuffersWEBGL(List<GLenum> buffers);
}
@JS()
@anonymous
abstract class WEBGL_lose_context{}
extension WEBGL_lose_contextExtension on WEBGL_lose_context {
  @JS("loseContext")
  external void loseContext();
  @JS("restoreContext")
  external void restoreContext();
}
@JS()
@anonymous
abstract class WEBGL_multi_draw{}
extension WEBGL_multi_drawExtension on WEBGL_multi_draw {
  @JS("multiDrawArraysInstancedWEBGL")
  external void multiDrawArraysInstancedWEBGL(GLenum mode, dynamic /* Int32Array|List<GLint> */ firstsList, num firstsOffset, dynamic /* Int32Array|List<GLsizei> */ countsList, num countsOffset, dynamic /* Int32Array|List<GLsizei> */ instanceCountsList, num instanceCountsOffset, GLsizei drawcount);
  @JS("multiDrawArraysWEBGL")
  external void multiDrawArraysWEBGL(GLenum mode, dynamic /* Int32Array|List<GLint> */ firstsList, num firstsOffset, dynamic /* Int32Array|List<GLsizei> */ countsList, num countsOffset, GLsizei drawcount);
  @JS("multiDrawElementsInstancedWEBGL")
  external void multiDrawElementsInstancedWEBGL(GLenum mode, dynamic /* Int32Array|List<GLsizei> */ countsList, num countsOffset, GLenum type, dynamic /* Int32Array|List<GLsizei> */ offsetsList, num offsetsOffset, dynamic /* Int32Array|List<GLsizei> */ instanceCountsList, num instanceCountsOffset, GLsizei drawcount);
  @JS("multiDrawElementsWEBGL")
  external void multiDrawElementsWEBGL(GLenum mode, dynamic /* Int32Array|List<GLsizei> */ countsList, num countsOffset, GLenum type, dynamic /* Int32Array|List<GLsizei> */ offsetsList, num offsetsOffset, GLsizei drawcount);
}
@JS()
@anonymous
abstract class WakeLock{}
extension WakeLockExtension on WakeLock {
  @JS("request")
  external Future<WakeLockSentinel> request([WakeLockType type]);
}
@JS("WakeLock")
external AnonInterface$621 WakeLock;
@JS()
@anonymous
abstract class WakeLockSentinelEventMap{}
extension WakeLockSentinelEventMapExtension on WakeLockSentinelEventMap {
  external Event get "release";
  external set "release"(Event value);
}
@JS()
@anonymous
abstract class WakeLockSentinel{}
extension WakeLockSentinelExtension on WakeLockSentinel {
  external dynamic Function(WakeLockSentinel, Event)? get onrelease;
  external set onrelease(dynamic Function(WakeLockSentinel, Event)? value);
  external bool get released;
  external WakeLockType get type;
  @JS("release")
  external Future<void> release();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(WakeLockSentinel, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(WakeLockSentinel, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("WakeLockSentinel")
external AnonInterface$622 WakeLockSentinel;
@JS()
@anonymous
abstract class WaveShaperNode{}
extension WaveShaperNodeExtension on WaveShaperNode {
  external Float32Array? get curve;
  external set curve(Float32Array? value);
  external OverSampleType get oversample;
  external set oversample(OverSampleType value);
}
@JS("WaveShaperNode")
external AnonInterface$623 WaveShaperNode;
@JS()
@anonymous
abstract class WebGL2RenderingContext{}
extension WebGL2RenderingContextExtension on WebGL2RenderingContext {
}
@JS("WebGL2RenderingContext")
external AnonInterface$624 WebGL2RenderingContext;
@JS()
@anonymous
abstract class WebGL2RenderingContextBase{}
extension WebGL2RenderingContextBaseExtension on WebGL2RenderingContextBase {
  external num get READ_BUFFER;
  external num get UNPACK_ROW_LENGTH;
  external num get UNPACK_SKIP_ROWS;
  external num get UNPACK_SKIP_PIXELS;
  external num get PACK_ROW_LENGTH;
  external num get PACK_SKIP_ROWS;
  external num get PACK_SKIP_PIXELS;
  external num get COLOR;
  external num get DEPTH;
  external num get STENCIL;
  external num get RED;
  external num get RGB8;
  external num get RGB10_A2;
  external num get TEXTURE_BINDING_3D;
  external num get UNPACK_SKIP_IMAGES;
  external num get UNPACK_IMAGE_HEIGHT;
  external num get TEXTURE_3D;
  external num get TEXTURE_WRAP_R;
  external num get MAX_3D_TEXTURE_SIZE;
  external num get UNSIGNED_INT_2_10_10_10_REV;
  external num get MAX_ELEMENTS_VERTICES;
  external num get MAX_ELEMENTS_INDICES;
  external num get TEXTURE_MIN_LOD;
  external num get TEXTURE_MAX_LOD;
  external num get TEXTURE_BASE_LEVEL;
  external num get TEXTURE_MAX_LEVEL;
  external num get MIN;
  external num get MAX;
  external num get DEPTH_COMPONENT24;
  external num get MAX_TEXTURE_LOD_BIAS;
  external num get TEXTURE_COMPARE_MODE;
  external num get TEXTURE_COMPARE_FUNC;
  external num get CURRENT_QUERY;
  external num get QUERY_RESULT;
  external num get QUERY_RESULT_AVAILABLE;
  external num get STREAM_READ;
  external num get STREAM_COPY;
  external num get STATIC_READ;
  external num get STATIC_COPY;
  external num get DYNAMIC_READ;
  external num get DYNAMIC_COPY;
  external num get MAX_DRAW_BUFFERS;
  external num get DRAW_BUFFER0;
  external num get DRAW_BUFFER1;
  external num get DRAW_BUFFER2;
  external num get DRAW_BUFFER3;
  external num get DRAW_BUFFER4;
  external num get DRAW_BUFFER5;
  external num get DRAW_BUFFER6;
  external num get DRAW_BUFFER7;
  external num get DRAW_BUFFER8;
  external num get DRAW_BUFFER9;
  external num get DRAW_BUFFER10;
  external num get DRAW_BUFFER11;
  external num get DRAW_BUFFER12;
  external num get DRAW_BUFFER13;
  external num get DRAW_BUFFER14;
  external num get DRAW_BUFFER15;
  external num get MAX_FRAGMENT_UNIFORM_COMPONENTS;
  external num get MAX_VERTEX_UNIFORM_COMPONENTS;
  external num get SAMPLER_3D;
  external num get SAMPLER_2D_SHADOW;
  external num get FRAGMENT_SHADER_DERIVATIVE_HINT;
  external num get PIXEL_PACK_BUFFER;
  external num get PIXEL_UNPACK_BUFFER;
  external num get PIXEL_PACK_BUFFER_BINDING;
  external num get PIXEL_UNPACK_BUFFER_BINDING;
  external num get FLOAT_MAT2x3;
  external num get FLOAT_MAT2x4;
  external num get FLOAT_MAT3x2;
  external num get FLOAT_MAT3x4;
  external num get FLOAT_MAT4x2;
  external num get FLOAT_MAT4x3;
  external num get SRGB;
  external num get SRGB8;
  external num get SRGB8_ALPHA8;
  external num get COMPARE_REF_TO_TEXTURE;
  external num get RGBA32F;
  external num get RGB32F;
  external num get RGBA16F;
  external num get RGB16F;
  external num get VERTEX_ATTRIB_ARRAY_INTEGER;
  external num get MAX_ARRAY_TEXTURE_LAYERS;
  external num get MIN_PROGRAM_TEXEL_OFFSET;
  external num get MAX_PROGRAM_TEXEL_OFFSET;
  external num get MAX_VARYING_COMPONENTS;
  external num get TEXTURE_2D_ARRAY;
  external num get TEXTURE_BINDING_2D_ARRAY;
  external num get R11F_G11F_B10F;
  external num get UNSIGNED_INT_10F_11F_11F_REV;
  external num get RGB9_E5;
  external num get UNSIGNED_INT_5_9_9_9_REV;
  external num get TRANSFORM_FEEDBACK_BUFFER_MODE;
  external num get MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS;
  external num get TRANSFORM_FEEDBACK_VARYINGS;
  external num get TRANSFORM_FEEDBACK_BUFFER_START;
  external num get TRANSFORM_FEEDBACK_BUFFER_SIZE;
  external num get TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN;
  external num get RASTERIZER_DISCARD;
  external num get MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS;
  external num get MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS;
  external num get INTERLEAVED_ATTRIBS;
  external num get SEPARATE_ATTRIBS;
  external num get TRANSFORM_FEEDBACK_BUFFER;
  external num get TRANSFORM_FEEDBACK_BUFFER_BINDING;
  external num get RGBA32UI;
  external num get RGB32UI;
  external num get RGBA16UI;
  external num get RGB16UI;
  external num get RGBA8UI;
  external num get RGB8UI;
  external num get RGBA32I;
  external num get RGB32I;
  external num get RGBA16I;
  external num get RGB16I;
  external num get RGBA8I;
  external num get RGB8I;
  external num get RED_INTEGER;
  external num get RGB_INTEGER;
  external num get RGBA_INTEGER;
  external num get SAMPLER_2D_ARRAY;
  external num get SAMPLER_2D_ARRAY_SHADOW;
  external num get SAMPLER_CUBE_SHADOW;
  external num get UNSIGNED_INT_VEC2;
  external num get UNSIGNED_INT_VEC3;
  external num get UNSIGNED_INT_VEC4;
  external num get INT_SAMPLER_2D;
  external num get INT_SAMPLER_3D;
  external num get INT_SAMPLER_CUBE;
  external num get INT_SAMPLER_2D_ARRAY;
  external num get UNSIGNED_INT_SAMPLER_2D;
  external num get UNSIGNED_INT_SAMPLER_3D;
  external num get UNSIGNED_INT_SAMPLER_CUBE;
  external num get UNSIGNED_INT_SAMPLER_2D_ARRAY;
  external num get DEPTH_COMPONENT32F;
  external num get DEPTH32F_STENCIL8;
  external num get FLOAT_32_UNSIGNED_INT_24_8_REV;
  external num get FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING;
  external num get FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE;
  external num get FRAMEBUFFER_ATTACHMENT_RED_SIZE;
  external num get FRAMEBUFFER_ATTACHMENT_GREEN_SIZE;
  external num get FRAMEBUFFER_ATTACHMENT_BLUE_SIZE;
  external num get FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE;
  external num get FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE;
  external num get FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE;
  external num get FRAMEBUFFER_DEFAULT;
  external num get UNSIGNED_INT_24_8;
  external num get DEPTH24_STENCIL8;
  external num get UNSIGNED_NORMALIZED;
  external num get DRAW_FRAMEBUFFER_BINDING;
  external num get READ_FRAMEBUFFER;
  external num get DRAW_FRAMEBUFFER;
  external num get READ_FRAMEBUFFER_BINDING;
  external num get RENDERBUFFER_SAMPLES;
  external num get FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER;
  external num get MAX_COLOR_ATTACHMENTS;
  external num get COLOR_ATTACHMENT1;
  external num get COLOR_ATTACHMENT2;
  external num get COLOR_ATTACHMENT3;
  external num get COLOR_ATTACHMENT4;
  external num get COLOR_ATTACHMENT5;
  external num get COLOR_ATTACHMENT6;
  external num get COLOR_ATTACHMENT7;
  external num get COLOR_ATTACHMENT8;
  external num get COLOR_ATTACHMENT9;
  external num get COLOR_ATTACHMENT10;
  external num get COLOR_ATTACHMENT11;
  external num get COLOR_ATTACHMENT12;
  external num get COLOR_ATTACHMENT13;
  external num get COLOR_ATTACHMENT14;
  external num get COLOR_ATTACHMENT15;
  external num get FRAMEBUFFER_INCOMPLETE_MULTISAMPLE;
  external num get MAX_SAMPLES;
  external num get HALF_FLOAT;
  external num get RG;
  external num get RG_INTEGER;
  external num get R8;
  external num get RG8;
  external num get R16F;
  external num get R32F;
  external num get RG16F;
  external num get RG32F;
  external num get R8I;
  external num get R8UI;
  external num get R16I;
  external num get R16UI;
  external num get R32I;
  external num get R32UI;
  external num get RG8I;
  external num get RG8UI;
  external num get RG16I;
  external num get RG16UI;
  external num get RG32I;
  external num get RG32UI;
  external num get VERTEX_ARRAY_BINDING;
  external num get R8_SNORM;
  external num get RG8_SNORM;
  external num get RGB8_SNORM;
  external num get RGBA8_SNORM;
  external num get SIGNED_NORMALIZED;
  external num get COPY_READ_BUFFER;
  external num get COPY_WRITE_BUFFER;
  external num get COPY_READ_BUFFER_BINDING;
  external num get COPY_WRITE_BUFFER_BINDING;
  external num get UNIFORM_BUFFER;
  external num get UNIFORM_BUFFER_BINDING;
  external num get UNIFORM_BUFFER_START;
  external num get UNIFORM_BUFFER_SIZE;
  external num get MAX_VERTEX_UNIFORM_BLOCKS;
  external num get MAX_FRAGMENT_UNIFORM_BLOCKS;
  external num get MAX_COMBINED_UNIFORM_BLOCKS;
  external num get MAX_UNIFORM_BUFFER_BINDINGS;
  external num get MAX_UNIFORM_BLOCK_SIZE;
  external num get MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS;
  external num get MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS;
  external num get UNIFORM_BUFFER_OFFSET_ALIGNMENT;
  external num get ACTIVE_UNIFORM_BLOCKS;
  external num get UNIFORM_TYPE;
  external num get UNIFORM_SIZE;
  external num get UNIFORM_BLOCK_INDEX;
  external num get UNIFORM_OFFSET;
  external num get UNIFORM_ARRAY_STRIDE;
  external num get UNIFORM_MATRIX_STRIDE;
  external num get UNIFORM_IS_ROW_MAJOR;
  external num get UNIFORM_BLOCK_BINDING;
  external num get UNIFORM_BLOCK_DATA_SIZE;
  external num get UNIFORM_BLOCK_ACTIVE_UNIFORMS;
  external num get UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES;
  external num get UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER;
  external num get UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER;
  external num get INVALID_INDEX;
  external num get MAX_VERTEX_OUTPUT_COMPONENTS;
  external num get MAX_FRAGMENT_INPUT_COMPONENTS;
  external num get MAX_SERVER_WAIT_TIMEOUT;
  external num get OBJECT_TYPE;
  external num get SYNC_CONDITION;
  external num get SYNC_STATUS;
  external num get SYNC_FLAGS;
  external num get SYNC_FENCE;
  external num get SYNC_GPU_COMMANDS_COMPLETE;
  external num get UNSIGNALED;
  external num get SIGNALED;
  external num get ALREADY_SIGNALED;
  external num get TIMEOUT_EXPIRED;
  external num get CONDITION_SATISFIED;
  external num get WAIT_FAILED;
  external num get SYNC_FLUSH_COMMANDS_BIT;
  external num get VERTEX_ATTRIB_ARRAY_DIVISOR;
  external num get ANY_SAMPLES_PASSED;
  external num get ANY_SAMPLES_PASSED_CONSERVATIVE;
  external num get SAMPLER_BINDING;
  external num get RGB10_A2UI;
  external num get INT_2_10_10_10_REV;
  external num get TRANSFORM_FEEDBACK;
  external num get TRANSFORM_FEEDBACK_PAUSED;
  external num get TRANSFORM_FEEDBACK_ACTIVE;
  external num get TRANSFORM_FEEDBACK_BINDING;
  external num get TEXTURE_IMMUTABLE_FORMAT;
  external num get MAX_ELEMENT_INDEX;
  external num get TEXTURE_IMMUTABLE_LEVELS;
  external num get TIMEOUT_IGNORED;
  external num get MAX_CLIENT_WAIT_TIMEOUT_WEBGL;
  @JS("beginQuery")
  external void beginQuery(GLenum target, WebGLQuery query);
  @JS("beginTransformFeedback")
  external void beginTransformFeedback(GLenum primitiveMode);
  @JS("bindBufferBase")
  external void bindBufferBase(GLenum target, GLuint index, WebGLBuffer? buffer);
  @JS("bindBufferRange")
  external void bindBufferRange(GLenum target, GLuint index, WebGLBuffer? buffer, GLintptr offset, GLsizeiptr size);
  @JS("bindSampler")
  external void bindSampler(GLuint unit, WebGLSampler? sampler);
  @JS("bindTransformFeedback")
  external void bindTransformFeedback(GLenum target, WebGLTransformFeedback? tf);
  @JS("bindVertexArray")
  external void bindVertexArray(WebGLVertexArrayObject? array);
  @JS("blitFramebuffer")
  external void blitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
  @JS("clearBufferfi")
  external void clearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
  @JS("clearBufferfv")
  external void clearBufferfv(GLenum buffer, GLint drawbuffer, Float32List values, [num srcOffset]);
  @JS("clearBufferiv")
  external void clearBufferiv(GLenum buffer, GLint drawbuffer, Int32List values, [num srcOffset]);
  @JS("clearBufferuiv")
  external void clearBufferuiv(GLenum buffer, GLint drawbuffer, Uint32List values, [num srcOffset]);
  @JS("clientWaitSync")
  external GLenum clientWaitSync(WebGLSync sync, GLbitfield flags, GLuint64 timeout);
  @JS("compressedTexImage3D")
  external void compressedTexImage3D_1(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, GLintptr offset);
  @JS("compressedTexImage3D")
  external void compressedTexImage3D_2(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, ArrayBufferView srcData, [num srcOffset, GLuint srcLengthOverride]);
  @JS("compressedTexSubImage3D")
  external void compressedTexSubImage3D_1(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, GLintptr offset);
  @JS("compressedTexSubImage3D")
  external void compressedTexSubImage3D_2(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, ArrayBufferView srcData, [num srcOffset, GLuint srcLengthOverride]);
  @JS("copyBufferSubData")
  external void copyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
  @JS("copyTexSubImage3D")
  external void copyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
  @JS("createQuery")
  external WebGLQuery createQuery();
  @JS("createSampler")
  external WebGLSampler createSampler();
  @JS("createTransformFeedback")
  external WebGLTransformFeedback createTransformFeedback();
  @JS("createVertexArray")
  external WebGLVertexArrayObject createVertexArray();
  @JS("deleteQuery")
  external void deleteQuery(WebGLQuery? query);
  @JS("deleteSampler")
  external void deleteSampler(WebGLSampler? sampler);
  @JS("deleteSync")
  external void deleteSync(WebGLSync? sync);
  @JS("deleteTransformFeedback")
  external void deleteTransformFeedback(WebGLTransformFeedback? tf);
  @JS("deleteVertexArray")
  external void deleteVertexArray(WebGLVertexArrayObject? vertexArray);
  @JS("drawArraysInstanced")
  external void drawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instanceCount);
  @JS("drawBuffers")
  external void drawBuffers(List<GLenum> buffers);
  @JS("drawElementsInstanced")
  external void drawElementsInstanced(GLenum mode, GLsizei count, GLenum type, GLintptr offset, GLsizei instanceCount);
  @JS("drawRangeElements")
  external void drawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLintptr offset);
  @JS("endQuery")
  external void endQuery(GLenum target);
  @JS("endTransformFeedback")
  external void endTransformFeedback();
  @JS("fenceSync")
  external WebGLSync? fenceSync(GLenum condition, GLbitfield flags);
  @JS("framebufferTextureLayer")
  external void framebufferTextureLayer(GLenum target, GLenum attachment, WebGLTexture? texture, GLint level, GLint layer);
  @JS("getActiveUniformBlockName")
  external String? getActiveUniformBlockName(WebGLProgram program, GLuint uniformBlockIndex);
  @JS("getActiveUniformBlockParameter")
  external dynamic getActiveUniformBlockParameter(WebGLProgram program, GLuint uniformBlockIndex, GLenum pname);
  @JS("getActiveUniforms")
  external dynamic getActiveUniforms(WebGLProgram program, List<GLuint> uniformIndices, GLenum pname);
  @JS("getBufferSubData")
  external void getBufferSubData(GLenum target, GLintptr srcByteOffset, ArrayBufferView dstBuffer, [num dstOffset, GLuint length]);
  @JS("getFragDataLocation")
  external GLint getFragDataLocation(WebGLProgram program, String name);
  @JS("getIndexedParameter")
  external dynamic getIndexedParameter(GLenum target, GLuint index);
  @JS("getInternalformatParameter")
  external dynamic getInternalformatParameter(GLenum target, GLenum internalformat, GLenum pname);
  @JS("getQuery")
  external WebGLQuery? getQuery(GLenum target, GLenum pname);
  @JS("getQueryParameter")
  external dynamic getQueryParameter(WebGLQuery query, GLenum pname);
  @JS("getSamplerParameter")
  external dynamic getSamplerParameter(WebGLSampler sampler, GLenum pname);
  @JS("getSyncParameter")
  external dynamic getSyncParameter(WebGLSync sync, GLenum pname);
  @JS("getTransformFeedbackVarying")
  external WebGLActiveInfo? getTransformFeedbackVarying(WebGLProgram program, GLuint index);
  @JS("getUniformBlockIndex")
  external GLuint getUniformBlockIndex(WebGLProgram program, String uniformBlockName);
  @JS("getUniformIndices")
  external List<GLuint>? getUniformIndices(WebGLProgram program, List<String> uniformNames);
  @JS("invalidateFramebuffer")
  external void invalidateFramebuffer(GLenum target, List<GLenum> attachments);
  @JS("invalidateSubFramebuffer")
  external void invalidateSubFramebuffer(GLenum target, List<GLenum> attachments, GLint x, GLint y, GLsizei width, GLsizei height);
  @JS("isQuery")
  external GLboolean isQuery(WebGLQuery? query);
  @JS("isSampler")
  external GLboolean isSampler(WebGLSampler? sampler);
  @JS("isSync")
  external GLboolean isSync(WebGLSync? sync);
  @JS("isTransformFeedback")
  external GLboolean isTransformFeedback(WebGLTransformFeedback? tf);
  @JS("isVertexArray")
  external GLboolean isVertexArray(WebGLVertexArrayObject? vertexArray);
  @JS("pauseTransformFeedback")
  external void pauseTransformFeedback();
  @JS("readBuffer")
  external void readBuffer(GLenum src);
  @JS("renderbufferStorageMultisample")
  external void renderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
  @JS("resumeTransformFeedback")
  external void resumeTransformFeedback();
  @JS("samplerParameterf")
  external void samplerParameterf(WebGLSampler sampler, GLenum pname, GLfloat param);
  @JS("samplerParameteri")
  external void samplerParameteri(WebGLSampler sampler, GLenum pname, GLint param);
  @JS("texImage3D")
  external void texImage3D_1(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, GLintptr pboOffset);
  @JS("texImage3D")
  external void texImage3D_2(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, TexImageSource source);
  @JS("texImage3D")
  external void texImage3D_3(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, ArrayBufferView? srcData);
  @JS("texImage3D")
  external void texImage3D_4(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, ArrayBufferView srcData, num srcOffset);
  @JS("texStorage2D")
  external void texStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
  @JS("texStorage3D")
  external void texStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
  @JS("texSubImage3D")
  external void texSubImage3D_1(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLintptr pboOffset);
  @JS("texSubImage3D")
  external void texSubImage3D_2(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, TexImageSource source);
  @JS("texSubImage3D")
  external void texSubImage3D_3(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, ArrayBufferView? srcData, [num srcOffset]);
  @JS("transformFeedbackVaryings")
  external void transformFeedbackVaryings(WebGLProgram program, List<String> varyings, GLenum bufferMode);
  @JS("uniform1ui")
  external void uniform1ui(WebGLUniformLocation? location, GLuint v0);
  @JS("uniform1uiv")
  external void uniform1uiv(WebGLUniformLocation? location, Uint32List data, [num srcOffset, GLuint srcLength]);
  @JS("uniform2ui")
  external void uniform2ui(WebGLUniformLocation? location, GLuint v0, GLuint v1);
  @JS("uniform2uiv")
  external void uniform2uiv(WebGLUniformLocation? location, Uint32List data, [num srcOffset, GLuint srcLength]);
  @JS("uniform3ui")
  external void uniform3ui(WebGLUniformLocation? location, GLuint v0, GLuint v1, GLuint v2);
  @JS("uniform3uiv")
  external void uniform3uiv(WebGLUniformLocation? location, Uint32List data, [num srcOffset, GLuint srcLength]);
  @JS("uniform4ui")
  external void uniform4ui(WebGLUniformLocation? location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
  @JS("uniform4uiv")
  external void uniform4uiv(WebGLUniformLocation? location, Uint32List data, [num srcOffset, GLuint srcLength]);
  @JS("uniformBlockBinding")
  external void uniformBlockBinding(WebGLProgram program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
  @JS("uniformMatrix2x3fv")
  external void uniformMatrix2x3fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data, [num srcOffset, GLuint srcLength]);
  @JS("uniformMatrix2x4fv")
  external void uniformMatrix2x4fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data, [num srcOffset, GLuint srcLength]);
  @JS("uniformMatrix3x2fv")
  external void uniformMatrix3x2fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data, [num srcOffset, GLuint srcLength]);
  @JS("uniformMatrix3x4fv")
  external void uniformMatrix3x4fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data, [num srcOffset, GLuint srcLength]);
  @JS("uniformMatrix4x2fv")
  external void uniformMatrix4x2fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data, [num srcOffset, GLuint srcLength]);
  @JS("uniformMatrix4x3fv")
  external void uniformMatrix4x3fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data, [num srcOffset, GLuint srcLength]);
  @JS("vertexAttribDivisor")
  external void vertexAttribDivisor(GLuint index, GLuint divisor);
  @JS("vertexAttribI4i")
  external void vertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
  @JS("vertexAttribI4iv")
  external void vertexAttribI4iv(GLuint index, Int32List values);
  @JS("vertexAttribI4ui")
  external void vertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
  @JS("vertexAttribI4uiv")
  external void vertexAttribI4uiv(GLuint index, Uint32List values);
  @JS("vertexAttribIPointer")
  external void vertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
  @JS("waitSync")
  external void waitSync(WebGLSync sync, GLbitfield flags, GLint64 timeout);
}
@JS()
@anonymous
abstract class WebGL2RenderingContextOverloads{}
extension WebGL2RenderingContextOverloadsExtension on WebGL2RenderingContextOverloads {
  @JS("bufferData")
  external void bufferData_1(GLenum target, GLsizeiptr size, GLenum usage);
  @JS("bufferData")
  external void bufferData_2(GLenum target, AllowSharedBufferSource? srcData, GLenum usage);
  @JS("bufferData")
  external void bufferData_3(GLenum target, ArrayBufferView srcData, GLenum usage, num srcOffset, [GLuint length]);
  @JS("bufferSubData")
  external void bufferSubData_1(GLenum target, GLintptr dstByteOffset, AllowSharedBufferSource srcData);
  @JS("bufferSubData")
  external void bufferSubData_2(GLenum target, GLintptr dstByteOffset, ArrayBufferView srcData, num srcOffset, [GLuint length]);
  @JS("compressedTexImage2D")
  external void compressedTexImage2D_1(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, GLintptr offset);
  @JS("compressedTexImage2D")
  external void compressedTexImage2D_2(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, ArrayBufferView srcData, [num srcOffset, GLuint srcLengthOverride]);
  @JS("compressedTexSubImage2D")
  external void compressedTexSubImage2D_1(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, GLintptr offset);
  @JS("compressedTexSubImage2D")
  external void compressedTexSubImage2D_2(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, ArrayBufferView srcData, [num srcOffset, GLuint srcLengthOverride]);
  @JS("readPixels")
  external void readPixels_1(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, ArrayBufferView? dstData);
  @JS("readPixels")
  external void readPixels_2(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLintptr offset);
  @JS("readPixels")
  external void readPixels_3(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, ArrayBufferView dstData, num dstOffset);
  @JS("texImage2D")
  external void texImage2D_1(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, ArrayBufferView? pixels);
  @JS("texImage2D")
  external void texImage2D_2(GLenum target, GLint level, GLint internalformat, GLenum format, GLenum type, TexImageSource source);
  @JS("texImage2D")
  external void texImage2D_3(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, GLintptr pboOffset);
  @JS("texImage2D")
  external void texImage2D_4(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, TexImageSource source);
  @JS("texImage2D")
  external void texImage2D_5(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, ArrayBufferView srcData, num srcOffset);
  @JS("texSubImage2D")
  external void texSubImage2D_1(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, ArrayBufferView? pixels);
  @JS("texSubImage2D")
  external void texSubImage2D_2(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLenum format, GLenum type, TexImageSource source);
  @JS("texSubImage2D")
  external void texSubImage2D_3(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, GLintptr pboOffset);
  @JS("texSubImage2D")
  external void texSubImage2D_4(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, TexImageSource source);
  @JS("texSubImage2D")
  external void texSubImage2D_5(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, ArrayBufferView srcData, num srcOffset);
  @JS("uniform1fv")
  external void uniform1fv(WebGLUniformLocation? location, Float32List data, [num srcOffset, GLuint srcLength]);
  @JS("uniform1iv")
  external void uniform1iv(WebGLUniformLocation? location, Int32List data, [num srcOffset, GLuint srcLength]);
  @JS("uniform2fv")
  external void uniform2fv(WebGLUniformLocation? location, Float32List data, [num srcOffset, GLuint srcLength]);
  @JS("uniform2iv")
  external void uniform2iv(WebGLUniformLocation? location, Int32List data, [num srcOffset, GLuint srcLength]);
  @JS("uniform3fv")
  external void uniform3fv(WebGLUniformLocation? location, Float32List data, [num srcOffset, GLuint srcLength]);
  @JS("uniform3iv")
  external void uniform3iv(WebGLUniformLocation? location, Int32List data, [num srcOffset, GLuint srcLength]);
  @JS("uniform4fv")
  external void uniform4fv(WebGLUniformLocation? location, Float32List data, [num srcOffset, GLuint srcLength]);
  @JS("uniform4iv")
  external void uniform4iv(WebGLUniformLocation? location, Int32List data, [num srcOffset, GLuint srcLength]);
  @JS("uniformMatrix2fv")
  external void uniformMatrix2fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data, [num srcOffset, GLuint srcLength]);
  @JS("uniformMatrix3fv")
  external void uniformMatrix3fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data, [num srcOffset, GLuint srcLength]);
  @JS("uniformMatrix4fv")
  external void uniformMatrix4fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data, [num srcOffset, GLuint srcLength]);
}
@JS()
@anonymous
abstract class WebGLActiveInfo{}
extension WebGLActiveInfoExtension on WebGLActiveInfo {
  external String get name;
  external GLint get size;
  external GLenum get type;
}
@JS("WebGLActiveInfo")
external AnonInterface$625 WebGLActiveInfo;
@JS()
@anonymous
abstract class WebGLBuffer{}
extension WebGLBufferExtension on WebGLBuffer {
}
@JS("WebGLBuffer")
external AnonInterface$626 WebGLBuffer;
@JS()
@anonymous
abstract class WebGLContextEvent{}
extension WebGLContextEventExtension on WebGLContextEvent {
  external String get statusMessage;
}
@JS("WebGLContextEvent")
external AnonInterface$627 WebGLContextEvent;
@JS()
@anonymous
abstract class WebGLFramebuffer{}
extension WebGLFramebufferExtension on WebGLFramebuffer {
}
@JS("WebGLFramebuffer")
external AnonInterface$628 WebGLFramebuffer;
@JS()
@anonymous
abstract class WebGLProgram{}
extension WebGLProgramExtension on WebGLProgram {
}
@JS("WebGLProgram")
external AnonInterface$629 WebGLProgram;
@JS()
@anonymous
abstract class WebGLQuery{}
extension WebGLQueryExtension on WebGLQuery {
}
@JS("WebGLQuery")
external AnonInterface$630 WebGLQuery;
@JS()
@anonymous
abstract class WebGLRenderbuffer{}
extension WebGLRenderbufferExtension on WebGLRenderbuffer {
}
@JS("WebGLRenderbuffer")
external AnonInterface$631 WebGLRenderbuffer;
@JS()
@anonymous
abstract class WebGLRenderingContext{}
extension WebGLRenderingContextExtension on WebGLRenderingContext {
}
@JS("WebGLRenderingContext")
external AnonInterface$632 WebGLRenderingContext;
@JS()
@anonymous
abstract class WebGLRenderingContextBase{}
extension WebGLRenderingContextBaseExtension on WebGLRenderingContextBase {
  external dynamic /* HTMLCanvasElement|OffscreenCanvas */ get canvas;
  external PredefinedColorSpace get drawingBufferColorSpace;
  external set drawingBufferColorSpace(PredefinedColorSpace value);
  external GLsizei get drawingBufferHeight;
  external GLsizei get drawingBufferWidth;
  external PredefinedColorSpace get unpackColorSpace;
  external set unpackColorSpace(PredefinedColorSpace value);
  external num get DEPTH_BUFFER_BIT;
  external num get STENCIL_BUFFER_BIT;
  external num get COLOR_BUFFER_BIT;
  external num get POINTS;
  external num get LINES;
  external num get LINE_LOOP;
  external num get LINE_STRIP;
  external num get TRIANGLES;
  external num get TRIANGLE_STRIP;
  external num get TRIANGLE_FAN;
  external num get ZERO;
  external num get ONE;
  external num get SRC_COLOR;
  external num get ONE_MINUS_SRC_COLOR;
  external num get SRC_ALPHA;
  external num get ONE_MINUS_SRC_ALPHA;
  external num get DST_ALPHA;
  external num get ONE_MINUS_DST_ALPHA;
  external num get DST_COLOR;
  external num get ONE_MINUS_DST_COLOR;
  external num get SRC_ALPHA_SATURATE;
  external num get FUNC_ADD;
  external num get BLEND_EQUATION;
  external num get BLEND_EQUATION_RGB;
  external num get BLEND_EQUATION_ALPHA;
  external num get FUNC_SUBTRACT;
  external num get FUNC_REVERSE_SUBTRACT;
  external num get BLEND_DST_RGB;
  external num get BLEND_SRC_RGB;
  external num get BLEND_DST_ALPHA;
  external num get BLEND_SRC_ALPHA;
  external num get CONSTANT_COLOR;
  external num get ONE_MINUS_CONSTANT_COLOR;
  external num get CONSTANT_ALPHA;
  external num get ONE_MINUS_CONSTANT_ALPHA;
  external num get BLEND_COLOR;
  external num get ARRAY_BUFFER;
  external num get ELEMENT_ARRAY_BUFFER;
  external num get ARRAY_BUFFER_BINDING;
  external num get ELEMENT_ARRAY_BUFFER_BINDING;
  external num get STREAM_DRAW;
  external num get STATIC_DRAW;
  external num get DYNAMIC_DRAW;
  external num get BUFFER_SIZE;
  external num get BUFFER_USAGE;
  external num get CURRENT_VERTEX_ATTRIB;
  external num get FRONT;
  external num get BACK;
  external num get FRONT_AND_BACK;
  external num get CULL_FACE;
  external num get BLEND;
  external num get DITHER;
  external num get STENCIL_TEST;
  external num get DEPTH_TEST;
  external num get SCISSOR_TEST;
  external num get POLYGON_OFFSET_FILL;
  external num get SAMPLE_ALPHA_TO_COVERAGE;
  external num get SAMPLE_COVERAGE;
  external num get NO_ERROR;
  external num get INVALID_ENUM;
  external num get INVALID_VALUE;
  external num get INVALID_OPERATION;
  external num get OUT_OF_MEMORY;
  external num get CW;
  external num get CCW;
  external num get LINE_WIDTH;
  external num get ALIASED_POINT_SIZE_RANGE;
  external num get ALIASED_LINE_WIDTH_RANGE;
  external num get CULL_FACE_MODE;
  external num get FRONT_FACE;
  external num get DEPTH_RANGE;
  external num get DEPTH_WRITEMASK;
  external num get DEPTH_CLEAR_VALUE;
  external num get DEPTH_FUNC;
  external num get STENCIL_CLEAR_VALUE;
  external num get STENCIL_FUNC;
  external num get STENCIL_FAIL;
  external num get STENCIL_PASS_DEPTH_FAIL;
  external num get STENCIL_PASS_DEPTH_PASS;
  external num get STENCIL_REF;
  external num get STENCIL_VALUE_MASK;
  external num get STENCIL_WRITEMASK;
  external num get STENCIL_BACK_FUNC;
  external num get STENCIL_BACK_FAIL;
  external num get STENCIL_BACK_PASS_DEPTH_FAIL;
  external num get STENCIL_BACK_PASS_DEPTH_PASS;
  external num get STENCIL_BACK_REF;
  external num get STENCIL_BACK_VALUE_MASK;
  external num get STENCIL_BACK_WRITEMASK;
  external num get VIEWPORT;
  external num get SCISSOR_BOX;
  external num get COLOR_CLEAR_VALUE;
  external num get COLOR_WRITEMASK;
  external num get UNPACK_ALIGNMENT;
  external num get PACK_ALIGNMENT;
  external num get MAX_TEXTURE_SIZE;
  external num get MAX_VIEWPORT_DIMS;
  external num get SUBPIXEL_BITS;
  external num get RED_BITS;
  external num get GREEN_BITS;
  external num get BLUE_BITS;
  external num get ALPHA_BITS;
  external num get DEPTH_BITS;
  external num get STENCIL_BITS;
  external num get POLYGON_OFFSET_UNITS;
  external num get POLYGON_OFFSET_FACTOR;
  external num get TEXTURE_BINDING_2D;
  external num get SAMPLE_BUFFERS;
  external num get SAMPLES;
  external num get SAMPLE_COVERAGE_VALUE;
  external num get SAMPLE_COVERAGE_INVERT;
  external num get COMPRESSED_TEXTURE_FORMATS;
  external num get DONT_CARE;
  external num get FASTEST;
  external num get NICEST;
  external num get GENERATE_MIPMAP_HINT;
  external num get BYTE;
  external num get UNSIGNED_BYTE;
  external num get SHORT;
  external num get UNSIGNED_SHORT;
  external num get INT;
  external num get UNSIGNED_INT;
  external num get FLOAT;
  external num get DEPTH_COMPONENT;
  external num get ALPHA;
  external num get RGB;
  external num get RGBA;
  external num get LUMINANCE;
  external num get LUMINANCE_ALPHA;
  external num get UNSIGNED_SHORT_4_4_4_4;
  external num get UNSIGNED_SHORT_5_5_5_1;
  external num get UNSIGNED_SHORT_5_6_5;
  external num get FRAGMENT_SHADER;
  external num get VERTEX_SHADER;
  external num get MAX_VERTEX_ATTRIBS;
  external num get MAX_VERTEX_UNIFORM_VECTORS;
  external num get MAX_VARYING_VECTORS;
  external num get MAX_COMBINED_TEXTURE_IMAGE_UNITS;
  external num get MAX_VERTEX_TEXTURE_IMAGE_UNITS;
  external num get MAX_TEXTURE_IMAGE_UNITS;
  external num get MAX_FRAGMENT_UNIFORM_VECTORS;
  external num get SHADER_TYPE;
  external num get DELETE_STATUS;
  external num get LINK_STATUS;
  external num get VALIDATE_STATUS;
  external num get ATTACHED_SHADERS;
  external num get ACTIVE_UNIFORMS;
  external num get ACTIVE_ATTRIBUTES;
  external num get SHADING_LANGUAGE_VERSION;
  external num get CURRENT_PROGRAM;
  external num get NEVER;
  external num get LESS;
  external num get EQUAL;
  external num get LEQUAL;
  external num get GREATER;
  external num get NOTEQUAL;
  external num get GEQUAL;
  external num get ALWAYS;
  external num get KEEP;
  external num get REPLACE;
  external num get INCR;
  external num get DECR;
  external num get INVERT;
  external num get INCR_WRAP;
  external num get DECR_WRAP;
  external num get VENDOR;
  external num get RENDERER;
  external num get VERSION;
  external num get NEAREST;
  external num get LINEAR;
  external num get NEAREST_MIPMAP_NEAREST;
  external num get LINEAR_MIPMAP_NEAREST;
  external num get NEAREST_MIPMAP_LINEAR;
  external num get LINEAR_MIPMAP_LINEAR;
  external num get TEXTURE_MAG_FILTER;
  external num get TEXTURE_MIN_FILTER;
  external num get TEXTURE_WRAP_S;
  external num get TEXTURE_WRAP_T;
  external num get TEXTURE_2D;
  external num get TEXTURE;
  external num get TEXTURE_CUBE_MAP;
  external num get TEXTURE_BINDING_CUBE_MAP;
  external num get TEXTURE_CUBE_MAP_POSITIVE_X;
  external num get TEXTURE_CUBE_MAP_NEGATIVE_X;
  external num get TEXTURE_CUBE_MAP_POSITIVE_Y;
  external num get TEXTURE_CUBE_MAP_NEGATIVE_Y;
  external num get TEXTURE_CUBE_MAP_POSITIVE_Z;
  external num get TEXTURE_CUBE_MAP_NEGATIVE_Z;
  external num get MAX_CUBE_MAP_TEXTURE_SIZE;
  external num get TEXTURE0;
  external num get TEXTURE1;
  external num get TEXTURE2;
  external num get TEXTURE3;
  external num get TEXTURE4;
  external num get TEXTURE5;
  external num get TEXTURE6;
  external num get TEXTURE7;
  external num get TEXTURE8;
  external num get TEXTURE9;
  external num get TEXTURE10;
  external num get TEXTURE11;
  external num get TEXTURE12;
  external num get TEXTURE13;
  external num get TEXTURE14;
  external num get TEXTURE15;
  external num get TEXTURE16;
  external num get TEXTURE17;
  external num get TEXTURE18;
  external num get TEXTURE19;
  external num get TEXTURE20;
  external num get TEXTURE21;
  external num get TEXTURE22;
  external num get TEXTURE23;
  external num get TEXTURE24;
  external num get TEXTURE25;
  external num get TEXTURE26;
  external num get TEXTURE27;
  external num get TEXTURE28;
  external num get TEXTURE29;
  external num get TEXTURE30;
  external num get TEXTURE31;
  external num get ACTIVE_TEXTURE;
  external num get REPEAT;
  external num get CLAMP_TO_EDGE;
  external num get MIRRORED_REPEAT;
  external num get FLOAT_VEC2;
  external num get FLOAT_VEC3;
  external num get FLOAT_VEC4;
  external num get INT_VEC2;
  external num get INT_VEC3;
  external num get INT_VEC4;
  external num get BOOL;
  external num get BOOL_VEC2;
  external num get BOOL_VEC3;
  external num get BOOL_VEC4;
  external num get FLOAT_MAT2;
  external num get FLOAT_MAT3;
  external num get FLOAT_MAT4;
  external num get SAMPLER_2D;
  external num get SAMPLER_CUBE;
  external num get VERTEX_ATTRIB_ARRAY_ENABLED;
  external num get VERTEX_ATTRIB_ARRAY_SIZE;
  external num get VERTEX_ATTRIB_ARRAY_STRIDE;
  external num get VERTEX_ATTRIB_ARRAY_TYPE;
  external num get VERTEX_ATTRIB_ARRAY_NORMALIZED;
  external num get VERTEX_ATTRIB_ARRAY_POINTER;
  external num get VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
  external num get IMPLEMENTATION_COLOR_READ_TYPE;
  external num get IMPLEMENTATION_COLOR_READ_FORMAT;
  external num get COMPILE_STATUS;
  external num get LOW_FLOAT;
  external num get MEDIUM_FLOAT;
  external num get HIGH_FLOAT;
  external num get LOW_INT;
  external num get MEDIUM_INT;
  external num get HIGH_INT;
  external num get FRAMEBUFFER;
  external num get RENDERBUFFER;
  external num get RGBA4;
  external num get RGB5_A1;
  external num get RGBA8;
  external num get RGB565;
  external num get DEPTH_COMPONENT16;
  external num get STENCIL_INDEX8;
  external num get DEPTH_STENCIL;
  external num get RENDERBUFFER_WIDTH;
  external num get RENDERBUFFER_HEIGHT;
  external num get RENDERBUFFER_INTERNAL_FORMAT;
  external num get RENDERBUFFER_RED_SIZE;
  external num get RENDERBUFFER_GREEN_SIZE;
  external num get RENDERBUFFER_BLUE_SIZE;
  external num get RENDERBUFFER_ALPHA_SIZE;
  external num get RENDERBUFFER_DEPTH_SIZE;
  external num get RENDERBUFFER_STENCIL_SIZE;
  external num get FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
  external num get FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
  external num get FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
  external num get FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
  external num get COLOR_ATTACHMENT0;
  external num get DEPTH_ATTACHMENT;
  external num get STENCIL_ATTACHMENT;
  external num get DEPTH_STENCIL_ATTACHMENT;
  external num get NONE;
  external num get FRAMEBUFFER_COMPLETE;
  external num get FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
  external num get FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
  external num get FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
  external num get FRAMEBUFFER_UNSUPPORTED;
  external num get FRAMEBUFFER_BINDING;
  external num get RENDERBUFFER_BINDING;
  external num get MAX_RENDERBUFFER_SIZE;
  external num get INVALID_FRAMEBUFFER_OPERATION;
  external num get UNPACK_FLIP_Y_WEBGL;
  external num get UNPACK_PREMULTIPLY_ALPHA_WEBGL;
  external num get CONTEXT_LOST_WEBGL;
  external num get UNPACK_COLORSPACE_CONVERSION_WEBGL;
  external num get BROWSER_DEFAULT_WEBGL;
  @JS("activeTexture")
  external void activeTexture(GLenum texture);
  @JS("attachShader")
  external void attachShader(WebGLProgram program, WebGLShader shader);
  @JS("bindAttribLocation")
  external void bindAttribLocation(WebGLProgram program, GLuint index, String name);
  @JS("bindBuffer")
  external void bindBuffer(GLenum target, WebGLBuffer? buffer);
  @JS("bindFramebuffer")
  external void bindFramebuffer(GLenum target, WebGLFramebuffer? framebuffer);
  @JS("bindRenderbuffer")
  external void bindRenderbuffer(GLenum target, WebGLRenderbuffer? renderbuffer);
  @JS("bindTexture")
  external void bindTexture(GLenum target, WebGLTexture? texture);
  @JS("blendColor")
  external void blendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
  @JS("blendEquation")
  external void blendEquation(GLenum mode);
  @JS("blendEquationSeparate")
  external void blendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
  @JS("blendFunc")
  external void blendFunc(GLenum sfactor, GLenum dfactor);
  @JS("blendFuncSeparate")
  external void blendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
  @JS("checkFramebufferStatus")
  external GLenum checkFramebufferStatus(GLenum target);
  @JS("clear")
  external void clear(GLbitfield mask);
  @JS("clearColor")
  external void clearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
  @JS("clearDepth")
  external void clearDepth(GLclampf depth);
  @JS("clearStencil")
  external void clearStencil(GLint s);
  @JS("colorMask")
  external void colorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
  @JS("compileShader")
  external void compileShader(WebGLShader shader);
  @JS("copyTexImage2D")
  external void copyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
  @JS("copyTexSubImage2D")
  external void copyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
  @JS("createBuffer")
  external WebGLBuffer createBuffer();
  @JS("createFramebuffer")
  external WebGLFramebuffer createFramebuffer();
  @JS("createProgram")
  external WebGLProgram createProgram();
  @JS("createRenderbuffer")
  external WebGLRenderbuffer createRenderbuffer();
  @JS("createShader")
  external WebGLShader? createShader(GLenum type);
  @JS("createTexture")
  external WebGLTexture createTexture();
  @JS("cullFace")
  external void cullFace(GLenum mode);
  @JS("deleteBuffer")
  external void deleteBuffer(WebGLBuffer? buffer);
  @JS("deleteFramebuffer")
  external void deleteFramebuffer(WebGLFramebuffer? framebuffer);
  @JS("deleteProgram")
  external void deleteProgram(WebGLProgram? program);
  @JS("deleteRenderbuffer")
  external void deleteRenderbuffer(WebGLRenderbuffer? renderbuffer);
  @JS("deleteShader")
  external void deleteShader(WebGLShader? shader);
  @JS("deleteTexture")
  external void deleteTexture(WebGLTexture? texture);
  @JS("depthFunc")
  external void depthFunc(GLenum func);
  @JS("depthMask")
  external void depthMask(GLboolean flag);
  @JS("depthRange")
  external void depthRange(GLclampf zNear, GLclampf zFar);
  @JS("detachShader")
  external void detachShader(WebGLProgram program, WebGLShader shader);
  @JS("disable")
  external void disable(GLenum cap);
  @JS("disableVertexAttribArray")
  external void disableVertexAttribArray(GLuint index);
  @JS("drawArrays")
  external void drawArrays(GLenum mode, GLint first, GLsizei count);
  @JS("drawElements")
  external void drawElements(GLenum mode, GLsizei count, GLenum type, GLintptr offset);
  @JS("enable")
  external void enable(GLenum cap);
  @JS("enableVertexAttribArray")
  external void enableVertexAttribArray(GLuint index);
  @JS("finish")
  external void finish();
  @JS("flush")
  external void flush();
  @JS("framebufferRenderbuffer")
  external void framebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, WebGLRenderbuffer? renderbuffer);
  @JS("framebufferTexture2D")
  external void framebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, WebGLTexture? texture, GLint level);
  @JS("frontFace")
  external void frontFace(GLenum mode);
  @JS("generateMipmap")
  external void generateMipmap(GLenum target);
  @JS("getActiveAttrib")
  external WebGLActiveInfo? getActiveAttrib(WebGLProgram program, GLuint index);
  @JS("getActiveUniform")
  external WebGLActiveInfo? getActiveUniform(WebGLProgram program, GLuint index);
  @JS("getAttachedShaders")
  external List<WebGLShader>? getAttachedShaders(WebGLProgram program);
  @JS("getAttribLocation")
  external GLint getAttribLocation(WebGLProgram program, String name);
  @JS("getBufferParameter")
  external dynamic getBufferParameter(GLenum target, GLenum pname);
  @JS("getContextAttributes")
  external WebGLContextAttributes? getContextAttributes();
  @JS("getError")
  external GLenum getError();
  @JS("getExtension")
  external ANGLE_instanced_arrays? getExtension_1(String extensionName);
  @JS("getExtension")
  external EXT_blend_minmax? getExtension_2(String extensionName);
  @JS("getExtension")
  external EXT_color_buffer_float? getExtension_3(String extensionName);
  @JS("getExtension")
  external EXT_color_buffer_half_float? getExtension_4(String extensionName);
  @JS("getExtension")
  external EXT_float_blend? getExtension_5(String extensionName);
  @JS("getExtension")
  external EXT_frag_depth? getExtension_6(String extensionName);
  @JS("getExtension")
  external EXT_sRGB? getExtension_7(String extensionName);
  @JS("getExtension")
  external EXT_shader_texture_lod? getExtension_8(String extensionName);
  @JS("getExtension")
  external EXT_texture_compression_bptc? getExtension_9(String extensionName);
  @JS("getExtension")
  external EXT_texture_compression_rgtc? getExtension_10(String extensionName);
  @JS("getExtension")
  external EXT_texture_filter_anisotropic? getExtension_11(String extensionName);
  @JS("getExtension")
  external KHR_parallel_shader_compile? getExtension_12(String extensionName);
  @JS("getExtension")
  external OES_element_index_uint? getExtension_13(String extensionName);
  @JS("getExtension")
  external OES_fbo_render_mipmap? getExtension_14(String extensionName);
  @JS("getExtension")
  external OES_standard_derivatives? getExtension_15(String extensionName);
  @JS("getExtension")
  external OES_texture_float? getExtension_16(String extensionName);
  @JS("getExtension")
  external OES_texture_float_linear? getExtension_17(String extensionName);
  @JS("getExtension")
  external OES_texture_half_float? getExtension_18(String extensionName);
  @JS("getExtension")
  external OES_texture_half_float_linear? getExtension_19(String extensionName);
  @JS("getExtension")
  external OES_vertex_array_object? getExtension_20(String extensionName);
  @JS("getExtension")
  external OVR_multiview2? getExtension_21(String extensionName);
  @JS("getExtension")
  external WEBGL_color_buffer_float? getExtension_22(String extensionName);
  @JS("getExtension")
  external WEBGL_compressed_texture_astc? getExtension_23(String extensionName);
  @JS("getExtension")
  external WEBGL_compressed_texture_etc? getExtension_24(String extensionName);
  @JS("getExtension")
  external WEBGL_compressed_texture_etc1? getExtension_25(String extensionName);
  @JS("getExtension")
  external WEBGL_compressed_texture_pvrtc? getExtension_26(String extensionName);
  @JS("getExtension")
  external WEBGL_compressed_texture_s3tc? getExtension_27(String extensionName);
  @JS("getExtension")
  external WEBGL_compressed_texture_s3tc_srgb? getExtension_28(String extensionName);
  @JS("getExtension")
  external WEBGL_debug_renderer_info? getExtension_29(String extensionName);
  @JS("getExtension")
  external WEBGL_debug_shaders? getExtension_30(String extensionName);
  @JS("getExtension")
  external WEBGL_depth_texture? getExtension_31(String extensionName);
  @JS("getExtension")
  external WEBGL_draw_buffers? getExtension_32(String extensionName);
  @JS("getExtension")
  external WEBGL_lose_context? getExtension_33(String extensionName);
  @JS("getExtension")
  external WEBGL_multi_draw? getExtension_34(String extensionName);
  @JS("getExtension")
  external dynamic getExtension_35(String name);
  @JS("getFramebufferAttachmentParameter")
  external dynamic getFramebufferAttachmentParameter(GLenum target, GLenum attachment, GLenum pname);
  @JS("getParameter")
  external dynamic getParameter(GLenum pname);
  @JS("getProgramInfoLog")
  external String? getProgramInfoLog(WebGLProgram program);
  @JS("getProgramParameter")
  external dynamic getProgramParameter(WebGLProgram program, GLenum pname);
  @JS("getRenderbufferParameter")
  external dynamic getRenderbufferParameter(GLenum target, GLenum pname);
  @JS("getShaderInfoLog")
  external String? getShaderInfoLog(WebGLShader shader);
  @JS("getShaderParameter")
  external dynamic getShaderParameter(WebGLShader shader, GLenum pname);
  @JS("getShaderPrecisionFormat")
  external WebGLShaderPrecisionFormat? getShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype);
  @JS("getShaderSource")
  external String? getShaderSource(WebGLShader shader);
  @JS("getSupportedExtensions")
  external List<String>? getSupportedExtensions();
  @JS("getTexParameter")
  external dynamic getTexParameter(GLenum target, GLenum pname);
  @JS("getUniform")
  external dynamic getUniform(WebGLProgram program, WebGLUniformLocation location);
  @JS("getUniformLocation")
  external WebGLUniformLocation? getUniformLocation(WebGLProgram program, String name);
  @JS("getVertexAttrib")
  external dynamic getVertexAttrib(GLuint index, GLenum pname);
  @JS("getVertexAttribOffset")
  external GLintptr getVertexAttribOffset(GLuint index, GLenum pname);
  @JS("hint")
  external void hint(GLenum target, GLenum mode);
  @JS("isBuffer")
  external GLboolean isBuffer(WebGLBuffer? buffer);
  @JS("isContextLost")
  external bool isContextLost();
  @JS("isEnabled")
  external GLboolean isEnabled(GLenum cap);
  @JS("isFramebuffer")
  external GLboolean isFramebuffer(WebGLFramebuffer? framebuffer);
  @JS("isProgram")
  external GLboolean isProgram(WebGLProgram? program);
  @JS("isRenderbuffer")
  external GLboolean isRenderbuffer(WebGLRenderbuffer? renderbuffer);
  @JS("isShader")
  external GLboolean isShader(WebGLShader? shader);
  @JS("isTexture")
  external GLboolean isTexture(WebGLTexture? texture);
  @JS("lineWidth")
  external void lineWidth(GLfloat width);
  @JS("linkProgram")
  external void linkProgram(WebGLProgram program);
  @JS("pixelStorei")
  external void pixelStorei(GLenum pname, dynamic /* GLint|GLboolean */ param);
  @JS("polygonOffset")
  external void polygonOffset(GLfloat factor, GLfloat units);
  @JS("renderbufferStorage")
  external void renderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
  @JS("sampleCoverage")
  external void sampleCoverage(GLclampf value, GLboolean invert);
  @JS("scissor")
  external void scissor(GLint x, GLint y, GLsizei width, GLsizei height);
  @JS("shaderSource")
  external void shaderSource(WebGLShader shader, String source);
  @JS("stencilFunc")
  external void stencilFunc(GLenum func, GLint ref, GLuint mask);
  @JS("stencilFuncSeparate")
  external void stencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
  @JS("stencilMask")
  external void stencilMask(GLuint mask);
  @JS("stencilMaskSeparate")
  external void stencilMaskSeparate(GLenum face, GLuint mask);
  @JS("stencilOp")
  external void stencilOp(GLenum fail, GLenum zfail, GLenum zpass);
  @JS("stencilOpSeparate")
  external void stencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass);
  @JS("texParameterf")
  external void texParameterf(GLenum target, GLenum pname, GLfloat param);
  @JS("texParameteri")
  external void texParameteri(GLenum target, GLenum pname, GLint param);
  @JS("uniform1f")
  external void uniform1f(WebGLUniformLocation? location, GLfloat x);
  @JS("uniform1i")
  external void uniform1i(WebGLUniformLocation? location, GLint x);
  @JS("uniform2f")
  external void uniform2f(WebGLUniformLocation? location, GLfloat x, GLfloat y);
  @JS("uniform2i")
  external void uniform2i(WebGLUniformLocation? location, GLint x, GLint y);
  @JS("uniform3f")
  external void uniform3f(WebGLUniformLocation? location, GLfloat x, GLfloat y, GLfloat z);
  @JS("uniform3i")
  external void uniform3i(WebGLUniformLocation? location, GLint x, GLint y, GLint z);
  @JS("uniform4f")
  external void uniform4f(WebGLUniformLocation? location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  @JS("uniform4i")
  external void uniform4i(WebGLUniformLocation? location, GLint x, GLint y, GLint z, GLint w);
  @JS("useProgram")
  external void useProgram(WebGLProgram? program);
  @JS("validateProgram")
  external void validateProgram(WebGLProgram program);
  @JS("vertexAttrib1f")
  external void vertexAttrib1f(GLuint index, GLfloat x);
  @JS("vertexAttrib1fv")
  external void vertexAttrib1fv(GLuint index, Float32List values);
  @JS("vertexAttrib2f")
  external void vertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
  @JS("vertexAttrib2fv")
  external void vertexAttrib2fv(GLuint index, Float32List values);
  @JS("vertexAttrib3f")
  external void vertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
  @JS("vertexAttrib3fv")
  external void vertexAttrib3fv(GLuint index, Float32List values);
  @JS("vertexAttrib4f")
  external void vertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  @JS("vertexAttrib4fv")
  external void vertexAttrib4fv(GLuint index, Float32List values);
  @JS("vertexAttribPointer")
  external void vertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
  @JS("viewport")
  external void viewport(GLint x, GLint y, GLsizei width, GLsizei height);
}
@JS()
@anonymous
abstract class WebGLRenderingContextOverloads{}
extension WebGLRenderingContextOverloadsExtension on WebGLRenderingContextOverloads {
  @JS("bufferData")
  external void bufferData_1(GLenum target, GLsizeiptr size, GLenum usage);
  @JS("bufferData")
  external void bufferData_2(GLenum target, AllowSharedBufferSource? data, GLenum usage);
  @JS("bufferSubData")
  external void bufferSubData(GLenum target, GLintptr offset, AllowSharedBufferSource data);
  @JS("compressedTexImage2D")
  external void compressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, ArrayBufferView data);
  @JS("compressedTexSubImage2D")
  external void compressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, ArrayBufferView data);
  @JS("readPixels")
  external void readPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, ArrayBufferView? pixels);
  @JS("texImage2D")
  external void texImage2D_1(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, ArrayBufferView? pixels);
  @JS("texImage2D")
  external void texImage2D_2(GLenum target, GLint level, GLint internalformat, GLenum format, GLenum type, TexImageSource source);
  @JS("texSubImage2D")
  external void texSubImage2D_1(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, ArrayBufferView? pixels);
  @JS("texSubImage2D")
  external void texSubImage2D_2(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLenum format, GLenum type, TexImageSource source);
  @JS("uniform1fv")
  external void uniform1fv(WebGLUniformLocation? location, Float32List v);
  @JS("uniform1iv")
  external void uniform1iv(WebGLUniformLocation? location, Int32List v);
  @JS("uniform2fv")
  external void uniform2fv(WebGLUniformLocation? location, Float32List v);
  @JS("uniform2iv")
  external void uniform2iv(WebGLUniformLocation? location, Int32List v);
  @JS("uniform3fv")
  external void uniform3fv(WebGLUniformLocation? location, Float32List v);
  @JS("uniform3iv")
  external void uniform3iv(WebGLUniformLocation? location, Int32List v);
  @JS("uniform4fv")
  external void uniform4fv(WebGLUniformLocation? location, Float32List v);
  @JS("uniform4iv")
  external void uniform4iv(WebGLUniformLocation? location, Int32List v);
  @JS("uniformMatrix2fv")
  external void uniformMatrix2fv(WebGLUniformLocation? location, GLboolean transpose, Float32List value);
  @JS("uniformMatrix3fv")
  external void uniformMatrix3fv(WebGLUniformLocation? location, GLboolean transpose, Float32List value);
  @JS("uniformMatrix4fv")
  external void uniformMatrix4fv(WebGLUniformLocation? location, GLboolean transpose, Float32List value);
}
@JS()
@anonymous
abstract class WebGLSampler{}
extension WebGLSamplerExtension on WebGLSampler {
}
@JS("WebGLSampler")
external AnonInterface$633 WebGLSampler;
@JS()
@anonymous
abstract class WebGLShader{}
extension WebGLShaderExtension on WebGLShader {
}
@JS("WebGLShader")
external AnonInterface$634 WebGLShader;
@JS()
@anonymous
abstract class WebGLShaderPrecisionFormat{}
extension WebGLShaderPrecisionFormatExtension on WebGLShaderPrecisionFormat {
  external GLint get precision;
  external GLint get rangeMax;
  external GLint get rangeMin;
}
@JS("WebGLShaderPrecisionFormat")
external AnonInterface$635 WebGLShaderPrecisionFormat;
@JS()
@anonymous
abstract class WebGLSync{}
extension WebGLSyncExtension on WebGLSync {
}
@JS("WebGLSync")
external AnonInterface$636 WebGLSync;
@JS()
@anonymous
abstract class WebGLTexture{}
extension WebGLTextureExtension on WebGLTexture {
}
@JS("WebGLTexture")
external AnonInterface$637 WebGLTexture;
@JS()
@anonymous
abstract class WebGLTransformFeedback{}
extension WebGLTransformFeedbackExtension on WebGLTransformFeedback {
}
@JS("WebGLTransformFeedback")
external AnonInterface$638 WebGLTransformFeedback;
@JS()
@anonymous
abstract class WebGLUniformLocation{}
extension WebGLUniformLocationExtension on WebGLUniformLocation {
}
@JS("WebGLUniformLocation")
external AnonInterface$639 WebGLUniformLocation;
@JS()
@anonymous
abstract class WebGLVertexArrayObject{}
extension WebGLVertexArrayObjectExtension on WebGLVertexArrayObject {
}
@JS("WebGLVertexArrayObject")
external AnonInterface$640 WebGLVertexArrayObject;
@JS()
@anonymous
abstract class WebGLVertexArrayObjectOES{}
extension WebGLVertexArrayObjectOESExtension on WebGLVertexArrayObjectOES {
}
@JS()
@anonymous
abstract class WebSocketEventMap{}
extension WebSocketEventMapExtension on WebSocketEventMap {
  external CloseEvent get "close";
  external set "close"(CloseEvent value);
  external Event get "error";
  external set "error"(Event value);
  external MessageEvent get "message";
  external set "message"(MessageEvent value);
  external Event get "open";
  external set "open"(Event value);
}
@JS()
@anonymous
abstract class WebSocket{}
extension WebSocketExtension on WebSocket {
  external BinaryType get binaryType;
  external set binaryType(BinaryType value);
  external num get bufferedAmount;
  external String get extensions;
  external dynamic Function(WebSocket, CloseEvent)? get onclose;
  external set onclose(dynamic Function(WebSocket, CloseEvent)? value);
  external dynamic Function(WebSocket, Event)? get onerror;
  external set onerror(dynamic Function(WebSocket, Event)? value);
  external dynamic Function(WebSocket, MessageEvent)? get onmessage;
  external set onmessage(dynamic Function(WebSocket, MessageEvent)? value);
  external dynamic Function(WebSocket, Event)? get onopen;
  external set onopen(dynamic Function(WebSocket, Event)? value);
  external String get protocol;
  external num get readyState;
  external String get url;
  external num get CONNECTING;
  external num get OPEN;
  external num get CLOSING;
  external num get CLOSED;
  @JS("close")
  external void close([num code, String reason]);
  @JS("send")
  external void send(dynamic /* String|ArrayBufferLike|Blob|ArrayBufferView */ data);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(WebSocket, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(WebSocket, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("WebSocket")
external AnonInterface$641 WebSocket;
@JS()
@anonymous
abstract class WebTransport{}
extension WebTransportExtension on WebTransport {
  external Future<WebTransportCloseInfo> get closed;
  external WebTransportDatagramDuplexStream get datagrams;
  external ReadableStream get incomingBidirectionalStreams;
  external ReadableStream get incomingUnidirectionalStreams;
  external Future<void> get ready;
  @JS("close")
  external void close([WebTransportCloseInfo closeInfo]);
  @JS("createBidirectionalStream")
  external Future<WebTransportBidirectionalStream> createBidirectionalStream([WebTransportSendStreamOptions options]);
  @JS("createUnidirectionalStream")
  external Future<WritableStream> createUnidirectionalStream([WebTransportSendStreamOptions options]);
}
@JS("WebTransport")
external AnonInterface$642 WebTransport;
@JS()
@anonymous
abstract class WebTransportBidirectionalStream{}
extension WebTransportBidirectionalStreamExtension on WebTransportBidirectionalStream {
  external ReadableStream get readable;
  external WritableStream get writable;
}
@JS("WebTransportBidirectionalStream")
external AnonInterface$643 WebTransportBidirectionalStream;
@JS()
@anonymous
abstract class WebTransportDatagramDuplexStream{}
extension WebTransportDatagramDuplexStreamExtension on WebTransportDatagramDuplexStream {
  external num get incomingHighWaterMark;
  external set incomingHighWaterMark(num value);
  external num? get incomingMaxAge;
  external set incomingMaxAge(num? value);
  external num get maxDatagramSize;
  external num get outgoingHighWaterMark;
  external set outgoingHighWaterMark(num value);
  external num? get outgoingMaxAge;
  external set outgoingMaxAge(num? value);
  external ReadableStream get readable;
  external WritableStream get writable;
}
@JS("WebTransportDatagramDuplexStream")
external AnonInterface$644 WebTransportDatagramDuplexStream;
@JS()
@anonymous
abstract class WebTransportError{}
extension WebTransportErrorExtension on WebTransportError {
  external WebTransportErrorSource get source;
  external num? get streamErrorCode;
}
@JS("WebTransportError")
external AnonInterface$645 WebTransportError;
@JS()
@anonymous
abstract class WheelEvent{}
extension WheelEventExtension on WheelEvent {
  external num get deltaMode;
  external num get deltaX;
  external num get deltaY;
  external num get deltaZ;
  external num get DOM_DELTA_PIXEL;
  external num get DOM_DELTA_LINE;
  external num get DOM_DELTA_PAGE;
}
@JS("WheelEvent")
external AnonInterface$646 WheelEvent;
@JS()
@anonymous
abstract class WindowEventMap{}
extension WindowEventMapExtension on WindowEventMap {
  external Event get "DOMContentLoaded";
  external set "DOMContentLoaded"(Event value);
  external DeviceMotionEvent get "devicemotion";
  external set "devicemotion"(DeviceMotionEvent value);
  external DeviceOrientationEvent get "deviceorientation";
  external set "deviceorientation"(DeviceOrientationEvent value);
  external DeviceOrientationEvent get "deviceorientationabsolute";
  external set "deviceorientationabsolute"(DeviceOrientationEvent value);
  external GamepadEvent get "gamepadconnected";
  external set "gamepadconnected"(GamepadEvent value);
  external GamepadEvent get "gamepaddisconnected";
  external set "gamepaddisconnected"(GamepadEvent value);
  external Event get "orientationchange";
  external set "orientationchange"(Event value);
}
@JS()
@anonymous
abstract class Window{}
extension WindowExtension on Window {
  external Navigator get clientInformation;
  external bool get closed;
  external CustomElementRegistry get customElements;
  external num get devicePixelRatio;
  external Document get document;
  external Event? get event;
  external External get external;
  external Element? get frameElement;
  external WindowProxy get frames;
  external History get history;
  external num get innerHeight;
  external num get innerWidth;
  external num get length;
  external BarProp get locationbar;
  external BarProp get menubar;
  external String get name;
  external set name(String value);
  external Navigator get navigator;
  external dynamic Function(Window, DeviceMotionEvent)? get ondevicemotion;
  external set ondevicemotion(dynamic Function(Window, DeviceMotionEvent)? value);
  external dynamic Function(Window, DeviceOrientationEvent)? get ondeviceorientation;
  external set ondeviceorientation(dynamic Function(Window, DeviceOrientationEvent)? value);
  external dynamic Function(Window, DeviceOrientationEvent)? get ondeviceorientationabsolute;
  external set ondeviceorientationabsolute(dynamic Function(Window, DeviceOrientationEvent)? value);
  external dynamic Function(Window, Event)? get onorientationchange;
  external set onorientationchange(dynamic Function(Window, Event)? value);
  external dynamic get opener;
  external set opener(dynamic value);
  external num get orientation;
  external num get outerHeight;
  external num get outerWidth;
  external num get pageXOffset;
  external num get pageYOffset;
  external WindowProxy get parent;
  external BarProp get personalbar;
  external Screen get screen;
  external num get screenLeft;
  external num get screenTop;
  external num get screenX;
  external num get screenY;
  external num get scrollX;
  external num get scrollY;
  external BarProp get scrollbars;
  external dynamic get self;
  external SpeechSynthesis get speechSynthesis;
  external String get status;
  external set status(String value);
  external BarProp get statusbar;
  external BarProp get toolbar;
  external WindowProxy? get top;
  external VisualViewport? get visualViewport;
  external dynamic get window;
  @JS("alert")
  external void alert([dynamic message]);
  @JS("blur")
  external void blur();
  @JS("cancelIdleCallback")
  external void cancelIdleCallback(num handle);
  @JS("captureEvents")
  external void captureEvents();
  @JS("close")
  external void close();
  @JS("confirm")
  external bool confirm([String message]);
  @JS("focus")
  external void focus();
  @JS("getComputedStyle")
  external CSSStyleDeclaration getComputedStyle(Element elt, [String? pseudoElt]);
  @JS("getSelection")
  external Selection? getSelection();
  @JS("matchMedia")
  external MediaQueryList matchMedia(String query);
  @JS("moveBy")
  external void moveBy(num x, num y);
  @JS("moveTo")
  external void moveTo(num x, num y);
  @JS("open")
  external WindowProxy? open([dynamic /* String|URL */ url, String target, String features]);
  @JS("postMessage")
  external void postMessage(dynamic message, String targetOrigin, [List<Transferable> transfer]);
  @JS("postMessage")
  external void postMessage(dynamic message, [WindowPostMessageOptions options]);
  @JS("print")
  external void print();
  @JS("prompt")
  external String? prompt([String message, String _default]);
  @JS("releaseEvents")
  external void releaseEvents();
  @JS("requestIdleCallback")
  external num requestIdleCallback(IdleRequestCallback callback, [IdleRequestOptions options]);
  @JS("resizeBy")
  external void resizeBy(num x, num y);
  @JS("resizeTo")
  external void resizeTo(num width, num height);
  @JS("scroll")
  external void scroll([ScrollToOptions options]);
  @JS("scroll")
  external void scroll(num x, num y);
  @JS("scrollBy")
  external void scrollBy([ScrollToOptions options]);
  @JS("scrollBy")
  external void scrollBy(num x, num y);
  @JS("scrollTo")
  external void scrollTo([ScrollToOptions options]);
  @JS("scrollTo")
  external void scrollTo(num x, num y);
  @JS("stop")
  external void stop();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(Window, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(Window, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
  external Location get location;
  external set location(String href);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS("Window")
external AnonInterface$647 Window;
@JS()
@anonymous
abstract class WindowEventHandlersEventMap{}
extension WindowEventHandlersEventMapExtension on WindowEventHandlersEventMap {
  external Event get "afterprint";
  external set "afterprint"(Event value);
  external Event get "beforeprint";
  external set "beforeprint"(Event value);
  external BeforeUnloadEvent get "beforeunload";
  external set "beforeunload"(BeforeUnloadEvent value);
  external GamepadEvent get "gamepadconnected";
  external set "gamepadconnected"(GamepadEvent value);
  external GamepadEvent get "gamepaddisconnected";
  external set "gamepaddisconnected"(GamepadEvent value);
  external HashChangeEvent get "hashchange";
  external set "hashchange"(HashChangeEvent value);
  external Event get "languagechange";
  external set "languagechange"(Event value);
  external MessageEvent get "message";
  external set "message"(MessageEvent value);
  external MessageEvent get "messageerror";
  external set "messageerror"(MessageEvent value);
  external Event get "offline";
  external set "offline"(Event value);
  external Event get "online";
  external set "online"(Event value);
  external PageTransitionEvent get "pagehide";
  external set "pagehide"(PageTransitionEvent value);
  external Event get "pagereveal";
  external set "pagereveal"(Event value);
  external PageTransitionEvent get "pageshow";
  external set "pageshow"(PageTransitionEvent value);
  external Event get "pageswap";
  external set "pageswap"(Event value);
  external PopStateEvent get "popstate";
  external set "popstate"(PopStateEvent value);
  external PromiseRejectionEvent get "rejectionhandled";
  external set "rejectionhandled"(PromiseRejectionEvent value);
  external StorageEvent get "storage";
  external set "storage"(StorageEvent value);
  external PromiseRejectionEvent get "unhandledrejection";
  external set "unhandledrejection"(PromiseRejectionEvent value);
  external Event get "unload";
  external set "unload"(Event value);
}
@JS()
@anonymous
abstract class WindowEventHandlers{}
extension WindowEventHandlersExtension on WindowEventHandlers {
  external dynamic Function(WindowEventHandlers, Event)? get onafterprint;
  external set onafterprint(dynamic Function(WindowEventHandlers, Event)? value);
  external dynamic Function(WindowEventHandlers, Event)? get onbeforeprint;
  external set onbeforeprint(dynamic Function(WindowEventHandlers, Event)? value);
  external dynamic Function(WindowEventHandlers, BeforeUnloadEvent)? get onbeforeunload;
  external set onbeforeunload(dynamic Function(WindowEventHandlers, BeforeUnloadEvent)? value);
  external dynamic Function(WindowEventHandlers, GamepadEvent)? get ongamepadconnected;
  external set ongamepadconnected(dynamic Function(WindowEventHandlers, GamepadEvent)? value);
  external dynamic Function(WindowEventHandlers, GamepadEvent)? get ongamepaddisconnected;
  external set ongamepaddisconnected(dynamic Function(WindowEventHandlers, GamepadEvent)? value);
  external dynamic Function(WindowEventHandlers, HashChangeEvent)? get onhashchange;
  external set onhashchange(dynamic Function(WindowEventHandlers, HashChangeEvent)? value);
  external dynamic Function(WindowEventHandlers, Event)? get onlanguagechange;
  external set onlanguagechange(dynamic Function(WindowEventHandlers, Event)? value);
  external dynamic Function(WindowEventHandlers, MessageEvent)? get onmessage;
  external set onmessage(dynamic Function(WindowEventHandlers, MessageEvent)? value);
  external dynamic Function(WindowEventHandlers, MessageEvent)? get onmessageerror;
  external set onmessageerror(dynamic Function(WindowEventHandlers, MessageEvent)? value);
  external dynamic Function(WindowEventHandlers, Event)? get onoffline;
  external set onoffline(dynamic Function(WindowEventHandlers, Event)? value);
  external dynamic Function(WindowEventHandlers, Event)? get ononline;
  external set ononline(dynamic Function(WindowEventHandlers, Event)? value);
  external dynamic Function(WindowEventHandlers, PageTransitionEvent)? get onpagehide;
  external set onpagehide(dynamic Function(WindowEventHandlers, PageTransitionEvent)? value);
  external dynamic Function(WindowEventHandlers, Event)? get onpagereveal;
  external set onpagereveal(dynamic Function(WindowEventHandlers, Event)? value);
  external dynamic Function(WindowEventHandlers, PageTransitionEvent)? get onpageshow;
  external set onpageshow(dynamic Function(WindowEventHandlers, PageTransitionEvent)? value);
  external dynamic Function(WindowEventHandlers, Event)? get onpageswap;
  external set onpageswap(dynamic Function(WindowEventHandlers, Event)? value);
  external dynamic Function(WindowEventHandlers, PopStateEvent)? get onpopstate;
  external set onpopstate(dynamic Function(WindowEventHandlers, PopStateEvent)? value);
  external dynamic Function(WindowEventHandlers, PromiseRejectionEvent)? get onrejectionhandled;
  external set onrejectionhandled(dynamic Function(WindowEventHandlers, PromiseRejectionEvent)? value);
  external dynamic Function(WindowEventHandlers, StorageEvent)? get onstorage;
  external set onstorage(dynamic Function(WindowEventHandlers, StorageEvent)? value);
  external dynamic Function(WindowEventHandlers, PromiseRejectionEvent)? get onunhandledrejection;
  external set onunhandledrejection(dynamic Function(WindowEventHandlers, PromiseRejectionEvent)? value);
  external dynamic Function(WindowEventHandlers, Event)? get onunload;
  external set onunload(dynamic Function(WindowEventHandlers, Event)? value);
  @JS("addEventListener")
  external void addEventListener_1(K type, dynamic Function(WindowEventHandlers, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener_2(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener_1(K type, dynamic Function(WindowEventHandlers, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener_2(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS()
@anonymous
abstract class WindowLocalStorage{}
extension WindowLocalStorageExtension on WindowLocalStorage {
  external Storage get localStorage;
}
@JS()
@anonymous
abstract class WindowOrWorkerGlobalScope{}
extension WindowOrWorkerGlobalScopeExtension on WindowOrWorkerGlobalScope {
  external CacheStorage get caches;
  external bool get crossOriginIsolated;
  external Crypto get crypto;
  external IDBFactory get indexedDB;
  external bool get isSecureContext;
  external String get origin;
  external Performance get performance;
  @JS("atob")
  external String atob(String data);
  @JS("btoa")
  external String btoa(String data);
  @JS("clearInterval")
  external void clearInterval(num? id);
  @JS("clearTimeout")
  external void clearTimeout(num? id);
  @JS("createImageBitmap")
  external Future<ImageBitmap> createImageBitmap_1(ImageBitmapSource image, [ImageBitmapOptions options]);
  @JS("createImageBitmap")
  external Future<ImageBitmap> createImageBitmap_2(ImageBitmapSource image, num sx, num sy, num sw, num sh, [ImageBitmapOptions options]);
  @JS("fetch")
  external Future<Response> fetch(dynamic /* RequestInfo|URL */ input, [RequestInit init]);
  @JS("queueMicrotask")
  external void queueMicrotask(VoidFunction callback);
  @JS("reportError")
  external void reportError(dynamic e);
  @JS("setInterval")
  external num setInterval(TimerHandler handler, [num timeout, /* rest */ List<dynamic> arguments]);
  @JS("setTimeout")
  external num setTimeout(TimerHandler handler, [num timeout, /* rest */ List<dynamic> arguments]);
  @JS("structuredClone")
  external T structuredClone(T value, [StructuredSerializeOptions options]);
}
@JS()
@anonymous
abstract class WindowSessionStorage{}
extension WindowSessionStorageExtension on WindowSessionStorage {
  external Storage get sessionStorage;
}
@JS()
@anonymous
abstract class WorkerEventMap{}
extension WorkerEventMapExtension on WorkerEventMap {
}
@JS()
@anonymous
abstract class Worker{}
extension WorkerExtension on Worker {
  @JS("postMessage")
  external void postMessage(dynamic message, List<Transferable> transfer);
  @JS("postMessage")
  external void postMessage(dynamic message, [StructuredSerializeOptions options]);
  @JS("terminate")
  external void terminate();
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(Worker, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(Worker, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("Worker")
external AnonInterface$648 Worker;
@JS()
@anonymous
abstract class Worklet{}
extension WorkletExtension on Worklet {
  @JS("addModule")
  external Future<void> addModule(dynamic /* String|URL */ moduleURL, [WorkletOptions options]);
}
@JS("Worklet")
external AnonInterface$649 Worklet;
@JS()
@anonymous
abstract class WritableStream{}
extension WritableStreamExtension on WritableStream {
  external bool get locked;
  @JS("abort")
  external Future<void> abort([dynamic reason]);
  @JS("close")
  external Future<void> close();
  @JS("getWriter")
  external WritableStreamDefaultWriter<W> getWriter();
}
@JS("WritableStream")
external AnonInterface$650 WritableStream;
@JS()
@anonymous
abstract class WritableStreamDefaultController{}
extension WritableStreamDefaultControllerExtension on WritableStreamDefaultController {
  external AbortSignal get signal;
  @JS("error")
  external void error([dynamic e]);
}
@JS("WritableStreamDefaultController")
external AnonInterface$651 WritableStreamDefaultController;
@JS()
@anonymous
abstract class WritableStreamDefaultWriter{}
extension WritableStreamDefaultWriterExtension on WritableStreamDefaultWriter {
  external Future<void> get closed;
  external num? get desiredSize;
  external Future<void> get ready;
  @JS("abort")
  external Future<void> abort([dynamic reason]);
  @JS("close")
  external Future<void> close();
  @JS("releaseLock")
  external void releaseLock();
  @JS("write")
  external Future<void> write([W chunk]);
}
@JS("WritableStreamDefaultWriter")
external AnonInterface$652 WritableStreamDefaultWriter;
@JS()
@anonymous
abstract class XMLDocument{}
extension XMLDocumentExtension on XMLDocument {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(XMLDocument, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(XMLDocument, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("XMLDocument")
external AnonInterface$653 XMLDocument;
@JS()
@anonymous
abstract class XMLHttpRequestEventMap{}
extension XMLHttpRequestEventMapExtension on XMLHttpRequestEventMap {
  external Event get "readystatechange";
  external set "readystatechange"(Event value);
}
@JS()
@anonymous
abstract class XMLHttpRequest{}
extension XMLHttpRequestExtension on XMLHttpRequest {
  external dynamic Function(XMLHttpRequest, Event)? get onreadystatechange;
  external set onreadystatechange(dynamic Function(XMLHttpRequest, Event)? value);
  external num get readyState;
  external dynamic get response;
  external String get responseText;
  external XMLHttpRequestResponseType get responseType;
  external set responseType(XMLHttpRequestResponseType value);
  external String get responseURL;
  external Document? get responseXML;
  external num get status;
  external String get statusText;
  external num get timeout;
  external set timeout(num value);
  external XMLHttpRequestUpload get upload;
  external bool get withCredentials;
  external set withCredentials(bool value);
  external num get UNSENT;
  external num get OPENED;
  external num get HEADERS_RECEIVED;
  external num get LOADING;
  external num get DONE;
  @JS("abort")
  external void abort();
  @JS("getAllResponseHeaders")
  external String getAllResponseHeaders();
  @JS("getResponseHeader")
  external String? getResponseHeader(String name);
  @JS("open")
  external void open(String method, dynamic /* String|URL */ url);
  @JS("open")
  external void open(String method, dynamic /* String|URL */ url, bool async, [String? username, String? password]);
  @JS("overrideMimeType")
  external void overrideMimeType(String mime);
  @JS("send")
  external void send([dynamic /* Document|XMLHttpRequestBodyInit */ body]);
  @JS("setRequestHeader")
  external void setRequestHeader(String name, String value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(XMLHttpRequest, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(XMLHttpRequest, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("XMLHttpRequest")
external AnonInterface$654 XMLHttpRequest;
@JS()
@anonymous
abstract class XMLHttpRequestEventTargetEventMap{}
extension XMLHttpRequestEventTargetEventMapExtension on XMLHttpRequestEventTargetEventMap {
  external ProgressEvent<XMLHttpRequestEventTarget> get "abort";
  external set "abort"(ProgressEvent<XMLHttpRequestEventTarget> value);
  external ProgressEvent<XMLHttpRequestEventTarget> get "error";
  external set "error"(ProgressEvent<XMLHttpRequestEventTarget> value);
  external ProgressEvent<XMLHttpRequestEventTarget> get "load";
  external set "load"(ProgressEvent<XMLHttpRequestEventTarget> value);
  external ProgressEvent<XMLHttpRequestEventTarget> get "loadend";
  external set "loadend"(ProgressEvent<XMLHttpRequestEventTarget> value);
  external ProgressEvent<XMLHttpRequestEventTarget> get "loadstart";
  external set "loadstart"(ProgressEvent<XMLHttpRequestEventTarget> value);
  external ProgressEvent<XMLHttpRequestEventTarget> get "progress";
  external set "progress"(ProgressEvent<XMLHttpRequestEventTarget> value);
  external ProgressEvent<XMLHttpRequestEventTarget> get "timeout";
  external set "timeout"(ProgressEvent<XMLHttpRequestEventTarget> value);
}
@JS()
@anonymous
abstract class XMLHttpRequestEventTarget{}
extension XMLHttpRequestEventTargetExtension on XMLHttpRequestEventTarget {
  external dynamic Function(XMLHttpRequest, ProgressEvent)? get onabort;
  external set onabort(dynamic Function(XMLHttpRequest, ProgressEvent)? value);
  external dynamic Function(XMLHttpRequest, ProgressEvent)? get onerror;
  external set onerror(dynamic Function(XMLHttpRequest, ProgressEvent)? value);
  external dynamic Function(XMLHttpRequest, ProgressEvent)? get onload;
  external set onload(dynamic Function(XMLHttpRequest, ProgressEvent)? value);
  external dynamic Function(XMLHttpRequest, ProgressEvent)? get onloadend;
  external set onloadend(dynamic Function(XMLHttpRequest, ProgressEvent)? value);
  external dynamic Function(XMLHttpRequest, ProgressEvent)? get onloadstart;
  external set onloadstart(dynamic Function(XMLHttpRequest, ProgressEvent)? value);
  external dynamic Function(XMLHttpRequest, ProgressEvent)? get onprogress;
  external set onprogress(dynamic Function(XMLHttpRequest, ProgressEvent)? value);
  external dynamic Function(XMLHttpRequest, ProgressEvent)? get ontimeout;
  external set ontimeout(dynamic Function(XMLHttpRequest, ProgressEvent)? value);
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(XMLHttpRequestEventTarget, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(XMLHttpRequestEventTarget, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("XMLHttpRequestEventTarget")
external AnonInterface$655 XMLHttpRequestEventTarget;
@JS()
@anonymous
abstract class XMLHttpRequestUpload{}
extension XMLHttpRequestUploadExtension on XMLHttpRequestUpload {
  @JS("addEventListener")
  external void addEventListener(K type, dynamic Function(XMLHttpRequestUpload, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("addEventListener")
  external void addEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(K type, dynamic Function(XMLHttpRequestUpload, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
  @JS("removeEventListener")
  external void removeEventListener(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
}
@JS("XMLHttpRequestUpload")
external AnonInterface$656 XMLHttpRequestUpload;
@JS()
@anonymous
abstract class XMLSerializer{}
extension XMLSerializerExtension on XMLSerializer {
  @JS("serializeToString")
  external String serializeToString(Node root);
}
@JS("XMLSerializer")
external AnonInterface$657 XMLSerializer;
@JS()
@anonymous
abstract class XPathEvaluator{}
extension XPathEvaluatorExtension on XPathEvaluator {
}
@JS("XPathEvaluator")
external AnonInterface$658 XPathEvaluator;
@JS()
@anonymous
abstract class XPathEvaluatorBase{}
extension XPathEvaluatorBaseExtension on XPathEvaluatorBase {
  @JS("createExpression")
  external XPathExpression createExpression(String expression, [XPathNSResolver? resolver]);
  @JS("createNSResolver")
  external Node createNSResolver(Node nodeResolver);
  @JS("evaluate")
  external XPathResult evaluate(String expression, Node contextNode, [XPathNSResolver? resolver, num type, XPathResult? result]);
}
@JS()
@anonymous
abstract class XPathExpression{}
extension XPathExpressionExtension on XPathExpression {
  @JS("evaluate")
  external XPathResult evaluate(Node contextNode, [num type, XPathResult? result]);
}
@JS("XPathExpression")
external AnonInterface$659 XPathExpression;
@JS()
@anonymous
abstract class XPathResult{}
extension XPathResultExtension on XPathResult {
  external bool get booleanValue;
  external bool get invalidIteratorState;
  external num get numberValue;
  external num get resultType;
  external Node? get singleNodeValue;
  external num get snapshotLength;
  external String get stringValue;
  external num get ANY_TYPE;
  external num get NUMBER_TYPE;
  external num get STRING_TYPE;
  external num get BOOLEAN_TYPE;
  external num get UNORDERED_NODE_ITERATOR_TYPE;
  external num get ORDERED_NODE_ITERATOR_TYPE;
  external num get UNORDERED_NODE_SNAPSHOT_TYPE;
  external num get ORDERED_NODE_SNAPSHOT_TYPE;
  external num get ANY_UNORDERED_NODE_TYPE;
  external num get FIRST_ORDERED_NODE_TYPE;
  @JS("iterateNext")
  external Node? iterateNext();
  @JS("snapshotItem")
  external Node? snapshotItem(num index);
}
@JS("XPathResult")
external AnonInterface$660 XPathResult;
@JS()
@anonymous
abstract class XSLTProcessor{}
extension XSLTProcessorExtension on XSLTProcessor {
  @JS("clearParameters")
  external void clearParameters();
  @JS("getParameter")
  external dynamic getParameter(String? namespaceURI, String localName);
  @JS("importStylesheet")
  external void importStylesheet(Node style);
  @JS("removeParameter")
  external void removeParameter(String? namespaceURI, String localName);
  @JS("reset")
  external void reset();
  @JS("setParameter")
  external void setParameter(String? namespaceURI, String localName, dynamic value);
  @JS("transformToDocument")
  external Document transformToDocument(Node source);
  @JS("transformToFragment")
  external DocumentFragment transformToFragment(Node source, Document output);
}
@JS("XSLTProcessor")
external AnonInterface$661 XSLTProcessor;
@JS()
@anonymous
abstract class Console{}
extension ConsoleExtension on Console {
  @JS("assert")
  external void assert([bool condition, /* rest */ List<dynamic> data]);
  @JS("clear")
  external void clear();
  @JS("count")
  external void count([String label]);
  @JS("countReset")
  external void countReset([String label]);
  @JS("debug")
  external void debug([/* rest */ List<dynamic> data]);
  @JS("dir")
  external void dir([dynamic item, dynamic options]);
  @JS("dirxml")
  external void dirxml([/* rest */ List<dynamic> data]);
  @JS("error")
  external void error([/* rest */ List<dynamic> data]);
  @JS("group")
  external void group([/* rest */ List<dynamic> data]);
  @JS("groupCollapsed")
  external void groupCollapsed([/* rest */ List<dynamic> data]);
  @JS("groupEnd")
  external void groupEnd();
  @JS("info")
  external void info([/* rest */ List<dynamic> data]);
  @JS("log")
  external void log([/* rest */ List<dynamic> data]);
  @JS("table")
  external void table([dynamic tabularData, List<String> properties]);
  @JS("time")
  external void time([String label]);
  @JS("timeEnd")
  external void timeEnd([String label]);
  @JS("timeLog")
  external void timeLog([String label, /* rest */ List<dynamic> data]);
  @JS("timeStamp")
  external void timeStamp([String label]);
  @JS("trace")
  external void trace([/* rest */ List<dynamic> data]);
  @JS("warn")
  external void warn([/* rest */ List<dynamic> data]);
}
@JS("console")
external Console console;
@JS("CSS.highlights")
external HighlightRegistry highlights;
@JS("CSS.Hz")
external CSSUnitValue Hz(num value);
@JS("CSS.Q")
external CSSUnitValue Q(num value);
@JS("CSS.cap")
external CSSUnitValue cap(num value);
@JS("CSS.ch")
external CSSUnitValue ch(num value);
@JS("CSS.cm")
external CSSUnitValue cm(num value);
@JS("CSS.cqb")
external CSSUnitValue cqb(num value);
@JS("CSS.cqh")
external CSSUnitValue cqh(num value);
@JS("CSS.cqi")
external CSSUnitValue cqi(num value);
@JS("CSS.cqmax")
external CSSUnitValue cqmax(num value);
@JS("CSS.cqmin")
external CSSUnitValue cqmin(num value);
@JS("CSS.cqw")
external CSSUnitValue cqw(num value);
@JS("CSS.deg")
external CSSUnitValue deg(num value);
@JS("CSS.dpcm")
external CSSUnitValue dpcm(num value);
@JS("CSS.dpi")
external CSSUnitValue dpi(num value);
@JS("CSS.dppx")
external CSSUnitValue dppx(num value);
@JS("CSS.dvb")
external CSSUnitValue dvb(num value);
@JS("CSS.dvh")
external CSSUnitValue dvh(num value);
@JS("CSS.dvi")
external CSSUnitValue dvi(num value);
@JS("CSS.dvmax")
external CSSUnitValue dvmax(num value);
@JS("CSS.dvmin")
external CSSUnitValue dvmin(num value);
@JS("CSS.dvw")
external CSSUnitValue dvw(num value);
@JS("CSS.em")
external CSSUnitValue em(num value);
@JS("CSS.escape")
external String escape(String ident);
@JS("CSS.ex")
external CSSUnitValue ex(num value);
@JS("CSS.fr")
external CSSUnitValue fr(num value);
@JS("CSS.grad")
external CSSUnitValue grad(num value);
@JS("CSS.ic")
external CSSUnitValue ic(num value);
@JS("CSS.kHz")
external CSSUnitValue kHz(num value);
@JS("CSS.lh")
external CSSUnitValue lh(num value);
@JS("CSS.lvb")
external CSSUnitValue lvb(num value);
@JS("CSS.lvh")
external CSSUnitValue lvh(num value);
@JS("CSS.lvi")
external CSSUnitValue lvi(num value);
@JS("CSS.lvmax")
external CSSUnitValue lvmax(num value);
@JS("CSS.lvmin")
external CSSUnitValue lvmin(num value);
@JS("CSS.lvw")
external CSSUnitValue lvw(num value);
@JS("CSS.mm")
external CSSUnitValue mm(num value);
@JS("CSS.ms")
external CSSUnitValue ms(num value);
@JS("CSS.number")
external CSSUnitValue number(num value);
@JS("CSS.pc")
external CSSUnitValue pc(num value);
@JS("CSS.percent")
external CSSUnitValue percent(num value);
@JS("CSS.pt")
external CSSUnitValue pt(num value);
@JS("CSS.px")
external CSSUnitValue px(num value);
@JS("CSS.rad")
external CSSUnitValue rad(num value);
@JS("CSS.rcap")
external CSSUnitValue rcap(num value);
@JS("CSS.rch")
external CSSUnitValue rch(num value);
@JS("CSS.registerProperty")
external void registerProperty(PropertyDefinition definition);
@JS("CSS.rem")
external CSSUnitValue rem(num value);
@JS("CSS.rex")
external CSSUnitValue rex(num value);
@JS("CSS.ric")
external CSSUnitValue ric(num value);
@JS("CSS.rlh")
external CSSUnitValue rlh(num value);
@JS("CSS.s")
external CSSUnitValue s(num value);
@JS("CSS.supports")
external bool supports_1(String property, String value);
@JS("CSS.supports")
external bool supports_2(String conditionText);
@JS("CSS.svb")
external CSSUnitValue svb(num value);
@JS("CSS.svh")
external CSSUnitValue svh(num value);
@JS("CSS.svi")
external CSSUnitValue svi(num value);
@JS("CSS.svmax")
external CSSUnitValue svmax(num value);
@JS("CSS.svmin")
external CSSUnitValue svmin(num value);
@JS("CSS.svw")
external CSSUnitValue svw(num value);
@JS("CSS.turn")
external CSSUnitValue turn(num value);
@JS("CSS.vb")
external CSSUnitValue vb(num value);
@JS("CSS.vh")
external CSSUnitValue vh(num value);
@JS("CSS.vi")
external CSSUnitValue vi(num value);
@JS("CSS.vmax")
external CSSUnitValue vmax(num value);
@JS("CSS.vmin")
external CSSUnitValue vmin(num value);
@JS("CSS.vw")
external CSSUnitValue vw(num value);
@JS()
@anonymous
abstract class CompileError{}
extension CompileErrorExtension on CompileError {
}
@JS("WebAssembly.CompileError")
external AnonInterface$662 CompileError;
@JS()
@anonymous
abstract class Global{}
extension GlobalExtension on Global {
  external dynamic get value;
  external set value(dynamic value);
  @JS("valueOf")
  external dynamic valueOf();
}
@JS("WebAssembly.Global")
external AnonInterface$663 Global;
@JS()
@anonymous
abstract class Instance{}
extension InstanceExtension on Instance {
  external Exports get exports;
}
@JS("WebAssembly.Instance")
external AnonInterface$664 Instance;
@JS()
@anonymous
abstract class LinkError{}
extension LinkErrorExtension on LinkError {
}
@JS("WebAssembly.LinkError")
external AnonInterface$665 LinkError;
@JS()
@anonymous
abstract class Memory{}
extension MemoryExtension on Memory {
  external ArrayBuffer get buffer;
  @JS("grow")
  external num grow(num delta);
}
@JS("WebAssembly.Memory")
external AnonInterface$666 Memory;
@JS()
@anonymous
abstract class Module{}
extension ModuleExtension on Module {
}
@JS("WebAssembly.Module")
external AnonInterface$667 Module;
@JS()
@anonymous
abstract class RuntimeError{}
extension RuntimeErrorExtension on RuntimeError {
}
@JS("WebAssembly.RuntimeError")
external AnonInterface$668 RuntimeError;
@JS()
@anonymous
abstract class Table{}
extension TableExtension on Table {
  external num get length;
  @JS("get")
  external dynamic get(num index);
  @JS("grow")
  external num grow(num delta, [dynamic value]);
  @JS("set")
  external void set(num index, [dynamic value]);
}
@JS("WebAssembly.Table")
external AnonInterface$669 Table;
@JS()
@anonymous
abstract class GlobalDescriptor{}
extension GlobalDescriptorExtension on GlobalDescriptor {
  external bool get mutable;
  external set mutable(bool value);
  external T get value;
  external set value(T value);
}
@JS()
@anonymous
abstract class MemoryDescriptor{}
extension MemoryDescriptorExtension on MemoryDescriptor {
  external num get initial;
  external set initial(num value);
  external num get maximum;
  external set maximum(num value);
  external bool get shared;
  external set shared(bool value);
}
@JS()
@anonymous
abstract class ModuleExportDescriptor{}
extension ModuleExportDescriptorExtension on ModuleExportDescriptor {
  external ImportExportKind get kind;
  external set kind(ImportExportKind value);
  external String get name;
  external set name(String value);
}
@JS()
@anonymous
abstract class ModuleImportDescriptor{}
extension ModuleImportDescriptorExtension on ModuleImportDescriptor {
  external ImportExportKind get kind;
  external set kind(ImportExportKind value);
  external String get module;
  external set module(String value);
  external String get name;
  external set name(String value);
}
@JS()
@anonymous
abstract class TableDescriptor{}
extension TableDescriptorExtension on TableDescriptor {
  external TableKind get element;
  external set element(TableKind value);
  external num get initial;
  external set initial(num value);
  external num get maximum;
  external set maximum(num value);
}
@JS()
@anonymous
abstract class ValueTypeMap{}
extension ValueTypeMapExtension on ValueTypeMap {
  external Function get anyfunc;
  external set anyfunc(Function value);
  external dynamic get externref;
  external set externref(dynamic value);
  external num get f32;
  external set f32(num value);
  external num get f64;
  external set f64(num value);
  external num get i32;
  external set i32(num value);
  external BigInt get i64;
  external set i64(BigInt value);
  external dynamic get v128;
  external set v128(dynamic value);
}
@JS()
@anonymous
abstract class WebAssemblyInstantiatedSource{}
extension WebAssemblyInstantiatedSourceExtension on WebAssemblyInstantiatedSource {
  external Instance get instance;
  external set instance(Instance value);
  external Module get module;
  external set module(Module value);
}
typedef ImportExportKind = String;
typedef TableKind = String;
typedef ExportValue = dynamic /* Function|Global|Memory|Table */;
typedef Exports = Record<String, ExportValue>;
typedef ImportValue = dynamic /* ExportValue|num */;
typedef Imports = Record<String, ModuleImports>;
typedef ModuleImports = Record<String, ImportValue>;
typedef ValueType = dynamic;
@JS("WebAssembly.compile")
external Future<Module> compile(BufferSource bytes);
@JS("WebAssembly.compileStreaming")
external Future<Module> compileStreaming(dynamic /* Response|PromiseLike<Response> */ source);
@JS("WebAssembly.instantiate")
external Future<WebAssemblyInstantiatedSource> instantiate_1(BufferSource bytes, [Imports importObject]);
@JS("WebAssembly.instantiate")
external Future<Instance> instantiate_2(Module moduleObject, [Imports importObject]);
@JS("WebAssembly.instantiateStreaming")
external Future<WebAssemblyInstantiatedSource> instantiateStreaming(dynamic /* Response|PromiseLike<Response> */ source, [Imports importObject]);
@JS("WebAssembly.validate")
external bool validate(BufferSource bytes);
@JS()
@anonymous
abstract class AudioDataOutputCallback{}
extension AudioDataOutputCallbackExtension on AudioDataOutputCallback {
}
@JS()
@anonymous
abstract class BlobCallback{}
extension BlobCallbackExtension on BlobCallback {
}
@JS()
@anonymous
class CustomElementConstructor{
  external factory CustomElementConstructor({List<dynamic> params});
}
extension CustomElementConstructorExtension on CustomElementConstructor {
}
@JS()
@anonymous
abstract class DecodeErrorCallback{}
extension DecodeErrorCallbackExtension on DecodeErrorCallback {
}
@JS()
@anonymous
abstract class DecodeSuccessCallback{}
extension DecodeSuccessCallbackExtension on DecodeSuccessCallback {
}
@JS()
@anonymous
abstract class EncodedAudioChunkOutputCallback{}
extension EncodedAudioChunkOutputCallbackExtension on EncodedAudioChunkOutputCallback {
}
@JS()
@anonymous
abstract class EncodedVideoChunkOutputCallback{}
extension EncodedVideoChunkOutputCallbackExtension on EncodedVideoChunkOutputCallback {
}
@JS()
@anonymous
abstract class ErrorCallback{}
extension ErrorCallbackExtension on ErrorCallback {
}
@JS()
@anonymous
abstract class FileCallback{}
extension FileCallbackExtension on FileCallback {
}
@JS()
@anonymous
abstract class FileSystemEntriesCallback{}
extension FileSystemEntriesCallbackExtension on FileSystemEntriesCallback {
}
@JS()
@anonymous
abstract class FileSystemEntryCallback{}
extension FileSystemEntryCallbackExtension on FileSystemEntryCallback {
}
@JS()
@anonymous
abstract class FrameRequestCallback{}
extension FrameRequestCallbackExtension on FrameRequestCallback {
}
@JS()
@anonymous
abstract class FunctionStringCallback{}
extension FunctionStringCallbackExtension on FunctionStringCallback {
}
@JS()
@anonymous
abstract class IdleRequestCallback{}
extension IdleRequestCallbackExtension on IdleRequestCallback {
}
@JS()
@anonymous
abstract class IntersectionObserverCallback{}
extension IntersectionObserverCallbackExtension on IntersectionObserverCallback {
}
@JS()
@anonymous
abstract class LockGrantedCallback{}
extension LockGrantedCallbackExtension on LockGrantedCallback {
}
@JS()
@anonymous
abstract class MediaSessionActionHandler{}
extension MediaSessionActionHandlerExtension on MediaSessionActionHandler {
}
@JS()
@anonymous
abstract class MutationCallback{}
extension MutationCallbackExtension on MutationCallback {
}
@JS()
@anonymous
abstract class NotificationPermissionCallback{}
extension NotificationPermissionCallbackExtension on NotificationPermissionCallback {
}
@JS()
@anonymous
abstract class OnBeforeUnloadEventHandlerNonNull{}
extension OnBeforeUnloadEventHandlerNonNullExtension on OnBeforeUnloadEventHandlerNonNull {
}
@JS()
@anonymous
abstract class OnErrorEventHandlerNonNull{}
extension OnErrorEventHandlerNonNullExtension on OnErrorEventHandlerNonNull {
}
@JS()
@anonymous
abstract class PerformanceObserverCallback{}
extension PerformanceObserverCallbackExtension on PerformanceObserverCallback {
}
@JS()
@anonymous
abstract class PositionCallback{}
extension PositionCallbackExtension on PositionCallback {
}
@JS()
@anonymous
abstract class PositionErrorCallback{}
extension PositionErrorCallbackExtension on PositionErrorCallback {
}
@JS()
@anonymous
abstract class QueuingStrategySize{}
extension QueuingStrategySizeExtension on QueuingStrategySize {
}
@JS()
@anonymous
abstract class RTCPeerConnectionErrorCallback{}
extension RTCPeerConnectionErrorCallbackExtension on RTCPeerConnectionErrorCallback {
}
@JS()
@anonymous
abstract class RTCSessionDescriptionCallback{}
extension RTCSessionDescriptionCallbackExtension on RTCSessionDescriptionCallback {
}
@JS()
@anonymous
abstract class RemotePlaybackAvailabilityCallback{}
extension RemotePlaybackAvailabilityCallbackExtension on RemotePlaybackAvailabilityCallback {
}
@JS()
@anonymous
abstract class ReportingObserverCallback{}
extension ReportingObserverCallbackExtension on ReportingObserverCallback {
}
@JS()
@anonymous
abstract class ResizeObserverCallback{}
extension ResizeObserverCallbackExtension on ResizeObserverCallback {
}
@JS()
@anonymous
abstract class TransformerFlushCallback{}
extension TransformerFlushCallbackExtension on TransformerFlushCallback {
}
@JS()
@anonymous
abstract class TransformerStartCallback{}
extension TransformerStartCallbackExtension on TransformerStartCallback {
}
@JS()
@anonymous
abstract class TransformerTransformCallback{}
extension TransformerTransformCallbackExtension on TransformerTransformCallback {
}
@JS()
@anonymous
abstract class UnderlyingSinkAbortCallback{}
extension UnderlyingSinkAbortCallbackExtension on UnderlyingSinkAbortCallback {
}
@JS()
@anonymous
abstract class UnderlyingSinkCloseCallback{}
extension UnderlyingSinkCloseCallbackExtension on UnderlyingSinkCloseCallback {
}
@JS()
@anonymous
abstract class UnderlyingSinkStartCallback{}
extension UnderlyingSinkStartCallbackExtension on UnderlyingSinkStartCallback {
}
@JS()
@anonymous
abstract class UnderlyingSinkWriteCallback{}
extension UnderlyingSinkWriteCallbackExtension on UnderlyingSinkWriteCallback {
}
@JS()
@anonymous
abstract class UnderlyingSourceCancelCallback{}
extension UnderlyingSourceCancelCallbackExtension on UnderlyingSourceCancelCallback {
}
@JS()
@anonymous
abstract class UnderlyingSourcePullCallback{}
extension UnderlyingSourcePullCallbackExtension on UnderlyingSourcePullCallback {
}
@JS()
@anonymous
abstract class UnderlyingSourceStartCallback{}
extension UnderlyingSourceStartCallbackExtension on UnderlyingSourceStartCallback {
}
@JS()
@anonymous
abstract class VideoFrameOutputCallback{}
extension VideoFrameOutputCallbackExtension on VideoFrameOutputCallback {
}
@JS()
@anonymous
abstract class VideoFrameRequestCallback{}
extension VideoFrameRequestCallbackExtension on VideoFrameRequestCallback {
}
@JS()
@anonymous
abstract class ViewTransitionUpdateCallback{}
extension ViewTransitionUpdateCallbackExtension on ViewTransitionUpdateCallback {
}
@JS()
@anonymous
abstract class VoidFunction{}
extension VoidFunctionExtension on VoidFunction {
}
@JS()
@anonymous
abstract class WebCodecsErrorCallback{}
extension WebCodecsErrorCallbackExtension on WebCodecsErrorCallback {
}
@JS()
@anonymous
abstract class HTMLElementTagNameMap{}
extension HTMLElementTagNameMapExtension on HTMLElementTagNameMap {
  external HTMLAnchorElement get "a";
  external set "a"(HTMLAnchorElement value);
  external HTMLElement get "abbr";
  external set "abbr"(HTMLElement value);
  external HTMLElement get "address";
  external set "address"(HTMLElement value);
  external HTMLAreaElement get "area";
  external set "area"(HTMLAreaElement value);
  external HTMLElement get "article";
  external set "article"(HTMLElement value);
  external HTMLElement get "aside";
  external set "aside"(HTMLElement value);
  external HTMLAudioElement get "audio";
  external set "audio"(HTMLAudioElement value);
  external HTMLElement get "b";
  external set "b"(HTMLElement value);
  external HTMLBaseElement get "base";
  external set "base"(HTMLBaseElement value);
  external HTMLElement get "bdi";
  external set "bdi"(HTMLElement value);
  external HTMLElement get "bdo";
  external set "bdo"(HTMLElement value);
  external HTMLQuoteElement get "blockquote";
  external set "blockquote"(HTMLQuoteElement value);
  external HTMLBodyElement get "body";
  external set "body"(HTMLBodyElement value);
  external HTMLBRElement get "br";
  external set "br"(HTMLBRElement value);
  external HTMLButtonElement get "button";
  external set "button"(HTMLButtonElement value);
  external HTMLCanvasElement get "canvas";
  external set "canvas"(HTMLCanvasElement value);
  external HTMLTableCaptionElement get "caption";
  external set "caption"(HTMLTableCaptionElement value);
  external HTMLElement get "cite";
  external set "cite"(HTMLElement value);
  external HTMLElement get "code";
  external set "code"(HTMLElement value);
  external HTMLTableColElement get "col";
  external set "col"(HTMLTableColElement value);
  external HTMLTableColElement get "colgroup";
  external set "colgroup"(HTMLTableColElement value);
  external HTMLDataElement get "data";
  external set "data"(HTMLDataElement value);
  external HTMLDataListElement get "datalist";
  external set "datalist"(HTMLDataListElement value);
  external HTMLElement get "dd";
  external set "dd"(HTMLElement value);
  external HTMLModElement get "del";
  external set "del"(HTMLModElement value);
  external HTMLDetailsElement get "details";
  external set "details"(HTMLDetailsElement value);
  external HTMLElement get "dfn";
  external set "dfn"(HTMLElement value);
  external HTMLDialogElement get "dialog";
  external set "dialog"(HTMLDialogElement value);
  external HTMLDivElement get "div";
  external set "div"(HTMLDivElement value);
  external HTMLDListElement get "dl";
  external set "dl"(HTMLDListElement value);
  external HTMLElement get "dt";
  external set "dt"(HTMLElement value);
  external HTMLElement get "em";
  external set "em"(HTMLElement value);
  external HTMLEmbedElement get "embed";
  external set "embed"(HTMLEmbedElement value);
  external HTMLFieldSetElement get "fieldset";
  external set "fieldset"(HTMLFieldSetElement value);
  external HTMLElement get "figcaption";
  external set "figcaption"(HTMLElement value);
  external HTMLElement get "figure";
  external set "figure"(HTMLElement value);
  external HTMLElement get "footer";
  external set "footer"(HTMLElement value);
  external HTMLFormElement get "form";
  external set "form"(HTMLFormElement value);
  external HTMLHeadingElement get "h1";
  external set "h1"(HTMLHeadingElement value);
  external HTMLHeadingElement get "h2";
  external set "h2"(HTMLHeadingElement value);
  external HTMLHeadingElement get "h3";
  external set "h3"(HTMLHeadingElement value);
  external HTMLHeadingElement get "h4";
  external set "h4"(HTMLHeadingElement value);
  external HTMLHeadingElement get "h5";
  external set "h5"(HTMLHeadingElement value);
  external HTMLHeadingElement get "h6";
  external set "h6"(HTMLHeadingElement value);
  external HTMLHeadElement get "head";
  external set "head"(HTMLHeadElement value);
  external HTMLElement get "header";
  external set "header"(HTMLElement value);
  external HTMLElement get "hgroup";
  external set "hgroup"(HTMLElement value);
  external HTMLHRElement get "hr";
  external set "hr"(HTMLHRElement value);
  external HTMLHtmlElement get "html";
  external set "html"(HTMLHtmlElement value);
  external HTMLElement get "i";
  external set "i"(HTMLElement value);
  external HTMLIFrameElement get "iframe";
  external set "iframe"(HTMLIFrameElement value);
  external HTMLImageElement get "img";
  external set "img"(HTMLImageElement value);
  external HTMLInputElement get "input";
  external set "input"(HTMLInputElement value);
  external HTMLModElement get "ins";
  external set "ins"(HTMLModElement value);
  external HTMLElement get "kbd";
  external set "kbd"(HTMLElement value);
  external HTMLLabelElement get "label";
  external set "label"(HTMLLabelElement value);
  external HTMLLegendElement get "legend";
  external set "legend"(HTMLLegendElement value);
  external HTMLLIElement get "li";
  external set "li"(HTMLLIElement value);
  external HTMLLinkElement get "link";
  external set "link"(HTMLLinkElement value);
  external HTMLElement get "main";
  external set "main"(HTMLElement value);
  external HTMLMapElement get "map";
  external set "map"(HTMLMapElement value);
  external HTMLElement get "mark";
  external set "mark"(HTMLElement value);
  external HTMLMenuElement get "menu";
  external set "menu"(HTMLMenuElement value);
  external HTMLMetaElement get "meta";
  external set "meta"(HTMLMetaElement value);
  external HTMLMeterElement get "meter";
  external set "meter"(HTMLMeterElement value);
  external HTMLElement get "nav";
  external set "nav"(HTMLElement value);
  external HTMLElement get "noscript";
  external set "noscript"(HTMLElement value);
  external HTMLObjectElement get "object";
  external set "object"(HTMLObjectElement value);
  external HTMLOListElement get "ol";
  external set "ol"(HTMLOListElement value);
  external HTMLOptGroupElement get "optgroup";
  external set "optgroup"(HTMLOptGroupElement value);
  external HTMLOptionElement get "option";
  external set "option"(HTMLOptionElement value);
  external HTMLOutputElement get "output";
  external set "output"(HTMLOutputElement value);
  external HTMLParagraphElement get "p";
  external set "p"(HTMLParagraphElement value);
  external HTMLPictureElement get "picture";
  external set "picture"(HTMLPictureElement value);
  external HTMLPreElement get "pre";
  external set "pre"(HTMLPreElement value);
  external HTMLProgressElement get "progress";
  external set "progress"(HTMLProgressElement value);
  external HTMLQuoteElement get "q";
  external set "q"(HTMLQuoteElement value);
  external HTMLElement get "rp";
  external set "rp"(HTMLElement value);
  external HTMLElement get "rt";
  external set "rt"(HTMLElement value);
  external HTMLElement get "ruby";
  external set "ruby"(HTMLElement value);
  external HTMLElement get "s";
  external set "s"(HTMLElement value);
  external HTMLElement get "samp";
  external set "samp"(HTMLElement value);
  external HTMLScriptElement get "script";
  external set "script"(HTMLScriptElement value);
  external HTMLElement get "search";
  external set "search"(HTMLElement value);
  external HTMLElement get "section";
  external set "section"(HTMLElement value);
  external HTMLSelectElement get "select";
  external set "select"(HTMLSelectElement value);
  external HTMLSlotElement get "slot";
  external set "slot"(HTMLSlotElement value);
  external HTMLElement get "small";
  external set "small"(HTMLElement value);
  external HTMLSourceElement get "source";
  external set "source"(HTMLSourceElement value);
  external HTMLSpanElement get "span";
  external set "span"(HTMLSpanElement value);
  external HTMLElement get "strong";
  external set "strong"(HTMLElement value);
  external HTMLStyleElement get "style";
  external set "style"(HTMLStyleElement value);
  external HTMLElement get "sub";
  external set "sub"(HTMLElement value);
  external HTMLElement get "summary";
  external set "summary"(HTMLElement value);
  external HTMLElement get "sup";
  external set "sup"(HTMLElement value);
  external HTMLTableElement get "table";
  external set "table"(HTMLTableElement value);
  external HTMLTableSectionElement get "tbody";
  external set "tbody"(HTMLTableSectionElement value);
  external HTMLTableCellElement get "td";
  external set "td"(HTMLTableCellElement value);
  external HTMLTemplateElement get "template";
  external set "template"(HTMLTemplateElement value);
  external HTMLTextAreaElement get "textarea";
  external set "textarea"(HTMLTextAreaElement value);
  external HTMLTableSectionElement get "tfoot";
  external set "tfoot"(HTMLTableSectionElement value);
  external HTMLTableCellElement get "th";
  external set "th"(HTMLTableCellElement value);
  external HTMLTableSectionElement get "thead";
  external set "thead"(HTMLTableSectionElement value);
  external HTMLTimeElement get "time";
  external set "time"(HTMLTimeElement value);
  external HTMLTitleElement get "title";
  external set "title"(HTMLTitleElement value);
  external HTMLTableRowElement get "tr";
  external set "tr"(HTMLTableRowElement value);
  external HTMLTrackElement get "track";
  external set "track"(HTMLTrackElement value);
  external HTMLElement get "u";
  external set "u"(HTMLElement value);
  external HTMLUListElement get "ul";
  external set "ul"(HTMLUListElement value);
  external HTMLElement get "var";
  external set "var"(HTMLElement value);
  external HTMLVideoElement get "video";
  external set "video"(HTMLVideoElement value);
  external HTMLElement get "wbr";
  external set "wbr"(HTMLElement value);
}
@JS()
@anonymous
abstract class HTMLElementDeprecatedTagNameMap{}
extension HTMLElementDeprecatedTagNameMapExtension on HTMLElementDeprecatedTagNameMap {
  external HTMLElement get "acronym";
  external set "acronym"(HTMLElement value);
  external HTMLUnknownElement get "applet";
  external set "applet"(HTMLUnknownElement value);
  external HTMLElement get "basefont";
  external set "basefont"(HTMLElement value);
  external HTMLUnknownElement get "bgsound";
  external set "bgsound"(HTMLUnknownElement value);
  external HTMLElement get "big";
  external set "big"(HTMLElement value);
  external HTMLUnknownElement get "blink";
  external set "blink"(HTMLUnknownElement value);
  external HTMLElement get "center";
  external set "center"(HTMLElement value);
  external HTMLDirectoryElement get "dir";
  external set "dir"(HTMLDirectoryElement value);
  external HTMLFontElement get "font";
  external set "font"(HTMLFontElement value);
  external HTMLFrameElement get "frame";
  external set "frame"(HTMLFrameElement value);
  external HTMLFrameSetElement get "frameset";
  external set "frameset"(HTMLFrameSetElement value);
  external HTMLUnknownElement get "isindex";
  external set "isindex"(HTMLUnknownElement value);
  external HTMLUnknownElement get "keygen";
  external set "keygen"(HTMLUnknownElement value);
  external HTMLPreElement get "listing";
  external set "listing"(HTMLPreElement value);
  external HTMLMarqueeElement get "marquee";
  external set "marquee"(HTMLMarqueeElement value);
  external HTMLElement get "menuitem";
  external set "menuitem"(HTMLElement value);
  external HTMLUnknownElement get "multicol";
  external set "multicol"(HTMLUnknownElement value);
  external HTMLUnknownElement get "nextid";
  external set "nextid"(HTMLUnknownElement value);
  external HTMLElement get "nobr";
  external set "nobr"(HTMLElement value);
  external HTMLElement get "noembed";
  external set "noembed"(HTMLElement value);
  external HTMLElement get "noframes";
  external set "noframes"(HTMLElement value);
  external HTMLParamElement get "param";
  external set "param"(HTMLParamElement value);
  external HTMLElement get "plaintext";
  external set "plaintext"(HTMLElement value);
  external HTMLElement get "rb";
  external set "rb"(HTMLElement value);
  external HTMLElement get "rtc";
  external set "rtc"(HTMLElement value);
  external HTMLUnknownElement get "spacer";
  external set "spacer"(HTMLUnknownElement value);
  external HTMLElement get "strike";
  external set "strike"(HTMLElement value);
  external HTMLElement get "tt";
  external set "tt"(HTMLElement value);
  external HTMLPreElement get "xmp";
  external set "xmp"(HTMLPreElement value);
}
@JS()
@anonymous
abstract class SVGElementTagNameMap{}
extension SVGElementTagNameMapExtension on SVGElementTagNameMap {
  external SVGAElement get "a";
  external set "a"(SVGAElement value);
  external SVGAnimateElement get "animate";
  external set "animate"(SVGAnimateElement value);
  external SVGAnimateMotionElement get "animateMotion";
  external set "animateMotion"(SVGAnimateMotionElement value);
  external SVGAnimateTransformElement get "animateTransform";
  external set "animateTransform"(SVGAnimateTransformElement value);
  external SVGCircleElement get "circle";
  external set "circle"(SVGCircleElement value);
  external SVGClipPathElement get "clipPath";
  external set "clipPath"(SVGClipPathElement value);
  external SVGDefsElement get "defs";
  external set "defs"(SVGDefsElement value);
  external SVGDescElement get "desc";
  external set "desc"(SVGDescElement value);
  external SVGEllipseElement get "ellipse";
  external set "ellipse"(SVGEllipseElement value);
  external SVGFEBlendElement get "feBlend";
  external set "feBlend"(SVGFEBlendElement value);
  external SVGFEColorMatrixElement get "feColorMatrix";
  external set "feColorMatrix"(SVGFEColorMatrixElement value);
  external SVGFEComponentTransferElement get "feComponentTransfer";
  external set "feComponentTransfer"(SVGFEComponentTransferElement value);
  external SVGFECompositeElement get "feComposite";
  external set "feComposite"(SVGFECompositeElement value);
  external SVGFEConvolveMatrixElement get "feConvolveMatrix";
  external set "feConvolveMatrix"(SVGFEConvolveMatrixElement value);
  external SVGFEDiffuseLightingElement get "feDiffuseLighting";
  external set "feDiffuseLighting"(SVGFEDiffuseLightingElement value);
  external SVGFEDisplacementMapElement get "feDisplacementMap";
  external set "feDisplacementMap"(SVGFEDisplacementMapElement value);
  external SVGFEDistantLightElement get "feDistantLight";
  external set "feDistantLight"(SVGFEDistantLightElement value);
  external SVGFEDropShadowElement get "feDropShadow";
  external set "feDropShadow"(SVGFEDropShadowElement value);
  external SVGFEFloodElement get "feFlood";
  external set "feFlood"(SVGFEFloodElement value);
  external SVGFEFuncAElement get "feFuncA";
  external set "feFuncA"(SVGFEFuncAElement value);
  external SVGFEFuncBElement get "feFuncB";
  external set "feFuncB"(SVGFEFuncBElement value);
  external SVGFEFuncGElement get "feFuncG";
  external set "feFuncG"(SVGFEFuncGElement value);
  external SVGFEFuncRElement get "feFuncR";
  external set "feFuncR"(SVGFEFuncRElement value);
  external SVGFEGaussianBlurElement get "feGaussianBlur";
  external set "feGaussianBlur"(SVGFEGaussianBlurElement value);
  external SVGFEImageElement get "feImage";
  external set "feImage"(SVGFEImageElement value);
  external SVGFEMergeElement get "feMerge";
  external set "feMerge"(SVGFEMergeElement value);
  external SVGFEMergeNodeElement get "feMergeNode";
  external set "feMergeNode"(SVGFEMergeNodeElement value);
  external SVGFEMorphologyElement get "feMorphology";
  external set "feMorphology"(SVGFEMorphologyElement value);
  external SVGFEOffsetElement get "feOffset";
  external set "feOffset"(SVGFEOffsetElement value);
  external SVGFEPointLightElement get "fePointLight";
  external set "fePointLight"(SVGFEPointLightElement value);
  external SVGFESpecularLightingElement get "feSpecularLighting";
  external set "feSpecularLighting"(SVGFESpecularLightingElement value);
  external SVGFESpotLightElement get "feSpotLight";
  external set "feSpotLight"(SVGFESpotLightElement value);
  external SVGFETileElement get "feTile";
  external set "feTile"(SVGFETileElement value);
  external SVGFETurbulenceElement get "feTurbulence";
  external set "feTurbulence"(SVGFETurbulenceElement value);
  external SVGFilterElement get "filter";
  external set "filter"(SVGFilterElement value);
  external SVGForeignObjectElement get "foreignObject";
  external set "foreignObject"(SVGForeignObjectElement value);
  external SVGGElement get "g";
  external set "g"(SVGGElement value);
  external SVGImageElement get "image";
  external set "image"(SVGImageElement value);
  external SVGLineElement get "line";
  external set "line"(SVGLineElement value);
  external SVGLinearGradientElement get "linearGradient";
  external set "linearGradient"(SVGLinearGradientElement value);
  external SVGMarkerElement get "marker";
  external set "marker"(SVGMarkerElement value);
  external SVGMaskElement get "mask";
  external set "mask"(SVGMaskElement value);
  external SVGMetadataElement get "metadata";
  external set "metadata"(SVGMetadataElement value);
  external SVGMPathElement get "mpath";
  external set "mpath"(SVGMPathElement value);
  external SVGPathElement get "path";
  external set "path"(SVGPathElement value);
  external SVGPatternElement get "pattern";
  external set "pattern"(SVGPatternElement value);
  external SVGPolygonElement get "polygon";
  external set "polygon"(SVGPolygonElement value);
  external SVGPolylineElement get "polyline";
  external set "polyline"(SVGPolylineElement value);
  external SVGRadialGradientElement get "radialGradient";
  external set "radialGradient"(SVGRadialGradientElement value);
  external SVGRectElement get "rect";
  external set "rect"(SVGRectElement value);
  external SVGScriptElement get "script";
  external set "script"(SVGScriptElement value);
  external SVGSetElement get "set";
  external set "set"(SVGSetElement value);
  external SVGStopElement get "stop";
  external set "stop"(SVGStopElement value);
  external SVGStyleElement get "style";
  external set "style"(SVGStyleElement value);
  external SVGSVGElement get "svg";
  external set "svg"(SVGSVGElement value);
  external SVGSwitchElement get "switch";
  external set "switch"(SVGSwitchElement value);
  external SVGSymbolElement get "symbol";
  external set "symbol"(SVGSymbolElement value);
  external SVGTextElement get "text";
  external set "text"(SVGTextElement value);
  external SVGTextPathElement get "textPath";
  external set "textPath"(SVGTextPathElement value);
  external SVGTitleElement get "title";
  external set "title"(SVGTitleElement value);
  external SVGTSpanElement get "tspan";
  external set "tspan"(SVGTSpanElement value);
  external SVGUseElement get "use";
  external set "use"(SVGUseElement value);
  external SVGViewElement get "view";
  external set "view"(SVGViewElement value);
}
@JS()
@anonymous
abstract class MathMLElementTagNameMap{}
extension MathMLElementTagNameMapExtension on MathMLElementTagNameMap {
  external MathMLElement get "annotation";
  external set "annotation"(MathMLElement value);
  external MathMLElement get "annotation-xml";
  external set "annotation-xml"(MathMLElement value);
  external MathMLElement get "maction";
  external set "maction"(MathMLElement value);
  external MathMLElement get "math";
  external set "math"(MathMLElement value);
  external MathMLElement get "merror";
  external set "merror"(MathMLElement value);
  external MathMLElement get "mfrac";
  external set "mfrac"(MathMLElement value);
  external MathMLElement get "mi";
  external set "mi"(MathMLElement value);
  external MathMLElement get "mmultiscripts";
  external set "mmultiscripts"(MathMLElement value);
  external MathMLElement get "mn";
  external set "mn"(MathMLElement value);
  external MathMLElement get "mo";
  external set "mo"(MathMLElement value);
  external MathMLElement get "mover";
  external set "mover"(MathMLElement value);
  external MathMLElement get "mpadded";
  external set "mpadded"(MathMLElement value);
  external MathMLElement get "mphantom";
  external set "mphantom"(MathMLElement value);
  external MathMLElement get "mprescripts";
  external set "mprescripts"(MathMLElement value);
  external MathMLElement get "mroot";
  external set "mroot"(MathMLElement value);
  external MathMLElement get "mrow";
  external set "mrow"(MathMLElement value);
  external MathMLElement get "ms";
  external set "ms"(MathMLElement value);
  external MathMLElement get "mspace";
  external set "mspace"(MathMLElement value);
  external MathMLElement get "msqrt";
  external set "msqrt"(MathMLElement value);
  external MathMLElement get "mstyle";
  external set "mstyle"(MathMLElement value);
  external MathMLElement get "msub";
  external set "msub"(MathMLElement value);
  external MathMLElement get "msubsup";
  external set "msubsup"(MathMLElement value);
  external MathMLElement get "msup";
  external set "msup"(MathMLElement value);
  external MathMLElement get "mtable";
  external set "mtable"(MathMLElement value);
  external MathMLElement get "mtd";
  external set "mtd"(MathMLElement value);
  external MathMLElement get "mtext";
  external set "mtext"(MathMLElement value);
  external MathMLElement get "mtr";
  external set "mtr"(MathMLElement value);
  external MathMLElement get "munder";
  external set "munder"(MathMLElement value);
  external MathMLElement get "munderover";
  external set "munderover"(MathMLElement value);
  external MathMLElement get "semantics";
  external set "semantics"(MathMLElement value);
}
typedef ElementTagNameMap = dynamic;
@JS("Audio")
external AnonInterface$670 Audio;
@JS("Image")
external AnonInterface$671 Image;
@JS("Option")
external AnonInterface$672 Option;
@JS("clientInformation")
external Navigator clientInformation;
@JS("closed")
external bool closed;
@JS("customElements")
external CustomElementRegistry customElements;
@JS("devicePixelRatio")
external num devicePixelRatio;
@JS("document")
external Document document;
@JS("event")
external Event? event;
@JS("external")
external External external;
@JS("frameElement")
external Element? frameElement;
@JS("frames")
external WindowProxy frames;
@JS("history")
external History history;
@JS("innerHeight")
external num innerHeight;
@JS("innerWidth")
external num innerWidth;
@JS("length")
external num length;
@JS("location")
external Location location;
@JS("locationbar")
external BarProp locationbar;
@JS("menubar")
external BarProp menubar;
@JS("name")
external void name;
@JS("navigator")
external Navigator navigator;
@JS("ondevicemotion")
external dynamic Function(Window, DeviceMotionEvent)? ondevicemotion;
@JS("ondeviceorientation")
external dynamic Function(Window, DeviceOrientationEvent)? ondeviceorientation;
@JS("ondeviceorientationabsolute")
external dynamic Function(Window, DeviceOrientationEvent)? ondeviceorientationabsolute;
@JS("onorientationchange")
external dynamic Function(Window, Event)? onorientationchange;
@JS("opener")
external dynamic opener;
@JS("orientation")
external num orientation;
@JS("outerHeight")
external num outerHeight;
@JS("outerWidth")
external num outerWidth;
@JS("pageXOffset")
external num pageXOffset;
@JS("pageYOffset")
external num pageYOffset;
@JS("parent")
external WindowProxy parent;
@JS("personalbar")
external BarProp personalbar;
@JS("screen")
external Screen screen;
@JS("screenLeft")
external num screenLeft;
@JS("screenTop")
external num screenTop;
@JS("screenX")
external num screenX;
@JS("screenY")
external num screenY;
@JS("scrollX")
external num scrollX;
@JS("scrollY")
external num scrollY;
@JS("scrollbars")
external BarProp scrollbars;
@JS("self")
external dynamic self;
@JS("speechSynthesis")
external SpeechSynthesis speechSynthesis;
@JS("status")
external String status;
@JS("statusbar")
external BarProp statusbar;
@JS("toolbar")
external BarProp toolbar;
@JS("top")
external WindowProxy? top;
@JS("visualViewport")
external VisualViewport? visualViewport;
@JS("window")
external dynamic window;
@JS("alert")
external void alert([dynamic message]);
@JS("blur")
external void blur();
@JS("cancelIdleCallback")
external void cancelIdleCallback(num handle);
@JS("captureEvents")
external void captureEvents();
@JS("close")
external void close();
@JS("confirm")
external bool confirm([String message]);
@JS("focus")
external void focus();
@JS("getComputedStyle")
external CSSStyleDeclaration getComputedStyle(Element elt, [String? pseudoElt]);
@JS("getSelection")
external Selection? getSelection();
@JS("matchMedia")
external MediaQueryList matchMedia(String query);
@JS("moveBy")
external void moveBy(num x, num y);
@JS("moveTo")
external void moveTo(num x, num y);
@JS("open")
external WindowProxy? open([dynamic /* String|URL */ url, String target, String features]);
@JS("postMessage")
external void postMessage_1(dynamic message, String targetOrigin, [List<Transferable> transfer]);
@JS("postMessage")
external void postMessage_2(dynamic message, [WindowPostMessageOptions options]);
@JS("print")
external void print();
@JS("prompt")
external String? prompt([String message, String _default]);
@JS("releaseEvents")
external void releaseEvents();
@JS("requestIdleCallback")
external num requestIdleCallback(IdleRequestCallback callback, [IdleRequestOptions options]);
@JS("resizeBy")
external void resizeBy(num x, num y);
@JS("resizeTo")
external void resizeTo(num width, num height);
@JS("scroll")
external void scroll_1([ScrollToOptions options]);
@JS("scroll")
external void scroll_2(num x, num y);
@JS("scrollBy")
external void scrollBy_1([ScrollToOptions options]);
@JS("scrollBy")
external void scrollBy_2(num x, num y);
@JS("scrollTo")
external void scrollTo_1([ScrollToOptions options]);
@JS("scrollTo")
external void scrollTo_2(num x, num y);
@JS("stop")
external void stop();
@JS("toString")
external String toString();
@JS("dispatchEvent")
external bool dispatchEvent(Event event);
@JS("cancelAnimationFrame")
external void cancelAnimationFrame(num handle);
@JS("requestAnimationFrame")
external num requestAnimationFrame(FrameRequestCallback callback);
@JS("onabort")
external dynamic Function(Window, UIEvent)? onabort;
@JS("onanimationcancel")
external dynamic Function(Window, AnimationEvent)? onanimationcancel;
@JS("onanimationend")
external dynamic Function(Window, AnimationEvent)? onanimationend;
@JS("onanimationiteration")
external dynamic Function(Window, AnimationEvent)? onanimationiteration;
@JS("onanimationstart")
external dynamic Function(Window, AnimationEvent)? onanimationstart;
@JS("onauxclick")
external dynamic Function(Window, MouseEvent)? onauxclick;
@JS("onbeforeinput")
external dynamic Function(Window, InputEvent)? onbeforeinput;
@JS("onbeforetoggle")
external dynamic Function(Window, Event)? onbeforetoggle;
@JS("onblur")
external dynamic Function(Window, FocusEvent)? onblur;
@JS("oncancel")
external dynamic Function(Window, Event)? oncancel;
@JS("oncanplay")
external dynamic Function(Window, Event)? oncanplay;
@JS("oncanplaythrough")
external dynamic Function(Window, Event)? oncanplaythrough;
@JS("onchange")
external dynamic Function(Window, Event)? onchange;
@JS("onclick")
external dynamic Function(Window, MouseEvent)? onclick;
@JS("onclose")
external dynamic Function(Window, Event)? onclose;
@JS("oncontextlost")
external dynamic Function(Window, Event)? oncontextlost;
@JS("oncontextmenu")
external dynamic Function(Window, MouseEvent)? oncontextmenu;
@JS("oncontextrestored")
external dynamic Function(Window, Event)? oncontextrestored;
@JS("oncopy")
external dynamic Function(Window, ClipboardEvent)? oncopy;
@JS("oncuechange")
external dynamic Function(Window, Event)? oncuechange;
@JS("oncut")
external dynamic Function(Window, ClipboardEvent)? oncut;
@JS("ondblclick")
external dynamic Function(Window, MouseEvent)? ondblclick;
@JS("ondrag")
external dynamic Function(Window, DragEvent)? ondrag;
@JS("ondragend")
external dynamic Function(Window, DragEvent)? ondragend;
@JS("ondragenter")
external dynamic Function(Window, DragEvent)? ondragenter;
@JS("ondragleave")
external dynamic Function(Window, DragEvent)? ondragleave;
@JS("ondragover")
external dynamic Function(Window, DragEvent)? ondragover;
@JS("ondragstart")
external dynamic Function(Window, DragEvent)? ondragstart;
@JS("ondrop")
external dynamic Function(Window, DragEvent)? ondrop;
@JS("ondurationchange")
external dynamic Function(Window, Event)? ondurationchange;
@JS("onemptied")
external dynamic Function(Window, Event)? onemptied;
@JS("onended")
external dynamic Function(Window, Event)? onended;
@JS("onerror")
external OnErrorEventHandler onerror;
@JS("onfocus")
external dynamic Function(Window, FocusEvent)? onfocus;
@JS("onformdata")
external dynamic Function(Window, FormDataEvent)? onformdata;
@JS("ongotpointercapture")
external dynamic Function(Window, PointerEvent)? ongotpointercapture;
@JS("oninput")
external dynamic Function(Window, Event)? oninput;
@JS("oninvalid")
external dynamic Function(Window, Event)? oninvalid;
@JS("onkeydown")
external dynamic Function(Window, KeyboardEvent)? onkeydown;
@JS("onkeypress")
external dynamic Function(Window, KeyboardEvent)? onkeypress;
@JS("onkeyup")
external dynamic Function(Window, KeyboardEvent)? onkeyup;
@JS("onload")
external dynamic Function(Window, Event)? onload;
@JS("onloadeddata")
external dynamic Function(Window, Event)? onloadeddata;
@JS("onloadedmetadata")
external dynamic Function(Window, Event)? onloadedmetadata;
@JS("onloadstart")
external dynamic Function(Window, Event)? onloadstart;
@JS("onlostpointercapture")
external dynamic Function(Window, PointerEvent)? onlostpointercapture;
@JS("onmousedown")
external dynamic Function(Window, MouseEvent)? onmousedown;
@JS("onmouseenter")
external dynamic Function(Window, MouseEvent)? onmouseenter;
@JS("onmouseleave")
external dynamic Function(Window, MouseEvent)? onmouseleave;
@JS("onmousemove")
external dynamic Function(Window, MouseEvent)? onmousemove;
@JS("onmouseout")
external dynamic Function(Window, MouseEvent)? onmouseout;
@JS("onmouseover")
external dynamic Function(Window, MouseEvent)? onmouseover;
@JS("onmouseup")
external dynamic Function(Window, MouseEvent)? onmouseup;
@JS("onpaste")
external dynamic Function(Window, ClipboardEvent)? onpaste;
@JS("onpause")
external dynamic Function(Window, Event)? onpause;
@JS("onplay")
external dynamic Function(Window, Event)? onplay;
@JS("onplaying")
external dynamic Function(Window, Event)? onplaying;
@JS("onpointercancel")
external dynamic Function(Window, PointerEvent)? onpointercancel;
@JS("onpointerdown")
external dynamic Function(Window, PointerEvent)? onpointerdown;
@JS("onpointerenter")
external dynamic Function(Window, PointerEvent)? onpointerenter;
@JS("onpointerleave")
external dynamic Function(Window, PointerEvent)? onpointerleave;
@JS("onpointermove")
external dynamic Function(Window, PointerEvent)? onpointermove;
@JS("onpointerout")
external dynamic Function(Window, PointerEvent)? onpointerout;
@JS("onpointerover")
external dynamic Function(Window, PointerEvent)? onpointerover;
@JS("onpointerup")
external dynamic Function(Window, PointerEvent)? onpointerup;
@JS("onprogress")
external dynamic Function(Window, ProgressEvent)? onprogress;
@JS("onratechange")
external dynamic Function(Window, Event)? onratechange;
@JS("onreset")
external dynamic Function(Window, Event)? onreset;
@JS("onresize")
external dynamic Function(Window, UIEvent)? onresize;
@JS("onscroll")
external dynamic Function(Window, Event)? onscroll;
@JS("onscrollend")
external dynamic Function(Window, Event)? onscrollend;
@JS("onsecuritypolicyviolation")
external dynamic Function(Window, SecurityPolicyViolationEvent)? onsecuritypolicyviolation;
@JS("onseeked")
external dynamic Function(Window, Event)? onseeked;
@JS("onseeking")
external dynamic Function(Window, Event)? onseeking;
@JS("onselect")
external dynamic Function(Window, Event)? onselect;
@JS("onselectionchange")
external dynamic Function(Window, Event)? onselectionchange;
@JS("onselectstart")
external dynamic Function(Window, Event)? onselectstart;
@JS("onslotchange")
external dynamic Function(Window, Event)? onslotchange;
@JS("onstalled")
external dynamic Function(Window, Event)? onstalled;
@JS("onsubmit")
external dynamic Function(Window, SubmitEvent)? onsubmit;
@JS("onsuspend")
external dynamic Function(Window, Event)? onsuspend;
@JS("ontimeupdate")
external dynamic Function(Window, Event)? ontimeupdate;
@JS("ontoggle")
external dynamic Function(Window, Event)? ontoggle;
@JS("ontouchcancel")
external dynamic Function(Window, TouchEvent)? ontouchcancel;
@JS("ontouchend")
external dynamic Function(Window, TouchEvent)? ontouchend;
@JS("ontouchmove")
external dynamic Function(Window, TouchEvent)? ontouchmove;
@JS("ontouchstart")
external dynamic Function(Window, TouchEvent)? ontouchstart;
@JS("ontransitioncancel")
external dynamic Function(Window, TransitionEvent)? ontransitioncancel;
@JS("ontransitionend")
external dynamic Function(Window, TransitionEvent)? ontransitionend;
@JS("ontransitionrun")
external dynamic Function(Window, TransitionEvent)? ontransitionrun;
@JS("ontransitionstart")
external dynamic Function(Window, TransitionEvent)? ontransitionstart;
@JS("onvolumechange")
external dynamic Function(Window, Event)? onvolumechange;
@JS("onwaiting")
external dynamic Function(Window, Event)? onwaiting;
@JS("onwebkitanimationend")
external dynamic Function(Window, Event)? onwebkitanimationend;
@JS("onwebkitanimationiteration")
external dynamic Function(Window, Event)? onwebkitanimationiteration;
@JS("onwebkitanimationstart")
external dynamic Function(Window, Event)? onwebkitanimationstart;
@JS("onwebkittransitionend")
external dynamic Function(Window, Event)? onwebkittransitionend;
@JS("onwheel")
external dynamic Function(Window, WheelEvent)? onwheel;
@JS("onafterprint")
external dynamic Function(Window, Event)? onafterprint;
@JS("onbeforeprint")
external dynamic Function(Window, Event)? onbeforeprint;
@JS("onbeforeunload")
external dynamic Function(Window, BeforeUnloadEvent)? onbeforeunload;
@JS("ongamepadconnected")
external dynamic Function(Window, GamepadEvent)? ongamepadconnected;
@JS("ongamepaddisconnected")
external dynamic Function(Window, GamepadEvent)? ongamepaddisconnected;
@JS("onhashchange")
external dynamic Function(Window, HashChangeEvent)? onhashchange;
@JS("onlanguagechange")
external dynamic Function(Window, Event)? onlanguagechange;
@JS("onmessage")
external dynamic Function(Window, MessageEvent)? onmessage;
@JS("onmessageerror")
external dynamic Function(Window, MessageEvent)? onmessageerror;
@JS("onoffline")
external dynamic Function(Window, Event)? onoffline;
@JS("ononline")
external dynamic Function(Window, Event)? ononline;
@JS("onpagehide")
external dynamic Function(Window, PageTransitionEvent)? onpagehide;
@JS("onpagereveal")
external dynamic Function(Window, Event)? onpagereveal;
@JS("onpageshow")
external dynamic Function(Window, PageTransitionEvent)? onpageshow;
@JS("onpageswap")
external dynamic Function(Window, Event)? onpageswap;
@JS("onpopstate")
external dynamic Function(Window, PopStateEvent)? onpopstate;
@JS("onrejectionhandled")
external dynamic Function(Window, PromiseRejectionEvent)? onrejectionhandled;
@JS("onstorage")
external dynamic Function(Window, StorageEvent)? onstorage;
@JS("onunhandledrejection")
external dynamic Function(Window, PromiseRejectionEvent)? onunhandledrejection;
@JS("onunload")
external dynamic Function(Window, Event)? onunload;
@JS("localStorage")
external Storage localStorage;
@JS("caches")
external CacheStorage caches;
@JS("crossOriginIsolated")
external bool crossOriginIsolated;
@JS("crypto")
external Crypto crypto;
@JS("indexedDB")
external IDBFactory indexedDB;
@JS("isSecureContext")
external bool isSecureContext;
@JS("origin")
external String origin;
@JS("performance")
external Performance performance;
@JS("atob")
external String atob(String data);
@JS("btoa")
external String btoa(String data);
@JS("clearInterval")
external void clearInterval(num? id);
@JS("clearTimeout")
external void clearTimeout(num? id);
@JS("createImageBitmap")
external Future<ImageBitmap> createImageBitmap_1(ImageBitmapSource image, [ImageBitmapOptions options]);
@JS("createImageBitmap")
external Future<ImageBitmap> createImageBitmap_2(ImageBitmapSource image, num sx, num sy, num sw, num sh, [ImageBitmapOptions options]);
@JS("fetch")
external Future<Response> fetch(dynamic /* RequestInfo|URL */ input, [RequestInit init]);
@JS("queueMicrotask")
external void queueMicrotask(VoidFunction callback);
@JS("reportError")
external void reportError(dynamic e);
@JS("setInterval")
external num setInterval(TimerHandler handler, [num timeout, /* rest */ List<dynamic> arguments]);
@JS("setTimeout")
external num setTimeout(TimerHandler handler, [num timeout, /* rest */ List<dynamic> arguments]);
@JS("structuredClone")
external T structuredClone(T value, [StructuredSerializeOptions options]);
@JS("sessionStorage")
external Storage sessionStorage;
@JS("addEventListener")
external void addEventListener_1(K type, dynamic Function(Window, dynamic) listener, [dynamic /* bool|AddEventListenerOptions */ options]);
@JS("addEventListener")
external void addEventListener_2(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|AddEventListenerOptions */ options]);
@JS("removeEventListener")
external void removeEventListener_1(K type, dynamic Function(Window, dynamic) listener, [dynamic /* bool|EventListenerOptions */ options]);
@JS("removeEventListener")
external void removeEventListener_2(String type, EventListenerOrEventListenerObject listener, [dynamic /* bool|EventListenerOptions */ options]);
typedef AlgorithmIdentifier = dynamic /* Algorithm|String */;
typedef AllowSharedBufferSource = dynamic /* ArrayBuffer|ArrayBufferView */;
typedef AutoFill = dynamic /* AutoFillBase|dynamic */;
typedef AutoFillField = dynamic /* AutoFillNormalField|dynamic */;
typedef AutoFillSection = dynamic;
typedef Base64URLString = String;
typedef BigInteger = Uint8Array;
typedef BlobPart = dynamic /* BufferSource|Blob|String */;
typedef BodyInit = dynamic /* ReadableStream|XMLHttpRequestBodyInit */;
typedef BufferSource = dynamic /* ArrayBufferView|ArrayBuffer */;
typedef COSEAlgorithmIdentifier = num;
typedef CSSKeywordish = dynamic /* String|CSSKeywordValue */;
typedef CSSNumberish = dynamic /* num|CSSNumericValue */;
typedef CSSPerspectiveValue = dynamic /* CSSNumericValue|CSSKeywordish */;
typedef CSSUnparsedSegment = dynamic /* String|CSSVariableReferenceValue */;
typedef CanvasImageSource = dynamic /* HTMLOrSVGImageElement|HTMLVideoElement|HTMLCanvasElement|ImageBitmap|OffscreenCanvas|VideoFrame */;
typedef ClipboardItemData = Future<dynamic /* String|Blob */>;
typedef ClipboardItems = List<ClipboardItem>;
typedef ConstrainBoolean = dynamic /* bool|ConstrainBooleanParameters */;
typedef ConstrainDOMString = dynamic /* String|List<String>|ConstrainDOMStringParameters */;
typedef ConstrainDouble = dynamic /* num|ConstrainDoubleRange */;
typedef ConstrainULong = dynamic /* num|ConstrainULongRange */;
typedef DOMHighResTimeStamp = num;
typedef EpochTimeStamp = num;
typedef EventListenerOrEventListenerObject = dynamic /* EventListener|EventListenerObject */;
typedef FileSystemWriteChunkType = dynamic /* BufferSource|Blob|String|WriteParams */;
typedef Float32List = dynamic /* Float32Array|List<GLfloat> */;
typedef FormDataEntryValue = dynamic /* File|String */;
typedef GLbitfield = num;
typedef GLboolean = bool;
typedef GLclampf = num;
typedef GLenum = num;
typedef GLfloat = num;
typedef GLint = num;
typedef GLint64 = num;
typedef GLintptr = num;
typedef GLsizei = num;
typedef GLsizeiptr = num;
typedef GLuint = num;
typedef GLuint64 = num;
typedef HTMLOrSVGImageElement = dynamic /* HTMLImageElement|SVGImageElement */;
typedef HTMLOrSVGScriptElement = dynamic /* HTMLScriptElement|SVGScriptElement */;
typedef HashAlgorithmIdentifier = AlgorithmIdentifier;
typedef HeadersInit = dynamic /* List<List<String>>|Record<String, String>|Headers */;
typedef IDBValidKey = dynamic /* num|String|DateTime|BufferSource|List<IDBValidKey> */;
typedef ImageBitmapSource = dynamic /* CanvasImageSource|Blob|ImageData */;
typedef ImageBufferSource = dynamic /* AllowSharedBufferSource|ReadableStream */;
typedef Int32List = dynamic /* Int32Array|List<GLint> */;
typedef LineAndPositionSetting = dynamic /* num|AutoKeyword */;
typedef MediaProvider = dynamic /* MediaStream|MediaSource|Blob */;
typedef MessageEventSource = dynamic /* WindowProxy|MessagePort|ServiceWorker */;
typedef MutationRecordType = String;
typedef NamedCurve = String;
typedef OffscreenRenderingContext = dynamic /* OffscreenCanvasRenderingContext2D|ImageBitmapRenderingContext|WebGLRenderingContext|WebGL2RenderingContext */;
typedef OnBeforeUnloadEventHandler = OnBeforeUnloadEventHandlerNonNull?;
typedef OnErrorEventHandler = OnErrorEventHandlerNonNull?;
typedef OptionalPostfixToken = dynamic /* dynamic|String */;
typedef OptionalPrefixToken = dynamic /* dynamic|String */;
typedef PerformanceEntryList = List<PerformanceEntry>;
typedef PublicKeyCredentialClientCapabilities = Record<String, bool>;
typedef PublicKeyCredentialJSON = dynamic;
typedef RTCRtpTransform = RTCRtpScriptTransform;
typedef ReadableStreamController = dynamic /* ReadableStreamDefaultController<T>|ReadableByteStreamController */;
typedef ReadableStreamReadResult = dynamic /* ReadableStreamReadValueResult<T>|ReadableStreamReadDoneResult<T> */;
typedef ReadableStreamReader = dynamic /* ReadableStreamDefaultReader<T>|ReadableStreamBYOBReader */;
typedef RenderingContext = dynamic /* CanvasRenderingContext2D|ImageBitmapRenderingContext|WebGLRenderingContext|WebGL2RenderingContext */;
typedef ReportList = List<Report>;
typedef RequestInfo = dynamic /* Request|String */;
typedef TexImageSource = dynamic /* ImageBitmap|ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|OffscreenCanvas|VideoFrame */;
typedef TimerHandler = dynamic /* String|Function */;
typedef Transferable = dynamic /* OffscreenCanvas|ImageBitmap|MessagePort|MediaSourceHandle|ReadableStream|WritableStream|TransformStream|AudioData|VideoFrame|RTCDataChannel|ArrayBuffer */;
typedef Uint32List = dynamic /* Uint32Array|List<GLuint> */;
typedef VibratePattern = dynamic /* num|List<num> */;
typedef WindowProxy = Window;
typedef XMLHttpRequestBodyInit = dynamic /* Blob|BufferSource|FormData|URLSearchParams|String */;
typedef AlignSetting = String;
typedef AlphaOption = String;
typedef AnimationPlayState = String;
typedef AnimationReplaceState = String;
typedef AppendMode = String;
typedef AttestationConveyancePreference = String;
typedef AudioContextLatencyCategory = String;
typedef AudioContextState = String;
typedef AudioSampleFormat = String;
typedef AuthenticatorAttachment = String;
typedef AuthenticatorTransport = String;
typedef AutoFillAddressKind = String;
typedef AutoFillBase = String;
typedef AutoFillContactField = String;
typedef AutoFillContactKind = String;
typedef AutoFillCredentialField = String;
typedef AutoFillNormalField = String;
typedef AutoKeyword = String;
typedef AutomationRate = String;
typedef AvcBitstreamFormat = String;
typedef BinaryType = String;
typedef BiquadFilterType = String;
typedef BitrateMode = String;
typedef CSSMathOperator = String;
typedef CSSNumericBaseType = String;
typedef CanPlayTypeResult = String;
typedef CanvasDirection = String;
typedef CanvasFillRule = String;
typedef CanvasFontKerning = String;
typedef CanvasFontStretch = String;
typedef CanvasFontVariantCaps = String;
typedef CanvasLineCap = String;
typedef CanvasLineJoin = String;
typedef CanvasTextAlign = String;
typedef CanvasTextBaseline = String;
typedef CanvasTextRendering = String;
typedef ChannelCountMode = String;
typedef ChannelInterpretation = String;
typedef ClientTypes = String;
typedef CodecState = String;
typedef ColorGamut = String;
typedef ColorSpaceConversion = String;
typedef CompositeOperation = String;
typedef CompositeOperationOrAuto = String;
typedef CompressionFormat = String;
typedef CredentialMediationRequirement = String;
typedef DOMParserSupportedType = String;
typedef DirectionSetting = String;
typedef DisplayCaptureSurfaceType = String;
typedef DistanceModelType = String;
typedef DocumentReadyState = String;
typedef DocumentVisibilityState = String;
typedef EncodedAudioChunkType = String;
typedef EncodedVideoChunkType = String;
typedef EndOfStreamError = String;
typedef EndingType = String;
typedef FileSystemHandleKind = String;
typedef FillMode = String;
typedef FontDisplay = String;
typedef FontFaceLoadStatus = String;
typedef FontFaceSetLoadStatus = String;
typedef FullscreenNavigationUI = String;
typedef GamepadHapticEffectType = String;
typedef GamepadHapticsResult = String;
typedef GamepadMappingType = String;
typedef GlobalCompositeOperation = String;
typedef HardwareAcceleration = String;
typedef HdrMetadataType = String;
typedef HighlightType = String;
typedef IDBCursorDirection = String;
typedef IDBRequestReadyState = String;
typedef IDBTransactionDurability = String;
typedef IDBTransactionMode = String;
typedef ImageOrientation = String;
typedef ImageSmoothingQuality = String;
typedef InsertPosition = String;
typedef IterationCompositeOperation = String;
typedef KeyFormat = String;
typedef KeyType = String;
typedef KeyUsage = String;
typedef LatencyMode = String;
typedef LineAlignSetting = String;
typedef LockMode = String;
typedef MIDIPortConnectionState = String;
typedef MIDIPortDeviceState = String;
typedef MIDIPortType = String;
typedef MediaDecodingType = String;
typedef MediaDeviceKind = String;
typedef MediaEncodingType = String;
typedef MediaKeyMessageType = String;
typedef MediaKeySessionClosedReason = String;
typedef MediaKeySessionType = String;
typedef MediaKeyStatus = String;
typedef MediaKeysRequirement = String;
typedef MediaSessionAction = String;
typedef MediaSessionPlaybackState = String;
typedef MediaStreamTrackState = String;
typedef NavigationTimingType = String;
typedef NavigationType = String;
typedef NotificationDirection = String;
typedef NotificationPermission = String;
typedef OffscreenRenderingContextId = String;
typedef OpusBitstreamFormat = String;
typedef OrientationType = String;
typedef OscillatorType = String;
typedef OverSampleType = String;
typedef PanningModelType = String;
typedef PaymentComplete = String;
typedef PaymentShippingType = String;
typedef PermissionName = String;
typedef PermissionState = String;
typedef PlaybackDirection = String;
typedef PositionAlignSetting = String;
typedef PredefinedColorSpace = String;
typedef PremultiplyAlpha = String;
typedef PresentationStyle = String;
typedef PublicKeyCredentialType = String;
typedef PushEncryptionKeyName = String;
typedef RTCBundlePolicy = String;
typedef RTCDataChannelState = String;
typedef RTCDegradationPreference = String;
typedef RTCDtlsRole = String;
typedef RTCDtlsTransportState = String;
typedef RTCEncodedVideoFrameType = String;
typedef RTCErrorDetailType = String;
typedef RTCIceCandidateType = String;
typedef RTCIceComponent = String;
typedef RTCIceConnectionState = String;
typedef RTCIceGathererState = String;
typedef RTCIceGatheringState = String;
typedef RTCIceProtocol = String;
typedef RTCIceRole = String;
typedef RTCIceTcpCandidateType = String;
typedef RTCIceTransportPolicy = String;
typedef RTCIceTransportState = String;
typedef RTCPeerConnectionState = String;
typedef RTCPriorityType = String;
typedef RTCQualityLimitationReason = String;
typedef RTCRtcpMuxPolicy = String;
typedef RTCRtpTransceiverDirection = String;
typedef RTCSctpTransportState = String;
typedef RTCSdpType = String;
typedef RTCSignalingState = String;
typedef RTCStatsIceCandidatePairState = String;
typedef RTCStatsType = String;
typedef ReadableStreamReaderMode = String;
typedef ReadableStreamType = String;
typedef ReadyState = String;
typedef RecordingState = String;
typedef ReferrerPolicy = String;
typedef RemotePlaybackState = String;
typedef RequestCache = String;
typedef RequestCredentials = String;
typedef RequestDestination = String;
typedef RequestMode = String;
typedef RequestPriority = String;
typedef RequestRedirect = String;
typedef ResidentKeyRequirement = String;
typedef ResizeObserverBoxOptions = String;
typedef ResizeQuality = String;
typedef ResponseType = String;
typedef ScrollBehavior = String;
typedef ScrollLogicalPosition = String;
typedef ScrollRestoration = String;
typedef ScrollSetting = String;
typedef SecurityPolicyViolationEventDisposition = String;
typedef SelectionMode = String;
typedef ServiceWorkerState = String;
typedef ServiceWorkerUpdateViaCache = String;
typedef ShadowRootMode = String;
typedef SlotAssignmentMode = String;
typedef SpeechSynthesisErrorCode = String;
typedef TextTrackKind = String;
typedef TextTrackMode = String;
typedef TouchType = String;
typedef TransferFunction = String;
typedef UserVerificationRequirement = String;
typedef VideoColorPrimaries = String;
typedef VideoEncoderBitrateMode = String;
typedef VideoFacingModeEnum = String;
typedef VideoMatrixCoefficients = String;
typedef VideoPixelFormat = String;
typedef VideoTransferCharacteristics = String;
typedef WakeLockType = String;
typedef WebGLPowerPreference = String;
typedef WebTransportCongestionControl = String;
typedef WebTransportErrorSource = String;
typedef WorkerType = String;
typedef WriteCommandType = String;
typedef XMLHttpRequestResponseType = String;
@JS()
@anonymous
class AnonInterface$26{
  external factory AnonInterface$26({required num FILTER_ACCEPT, required num FILTER_REJECT, required num FILTER_SKIP, required num SHOW_ALL, required num SHOW_ELEMENT, required num SHOW_ATTRIBUTE, required num SHOW_TEXT, required num SHOW_CDATA_SECTION, required num SHOW_ENTITY_REFERENCE, required num SHOW_ENTITY, required num SHOW_PROCESSING_INSTRUCTION, required num SHOW_COMMENT, required num SHOW_DOCUMENT, required num SHOW_DOCUMENT_TYPE, required num SHOW_DOCUMENT_FRAGMENT, required num SHOW_NOTATION});
}
extension AnonInterface$26Extension on AnonInterface$26 {
  external num get FILTER_ACCEPT;
  external num get FILTER_REJECT;
  external num get FILTER_SKIP;
  external num get SHOW_ALL;
  external num get SHOW_ELEMENT;
  external num get SHOW_ATTRIBUTE;
  external num get SHOW_TEXT;
  external num get SHOW_CDATA_SECTION;
  external num get SHOW_ENTITY_REFERENCE;
  external num get SHOW_ENTITY;
  external num get SHOW_PROCESSING_INSTRUCTION;
  external num get SHOW_COMMENT;
  external num get SHOW_DOCUMENT;
  external num get SHOW_DOCUMENT_TYPE;
  external num get SHOW_DOCUMENT_FRAGMENT;
  external num get SHOW_NOTATION;
}
@JS()
@anonymous
class AnonInterface$28{
  external factory AnonInterface$28({required AbortController prototype});
}
extension AnonInterface$28Extension on AnonInterface$28 {
  external AbortController get prototype;
  external set prototype(AbortController value);
}
@JS()
@anonymous
class AnonInterface$29{
  external factory AnonInterface$29({required AbortSignal prototype});
}
extension AnonInterface$29Extension on AnonInterface$29 {
  external AbortSignal get prototype;
  external set prototype(AbortSignal value);
  @JS("abort")
  external AbortSignal abort([dynamic reason]);
  @JS("any")
  external AbortSignal any(List<AbortSignal> signals);
  @JS("timeout")
  external AbortSignal timeout(num milliseconds);
}
@JS()
@anonymous
class AnonInterface$30{
  external factory AnonInterface$30({required AbstractRange prototype});
}
extension AnonInterface$30Extension on AnonInterface$30 {
  external AbstractRange get prototype;
  external set prototype(AbstractRange value);
}
@JS()
@anonymous
class AnonInterface$31{
  external factory AnonInterface$31({required AnalyserNode prototype});
}
extension AnonInterface$31Extension on AnonInterface$31 {
  external AnalyserNode get prototype;
  external set prototype(AnalyserNode value);
}
@JS()
@anonymous
class AnonInterface$32{
  external factory AnonInterface$32({required Animation prototype});
}
extension AnonInterface$32Extension on AnonInterface$32 {
  external Animation get prototype;
  external set prototype(Animation value);
}
@JS()
@anonymous
class AnonInterface$33{
  external factory AnonInterface$33({required AnimationEffect prototype});
}
extension AnonInterface$33Extension on AnonInterface$33 {
  external AnimationEffect get prototype;
  external set prototype(AnimationEffect value);
}
@JS()
@anonymous
class AnonInterface$34{
  external factory AnonInterface$34({required AnimationEvent prototype});
}
extension AnonInterface$34Extension on AnonInterface$34 {
  external AnimationEvent get prototype;
  external set prototype(AnimationEvent value);
}
@JS()
@anonymous
class AnonInterface$35{
  external factory AnonInterface$35({required AnimationPlaybackEvent prototype});
}
extension AnonInterface$35Extension on AnonInterface$35 {
  external AnimationPlaybackEvent get prototype;
  external set prototype(AnimationPlaybackEvent value);
}
@JS()
@anonymous
class AnonInterface$36{
  external factory AnonInterface$36({required AnimationTimeline prototype});
}
extension AnonInterface$36Extension on AnonInterface$36 {
  external AnimationTimeline get prototype;
  external set prototype(AnimationTimeline value);
}
@JS()
@anonymous
class AnonInterface$37{
  external factory AnonInterface$37({required Attr prototype});
}
extension AnonInterface$37Extension on AnonInterface$37 {
  external Attr get prototype;
  external set prototype(Attr value);
}
@JS()
@anonymous
class AnonInterface$38{
  external factory AnonInterface$38({required AudioBuffer prototype});
}
extension AnonInterface$38Extension on AnonInterface$38 {
  external AudioBuffer get prototype;
  external set prototype(AudioBuffer value);
}
@JS()
@anonymous
class AnonInterface$39{
  external factory AnonInterface$39({required AudioBufferSourceNode prototype});
}
extension AnonInterface$39Extension on AnonInterface$39 {
  external AudioBufferSourceNode get prototype;
  external set prototype(AudioBufferSourceNode value);
}
@JS()
@anonymous
class AnonInterface$40{
  external factory AnonInterface$40({required AudioContext prototype});
}
extension AnonInterface$40Extension on AnonInterface$40 {
  external AudioContext get prototype;
  external set prototype(AudioContext value);
}
@JS()
@anonymous
class AnonInterface$41{
  external factory AnonInterface$41({required AudioData prototype});
}
extension AnonInterface$41Extension on AnonInterface$41 {
  external AudioData get prototype;
  external set prototype(AudioData value);
}
@JS()
@anonymous
class AnonInterface$42{
  external factory AnonInterface$42({required AudioDecoder prototype});
}
extension AnonInterface$42Extension on AnonInterface$42 {
  external AudioDecoder get prototype;
  external set prototype(AudioDecoder value);
  @JS("isConfigSupported")
  external Future<AudioDecoderSupport> isConfigSupported(AudioDecoderConfig config);
}
@JS()
@anonymous
class AnonInterface$43{
  external factory AnonInterface$43({required AudioDestinationNode prototype});
}
extension AnonInterface$43Extension on AnonInterface$43 {
  external AudioDestinationNode get prototype;
  external set prototype(AudioDestinationNode value);
}
@JS()
@anonymous
class AnonInterface$44{
  external factory AnonInterface$44({required AudioEncoder prototype});
}
extension AnonInterface$44Extension on AnonInterface$44 {
  external AudioEncoder get prototype;
  external set prototype(AudioEncoder value);
  @JS("isConfigSupported")
  external Future<AudioEncoderSupport> isConfigSupported(AudioEncoderConfig config);
}
@JS()
@anonymous
class AnonInterface$45{
  external factory AnonInterface$45({required AudioListener prototype});
}
extension AnonInterface$45Extension on AnonInterface$45 {
  external AudioListener get prototype;
  external set prototype(AudioListener value);
}
@JS()
@anonymous
class AnonInterface$46{
  external factory AnonInterface$46({required AudioNode prototype});
}
extension AnonInterface$46Extension on AnonInterface$46 {
  external AudioNode get prototype;
  external set prototype(AudioNode value);
}
@JS()
@anonymous
class AnonInterface$47{
  external factory AnonInterface$47({required AudioParam prototype});
}
extension AnonInterface$47Extension on AnonInterface$47 {
  external AudioParam get prototype;
  external set prototype(AudioParam value);
}
@JS()
@anonymous
class AnonInterface$48{
  external factory AnonInterface$48({required AudioParamMap prototype});
}
extension AnonInterface$48Extension on AnonInterface$48 {
  external AudioParamMap get prototype;
  external set prototype(AudioParamMap value);
}
@JS()
@anonymous
class AnonInterface$49{
  external factory AnonInterface$49({required AudioProcessingEvent prototype});
}
extension AnonInterface$49Extension on AnonInterface$49 {
  external AudioProcessingEvent get prototype;
  external set prototype(AudioProcessingEvent value);
}
@JS()
@anonymous
class AnonInterface$50{
  external factory AnonInterface$50({required AudioScheduledSourceNode prototype});
}
extension AnonInterface$50Extension on AnonInterface$50 {
  external AudioScheduledSourceNode get prototype;
  external set prototype(AudioScheduledSourceNode value);
}
@JS()
@anonymous
class AnonInterface$51{
  external factory AnonInterface$51({required AudioWorklet prototype});
}
extension AnonInterface$51Extension on AnonInterface$51 {
  external AudioWorklet get prototype;
  external set prototype(AudioWorklet value);
}
@JS()
@anonymous
class AnonInterface$52{
  external factory AnonInterface$52({required AudioWorkletNode prototype});
}
extension AnonInterface$52Extension on AnonInterface$52 {
  external AudioWorkletNode get prototype;
  external set prototype(AudioWorkletNode value);
}
@JS()
@anonymous
class AnonInterface$53{
  external factory AnonInterface$53({required AuthenticatorAssertionResponse prototype});
}
extension AnonInterface$53Extension on AnonInterface$53 {
  external AuthenticatorAssertionResponse get prototype;
  external set prototype(AuthenticatorAssertionResponse value);
}
@JS()
@anonymous
class AnonInterface$54{
  external factory AnonInterface$54({required AuthenticatorAttestationResponse prototype});
}
extension AnonInterface$54Extension on AnonInterface$54 {
  external AuthenticatorAttestationResponse get prototype;
  external set prototype(AuthenticatorAttestationResponse value);
}
@JS()
@anonymous
class AnonInterface$55{
  external factory AnonInterface$55({required AuthenticatorResponse prototype});
}
extension AnonInterface$55Extension on AnonInterface$55 {
  external AuthenticatorResponse get prototype;
  external set prototype(AuthenticatorResponse value);
}
@JS()
@anonymous
class AnonInterface$56{
  external factory AnonInterface$56({required BarProp prototype});
}
extension AnonInterface$56Extension on AnonInterface$56 {
  external BarProp get prototype;
  external set prototype(BarProp value);
}
@JS()
@anonymous
class AnonInterface$57{
  external factory AnonInterface$57({required BaseAudioContext prototype});
}
extension AnonInterface$57Extension on AnonInterface$57 {
  external BaseAudioContext get prototype;
  external set prototype(BaseAudioContext value);
}
@JS()
@anonymous
class AnonInterface$58{
  external factory AnonInterface$58({required BeforeUnloadEvent prototype});
}
extension AnonInterface$58Extension on AnonInterface$58 {
  external BeforeUnloadEvent get prototype;
  external set prototype(BeforeUnloadEvent value);
}
@JS()
@anonymous
class AnonInterface$59{
  external factory AnonInterface$59({required BiquadFilterNode prototype});
}
extension AnonInterface$59Extension on AnonInterface$59 {
  external BiquadFilterNode get prototype;
  external set prototype(BiquadFilterNode value);
}
@JS()
@anonymous
class AnonInterface$60{
  external factory AnonInterface$60({required Blob prototype});
}
extension AnonInterface$60Extension on AnonInterface$60 {
  external Blob get prototype;
  external set prototype(Blob value);
}
@JS()
@anonymous
class AnonInterface$61{
  external factory AnonInterface$61({required BlobEvent prototype});
}
extension AnonInterface$61Extension on AnonInterface$61 {
  external BlobEvent get prototype;
  external set prototype(BlobEvent value);
}
@JS()
@anonymous
class AnonInterface$62{
  external factory AnonInterface$62({required BroadcastChannel prototype});
}
extension AnonInterface$62Extension on AnonInterface$62 {
  external BroadcastChannel get prototype;
  external set prototype(BroadcastChannel value);
}
@JS()
@anonymous
class AnonInterface$63{
  external factory AnonInterface$63({required ByteLengthQueuingStrategy prototype});
}
extension AnonInterface$63Extension on AnonInterface$63 {
  external ByteLengthQueuingStrategy get prototype;
  external set prototype(ByteLengthQueuingStrategy value);
}
@JS()
@anonymous
class AnonInterface$64{
  external factory AnonInterface$64({required CDATASection prototype});
}
extension AnonInterface$64Extension on AnonInterface$64 {
  external CDATASection get prototype;
  external set prototype(CDATASection value);
}
@JS()
@anonymous
class AnonInterface$65{
  external factory AnonInterface$65({required CSSAnimation prototype});
}
extension AnonInterface$65Extension on AnonInterface$65 {
  external CSSAnimation get prototype;
  external set prototype(CSSAnimation value);
}
@JS()
@anonymous
class AnonInterface$66{
  external factory AnonInterface$66({required CSSConditionRule prototype});
}
extension AnonInterface$66Extension on AnonInterface$66 {
  external CSSConditionRule get prototype;
  external set prototype(CSSConditionRule value);
}
@JS()
@anonymous
class AnonInterface$67{
  external factory AnonInterface$67({required CSSContainerRule prototype});
}
extension AnonInterface$67Extension on AnonInterface$67 {
  external CSSContainerRule get prototype;
  external set prototype(CSSContainerRule value);
}
@JS()
@anonymous
class AnonInterface$68{
  external factory AnonInterface$68({required CSSCounterStyleRule prototype});
}
extension AnonInterface$68Extension on AnonInterface$68 {
  external CSSCounterStyleRule get prototype;
  external set prototype(CSSCounterStyleRule value);
}
@JS()
@anonymous
class AnonInterface$69{
  external factory AnonInterface$69({required CSSFontFaceRule prototype});
}
extension AnonInterface$69Extension on AnonInterface$69 {
  external CSSFontFaceRule get prototype;
  external set prototype(CSSFontFaceRule value);
}
@JS()
@anonymous
class AnonInterface$70{
  external factory AnonInterface$70({required CSSFontFeatureValuesRule prototype});
}
extension AnonInterface$70Extension on AnonInterface$70 {
  external CSSFontFeatureValuesRule get prototype;
  external set prototype(CSSFontFeatureValuesRule value);
}
@JS()
@anonymous
class AnonInterface$71{
  external factory AnonInterface$71({required CSSFontPaletteValuesRule prototype});
}
extension AnonInterface$71Extension on AnonInterface$71 {
  external CSSFontPaletteValuesRule get prototype;
  external set prototype(CSSFontPaletteValuesRule value);
}
@JS()
@anonymous
class AnonInterface$72{
  external factory AnonInterface$72({required CSSGroupingRule prototype});
}
extension AnonInterface$72Extension on AnonInterface$72 {
  external CSSGroupingRule get prototype;
  external set prototype(CSSGroupingRule value);
}
@JS()
@anonymous
class AnonInterface$73{
  external factory AnonInterface$73({required CSSImageValue prototype});
}
extension AnonInterface$73Extension on AnonInterface$73 {
  external CSSImageValue get prototype;
  external set prototype(CSSImageValue value);
}
@JS()
@anonymous
class AnonInterface$74{
  external factory AnonInterface$74({required CSSImportRule prototype});
}
extension AnonInterface$74Extension on AnonInterface$74 {
  external CSSImportRule get prototype;
  external set prototype(CSSImportRule value);
}
@JS()
@anonymous
class AnonInterface$75{
  external factory AnonInterface$75({required CSSKeyframeRule prototype});
}
extension AnonInterface$75Extension on AnonInterface$75 {
  external CSSKeyframeRule get prototype;
  external set prototype(CSSKeyframeRule value);
}
@JS()
@anonymous
class AnonInterface$76{
  external factory AnonInterface$76({required CSSKeyframesRule prototype});
}
extension AnonInterface$76Extension on AnonInterface$76 {
  external CSSKeyframesRule get prototype;
  external set prototype(CSSKeyframesRule value);
}
@JS()
@anonymous
class AnonInterface$77{
  external factory AnonInterface$77({required CSSKeywordValue prototype});
}
extension AnonInterface$77Extension on AnonInterface$77 {
  external CSSKeywordValue get prototype;
  external set prototype(CSSKeywordValue value);
}
@JS()
@anonymous
class AnonInterface$78{
  external factory AnonInterface$78({required CSSLayerBlockRule prototype});
}
extension AnonInterface$78Extension on AnonInterface$78 {
  external CSSLayerBlockRule get prototype;
  external set prototype(CSSLayerBlockRule value);
}
@JS()
@anonymous
class AnonInterface$79{
  external factory AnonInterface$79({required CSSLayerStatementRule prototype});
}
extension AnonInterface$79Extension on AnonInterface$79 {
  external CSSLayerStatementRule get prototype;
  external set prototype(CSSLayerStatementRule value);
}
@JS()
@anonymous
class AnonInterface$80{
  external factory AnonInterface$80({required CSSMathClamp prototype});
}
extension AnonInterface$80Extension on AnonInterface$80 {
  external CSSMathClamp get prototype;
  external set prototype(CSSMathClamp value);
}
@JS()
@anonymous
class AnonInterface$81{
  external factory AnonInterface$81({required CSSMathInvert prototype});
}
extension AnonInterface$81Extension on AnonInterface$81 {
  external CSSMathInvert get prototype;
  external set prototype(CSSMathInvert value);
}
@JS()
@anonymous
class AnonInterface$82{
  external factory AnonInterface$82({required CSSMathMax prototype});
}
extension AnonInterface$82Extension on AnonInterface$82 {
  external CSSMathMax get prototype;
  external set prototype(CSSMathMax value);
}
@JS()
@anonymous
class AnonInterface$83{
  external factory AnonInterface$83({required CSSMathMin prototype});
}
extension AnonInterface$83Extension on AnonInterface$83 {
  external CSSMathMin get prototype;
  external set prototype(CSSMathMin value);
}
@JS()
@anonymous
class AnonInterface$84{
  external factory AnonInterface$84({required CSSMathNegate prototype});
}
extension AnonInterface$84Extension on AnonInterface$84 {
  external CSSMathNegate get prototype;
  external set prototype(CSSMathNegate value);
}
@JS()
@anonymous
class AnonInterface$85{
  external factory AnonInterface$85({required CSSMathProduct prototype});
}
extension AnonInterface$85Extension on AnonInterface$85 {
  external CSSMathProduct get prototype;
  external set prototype(CSSMathProduct value);
}
@JS()
@anonymous
class AnonInterface$86{
  external factory AnonInterface$86({required CSSMathSum prototype});
}
extension AnonInterface$86Extension on AnonInterface$86 {
  external CSSMathSum get prototype;
  external set prototype(CSSMathSum value);
}
@JS()
@anonymous
class AnonInterface$87{
  external factory AnonInterface$87({required CSSMathValue prototype});
}
extension AnonInterface$87Extension on AnonInterface$87 {
  external CSSMathValue get prototype;
  external set prototype(CSSMathValue value);
}
@JS()
@anonymous
class AnonInterface$88{
  external factory AnonInterface$88({required CSSMatrixComponent prototype});
}
extension AnonInterface$88Extension on AnonInterface$88 {
  external CSSMatrixComponent get prototype;
  external set prototype(CSSMatrixComponent value);
}
@JS()
@anonymous
class AnonInterface$89{
  external factory AnonInterface$89({required CSSMediaRule prototype});
}
extension AnonInterface$89Extension on AnonInterface$89 {
  external CSSMediaRule get prototype;
  external set prototype(CSSMediaRule value);
}
@JS()
@anonymous
class AnonInterface$90{
  external factory AnonInterface$90({required CSSNamespaceRule prototype});
}
extension AnonInterface$90Extension on AnonInterface$90 {
  external CSSNamespaceRule get prototype;
  external set prototype(CSSNamespaceRule value);
}
@JS()
@anonymous
class AnonInterface$91{
  external factory AnonInterface$91({required CSSNestedDeclarations prototype});
}
extension AnonInterface$91Extension on AnonInterface$91 {
  external CSSNestedDeclarations get prototype;
  external set prototype(CSSNestedDeclarations value);
}
@JS()
@anonymous
class AnonInterface$92{
  external factory AnonInterface$92({required CSSNumericArray prototype});
}
extension AnonInterface$92Extension on AnonInterface$92 {
  external CSSNumericArray get prototype;
  external set prototype(CSSNumericArray value);
}
@JS()
@anonymous
class AnonInterface$93{
  external factory AnonInterface$93({required CSSNumericValue prototype});
}
extension AnonInterface$93Extension on AnonInterface$93 {
  external CSSNumericValue get prototype;
  external set prototype(CSSNumericValue value);
  @JS("parse")
  external CSSNumericValue parse(String cssText);
}
@JS()
@anonymous
class AnonInterface$94{
  external factory AnonInterface$94({required CSSPageRule prototype});
}
extension AnonInterface$94Extension on AnonInterface$94 {
  external CSSPageRule get prototype;
  external set prototype(CSSPageRule value);
}
@JS()
@anonymous
class AnonInterface$95{
  external factory AnonInterface$95({required CSSPerspective prototype});
}
extension AnonInterface$95Extension on AnonInterface$95 {
  external CSSPerspective get prototype;
  external set prototype(CSSPerspective value);
}
@JS()
@anonymous
class AnonInterface$96{
  external factory AnonInterface$96({required CSSPropertyRule prototype});
}
extension AnonInterface$96Extension on AnonInterface$96 {
  external CSSPropertyRule get prototype;
  external set prototype(CSSPropertyRule value);
}
@JS()
@anonymous
class AnonInterface$97{
  external factory AnonInterface$97({required CSSRotate prototype});
}
extension AnonInterface$97Extension on AnonInterface$97 {
  external CSSRotate get prototype;
  external set prototype(CSSRotate value);
}
@JS()
@anonymous
class AnonInterface$98{
  external factory AnonInterface$98({required CSSRule prototype, required num STYLE_RULE, required num CHARSET_RULE, required num IMPORT_RULE, required num MEDIA_RULE, required num FONT_FACE_RULE, required num PAGE_RULE, required num NAMESPACE_RULE, required num KEYFRAMES_RULE, required num KEYFRAME_RULE, required num SUPPORTS_RULE, required num COUNTER_STYLE_RULE, required num FONT_FEATURE_VALUES_RULE});
}
extension AnonInterface$98Extension on AnonInterface$98 {
  external CSSRule get prototype;
  external set prototype(CSSRule value);
  external num get STYLE_RULE;
  external num get CHARSET_RULE;
  external num get IMPORT_RULE;
  external num get MEDIA_RULE;
  external num get FONT_FACE_RULE;
  external num get PAGE_RULE;
  external num get NAMESPACE_RULE;
  external num get KEYFRAMES_RULE;
  external num get KEYFRAME_RULE;
  external num get SUPPORTS_RULE;
  external num get COUNTER_STYLE_RULE;
  external num get FONT_FEATURE_VALUES_RULE;
}
@JS()
@anonymous
class AnonInterface$99{
  external factory AnonInterface$99({required CSSRuleList prototype});
}
extension AnonInterface$99Extension on AnonInterface$99 {
  external CSSRuleList get prototype;
  external set prototype(CSSRuleList value);
}
@JS()
@anonymous
class AnonInterface$100{
  external factory AnonInterface$100({required CSSScale prototype});
}
extension AnonInterface$100Extension on AnonInterface$100 {
  external CSSScale get prototype;
  external set prototype(CSSScale value);
}
@JS()
@anonymous
class AnonInterface$101{
  external factory AnonInterface$101({required CSSScopeRule prototype});
}
extension AnonInterface$101Extension on AnonInterface$101 {
  external CSSScopeRule get prototype;
  external set prototype(CSSScopeRule value);
}
@JS()
@anonymous
class AnonInterface$102{
  external factory AnonInterface$102({required CSSSkew prototype});
}
extension AnonInterface$102Extension on AnonInterface$102 {
  external CSSSkew get prototype;
  external set prototype(CSSSkew value);
}
@JS()
@anonymous
class AnonInterface$103{
  external factory AnonInterface$103({required CSSSkewX prototype});
}
extension AnonInterface$103Extension on AnonInterface$103 {
  external CSSSkewX get prototype;
  external set prototype(CSSSkewX value);
}
@JS()
@anonymous
class AnonInterface$104{
  external factory AnonInterface$104({required CSSSkewY prototype});
}
extension AnonInterface$104Extension on AnonInterface$104 {
  external CSSSkewY get prototype;
  external set prototype(CSSSkewY value);
}
@JS()
@anonymous
class AnonInterface$105{
  external factory AnonInterface$105({required CSSStartingStyleRule prototype});
}
extension AnonInterface$105Extension on AnonInterface$105 {
  external CSSStartingStyleRule get prototype;
  external set prototype(CSSStartingStyleRule value);
}
@JS()
@anonymous
class AnonInterface$106{
  external factory AnonInterface$106({required CSSStyleDeclaration prototype});
}
extension AnonInterface$106Extension on AnonInterface$106 {
  external CSSStyleDeclaration get prototype;
  external set prototype(CSSStyleDeclaration value);
}
@JS()
@anonymous
class AnonInterface$107{
  external factory AnonInterface$107({required CSSStyleRule prototype});
}
extension AnonInterface$107Extension on AnonInterface$107 {
  external CSSStyleRule get prototype;
  external set prototype(CSSStyleRule value);
}
@JS()
@anonymous
class AnonInterface$108{
  external factory AnonInterface$108({required CSSStyleSheet prototype});
}
extension AnonInterface$108Extension on AnonInterface$108 {
  external CSSStyleSheet get prototype;
  external set prototype(CSSStyleSheet value);
}
@JS()
@anonymous
class AnonInterface$109{
  external factory AnonInterface$109({required CSSStyleValue prototype});
}
extension AnonInterface$109Extension on AnonInterface$109 {
  external CSSStyleValue get prototype;
  external set prototype(CSSStyleValue value);
  @JS("parse")
  external CSSStyleValue parse(String property, String cssText);
  @JS("parseAll")
  external List<CSSStyleValue> parseAll(String property, String cssText);
}
@JS()
@anonymous
class AnonInterface$110{
  external factory AnonInterface$110({required CSSSupportsRule prototype});
}
extension AnonInterface$110Extension on AnonInterface$110 {
  external CSSSupportsRule get prototype;
  external set prototype(CSSSupportsRule value);
}
@JS()
@anonymous
class AnonInterface$111{
  external factory AnonInterface$111({required CSSTransformComponent prototype});
}
extension AnonInterface$111Extension on AnonInterface$111 {
  external CSSTransformComponent get prototype;
  external set prototype(CSSTransformComponent value);
}
@JS()
@anonymous
class AnonInterface$112{
  external factory AnonInterface$112({required CSSTransformValue prototype});
}
extension AnonInterface$112Extension on AnonInterface$112 {
  external CSSTransformValue get prototype;
  external set prototype(CSSTransformValue value);
}
@JS()
@anonymous
class AnonInterface$113{
  external factory AnonInterface$113({required CSSTransition prototype});
}
extension AnonInterface$113Extension on AnonInterface$113 {
  external CSSTransition get prototype;
  external set prototype(CSSTransition value);
}
@JS()
@anonymous
class AnonInterface$114{
  external factory AnonInterface$114({required CSSTranslate prototype});
}
extension AnonInterface$114Extension on AnonInterface$114 {
  external CSSTranslate get prototype;
  external set prototype(CSSTranslate value);
}
@JS()
@anonymous
class AnonInterface$115{
  external factory AnonInterface$115({required CSSUnitValue prototype});
}
extension AnonInterface$115Extension on AnonInterface$115 {
  external CSSUnitValue get prototype;
  external set prototype(CSSUnitValue value);
}
@JS()
@anonymous
class AnonInterface$116{
  external factory AnonInterface$116({required CSSUnparsedValue prototype});
}
extension AnonInterface$116Extension on AnonInterface$116 {
  external CSSUnparsedValue get prototype;
  external set prototype(CSSUnparsedValue value);
}
@JS()
@anonymous
class AnonInterface$117{
  external factory AnonInterface$117({required CSSVariableReferenceValue prototype});
}
extension AnonInterface$117Extension on AnonInterface$117 {
  external CSSVariableReferenceValue get prototype;
  external set prototype(CSSVariableReferenceValue value);
}
@JS()
@anonymous
class AnonInterface$118{
  external factory AnonInterface$118({required CSSViewTransitionRule prototype});
}
extension AnonInterface$118Extension on AnonInterface$118 {
  external CSSViewTransitionRule get prototype;
  external set prototype(CSSViewTransitionRule value);
}
@JS()
@anonymous
class AnonInterface$119{
  external factory AnonInterface$119({required Cache prototype});
}
extension AnonInterface$119Extension on AnonInterface$119 {
  external Cache get prototype;
  external set prototype(Cache value);
}
@JS()
@anonymous
class AnonInterface$120{
  external factory AnonInterface$120({required CacheStorage prototype});
}
extension AnonInterface$120Extension on AnonInterface$120 {
  external CacheStorage get prototype;
  external set prototype(CacheStorage value);
}
@JS()
@anonymous
class AnonInterface$121{
  external factory AnonInterface$121({required CanvasCaptureMediaStreamTrack prototype});
}
extension AnonInterface$121Extension on AnonInterface$121 {
  external CanvasCaptureMediaStreamTrack get prototype;
  external set prototype(CanvasCaptureMediaStreamTrack value);
}
@JS()
@anonymous
class AnonInterface$122{
  external factory AnonInterface$122({required CanvasGradient prototype});
}
extension AnonInterface$122Extension on AnonInterface$122 {
  external CanvasGradient get prototype;
  external set prototype(CanvasGradient value);
}
@JS()
@anonymous
class AnonInterface$123{
  external factory AnonInterface$123({required CanvasPattern prototype});
}
extension AnonInterface$123Extension on AnonInterface$123 {
  external CanvasPattern get prototype;
  external set prototype(CanvasPattern value);
}
@JS()
@anonymous
class AnonInterface$124{
  external factory AnonInterface$124({required CanvasRenderingContext2D prototype});
}
extension AnonInterface$124Extension on AnonInterface$124 {
  external CanvasRenderingContext2D get prototype;
  external set prototype(CanvasRenderingContext2D value);
}
@JS()
@anonymous
class AnonInterface$125{
  external factory AnonInterface$125({required CaretPosition prototype});
}
extension AnonInterface$125Extension on AnonInterface$125 {
  external CaretPosition get prototype;
  external set prototype(CaretPosition value);
}
@JS()
@anonymous
class AnonInterface$126{
  external factory AnonInterface$126({required ChannelMergerNode prototype});
}
extension AnonInterface$126Extension on AnonInterface$126 {
  external ChannelMergerNode get prototype;
  external set prototype(ChannelMergerNode value);
}
@JS()
@anonymous
class AnonInterface$127{
  external factory AnonInterface$127({required ChannelSplitterNode prototype});
}
extension AnonInterface$127Extension on AnonInterface$127 {
  external ChannelSplitterNode get prototype;
  external set prototype(ChannelSplitterNode value);
}
@JS()
@anonymous
class AnonInterface$128{
  external factory AnonInterface$128({required CharacterData prototype});
}
extension AnonInterface$128Extension on AnonInterface$128 {
  external CharacterData get prototype;
  external set prototype(CharacterData value);
}
@JS()
@anonymous
class AnonInterface$129{
  external factory AnonInterface$129({required Clipboard prototype});
}
extension AnonInterface$129Extension on AnonInterface$129 {
  external Clipboard get prototype;
  external set prototype(Clipboard value);
}
@JS()
@anonymous
class AnonInterface$130{
  external factory AnonInterface$130({required ClipboardEvent prototype});
}
extension AnonInterface$130Extension on AnonInterface$130 {
  external ClipboardEvent get prototype;
  external set prototype(ClipboardEvent value);
}
@JS()
@anonymous
class AnonInterface$131{
  external factory AnonInterface$131({required ClipboardItem prototype});
}
extension AnonInterface$131Extension on AnonInterface$131 {
  external ClipboardItem get prototype;
  external set prototype(ClipboardItem value);
  @JS("supports")
  external bool supports(String type);
}
@JS()
@anonymous
class AnonInterface$132{
  external factory AnonInterface$132({required CloseEvent prototype});
}
extension AnonInterface$132Extension on AnonInterface$132 {
  external CloseEvent get prototype;
  external set prototype(CloseEvent value);
}
@JS()
@anonymous
class AnonInterface$133{
  external factory AnonInterface$133({required Comment prototype});
}
extension AnonInterface$133Extension on AnonInterface$133 {
  external Comment get prototype;
  external set prototype(Comment value);
}
@JS()
@anonymous
class AnonInterface$134{
  external factory AnonInterface$134({required CompositionEvent prototype});
}
extension AnonInterface$134Extension on AnonInterface$134 {
  external CompositionEvent get prototype;
  external set prototype(CompositionEvent value);
}
@JS()
@anonymous
class AnonInterface$135{
  external factory AnonInterface$135({required CompressionStream prototype});
}
extension AnonInterface$135Extension on AnonInterface$135 {
  external CompressionStream get prototype;
  external set prototype(CompressionStream value);
}
@JS()
@anonymous
class AnonInterface$136{
  external factory AnonInterface$136({required ConstantSourceNode prototype});
}
extension AnonInterface$136Extension on AnonInterface$136 {
  external ConstantSourceNode get prototype;
  external set prototype(ConstantSourceNode value);
}
@JS()
@anonymous
class AnonInterface$137{
  external factory AnonInterface$137({required ContentVisibilityAutoStateChangeEvent prototype});
}
extension AnonInterface$137Extension on AnonInterface$137 {
  external ContentVisibilityAutoStateChangeEvent get prototype;
  external set prototype(ContentVisibilityAutoStateChangeEvent value);
}
@JS()
@anonymous
class AnonInterface$138{
  external factory AnonInterface$138({required ConvolverNode prototype});
}
extension AnonInterface$138Extension on AnonInterface$138 {
  external ConvolverNode get prototype;
  external set prototype(ConvolverNode value);
}
@JS()
@anonymous
class AnonInterface$139{
  external factory AnonInterface$139({required CountQueuingStrategy prototype});
}
extension AnonInterface$139Extension on AnonInterface$139 {
  external CountQueuingStrategy get prototype;
  external set prototype(CountQueuingStrategy value);
}
@JS()
@anonymous
class AnonInterface$140{
  external factory AnonInterface$140({required Credential prototype});
}
extension AnonInterface$140Extension on AnonInterface$140 {
  external Credential get prototype;
  external set prototype(Credential value);
}
@JS()
@anonymous
class AnonInterface$141{
  external factory AnonInterface$141({required CredentialsContainer prototype});
}
extension AnonInterface$141Extension on AnonInterface$141 {
  external CredentialsContainer get prototype;
  external set prototype(CredentialsContainer value);
}
@JS()
@anonymous
class AnonInterface$142{
  external factory AnonInterface$142({required Crypto prototype});
}
extension AnonInterface$142Extension on AnonInterface$142 {
  external Crypto get prototype;
  external set prototype(Crypto value);
}
@JS()
@anonymous
class AnonInterface$143{
  external factory AnonInterface$143({required CryptoKey prototype});
}
extension AnonInterface$143Extension on AnonInterface$143 {
  external CryptoKey get prototype;
  external set prototype(CryptoKey value);
}
@JS()
@anonymous
class AnonInterface$144{
  external factory AnonInterface$144({required CustomElementRegistry prototype});
}
extension AnonInterface$144Extension on AnonInterface$144 {
  external CustomElementRegistry get prototype;
  external set prototype(CustomElementRegistry value);
}
@JS()
@anonymous
class AnonInterface$145{
  external factory AnonInterface$145({required CustomEvent prototype});
}
extension AnonInterface$145Extension on AnonInterface$145 {
  external CustomEvent get prototype;
  external set prototype(CustomEvent value);
}
@JS()
@anonymous
class AnonInterface$146{
  external factory AnonInterface$146({required CustomStateSet prototype});
}
extension AnonInterface$146Extension on AnonInterface$146 {
  external CustomStateSet get prototype;
  external set prototype(CustomStateSet value);
}
@JS()
@anonymous
class AnonInterface$147{
  external factory AnonInterface$147({required DOMException prototype, required num INDEX_SIZE_ERR, required num DOMSTRING_SIZE_ERR, required num HIERARCHY_REQUEST_ERR, required num WRONG_DOCUMENT_ERR, required num INVALID_CHARACTER_ERR, required num NO_DATA_ALLOWED_ERR, required num NO_MODIFICATION_ALLOWED_ERR, required num NOT_FOUND_ERR, required num NOT_SUPPORTED_ERR, required num INUSE_ATTRIBUTE_ERR, required num INVALID_STATE_ERR, required num SYNTAX_ERR, required num INVALID_MODIFICATION_ERR, required num NAMESPACE_ERR, required num INVALID_ACCESS_ERR, required num VALIDATION_ERR, required num TYPE_MISMATCH_ERR, required num SECURITY_ERR, required num NETWORK_ERR, required num ABORT_ERR, required num URL_MISMATCH_ERR, required num QUOTA_EXCEEDED_ERR, required num TIMEOUT_ERR, required num INVALID_NODE_TYPE_ERR, required num DATA_CLONE_ERR});
}
extension AnonInterface$147Extension on AnonInterface$147 {
  external DOMException get prototype;
  external set prototype(DOMException value);
  external num get INDEX_SIZE_ERR;
  external num get DOMSTRING_SIZE_ERR;
  external num get HIERARCHY_REQUEST_ERR;
  external num get WRONG_DOCUMENT_ERR;
  external num get INVALID_CHARACTER_ERR;
  external num get NO_DATA_ALLOWED_ERR;
  external num get NO_MODIFICATION_ALLOWED_ERR;
  external num get NOT_FOUND_ERR;
  external num get NOT_SUPPORTED_ERR;
  external num get INUSE_ATTRIBUTE_ERR;
  external num get INVALID_STATE_ERR;
  external num get SYNTAX_ERR;
  external num get INVALID_MODIFICATION_ERR;
  external num get NAMESPACE_ERR;
  external num get INVALID_ACCESS_ERR;
  external num get VALIDATION_ERR;
  external num get TYPE_MISMATCH_ERR;
  external num get SECURITY_ERR;
  external num get NETWORK_ERR;
  external num get ABORT_ERR;
  external num get URL_MISMATCH_ERR;
  external num get QUOTA_EXCEEDED_ERR;
  external num get TIMEOUT_ERR;
  external num get INVALID_NODE_TYPE_ERR;
  external num get DATA_CLONE_ERR;
}
@JS()
@anonymous
class AnonInterface$148{
  external factory AnonInterface$148({required DOMImplementation prototype});
}
extension AnonInterface$148Extension on AnonInterface$148 {
  external DOMImplementation get prototype;
  external set prototype(DOMImplementation value);
}
@JS()
@anonymous
class AnonInterface$149{
  external factory AnonInterface$149({required DOMMatrix prototype});
}
extension AnonInterface$149Extension on AnonInterface$149 {
  external DOMMatrix get prototype;
  external set prototype(DOMMatrix value);
  @JS("fromFloat32Array")
  external DOMMatrix fromFloat32Array(Float32Array array32);
  @JS("fromFloat64Array")
  external DOMMatrix fromFloat64Array(Float64Array array64);
  @JS("fromMatrix")
  external DOMMatrix fromMatrix([DOMMatrixInit other]);
}
@JS()
@anonymous
class AnonInterface$150{
  external factory AnonInterface$150({required DOMMatrixReadOnly prototype});
}
extension AnonInterface$150Extension on AnonInterface$150 {
  external DOMMatrixReadOnly get prototype;
  external set prototype(DOMMatrixReadOnly value);
  @JS("fromFloat32Array")
  external DOMMatrixReadOnly fromFloat32Array(Float32Array array32);
  @JS("fromFloat64Array")
  external DOMMatrixReadOnly fromFloat64Array(Float64Array array64);
  @JS("fromMatrix")
  external DOMMatrixReadOnly fromMatrix([DOMMatrixInit other]);
}
@JS()
@anonymous
class AnonInterface$151{
  external factory AnonInterface$151({required DOMParser prototype});
}
extension AnonInterface$151Extension on AnonInterface$151 {
  external DOMParser get prototype;
  external set prototype(DOMParser value);
}
@JS()
@anonymous
class AnonInterface$152{
  external factory AnonInterface$152({required DOMPoint prototype});
}
extension AnonInterface$152Extension on AnonInterface$152 {
  external DOMPoint get prototype;
  external set prototype(DOMPoint value);
  @JS("fromPoint")
  external DOMPoint fromPoint([DOMPointInit other]);
}
@JS()
@anonymous
class AnonInterface$153{
  external factory AnonInterface$153({required DOMPointReadOnly prototype});
}
extension AnonInterface$153Extension on AnonInterface$153 {
  external DOMPointReadOnly get prototype;
  external set prototype(DOMPointReadOnly value);
  @JS("fromPoint")
  external DOMPointReadOnly fromPoint([DOMPointInit other]);
}
@JS()
@anonymous
class AnonInterface$154{
  external factory AnonInterface$154({required DOMQuad prototype});
}
extension AnonInterface$154Extension on AnonInterface$154 {
  external DOMQuad get prototype;
  external set prototype(DOMQuad value);
  @JS("fromQuad")
  external DOMQuad fromQuad([DOMQuadInit other]);
  @JS("fromRect")
  external DOMQuad fromRect([DOMRectInit other]);
}
@JS()
@anonymous
class AnonInterface$155{
  external factory AnonInterface$155({required DOMRect prototype});
}
extension AnonInterface$155Extension on AnonInterface$155 {
  external DOMRect get prototype;
  external set prototype(DOMRect value);
  @JS("fromRect")
  external DOMRect fromRect([DOMRectInit other]);
}
@JS()
@anonymous
class AnonInterface$156{
  external factory AnonInterface$156({required DOMRectList prototype});
}
extension AnonInterface$156Extension on AnonInterface$156 {
  external DOMRectList get prototype;
  external set prototype(DOMRectList value);
}
@JS()
@anonymous
class AnonInterface$157{
  external factory AnonInterface$157({required DOMRectReadOnly prototype});
}
extension AnonInterface$157Extension on AnonInterface$157 {
  external DOMRectReadOnly get prototype;
  external set prototype(DOMRectReadOnly value);
  @JS("fromRect")
  external DOMRectReadOnly fromRect([DOMRectInit other]);
}
@JS()
@anonymous
class AnonInterface$158{
  external factory AnonInterface$158({required DOMStringList prototype});
}
extension AnonInterface$158Extension on AnonInterface$158 {
  external DOMStringList get prototype;
  external set prototype(DOMStringList value);
}
@JS()
@anonymous
class AnonInterface$159{
  external factory AnonInterface$159({required DOMStringMap prototype});
}
extension AnonInterface$159Extension on AnonInterface$159 {
  external DOMStringMap get prototype;
  external set prototype(DOMStringMap value);
}
@JS()
@anonymous
class AnonInterface$160{
  external factory AnonInterface$160({required DOMTokenList prototype});
}
extension AnonInterface$160Extension on AnonInterface$160 {
  external DOMTokenList get prototype;
  external set prototype(DOMTokenList value);
}
@JS()
@anonymous
class AnonInterface$161{
  external factory AnonInterface$161({required DataTransfer prototype});
}
extension AnonInterface$161Extension on AnonInterface$161 {
  external DataTransfer get prototype;
  external set prototype(DataTransfer value);
}
@JS()
@anonymous
class AnonInterface$162{
  external factory AnonInterface$162({required DataTransferItem prototype});
}
extension AnonInterface$162Extension on AnonInterface$162 {
  external DataTransferItem get prototype;
  external set prototype(DataTransferItem value);
}
@JS()
@anonymous
class AnonInterface$163{
  external factory AnonInterface$163({required DataTransferItemList prototype});
}
extension AnonInterface$163Extension on AnonInterface$163 {
  external DataTransferItemList get prototype;
  external set prototype(DataTransferItemList value);
}
@JS()
@anonymous
class AnonInterface$164{
  external factory AnonInterface$164({required DecompressionStream prototype});
}
extension AnonInterface$164Extension on AnonInterface$164 {
  external DecompressionStream get prototype;
  external set prototype(DecompressionStream value);
}
@JS()
@anonymous
class AnonInterface$165{
  external factory AnonInterface$165({required DelayNode prototype});
}
extension AnonInterface$165Extension on AnonInterface$165 {
  external DelayNode get prototype;
  external set prototype(DelayNode value);
}
@JS()
@anonymous
class AnonInterface$166{
  external factory AnonInterface$166({required DeviceMotionEvent prototype});
}
extension AnonInterface$166Extension on AnonInterface$166 {
  external DeviceMotionEvent get prototype;
  external set prototype(DeviceMotionEvent value);
}
@JS()
@anonymous
class AnonInterface$167{
  external factory AnonInterface$167({required DeviceOrientationEvent prototype});
}
extension AnonInterface$167Extension on AnonInterface$167 {
  external DeviceOrientationEvent get prototype;
  external set prototype(DeviceOrientationEvent value);
}
@JS()
@anonymous
class AnonInterface$168{
  external factory AnonInterface$168({required Document prototype});
}
extension AnonInterface$168Extension on AnonInterface$168 {
  external Document get prototype;
  external set prototype(Document value);
  @JS("parseHTMLUnsafe")
  external Document parseHTMLUnsafe(String html);
}
@JS()
@anonymous
class AnonInterface$169{
  external factory AnonInterface$169({required DocumentFragment prototype});
}
extension AnonInterface$169Extension on AnonInterface$169 {
  external DocumentFragment get prototype;
  external set prototype(DocumentFragment value);
}
@JS()
@anonymous
class AnonInterface$170{
  external factory AnonInterface$170({required DocumentTimeline prototype});
}
extension AnonInterface$170Extension on AnonInterface$170 {
  external DocumentTimeline get prototype;
  external set prototype(DocumentTimeline value);
}
@JS()
@anonymous
class AnonInterface$171{
  external factory AnonInterface$171({required DocumentType prototype});
}
extension AnonInterface$171Extension on AnonInterface$171 {
  external DocumentType get prototype;
  external set prototype(DocumentType value);
}
@JS()
@anonymous
class AnonInterface$172{
  external factory AnonInterface$172({required DragEvent prototype});
}
extension AnonInterface$172Extension on AnonInterface$172 {
  external DragEvent get prototype;
  external set prototype(DragEvent value);
}
@JS()
@anonymous
class AnonInterface$173{
  external factory AnonInterface$173({required DynamicsCompressorNode prototype});
}
extension AnonInterface$173Extension on AnonInterface$173 {
  external DynamicsCompressorNode get prototype;
  external set prototype(DynamicsCompressorNode value);
}
@JS()
@anonymous
class AnonInterface$174{
  external factory AnonInterface$174({required Element prototype});
}
extension AnonInterface$174Extension on AnonInterface$174 {
  external Element get prototype;
  external set prototype(Element value);
}
@JS()
@anonymous
class AnonInterface$175{
  external factory AnonInterface$175({required ElementInternals prototype});
}
extension AnonInterface$175Extension on AnonInterface$175 {
  external ElementInternals get prototype;
  external set prototype(ElementInternals value);
}
@JS()
@anonymous
class AnonInterface$176{
  external factory AnonInterface$176({required EncodedAudioChunk prototype});
}
extension AnonInterface$176Extension on AnonInterface$176 {
  external EncodedAudioChunk get prototype;
  external set prototype(EncodedAudioChunk value);
}
@JS()
@anonymous
class AnonInterface$177{
  external factory AnonInterface$177({required EncodedVideoChunk prototype});
}
extension AnonInterface$177Extension on AnonInterface$177 {
  external EncodedVideoChunk get prototype;
  external set prototype(EncodedVideoChunk value);
}
@JS()
@anonymous
class AnonInterface$178{
  external factory AnonInterface$178({required ErrorEvent prototype});
}
extension AnonInterface$178Extension on AnonInterface$178 {
  external ErrorEvent get prototype;
  external set prototype(ErrorEvent value);
}
@JS()
@anonymous
class AnonInterface$179{
  external factory AnonInterface$179({required Event prototype, required num NONE, required num CAPTURING_PHASE, required num AT_TARGET, required num BUBBLING_PHASE});
}
extension AnonInterface$179Extension on AnonInterface$179 {
  external Event get prototype;
  external set prototype(Event value);
  external num get NONE;
  external num get CAPTURING_PHASE;
  external num get AT_TARGET;
  external num get BUBBLING_PHASE;
}
@JS()
@anonymous
class AnonInterface$180{
  external factory AnonInterface$180({required EventCounts prototype});
}
extension AnonInterface$180Extension on AnonInterface$180 {
  external EventCounts get prototype;
  external set prototype(EventCounts value);
}
@JS()
@anonymous
class AnonInterface$181{
  external factory AnonInterface$181({required EventSource prototype, required num CONNECTING, required num OPEN, required num CLOSED});
}
extension AnonInterface$181Extension on AnonInterface$181 {
  external EventSource get prototype;
  external set prototype(EventSource value);
  external num get CONNECTING;
  external num get OPEN;
  external num get CLOSED;
}
@JS()
@anonymous
class AnonInterface$182{
  external factory AnonInterface$182({required EventTarget prototype});
}
extension AnonInterface$182Extension on AnonInterface$182 {
  external EventTarget get prototype;
  external set prototype(EventTarget value);
}
@JS()
@anonymous
class AnonInterface$183{
  external factory AnonInterface$183({required External prototype});
}
extension AnonInterface$183Extension on AnonInterface$183 {
  external External get prototype;
  external set prototype(External value);
}
@JS()
@anonymous
class AnonInterface$184{
  external factory AnonInterface$184({required File prototype});
}
extension AnonInterface$184Extension on AnonInterface$184 {
  external File get prototype;
  external set prototype(File value);
}
@JS()
@anonymous
class AnonInterface$185{
  external factory AnonInterface$185({required FileList prototype});
}
extension AnonInterface$185Extension on AnonInterface$185 {
  external FileList get prototype;
  external set prototype(FileList value);
}
@JS()
@anonymous
class AnonInterface$186{
  external factory AnonInterface$186({required FileReader prototype, required num EMPTY, required num LOADING, required num DONE});
}
extension AnonInterface$186Extension on AnonInterface$186 {
  external FileReader get prototype;
  external set prototype(FileReader value);
  external num get EMPTY;
  external num get LOADING;
  external num get DONE;
}
@JS()
@anonymous
class AnonInterface$187{
  external factory AnonInterface$187({required FileSystem prototype});
}
extension AnonInterface$187Extension on AnonInterface$187 {
  external FileSystem get prototype;
  external set prototype(FileSystem value);
}
@JS()
@anonymous
class AnonInterface$188{
  external factory AnonInterface$188({required FileSystemDirectoryEntry prototype});
}
extension AnonInterface$188Extension on AnonInterface$188 {
  external FileSystemDirectoryEntry get prototype;
  external set prototype(FileSystemDirectoryEntry value);
}
@JS()
@anonymous
class AnonInterface$189{
  external factory AnonInterface$189({required FileSystemDirectoryHandle prototype});
}
extension AnonInterface$189Extension on AnonInterface$189 {
  external FileSystemDirectoryHandle get prototype;
  external set prototype(FileSystemDirectoryHandle value);
}
@JS()
@anonymous
class AnonInterface$190{
  external factory AnonInterface$190({required FileSystemDirectoryReader prototype});
}
extension AnonInterface$190Extension on AnonInterface$190 {
  external FileSystemDirectoryReader get prototype;
  external set prototype(FileSystemDirectoryReader value);
}
@JS()
@anonymous
class AnonInterface$191{
  external factory AnonInterface$191({required FileSystemEntry prototype});
}
extension AnonInterface$191Extension on AnonInterface$191 {
  external FileSystemEntry get prototype;
  external set prototype(FileSystemEntry value);
}
@JS()
@anonymous
class AnonInterface$192{
  external factory AnonInterface$192({required FileSystemFileEntry prototype});
}
extension AnonInterface$192Extension on AnonInterface$192 {
  external FileSystemFileEntry get prototype;
  external set prototype(FileSystemFileEntry value);
}
@JS()
@anonymous
class AnonInterface$193{
  external factory AnonInterface$193({required FileSystemFileHandle prototype});
}
extension AnonInterface$193Extension on AnonInterface$193 {
  external FileSystemFileHandle get prototype;
  external set prototype(FileSystemFileHandle value);
}
@JS()
@anonymous
class AnonInterface$194{
  external factory AnonInterface$194({required FileSystemHandle prototype});
}
extension AnonInterface$194Extension on AnonInterface$194 {
  external FileSystemHandle get prototype;
  external set prototype(FileSystemHandle value);
}
@JS()
@anonymous
class AnonInterface$195{
  external factory AnonInterface$195({required FileSystemWritableFileStream prototype});
}
extension AnonInterface$195Extension on AnonInterface$195 {
  external FileSystemWritableFileStream get prototype;
  external set prototype(FileSystemWritableFileStream value);
}
@JS()
@anonymous
class AnonInterface$196{
  external factory AnonInterface$196({required FocusEvent prototype});
}
extension AnonInterface$196Extension on AnonInterface$196 {
  external FocusEvent get prototype;
  external set prototype(FocusEvent value);
}
@JS()
@anonymous
class AnonInterface$197{
  external factory AnonInterface$197({required FontFace prototype});
}
extension AnonInterface$197Extension on AnonInterface$197 {
  external FontFace get prototype;
  external set prototype(FontFace value);
}
@JS()
@anonymous
class AnonInterface$198{
  external factory AnonInterface$198({required FontFaceSet prototype});
}
extension AnonInterface$198Extension on AnonInterface$198 {
  external FontFaceSet get prototype;
  external set prototype(FontFaceSet value);
}
@JS()
@anonymous
class AnonInterface$199{
  external factory AnonInterface$199({required FontFaceSetLoadEvent prototype});
}
extension AnonInterface$199Extension on AnonInterface$199 {
  external FontFaceSetLoadEvent get prototype;
  external set prototype(FontFaceSetLoadEvent value);
}
@JS()
@anonymous
class AnonInterface$200{
  external factory AnonInterface$200({required FormData prototype});
}
extension AnonInterface$200Extension on AnonInterface$200 {
  external FormData get prototype;
  external set prototype(FormData value);
}
@JS()
@anonymous
class AnonInterface$201{
  external factory AnonInterface$201({required FormDataEvent prototype});
}
extension AnonInterface$201Extension on AnonInterface$201 {
  external FormDataEvent get prototype;
  external set prototype(FormDataEvent value);
}
@JS()
@anonymous
class AnonInterface$202{
  external factory AnonInterface$202({required FragmentDirective prototype});
}
extension AnonInterface$202Extension on AnonInterface$202 {
  external FragmentDirective get prototype;
  external set prototype(FragmentDirective value);
}
@JS()
@anonymous
class AnonInterface$203{
  external factory AnonInterface$203({required GainNode prototype});
}
extension AnonInterface$203Extension on AnonInterface$203 {
  external GainNode get prototype;
  external set prototype(GainNode value);
}
@JS()
@anonymous
class AnonInterface$204{
  external factory AnonInterface$204({required Gamepad prototype});
}
extension AnonInterface$204Extension on AnonInterface$204 {
  external Gamepad get prototype;
  external set prototype(Gamepad value);
}
@JS()
@anonymous
class AnonInterface$205{
  external factory AnonInterface$205({required GamepadButton prototype});
}
extension AnonInterface$205Extension on AnonInterface$205 {
  external GamepadButton get prototype;
  external set prototype(GamepadButton value);
}
@JS()
@anonymous
class AnonInterface$206{
  external factory AnonInterface$206({required GamepadEvent prototype});
}
extension AnonInterface$206Extension on AnonInterface$206 {
  external GamepadEvent get prototype;
  external set prototype(GamepadEvent value);
}
@JS()
@anonymous
class AnonInterface$207{
  external factory AnonInterface$207({required GamepadHapticActuator prototype});
}
extension AnonInterface$207Extension on AnonInterface$207 {
  external GamepadHapticActuator get prototype;
  external set prototype(GamepadHapticActuator value);
}
@JS()
@anonymous
class AnonInterface$208{
  external factory AnonInterface$208({required Geolocation prototype});
}
extension AnonInterface$208Extension on AnonInterface$208 {
  external Geolocation get prototype;
  external set prototype(Geolocation value);
}
@JS()
@anonymous
class AnonInterface$209{
  external factory AnonInterface$209({required GeolocationCoordinates prototype});
}
extension AnonInterface$209Extension on AnonInterface$209 {
  external GeolocationCoordinates get prototype;
  external set prototype(GeolocationCoordinates value);
}
@JS()
@anonymous
class AnonInterface$210{
  external factory AnonInterface$210({required GeolocationPosition prototype});
}
extension AnonInterface$210Extension on AnonInterface$210 {
  external GeolocationPosition get prototype;
  external set prototype(GeolocationPosition value);
}
@JS()
@anonymous
class AnonInterface$211{
  external factory AnonInterface$211({required GeolocationPositionError prototype, required num PERMISSION_DENIED, required num POSITION_UNAVAILABLE, required num TIMEOUT});
}
extension AnonInterface$211Extension on AnonInterface$211 {
  external GeolocationPositionError get prototype;
  external set prototype(GeolocationPositionError value);
  external num get PERMISSION_DENIED;
  external num get POSITION_UNAVAILABLE;
  external num get TIMEOUT;
}
@JS()
@anonymous
class AnonInterface$212{
  external factory AnonInterface$212({required HTMLAllCollection prototype});
}
extension AnonInterface$212Extension on AnonInterface$212 {
  external HTMLAllCollection get prototype;
  external set prototype(HTMLAllCollection value);
}
@JS()
@anonymous
class AnonInterface$213{
  external factory AnonInterface$213({required HTMLAnchorElement prototype});
}
extension AnonInterface$213Extension on AnonInterface$213 {
  external HTMLAnchorElement get prototype;
  external set prototype(HTMLAnchorElement value);
}
@JS()
@anonymous
class AnonInterface$214{
  external factory AnonInterface$214({required HTMLAreaElement prototype});
}
extension AnonInterface$214Extension on AnonInterface$214 {
  external HTMLAreaElement get prototype;
  external set prototype(HTMLAreaElement value);
}
@JS()
@anonymous
class AnonInterface$215{
  external factory AnonInterface$215({required HTMLAudioElement prototype});
}
extension AnonInterface$215Extension on AnonInterface$215 {
  external HTMLAudioElement get prototype;
  external set prototype(HTMLAudioElement value);
}
@JS()
@anonymous
class AnonInterface$216{
  external factory AnonInterface$216({required HTMLBRElement prototype});
}
extension AnonInterface$216Extension on AnonInterface$216 {
  external HTMLBRElement get prototype;
  external set prototype(HTMLBRElement value);
}
@JS()
@anonymous
class AnonInterface$217{
  external factory AnonInterface$217({required HTMLBaseElement prototype});
}
extension AnonInterface$217Extension on AnonInterface$217 {
  external HTMLBaseElement get prototype;
  external set prototype(HTMLBaseElement value);
}
@JS()
@anonymous
class AnonInterface$218{
  external factory AnonInterface$218({required HTMLBodyElement prototype});
}
extension AnonInterface$218Extension on AnonInterface$218 {
  external HTMLBodyElement get prototype;
  external set prototype(HTMLBodyElement value);
}
@JS()
@anonymous
class AnonInterface$219{
  external factory AnonInterface$219({required HTMLButtonElement prototype});
}
extension AnonInterface$219Extension on AnonInterface$219 {
  external HTMLButtonElement get prototype;
  external set prototype(HTMLButtonElement value);
}
@JS()
@anonymous
class AnonInterface$220{
  external factory AnonInterface$220({required HTMLCanvasElement prototype});
}
extension AnonInterface$220Extension on AnonInterface$220 {
  external HTMLCanvasElement get prototype;
  external set prototype(HTMLCanvasElement value);
}
@JS()
@anonymous
class AnonInterface$221{
  external factory AnonInterface$221({required HTMLCollection prototype});
}
extension AnonInterface$221Extension on AnonInterface$221 {
  external HTMLCollection get prototype;
  external set prototype(HTMLCollection value);
}
@JS()
@anonymous
class AnonInterface$222{
  external factory AnonInterface$222({required HTMLDListElement prototype});
}
extension AnonInterface$222Extension on AnonInterface$222 {
  external HTMLDListElement get prototype;
  external set prototype(HTMLDListElement value);
}
@JS()
@anonymous
class AnonInterface$223{
  external factory AnonInterface$223({required HTMLDataElement prototype});
}
extension AnonInterface$223Extension on AnonInterface$223 {
  external HTMLDataElement get prototype;
  external set prototype(HTMLDataElement value);
}
@JS()
@anonymous
class AnonInterface$224{
  external factory AnonInterface$224({required HTMLDataListElement prototype});
}
extension AnonInterface$224Extension on AnonInterface$224 {
  external HTMLDataListElement get prototype;
  external set prototype(HTMLDataListElement value);
}
@JS()
@anonymous
class AnonInterface$225{
  external factory AnonInterface$225({required HTMLDetailsElement prototype});
}
extension AnonInterface$225Extension on AnonInterface$225 {
  external HTMLDetailsElement get prototype;
  external set prototype(HTMLDetailsElement value);
}
@JS()
@anonymous
class AnonInterface$226{
  external factory AnonInterface$226({required HTMLDialogElement prototype});
}
extension AnonInterface$226Extension on AnonInterface$226 {
  external HTMLDialogElement get prototype;
  external set prototype(HTMLDialogElement value);
}
@JS()
@anonymous
class AnonInterface$227{
  external factory AnonInterface$227({required HTMLDirectoryElement prototype});
}
extension AnonInterface$227Extension on AnonInterface$227 {
  external HTMLDirectoryElement get prototype;
  external set prototype(HTMLDirectoryElement value);
}
@JS()
@anonymous
class AnonInterface$228{
  external factory AnonInterface$228({required HTMLDivElement prototype});
}
extension AnonInterface$228Extension on AnonInterface$228 {
  external HTMLDivElement get prototype;
  external set prototype(HTMLDivElement value);
}
@JS()
@anonymous
class AnonInterface$229{
  external factory AnonInterface$229({required HTMLDocument prototype});
}
extension AnonInterface$229Extension on AnonInterface$229 {
  external HTMLDocument get prototype;
  external set prototype(HTMLDocument value);
}
@JS()
@anonymous
class AnonInterface$230{
  external factory AnonInterface$230({required HTMLElement prototype});
}
extension AnonInterface$230Extension on AnonInterface$230 {
  external HTMLElement get prototype;
  external set prototype(HTMLElement value);
}
@JS()
@anonymous
class AnonInterface$231{
  external factory AnonInterface$231({required HTMLEmbedElement prototype});
}
extension AnonInterface$231Extension on AnonInterface$231 {
  external HTMLEmbedElement get prototype;
  external set prototype(HTMLEmbedElement value);
}
@JS()
@anonymous
class AnonInterface$232{
  external factory AnonInterface$232({required HTMLFieldSetElement prototype});
}
extension AnonInterface$232Extension on AnonInterface$232 {
  external HTMLFieldSetElement get prototype;
  external set prototype(HTMLFieldSetElement value);
}
@JS()
@anonymous
class AnonInterface$233{
  external factory AnonInterface$233({required HTMLFontElement prototype});
}
extension AnonInterface$233Extension on AnonInterface$233 {
  external HTMLFontElement get prototype;
  external set prototype(HTMLFontElement value);
}
@JS()
@anonymous
class AnonInterface$234{
  external factory AnonInterface$234({required HTMLFormControlsCollection prototype});
}
extension AnonInterface$234Extension on AnonInterface$234 {
  external HTMLFormControlsCollection get prototype;
  external set prototype(HTMLFormControlsCollection value);
}
@JS()
@anonymous
class AnonInterface$235{
  external factory AnonInterface$235({required HTMLFormElement prototype});
}
extension AnonInterface$235Extension on AnonInterface$235 {
  external HTMLFormElement get prototype;
  external set prototype(HTMLFormElement value);
}
@JS()
@anonymous
class AnonInterface$236{
  external factory AnonInterface$236({required HTMLFrameElement prototype});
}
extension AnonInterface$236Extension on AnonInterface$236 {
  external HTMLFrameElement get prototype;
  external set prototype(HTMLFrameElement value);
}
@JS()
@anonymous
class AnonInterface$237{
  external factory AnonInterface$237({required HTMLFrameSetElement prototype});
}
extension AnonInterface$237Extension on AnonInterface$237 {
  external HTMLFrameSetElement get prototype;
  external set prototype(HTMLFrameSetElement value);
}
@JS()
@anonymous
class AnonInterface$238{
  external factory AnonInterface$238({required HTMLHRElement prototype});
}
extension AnonInterface$238Extension on AnonInterface$238 {
  external HTMLHRElement get prototype;
  external set prototype(HTMLHRElement value);
}
@JS()
@anonymous
class AnonInterface$239{
  external factory AnonInterface$239({required HTMLHeadElement prototype});
}
extension AnonInterface$239Extension on AnonInterface$239 {
  external HTMLHeadElement get prototype;
  external set prototype(HTMLHeadElement value);
}
@JS()
@anonymous
class AnonInterface$240{
  external factory AnonInterface$240({required HTMLHeadingElement prototype});
}
extension AnonInterface$240Extension on AnonInterface$240 {
  external HTMLHeadingElement get prototype;
  external set prototype(HTMLHeadingElement value);
}
@JS()
@anonymous
class AnonInterface$241{
  external factory AnonInterface$241({required HTMLHtmlElement prototype});
}
extension AnonInterface$241Extension on AnonInterface$241 {
  external HTMLHtmlElement get prototype;
  external set prototype(HTMLHtmlElement value);
}
@JS()
@anonymous
class AnonInterface$242{
  external factory AnonInterface$242({required HTMLIFrameElement prototype});
}
extension AnonInterface$242Extension on AnonInterface$242 {
  external HTMLIFrameElement get prototype;
  external set prototype(HTMLIFrameElement value);
}
@JS()
@anonymous
class AnonInterface$243{
  external factory AnonInterface$243({required HTMLImageElement prototype});
}
extension AnonInterface$243Extension on AnonInterface$243 {
  external HTMLImageElement get prototype;
  external set prototype(HTMLImageElement value);
}
@JS()
@anonymous
class AnonInterface$244{
  external factory AnonInterface$244({required HTMLInputElement prototype});
}
extension AnonInterface$244Extension on AnonInterface$244 {
  external HTMLInputElement get prototype;
  external set prototype(HTMLInputElement value);
}
@JS()
@anonymous
class AnonInterface$245{
  external factory AnonInterface$245({required HTMLLIElement prototype});
}
extension AnonInterface$245Extension on AnonInterface$245 {
  external HTMLLIElement get prototype;
  external set prototype(HTMLLIElement value);
}
@JS()
@anonymous
class AnonInterface$246{
  external factory AnonInterface$246({required HTMLLabelElement prototype});
}
extension AnonInterface$246Extension on AnonInterface$246 {
  external HTMLLabelElement get prototype;
  external set prototype(HTMLLabelElement value);
}
@JS()
@anonymous
class AnonInterface$247{
  external factory AnonInterface$247({required HTMLLegendElement prototype});
}
extension AnonInterface$247Extension on AnonInterface$247 {
  external HTMLLegendElement get prototype;
  external set prototype(HTMLLegendElement value);
}
@JS()
@anonymous
class AnonInterface$248{
  external factory AnonInterface$248({required HTMLLinkElement prototype});
}
extension AnonInterface$248Extension on AnonInterface$248 {
  external HTMLLinkElement get prototype;
  external set prototype(HTMLLinkElement value);
}
@JS()
@anonymous
class AnonInterface$249{
  external factory AnonInterface$249({required HTMLMapElement prototype});
}
extension AnonInterface$249Extension on AnonInterface$249 {
  external HTMLMapElement get prototype;
  external set prototype(HTMLMapElement value);
}
@JS()
@anonymous
class AnonInterface$250{
  external factory AnonInterface$250({required HTMLMarqueeElement prototype});
}
extension AnonInterface$250Extension on AnonInterface$250 {
  external HTMLMarqueeElement get prototype;
  external set prototype(HTMLMarqueeElement value);
}
@JS()
@anonymous
class AnonInterface$251{
  external factory AnonInterface$251({required HTMLMediaElement prototype, required num NETWORK_EMPTY, required num NETWORK_IDLE, required num NETWORK_LOADING, required num NETWORK_NO_SOURCE, required num HAVE_NOTHING, required num HAVE_METADATA, required num HAVE_CURRENT_DATA, required num HAVE_FUTURE_DATA, required num HAVE_ENOUGH_DATA});
}
extension AnonInterface$251Extension on AnonInterface$251 {
  external HTMLMediaElement get prototype;
  external set prototype(HTMLMediaElement value);
  external num get NETWORK_EMPTY;
  external num get NETWORK_IDLE;
  external num get NETWORK_LOADING;
  external num get NETWORK_NO_SOURCE;
  external num get HAVE_NOTHING;
  external num get HAVE_METADATA;
  external num get HAVE_CURRENT_DATA;
  external num get HAVE_FUTURE_DATA;
  external num get HAVE_ENOUGH_DATA;
}
@JS()
@anonymous
class AnonInterface$252{
  external factory AnonInterface$252({required HTMLMenuElement prototype});
}
extension AnonInterface$252Extension on AnonInterface$252 {
  external HTMLMenuElement get prototype;
  external set prototype(HTMLMenuElement value);
}
@JS()
@anonymous
class AnonInterface$253{
  external factory AnonInterface$253({required HTMLMetaElement prototype});
}
extension AnonInterface$253Extension on AnonInterface$253 {
  external HTMLMetaElement get prototype;
  external set prototype(HTMLMetaElement value);
}
@JS()
@anonymous
class AnonInterface$254{
  external factory AnonInterface$254({required HTMLMeterElement prototype});
}
extension AnonInterface$254Extension on AnonInterface$254 {
  external HTMLMeterElement get prototype;
  external set prototype(HTMLMeterElement value);
}
@JS()
@anonymous
class AnonInterface$255{
  external factory AnonInterface$255({required HTMLModElement prototype});
}
extension AnonInterface$255Extension on AnonInterface$255 {
  external HTMLModElement get prototype;
  external set prototype(HTMLModElement value);
}
@JS()
@anonymous
class AnonInterface$256{
  external factory AnonInterface$256({required HTMLOListElement prototype});
}
extension AnonInterface$256Extension on AnonInterface$256 {
  external HTMLOListElement get prototype;
  external set prototype(HTMLOListElement value);
}
@JS()
@anonymous
class AnonInterface$257{
  external factory AnonInterface$257({required HTMLObjectElement prototype});
}
extension AnonInterface$257Extension on AnonInterface$257 {
  external HTMLObjectElement get prototype;
  external set prototype(HTMLObjectElement value);
}
@JS()
@anonymous
class AnonInterface$258{
  external factory AnonInterface$258({required HTMLOptGroupElement prototype});
}
extension AnonInterface$258Extension on AnonInterface$258 {
  external HTMLOptGroupElement get prototype;
  external set prototype(HTMLOptGroupElement value);
}
@JS()
@anonymous
class AnonInterface$259{
  external factory AnonInterface$259({required HTMLOptionElement prototype});
}
extension AnonInterface$259Extension on AnonInterface$259 {
  external HTMLOptionElement get prototype;
  external set prototype(HTMLOptionElement value);
}
@JS()
@anonymous
class AnonInterface$260{
  external factory AnonInterface$260({required HTMLOptionsCollection prototype});
}
extension AnonInterface$260Extension on AnonInterface$260 {
  external HTMLOptionsCollection get prototype;
  external set prototype(HTMLOptionsCollection value);
}
@JS()
@anonymous
class AnonInterface$261{
  external factory AnonInterface$261({required HTMLOutputElement prototype});
}
extension AnonInterface$261Extension on AnonInterface$261 {
  external HTMLOutputElement get prototype;
  external set prototype(HTMLOutputElement value);
}
@JS()
@anonymous
class AnonInterface$262{
  external factory AnonInterface$262({required HTMLParagraphElement prototype});
}
extension AnonInterface$262Extension on AnonInterface$262 {
  external HTMLParagraphElement get prototype;
  external set prototype(HTMLParagraphElement value);
}
@JS()
@anonymous
class AnonInterface$263{
  external factory AnonInterface$263({required HTMLParamElement prototype});
}
extension AnonInterface$263Extension on AnonInterface$263 {
  external HTMLParamElement get prototype;
  external set prototype(HTMLParamElement value);
}
@JS()
@anonymous
class AnonInterface$264{
  external factory AnonInterface$264({required HTMLPictureElement prototype});
}
extension AnonInterface$264Extension on AnonInterface$264 {
  external HTMLPictureElement get prototype;
  external set prototype(HTMLPictureElement value);
}
@JS()
@anonymous
class AnonInterface$265{
  external factory AnonInterface$265({required HTMLPreElement prototype});
}
extension AnonInterface$265Extension on AnonInterface$265 {
  external HTMLPreElement get prototype;
  external set prototype(HTMLPreElement value);
}
@JS()
@anonymous
class AnonInterface$266{
  external factory AnonInterface$266({required HTMLProgressElement prototype});
}
extension AnonInterface$266Extension on AnonInterface$266 {
  external HTMLProgressElement get prototype;
  external set prototype(HTMLProgressElement value);
}
@JS()
@anonymous
class AnonInterface$267{
  external factory AnonInterface$267({required HTMLQuoteElement prototype});
}
extension AnonInterface$267Extension on AnonInterface$267 {
  external HTMLQuoteElement get prototype;
  external set prototype(HTMLQuoteElement value);
}
@JS()
@anonymous
class AnonInterface$268{
  external factory AnonInterface$268({required HTMLScriptElement prototype});
}
extension AnonInterface$268Extension on AnonInterface$268 {
  external HTMLScriptElement get prototype;
  external set prototype(HTMLScriptElement value);
  @JS("supports")
  external bool supports(String type);
}
@JS()
@anonymous
class AnonInterface$269{
  external factory AnonInterface$269({required HTMLSelectElement prototype});
}
extension AnonInterface$269Extension on AnonInterface$269 {
  external HTMLSelectElement get prototype;
  external set prototype(HTMLSelectElement value);
}
@JS()
@anonymous
class AnonInterface$270{
  external factory AnonInterface$270({required HTMLSlotElement prototype});
}
extension AnonInterface$270Extension on AnonInterface$270 {
  external HTMLSlotElement get prototype;
  external set prototype(HTMLSlotElement value);
}
@JS()
@anonymous
class AnonInterface$271{
  external factory AnonInterface$271({required HTMLSourceElement prototype});
}
extension AnonInterface$271Extension on AnonInterface$271 {
  external HTMLSourceElement get prototype;
  external set prototype(HTMLSourceElement value);
}
@JS()
@anonymous
class AnonInterface$272{
  external factory AnonInterface$272({required HTMLSpanElement prototype});
}
extension AnonInterface$272Extension on AnonInterface$272 {
  external HTMLSpanElement get prototype;
  external set prototype(HTMLSpanElement value);
}
@JS()
@anonymous
class AnonInterface$273{
  external factory AnonInterface$273({required HTMLStyleElement prototype});
}
extension AnonInterface$273Extension on AnonInterface$273 {
  external HTMLStyleElement get prototype;
  external set prototype(HTMLStyleElement value);
}
@JS()
@anonymous
class AnonInterface$274{
  external factory AnonInterface$274({required HTMLTableCaptionElement prototype});
}
extension AnonInterface$274Extension on AnonInterface$274 {
  external HTMLTableCaptionElement get prototype;
  external set prototype(HTMLTableCaptionElement value);
}
@JS()
@anonymous
class AnonInterface$275{
  external factory AnonInterface$275({required HTMLTableCellElement prototype});
}
extension AnonInterface$275Extension on AnonInterface$275 {
  external HTMLTableCellElement get prototype;
  external set prototype(HTMLTableCellElement value);
}
@JS()
@anonymous
class AnonInterface$276{
  external factory AnonInterface$276({required HTMLTableColElement prototype});
}
extension AnonInterface$276Extension on AnonInterface$276 {
  external HTMLTableColElement get prototype;
  external set prototype(HTMLTableColElement value);
}
@JS()
@anonymous
class AnonInterface$277{
  external factory AnonInterface$277({required HTMLTableElement prototype});
}
extension AnonInterface$277Extension on AnonInterface$277 {
  external HTMLTableElement get prototype;
  external set prototype(HTMLTableElement value);
}
@JS()
@anonymous
class AnonInterface$278{
  external factory AnonInterface$278({required HTMLTableRowElement prototype});
}
extension AnonInterface$278Extension on AnonInterface$278 {
  external HTMLTableRowElement get prototype;
  external set prototype(HTMLTableRowElement value);
}
@JS()
@anonymous
class AnonInterface$279{
  external factory AnonInterface$279({required HTMLTableSectionElement prototype});
}
extension AnonInterface$279Extension on AnonInterface$279 {
  external HTMLTableSectionElement get prototype;
  external set prototype(HTMLTableSectionElement value);
}
@JS()
@anonymous
class AnonInterface$280{
  external factory AnonInterface$280({required HTMLTemplateElement prototype});
}
extension AnonInterface$280Extension on AnonInterface$280 {
  external HTMLTemplateElement get prototype;
  external set prototype(HTMLTemplateElement value);
}
@JS()
@anonymous
class AnonInterface$281{
  external factory AnonInterface$281({required HTMLTextAreaElement prototype});
}
extension AnonInterface$281Extension on AnonInterface$281 {
  external HTMLTextAreaElement get prototype;
  external set prototype(HTMLTextAreaElement value);
}
@JS()
@anonymous
class AnonInterface$282{
  external factory AnonInterface$282({required HTMLTimeElement prototype});
}
extension AnonInterface$282Extension on AnonInterface$282 {
  external HTMLTimeElement get prototype;
  external set prototype(HTMLTimeElement value);
}
@JS()
@anonymous
class AnonInterface$283{
  external factory AnonInterface$283({required HTMLTitleElement prototype});
}
extension AnonInterface$283Extension on AnonInterface$283 {
  external HTMLTitleElement get prototype;
  external set prototype(HTMLTitleElement value);
}
@JS()
@anonymous
class AnonInterface$284{
  external factory AnonInterface$284({required HTMLTrackElement prototype, required num NONE, required num LOADING, required num LOADED, required num ERROR});
}
extension AnonInterface$284Extension on AnonInterface$284 {
  external HTMLTrackElement get prototype;
  external set prototype(HTMLTrackElement value);
  external num get NONE;
  external num get LOADING;
  external num get LOADED;
  external num get ERROR;
}
@JS()
@anonymous
class AnonInterface$285{
  external factory AnonInterface$285({required HTMLUListElement prototype});
}
extension AnonInterface$285Extension on AnonInterface$285 {
  external HTMLUListElement get prototype;
  external set prototype(HTMLUListElement value);
}
@JS()
@anonymous
class AnonInterface$286{
  external factory AnonInterface$286({required HTMLUnknownElement prototype});
}
extension AnonInterface$286Extension on AnonInterface$286 {
  external HTMLUnknownElement get prototype;
  external set prototype(HTMLUnknownElement value);
}
@JS()
@anonymous
class AnonInterface$287{
  external factory AnonInterface$287({required HTMLVideoElement prototype});
}
extension AnonInterface$287Extension on AnonInterface$287 {
  external HTMLVideoElement get prototype;
  external set prototype(HTMLVideoElement value);
}
@JS()
@anonymous
class AnonInterface$288{
  external factory AnonInterface$288({required HashChangeEvent prototype});
}
extension AnonInterface$288Extension on AnonInterface$288 {
  external HashChangeEvent get prototype;
  external set prototype(HashChangeEvent value);
}
@JS()
@anonymous
class AnonInterface$289{
  external factory AnonInterface$289({required Headers prototype});
}
extension AnonInterface$289Extension on AnonInterface$289 {
  external Headers get prototype;
  external set prototype(Headers value);
}
@JS()
@anonymous
class AnonInterface$290{
  external factory AnonInterface$290({required Highlight prototype});
}
extension AnonInterface$290Extension on AnonInterface$290 {
  external Highlight get prototype;
  external set prototype(Highlight value);
}
@JS()
@anonymous
class AnonInterface$291{
  external factory AnonInterface$291({required HighlightRegistry prototype});
}
extension AnonInterface$291Extension on AnonInterface$291 {
  external HighlightRegistry get prototype;
  external set prototype(HighlightRegistry value);
}
@JS()
@anonymous
class AnonInterface$292{
  external factory AnonInterface$292({required History prototype});
}
extension AnonInterface$292Extension on AnonInterface$292 {
  external History get prototype;
  external set prototype(History value);
}
@JS()
@anonymous
class AnonInterface$293{
  external factory AnonInterface$293({required IDBCursor prototype});
}
extension AnonInterface$293Extension on AnonInterface$293 {
  external IDBCursor get prototype;
  external set prototype(IDBCursor value);
}
@JS()
@anonymous
class AnonInterface$294{
  external factory AnonInterface$294({required IDBCursorWithValue prototype});
}
extension AnonInterface$294Extension on AnonInterface$294 {
  external IDBCursorWithValue get prototype;
  external set prototype(IDBCursorWithValue value);
}
@JS()
@anonymous
class AnonInterface$295{
  external factory AnonInterface$295({required IDBDatabase prototype});
}
extension AnonInterface$295Extension on AnonInterface$295 {
  external IDBDatabase get prototype;
  external set prototype(IDBDatabase value);
}
@JS()
@anonymous
class AnonInterface$296{
  external factory AnonInterface$296({required IDBFactory prototype});
}
extension AnonInterface$296Extension on AnonInterface$296 {
  external IDBFactory get prototype;
  external set prototype(IDBFactory value);
}
@JS()
@anonymous
class AnonInterface$297{
  external factory AnonInterface$297({required IDBIndex prototype});
}
extension AnonInterface$297Extension on AnonInterface$297 {
  external IDBIndex get prototype;
  external set prototype(IDBIndex value);
}
@JS()
@anonymous
class AnonInterface$298{
  external factory AnonInterface$298({required IDBKeyRange prototype});
}
extension AnonInterface$298Extension on AnonInterface$298 {
  external IDBKeyRange get prototype;
  external set prototype(IDBKeyRange value);
  @JS("bound")
  external IDBKeyRange bound(dynamic lower, dynamic upper, [bool lowerOpen, bool upperOpen]);
  @JS("lowerBound")
  external IDBKeyRange lowerBound(dynamic lower, [bool open]);
  @JS("only")
  external IDBKeyRange only(dynamic value);
  @JS("upperBound")
  external IDBKeyRange upperBound(dynamic upper, [bool open]);
}
@JS()
@anonymous
class AnonInterface$299{
  external factory AnonInterface$299({required IDBObjectStore prototype});
}
extension AnonInterface$299Extension on AnonInterface$299 {
  external IDBObjectStore get prototype;
  external set prototype(IDBObjectStore value);
}
@JS()
@anonymous
class AnonInterface$300{
  external factory AnonInterface$300({required IDBOpenDBRequest prototype});
}
extension AnonInterface$300Extension on AnonInterface$300 {
  external IDBOpenDBRequest get prototype;
  external set prototype(IDBOpenDBRequest value);
}
@JS()
@anonymous
class AnonInterface$301{
  external factory AnonInterface$301({required IDBRequest prototype});
}
extension AnonInterface$301Extension on AnonInterface$301 {
  external IDBRequest get prototype;
  external set prototype(IDBRequest value);
}
@JS()
@anonymous
class AnonInterface$302{
  external factory AnonInterface$302({required IDBTransaction prototype});
}
extension AnonInterface$302Extension on AnonInterface$302 {
  external IDBTransaction get prototype;
  external set prototype(IDBTransaction value);
}
@JS()
@anonymous
class AnonInterface$303{
  external factory AnonInterface$303({required IDBVersionChangeEvent prototype});
}
extension AnonInterface$303Extension on AnonInterface$303 {
  external IDBVersionChangeEvent get prototype;
  external set prototype(IDBVersionChangeEvent value);
}
@JS()
@anonymous
class AnonInterface$304{
  external factory AnonInterface$304({required IIRFilterNode prototype});
}
extension AnonInterface$304Extension on AnonInterface$304 {
  external IIRFilterNode get prototype;
  external set prototype(IIRFilterNode value);
}
@JS()
@anonymous
class AnonInterface$305{
  external factory AnonInterface$305({required IdleDeadline prototype});
}
extension AnonInterface$305Extension on AnonInterface$305 {
  external IdleDeadline get prototype;
  external set prototype(IdleDeadline value);
}
@JS()
@anonymous
class AnonInterface$306{
  external factory AnonInterface$306({required ImageBitmap prototype});
}
extension AnonInterface$306Extension on AnonInterface$306 {
  external ImageBitmap get prototype;
  external set prototype(ImageBitmap value);
}
@JS()
@anonymous
class AnonInterface$307{
  external factory AnonInterface$307({required ImageBitmapRenderingContext prototype});
}
extension AnonInterface$307Extension on AnonInterface$307 {
  external ImageBitmapRenderingContext get prototype;
  external set prototype(ImageBitmapRenderingContext value);
}
@JS()
@anonymous
class AnonInterface$308{
  external factory AnonInterface$308({required ImageData prototype});
}
extension AnonInterface$308Extension on AnonInterface$308 {
  external ImageData get prototype;
  external set prototype(ImageData value);
}
@JS()
@anonymous
class AnonInterface$309{
  external factory AnonInterface$309({required ImageDecoder prototype});
}
extension AnonInterface$309Extension on AnonInterface$309 {
  external ImageDecoder get prototype;
  external set prototype(ImageDecoder value);
  @JS("isTypeSupported")
  external Future<bool> isTypeSupported(String type);
}
@JS()
@anonymous
class AnonInterface$310{
  external factory AnonInterface$310({required ImageTrack prototype});
}
extension AnonInterface$310Extension on AnonInterface$310 {
  external ImageTrack get prototype;
  external set prototype(ImageTrack value);
}
@JS()
@anonymous
class AnonInterface$311{
  external factory AnonInterface$311({required ImageTrackList prototype});
}
extension AnonInterface$311Extension on AnonInterface$311 {
  external ImageTrackList get prototype;
  external set prototype(ImageTrackList value);
}
@JS()
@anonymous
class AnonInterface$312{
  external factory AnonInterface$312({required InputDeviceInfo prototype});
}
extension AnonInterface$312Extension on AnonInterface$312 {
  external InputDeviceInfo get prototype;
  external set prototype(InputDeviceInfo value);
}
@JS()
@anonymous
class AnonInterface$313{
  external factory AnonInterface$313({required InputEvent prototype});
}
extension AnonInterface$313Extension on AnonInterface$313 {
  external InputEvent get prototype;
  external set prototype(InputEvent value);
}
@JS()
@anonymous
class AnonInterface$314{
  external factory AnonInterface$314({required IntersectionObserver prototype});
}
extension AnonInterface$314Extension on AnonInterface$314 {
  external IntersectionObserver get prototype;
  external set prototype(IntersectionObserver value);
}
@JS()
@anonymous
class AnonInterface$315{
  external factory AnonInterface$315({required IntersectionObserverEntry prototype});
}
extension AnonInterface$315Extension on AnonInterface$315 {
  external IntersectionObserverEntry get prototype;
  external set prototype(IntersectionObserverEntry value);
}
@JS()
@anonymous
class AnonInterface$316{
  external factory AnonInterface$316({required KeyboardEvent prototype, required num DOM_KEY_LOCATION_STANDARD, required num DOM_KEY_LOCATION_LEFT, required num DOM_KEY_LOCATION_RIGHT, required num DOM_KEY_LOCATION_NUMPAD});
}
extension AnonInterface$316Extension on AnonInterface$316 {
  external KeyboardEvent get prototype;
  external set prototype(KeyboardEvent value);
  external num get DOM_KEY_LOCATION_STANDARD;
  external num get DOM_KEY_LOCATION_LEFT;
  external num get DOM_KEY_LOCATION_RIGHT;
  external num get DOM_KEY_LOCATION_NUMPAD;
}
@JS()
@anonymous
class AnonInterface$317{
  external factory AnonInterface$317({required KeyframeEffect prototype});
}
extension AnonInterface$317Extension on AnonInterface$317 {
  external KeyframeEffect get prototype;
  external set prototype(KeyframeEffect value);
}
@JS()
@anonymous
class AnonInterface$318{
  external factory AnonInterface$318({required LargestContentfulPaint prototype});
}
extension AnonInterface$318Extension on AnonInterface$318 {
  external LargestContentfulPaint get prototype;
  external set prototype(LargestContentfulPaint value);
}
@JS()
@anonymous
class AnonInterface$319{
  external factory AnonInterface$319({required Location prototype});
}
extension AnonInterface$319Extension on AnonInterface$319 {
  external Location get prototype;
  external set prototype(Location value);
}
@JS()
@anonymous
class AnonInterface$320{
  external factory AnonInterface$320({required Lock prototype});
}
extension AnonInterface$320Extension on AnonInterface$320 {
  external Lock get prototype;
  external set prototype(Lock value);
}
@JS()
@anonymous
class AnonInterface$321{
  external factory AnonInterface$321({required LockManager prototype});
}
extension AnonInterface$321Extension on AnonInterface$321 {
  external LockManager get prototype;
  external set prototype(LockManager value);
}
@JS()
@anonymous
class AnonInterface$322{
  external factory AnonInterface$322({required MIDIAccess prototype});
}
extension AnonInterface$322Extension on AnonInterface$322 {
  external MIDIAccess get prototype;
  external set prototype(MIDIAccess value);
}
@JS()
@anonymous
class AnonInterface$323{
  external factory AnonInterface$323({required MIDIConnectionEvent prototype});
}
extension AnonInterface$323Extension on AnonInterface$323 {
  external MIDIConnectionEvent get prototype;
  external set prototype(MIDIConnectionEvent value);
}
@JS()
@anonymous
class AnonInterface$324{
  external factory AnonInterface$324({required MIDIInput prototype});
}
extension AnonInterface$324Extension on AnonInterface$324 {
  external MIDIInput get prototype;
  external set prototype(MIDIInput value);
}
@JS()
@anonymous
class AnonInterface$325{
  external factory AnonInterface$325({required MIDIInputMap prototype});
}
extension AnonInterface$325Extension on AnonInterface$325 {
  external MIDIInputMap get prototype;
  external set prototype(MIDIInputMap value);
}
@JS()
@anonymous
class AnonInterface$326{
  external factory AnonInterface$326({required MIDIMessageEvent prototype});
}
extension AnonInterface$326Extension on AnonInterface$326 {
  external MIDIMessageEvent get prototype;
  external set prototype(MIDIMessageEvent value);
}
@JS()
@anonymous
class AnonInterface$327{
  external factory AnonInterface$327({required MIDIOutput prototype});
}
extension AnonInterface$327Extension on AnonInterface$327 {
  external MIDIOutput get prototype;
  external set prototype(MIDIOutput value);
}
@JS()
@anonymous
class AnonInterface$328{
  external factory AnonInterface$328({required MIDIOutputMap prototype});
}
extension AnonInterface$328Extension on AnonInterface$328 {
  external MIDIOutputMap get prototype;
  external set prototype(MIDIOutputMap value);
}
@JS()
@anonymous
class AnonInterface$329{
  external factory AnonInterface$329({required MIDIPort prototype});
}
extension AnonInterface$329Extension on AnonInterface$329 {
  external MIDIPort get prototype;
  external set prototype(MIDIPort value);
}
@JS()
@anonymous
class AnonInterface$330{
  external factory AnonInterface$330({required MathMLElement prototype});
}
extension AnonInterface$330Extension on AnonInterface$330 {
  external MathMLElement get prototype;
  external set prototype(MathMLElement value);
}
@JS()
@anonymous
class AnonInterface$331{
  external factory AnonInterface$331({required MediaCapabilities prototype});
}
extension AnonInterface$331Extension on AnonInterface$331 {
  external MediaCapabilities get prototype;
  external set prototype(MediaCapabilities value);
}
@JS()
@anonymous
class AnonInterface$332{
  external factory AnonInterface$332({required MediaDeviceInfo prototype});
}
extension AnonInterface$332Extension on AnonInterface$332 {
  external MediaDeviceInfo get prototype;
  external set prototype(MediaDeviceInfo value);
}
@JS()
@anonymous
class AnonInterface$333{
  external factory AnonInterface$333({required MediaDevices prototype});
}
extension AnonInterface$333Extension on AnonInterface$333 {
  external MediaDevices get prototype;
  external set prototype(MediaDevices value);
}
@JS()
@anonymous
class AnonInterface$334{
  external factory AnonInterface$334({required MediaElementAudioSourceNode prototype});
}
extension AnonInterface$334Extension on AnonInterface$334 {
  external MediaElementAudioSourceNode get prototype;
  external set prototype(MediaElementAudioSourceNode value);
}
@JS()
@anonymous
class AnonInterface$335{
  external factory AnonInterface$335({required MediaEncryptedEvent prototype});
}
extension AnonInterface$335Extension on AnonInterface$335 {
  external MediaEncryptedEvent get prototype;
  external set prototype(MediaEncryptedEvent value);
}
@JS()
@anonymous
class AnonInterface$336{
  external factory AnonInterface$336({required MediaError prototype, required num MEDIA_ERR_ABORTED, required num MEDIA_ERR_NETWORK, required num MEDIA_ERR_DECODE, required num MEDIA_ERR_SRC_NOT_SUPPORTED});
}
extension AnonInterface$336Extension on AnonInterface$336 {
  external MediaError get prototype;
  external set prototype(MediaError value);
  external num get MEDIA_ERR_ABORTED;
  external num get MEDIA_ERR_NETWORK;
  external num get MEDIA_ERR_DECODE;
  external num get MEDIA_ERR_SRC_NOT_SUPPORTED;
}
@JS()
@anonymous
class AnonInterface$337{
  external factory AnonInterface$337({required MediaKeyMessageEvent prototype});
}
extension AnonInterface$337Extension on AnonInterface$337 {
  external MediaKeyMessageEvent get prototype;
  external set prototype(MediaKeyMessageEvent value);
}
@JS()
@anonymous
class AnonInterface$338{
  external factory AnonInterface$338({required MediaKeySession prototype});
}
extension AnonInterface$338Extension on AnonInterface$338 {
  external MediaKeySession get prototype;
  external set prototype(MediaKeySession value);
}
@JS()
@anonymous
class AnonInterface$339{
  external factory AnonInterface$339({required MediaKeyStatusMap prototype});
}
extension AnonInterface$339Extension on AnonInterface$339 {
  external MediaKeyStatusMap get prototype;
  external set prototype(MediaKeyStatusMap value);
}
@JS()
@anonymous
class AnonInterface$340{
  external factory AnonInterface$340({required MediaKeySystemAccess prototype});
}
extension AnonInterface$340Extension on AnonInterface$340 {
  external MediaKeySystemAccess get prototype;
  external set prototype(MediaKeySystemAccess value);
}
@JS()
@anonymous
class AnonInterface$341{
  external factory AnonInterface$341({required MediaKeys prototype});
}
extension AnonInterface$341Extension on AnonInterface$341 {
  external MediaKeys get prototype;
  external set prototype(MediaKeys value);
}
@JS()
@anonymous
class AnonInterface$342{
  external factory AnonInterface$342({required MediaList prototype});
}
extension AnonInterface$342Extension on AnonInterface$342 {
  external MediaList get prototype;
  external set prototype(MediaList value);
}
@JS()
@anonymous
class AnonInterface$343{
  external factory AnonInterface$343({required MediaMetadata prototype});
}
extension AnonInterface$343Extension on AnonInterface$343 {
  external MediaMetadata get prototype;
  external set prototype(MediaMetadata value);
}
@JS()
@anonymous
class AnonInterface$344{
  external factory AnonInterface$344({required MediaQueryList prototype});
}
extension AnonInterface$344Extension on AnonInterface$344 {
  external MediaQueryList get prototype;
  external set prototype(MediaQueryList value);
}
@JS()
@anonymous
class AnonInterface$345{
  external factory AnonInterface$345({required MediaQueryListEvent prototype});
}
extension AnonInterface$345Extension on AnonInterface$345 {
  external MediaQueryListEvent get prototype;
  external set prototype(MediaQueryListEvent value);
}
@JS()
@anonymous
class AnonInterface$346{
  external factory AnonInterface$346({required MediaRecorder prototype});
}
extension AnonInterface$346Extension on AnonInterface$346 {
  external MediaRecorder get prototype;
  external set prototype(MediaRecorder value);
  @JS("isTypeSupported")
  external bool isTypeSupported(String type);
}
@JS()
@anonymous
class AnonInterface$347{
  external factory AnonInterface$347({required MediaSession prototype});
}
extension AnonInterface$347Extension on AnonInterface$347 {
  external MediaSession get prototype;
  external set prototype(MediaSession value);
}
@JS()
@anonymous
class AnonInterface$348{
  external factory AnonInterface$348({required MediaSource prototype, required bool canConstructInDedicatedWorker});
}
extension AnonInterface$348Extension on AnonInterface$348 {
  external MediaSource get prototype;
  external set prototype(MediaSource value);
  external bool get canConstructInDedicatedWorker;
  @JS("isTypeSupported")
  external bool isTypeSupported(String type);
}
@JS()
@anonymous
class AnonInterface$349{
  external factory AnonInterface$349({required MediaSourceHandle prototype});
}
extension AnonInterface$349Extension on AnonInterface$349 {
  external MediaSourceHandle get prototype;
  external set prototype(MediaSourceHandle value);
}
@JS()
@anonymous
class AnonInterface$350{
  external factory AnonInterface$350({required MediaStream prototype});
}
extension AnonInterface$350Extension on AnonInterface$350 {
  external MediaStream get prototype;
  external set prototype(MediaStream value);
}
@JS()
@anonymous
class AnonInterface$351{
  external factory AnonInterface$351({required MediaStreamAudioDestinationNode prototype});
}
extension AnonInterface$351Extension on AnonInterface$351 {
  external MediaStreamAudioDestinationNode get prototype;
  external set prototype(MediaStreamAudioDestinationNode value);
}
@JS()
@anonymous
class AnonInterface$352{
  external factory AnonInterface$352({required MediaStreamAudioSourceNode prototype});
}
extension AnonInterface$352Extension on AnonInterface$352 {
  external MediaStreamAudioSourceNode get prototype;
  external set prototype(MediaStreamAudioSourceNode value);
}
@JS()
@anonymous
class AnonInterface$353{
  external factory AnonInterface$353({required MediaStreamTrack prototype});
}
extension AnonInterface$353Extension on AnonInterface$353 {
  external MediaStreamTrack get prototype;
  external set prototype(MediaStreamTrack value);
}
@JS()
@anonymous
class AnonInterface$354{
  external factory AnonInterface$354({required MediaStreamTrackEvent prototype});
}
extension AnonInterface$354Extension on AnonInterface$354 {
  external MediaStreamTrackEvent get prototype;
  external set prototype(MediaStreamTrackEvent value);
}
@JS()
@anonymous
class AnonInterface$355{
  external factory AnonInterface$355({required MessageChannel prototype});
}
extension AnonInterface$355Extension on AnonInterface$355 {
  external MessageChannel get prototype;
  external set prototype(MessageChannel value);
}
@JS()
@anonymous
class AnonInterface$356{
  external factory AnonInterface$356({required MessageEvent prototype});
}
extension AnonInterface$356Extension on AnonInterface$356 {
  external MessageEvent get prototype;
  external set prototype(MessageEvent value);
}
@JS()
@anonymous
class AnonInterface$357{
  external factory AnonInterface$357({required MessagePort prototype});
}
extension AnonInterface$357Extension on AnonInterface$357 {
  external MessagePort get prototype;
  external set prototype(MessagePort value);
}
@JS()
@anonymous
class AnonInterface$358{
  external factory AnonInterface$358({required MimeType prototype});
}
extension AnonInterface$358Extension on AnonInterface$358 {
  external MimeType get prototype;
  external set prototype(MimeType value);
}
@JS()
@anonymous
class AnonInterface$359{
  external factory AnonInterface$359({required MimeTypeArray prototype});
}
extension AnonInterface$359Extension on AnonInterface$359 {
  external MimeTypeArray get prototype;
  external set prototype(MimeTypeArray value);
}
@JS()
@anonymous
class AnonInterface$360{
  external factory AnonInterface$360({required MouseEvent prototype});
}
extension AnonInterface$360Extension on AnonInterface$360 {
  external MouseEvent get prototype;
  external set prototype(MouseEvent value);
}
@JS()
@anonymous
class AnonInterface$361{
  external factory AnonInterface$361({required MutationObserver prototype});
}
extension AnonInterface$361Extension on AnonInterface$361 {
  external MutationObserver get prototype;
  external set prototype(MutationObserver value);
}
@JS()
@anonymous
class AnonInterface$362{
  external factory AnonInterface$362({required MutationRecord prototype});
}
extension AnonInterface$362Extension on AnonInterface$362 {
  external MutationRecord get prototype;
  external set prototype(MutationRecord value);
}
@JS()
@anonymous
class AnonInterface$363{
  external factory AnonInterface$363({required NamedNodeMap prototype});
}
extension AnonInterface$363Extension on AnonInterface$363 {
  external NamedNodeMap get prototype;
  external set prototype(NamedNodeMap value);
}
@JS()
@anonymous
class AnonInterface$364{
  external factory AnonInterface$364({required NavigationActivation prototype});
}
extension AnonInterface$364Extension on AnonInterface$364 {
  external NavigationActivation get prototype;
  external set prototype(NavigationActivation value);
}
@JS()
@anonymous
class AnonInterface$365{
  external factory AnonInterface$365({required NavigationHistoryEntry prototype});
}
extension AnonInterface$365Extension on AnonInterface$365 {
  external NavigationHistoryEntry get prototype;
  external set prototype(NavigationHistoryEntry value);
}
@JS()
@anonymous
class AnonInterface$366{
  external factory AnonInterface$366({required NavigationPreloadManager prototype});
}
extension AnonInterface$366Extension on AnonInterface$366 {
  external NavigationPreloadManager get prototype;
  external set prototype(NavigationPreloadManager value);
}
@JS()
@anonymous
class AnonInterface$367{
  external factory AnonInterface$367({required Navigator prototype});
}
extension AnonInterface$367Extension on AnonInterface$367 {
  external Navigator get prototype;
  external set prototype(Navigator value);
}
@JS()
@anonymous
class AnonInterface$368{
  external factory AnonInterface$368({required Node prototype, required num ELEMENT_NODE, required num ATTRIBUTE_NODE, required num TEXT_NODE, required num CDATA_SECTION_NODE, required num ENTITY_REFERENCE_NODE, required num ENTITY_NODE, required num PROCESSING_INSTRUCTION_NODE, required num COMMENT_NODE, required num DOCUMENT_NODE, required num DOCUMENT_TYPE_NODE, required num DOCUMENT_FRAGMENT_NODE, required num NOTATION_NODE, required num DOCUMENT_POSITION_DISCONNECTED, required num DOCUMENT_POSITION_PRECEDING, required num DOCUMENT_POSITION_FOLLOWING, required num DOCUMENT_POSITION_CONTAINS, required num DOCUMENT_POSITION_CONTAINED_BY, required num DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC});
}
extension AnonInterface$368Extension on AnonInterface$368 {
  external Node get prototype;
  external set prototype(Node value);
  external num get ELEMENT_NODE;
  external num get ATTRIBUTE_NODE;
  external num get TEXT_NODE;
  external num get CDATA_SECTION_NODE;
  external num get ENTITY_REFERENCE_NODE;
  external num get ENTITY_NODE;
  external num get PROCESSING_INSTRUCTION_NODE;
  external num get COMMENT_NODE;
  external num get DOCUMENT_NODE;
  external num get DOCUMENT_TYPE_NODE;
  external num get DOCUMENT_FRAGMENT_NODE;
  external num get NOTATION_NODE;
  external num get DOCUMENT_POSITION_DISCONNECTED;
  external num get DOCUMENT_POSITION_PRECEDING;
  external num get DOCUMENT_POSITION_FOLLOWING;
  external num get DOCUMENT_POSITION_CONTAINS;
  external num get DOCUMENT_POSITION_CONTAINED_BY;
  external num get DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC;
}
@JS()
@anonymous
class AnonInterface$369{
  external factory AnonInterface$369({required NodeIterator prototype});
}
extension AnonInterface$369Extension on AnonInterface$369 {
  external NodeIterator get prototype;
  external set prototype(NodeIterator value);
}
@JS()
@anonymous
class AnonInterface$370{
  external factory AnonInterface$370({required NodeList prototype});
}
extension AnonInterface$370Extension on AnonInterface$370 {
  external NodeList get prototype;
  external set prototype(NodeList value);
}
@JS()
@anonymous
class AnonInterface$371{
  external factory AnonInterface$371({required Notification prototype, required NotificationPermission permission});
}
extension AnonInterface$371Extension on AnonInterface$371 {
  external Notification get prototype;
  external set prototype(Notification value);
  external NotificationPermission get permission;
  @JS("requestPermission")
  external Future<NotificationPermission> requestPermission([NotificationPermissionCallback deprecatedCallback]);
}
@JS()
@anonymous
class AnonInterface$372{
  external factory AnonInterface$372({required OfflineAudioCompletionEvent prototype});
}
extension AnonInterface$372Extension on AnonInterface$372 {
  external OfflineAudioCompletionEvent get prototype;
  external set prototype(OfflineAudioCompletionEvent value);
}
@JS()
@anonymous
class AnonInterface$373{
  external factory AnonInterface$373({required OfflineAudioContext prototype});
}
extension AnonInterface$373Extension on AnonInterface$373 {
  external OfflineAudioContext get prototype;
  external set prototype(OfflineAudioContext value);
}
@JS()
@anonymous
class AnonInterface$374{
  external factory AnonInterface$374({required OffscreenCanvas prototype});
}
extension AnonInterface$374Extension on AnonInterface$374 {
  external OffscreenCanvas get prototype;
  external set prototype(OffscreenCanvas value);
}
@JS()
@anonymous
class AnonInterface$375{
  external factory AnonInterface$375({required OffscreenCanvasRenderingContext2D prototype});
}
extension AnonInterface$375Extension on AnonInterface$375 {
  external OffscreenCanvasRenderingContext2D get prototype;
  external set prototype(OffscreenCanvasRenderingContext2D value);
}
@JS()
@anonymous
class AnonInterface$376{
  external factory AnonInterface$376({required OscillatorNode prototype});
}
extension AnonInterface$376Extension on AnonInterface$376 {
  external OscillatorNode get prototype;
  external set prototype(OscillatorNode value);
}
@JS()
@anonymous
class AnonInterface$377{
  external factory AnonInterface$377({required OverconstrainedError prototype});
}
extension AnonInterface$377Extension on AnonInterface$377 {
  external OverconstrainedError get prototype;
  external set prototype(OverconstrainedError value);
}
@JS()
@anonymous
class AnonInterface$378{
  external factory AnonInterface$378({required PageRevealEvent prototype});
}
extension AnonInterface$378Extension on AnonInterface$378 {
  external PageRevealEvent get prototype;
  external set prototype(PageRevealEvent value);
}
@JS()
@anonymous
class AnonInterface$379{
  external factory AnonInterface$379({required PageSwapEvent prototype});
}
extension AnonInterface$379Extension on AnonInterface$379 {
  external PageSwapEvent get prototype;
  external set prototype(PageSwapEvent value);
}
@JS()
@anonymous
class AnonInterface$380{
  external factory AnonInterface$380({required PageTransitionEvent prototype});
}
extension AnonInterface$380Extension on AnonInterface$380 {
  external PageTransitionEvent get prototype;
  external set prototype(PageTransitionEvent value);
}
@JS()
@anonymous
class AnonInterface$381{
  external factory AnonInterface$381({required PannerNode prototype});
}
extension AnonInterface$381Extension on AnonInterface$381 {
  external PannerNode get prototype;
  external set prototype(PannerNode value);
}
@JS()
@anonymous
class AnonInterface$382{
  external factory AnonInterface$382({required Path2D prototype});
}
extension AnonInterface$382Extension on AnonInterface$382 {
  external Path2D get prototype;
  external set prototype(Path2D value);
}
@JS()
@anonymous
class AnonInterface$383{
  external factory AnonInterface$383({required PaymentAddress prototype});
}
extension AnonInterface$383Extension on AnonInterface$383 {
  external PaymentAddress get prototype;
  external set prototype(PaymentAddress value);
}
@JS()
@anonymous
class AnonInterface$384{
  external factory AnonInterface$384({required PaymentMethodChangeEvent prototype});
}
extension AnonInterface$384Extension on AnonInterface$384 {
  external PaymentMethodChangeEvent get prototype;
  external set prototype(PaymentMethodChangeEvent value);
}
@JS()
@anonymous
class AnonInterface$385{
  external factory AnonInterface$385({required PaymentRequest prototype});
}
extension AnonInterface$385Extension on AnonInterface$385 {
  external PaymentRequest get prototype;
  external set prototype(PaymentRequest value);
}
@JS()
@anonymous
class AnonInterface$386{
  external factory AnonInterface$386({required PaymentRequestUpdateEvent prototype});
}
extension AnonInterface$386Extension on AnonInterface$386 {
  external PaymentRequestUpdateEvent get prototype;
  external set prototype(PaymentRequestUpdateEvent value);
}
@JS()
@anonymous
class AnonInterface$387{
  external factory AnonInterface$387({required PaymentResponse prototype});
}
extension AnonInterface$387Extension on AnonInterface$387 {
  external PaymentResponse get prototype;
  external set prototype(PaymentResponse value);
}
@JS()
@anonymous
class AnonInterface$388{
  external factory AnonInterface$388({required Performance prototype});
}
extension AnonInterface$388Extension on AnonInterface$388 {
  external Performance get prototype;
  external set prototype(Performance value);
}
@JS()
@anonymous
class AnonInterface$389{
  external factory AnonInterface$389({required PerformanceEntry prototype});
}
extension AnonInterface$389Extension on AnonInterface$389 {
  external PerformanceEntry get prototype;
  external set prototype(PerformanceEntry value);
}
@JS()
@anonymous
class AnonInterface$390{
  external factory AnonInterface$390({required PerformanceEventTiming prototype});
}
extension AnonInterface$390Extension on AnonInterface$390 {
  external PerformanceEventTiming get prototype;
  external set prototype(PerformanceEventTiming value);
}
@JS()
@anonymous
class AnonInterface$391{
  external factory AnonInterface$391({required PerformanceMark prototype});
}
extension AnonInterface$391Extension on AnonInterface$391 {
  external PerformanceMark get prototype;
  external set prototype(PerformanceMark value);
}
@JS()
@anonymous
class AnonInterface$392{
  external factory AnonInterface$392({required PerformanceMeasure prototype});
}
extension AnonInterface$392Extension on AnonInterface$392 {
  external PerformanceMeasure get prototype;
  external set prototype(PerformanceMeasure value);
}
@JS()
@anonymous
class AnonInterface$393{
  external factory AnonInterface$393({required PerformanceNavigation prototype, required num TYPE_NAVIGATE, required num TYPE_RELOAD, required num TYPE_BACK_FORWARD, required num TYPE_RESERVED});
}
extension AnonInterface$393Extension on AnonInterface$393 {
  external PerformanceNavigation get prototype;
  external set prototype(PerformanceNavigation value);
  external num get TYPE_NAVIGATE;
  external num get TYPE_RELOAD;
  external num get TYPE_BACK_FORWARD;
  external num get TYPE_RESERVED;
}
@JS()
@anonymous
class AnonInterface$394{
  external factory AnonInterface$394({required PerformanceNavigationTiming prototype});
}
extension AnonInterface$394Extension on AnonInterface$394 {
  external PerformanceNavigationTiming get prototype;
  external set prototype(PerformanceNavigationTiming value);
}
@JS()
@anonymous
class AnonInterface$395{
  external factory AnonInterface$395({required PerformanceObserver prototype, required ReadonlyArray<String> supportedEntryTypes});
}
extension AnonInterface$395Extension on AnonInterface$395 {
  external PerformanceObserver get prototype;
  external set prototype(PerformanceObserver value);
  external ReadonlyArray<String> get supportedEntryTypes;
}
@JS()
@anonymous
class AnonInterface$396{
  external factory AnonInterface$396({required PerformanceObserverEntryList prototype});
}
extension AnonInterface$396Extension on AnonInterface$396 {
  external PerformanceObserverEntryList get prototype;
  external set prototype(PerformanceObserverEntryList value);
}
@JS()
@anonymous
class AnonInterface$397{
  external factory AnonInterface$397({required PerformancePaintTiming prototype});
}
extension AnonInterface$397Extension on AnonInterface$397 {
  external PerformancePaintTiming get prototype;
  external set prototype(PerformancePaintTiming value);
}
@JS()
@anonymous
class AnonInterface$398{
  external factory AnonInterface$398({required PerformanceResourceTiming prototype});
}
extension AnonInterface$398Extension on AnonInterface$398 {
  external PerformanceResourceTiming get prototype;
  external set prototype(PerformanceResourceTiming value);
}
@JS()
@anonymous
class AnonInterface$399{
  external factory AnonInterface$399({required PerformanceServerTiming prototype});
}
extension AnonInterface$399Extension on AnonInterface$399 {
  external PerformanceServerTiming get prototype;
  external set prototype(PerformanceServerTiming value);
}
@JS()
@anonymous
class AnonInterface$400{
  external factory AnonInterface$400({required PerformanceTiming prototype});
}
extension AnonInterface$400Extension on AnonInterface$400 {
  external PerformanceTiming get prototype;
  external set prototype(PerformanceTiming value);
}
@JS()
@anonymous
class AnonInterface$401{
  external factory AnonInterface$401({required PeriodicWave prototype});
}
extension AnonInterface$401Extension on AnonInterface$401 {
  external PeriodicWave get prototype;
  external set prototype(PeriodicWave value);
}
@JS()
@anonymous
class AnonInterface$402{
  external factory AnonInterface$402({required PermissionStatus prototype});
}
extension AnonInterface$402Extension on AnonInterface$402 {
  external PermissionStatus get prototype;
  external set prototype(PermissionStatus value);
}
@JS()
@anonymous
class AnonInterface$403{
  external factory AnonInterface$403({required Permissions prototype});
}
extension AnonInterface$403Extension on AnonInterface$403 {
  external Permissions get prototype;
  external set prototype(Permissions value);
}
@JS()
@anonymous
class AnonInterface$404{
  external factory AnonInterface$404({required PictureInPictureEvent prototype});
}
extension AnonInterface$404Extension on AnonInterface$404 {
  external PictureInPictureEvent get prototype;
  external set prototype(PictureInPictureEvent value);
}
@JS()
@anonymous
class AnonInterface$405{
  external factory AnonInterface$405({required PictureInPictureWindow prototype});
}
extension AnonInterface$405Extension on AnonInterface$405 {
  external PictureInPictureWindow get prototype;
  external set prototype(PictureInPictureWindow value);
}
@JS()
@anonymous
class AnonInterface$406{
  external factory AnonInterface$406({required Plugin prototype});
}
extension AnonInterface$406Extension on AnonInterface$406 {
  external Plugin get prototype;
  external set prototype(Plugin value);
}
@JS()
@anonymous
class AnonInterface$407{
  external factory AnonInterface$407({required PluginArray prototype});
}
extension AnonInterface$407Extension on AnonInterface$407 {
  external PluginArray get prototype;
  external set prototype(PluginArray value);
}
@JS()
@anonymous
class AnonInterface$408{
  external factory AnonInterface$408({required PointerEvent prototype});
}
extension AnonInterface$408Extension on AnonInterface$408 {
  external PointerEvent get prototype;
  external set prototype(PointerEvent value);
}
@JS()
@anonymous
class AnonInterface$409{
  external factory AnonInterface$409({required PopStateEvent prototype});
}
extension AnonInterface$409Extension on AnonInterface$409 {
  external PopStateEvent get prototype;
  external set prototype(PopStateEvent value);
}
@JS()
@anonymous
class AnonInterface$410{
  external factory AnonInterface$410({required ProcessingInstruction prototype});
}
extension AnonInterface$410Extension on AnonInterface$410 {
  external ProcessingInstruction get prototype;
  external set prototype(ProcessingInstruction value);
}
@JS()
@anonymous
class AnonInterface$411{
  external factory AnonInterface$411({required ProgressEvent prototype});
}
extension AnonInterface$411Extension on AnonInterface$411 {
  external ProgressEvent get prototype;
  external set prototype(ProgressEvent value);
}
@JS()
@anonymous
class AnonInterface$412{
  external factory AnonInterface$412({required PromiseRejectionEvent prototype});
}
extension AnonInterface$412Extension on AnonInterface$412 {
  external PromiseRejectionEvent get prototype;
  external set prototype(PromiseRejectionEvent value);
}
@JS()
@anonymous
class AnonInterface$413{
  external factory AnonInterface$413({required PublicKeyCredential prototype});
}
extension AnonInterface$413Extension on AnonInterface$413 {
  external PublicKeyCredential get prototype;
  external set prototype(PublicKeyCredential value);
  @JS("getClientCapabilities")
  external Future<PublicKeyCredentialClientCapabilities> getClientCapabilities();
  @JS("isConditionalMediationAvailable")
  external Future<bool> isConditionalMediationAvailable();
  @JS("isUserVerifyingPlatformAuthenticatorAvailable")
  external Future<bool> isUserVerifyingPlatformAuthenticatorAvailable();
  @JS("parseCreationOptionsFromJSON")
  external PublicKeyCredentialCreationOptions parseCreationOptionsFromJSON(PublicKeyCredentialCreationOptionsJSON options);
  @JS("parseRequestOptionsFromJSON")
  external PublicKeyCredentialRequestOptions parseRequestOptionsFromJSON(PublicKeyCredentialRequestOptionsJSON options);
}
@JS()
@anonymous
class AnonInterface$414{
  external factory AnonInterface$414({required PushManager prototype, required ReadonlyArray<String> supportedContentEncodings});
}
extension AnonInterface$414Extension on AnonInterface$414 {
  external PushManager get prototype;
  external set prototype(PushManager value);
  external ReadonlyArray<String> get supportedContentEncodings;
}
@JS()
@anonymous
class AnonInterface$415{
  external factory AnonInterface$415({required PushSubscription prototype});
}
extension AnonInterface$415Extension on AnonInterface$415 {
  external PushSubscription get prototype;
  external set prototype(PushSubscription value);
}
@JS()
@anonymous
class AnonInterface$416{
  external factory AnonInterface$416({required PushSubscriptionOptions prototype});
}
extension AnonInterface$416Extension on AnonInterface$416 {
  external PushSubscriptionOptions get prototype;
  external set prototype(PushSubscriptionOptions value);
}
@JS()
@anonymous
class AnonInterface$417{
  external factory AnonInterface$417({required RTCCertificate prototype});
}
extension AnonInterface$417Extension on AnonInterface$417 {
  external RTCCertificate get prototype;
  external set prototype(RTCCertificate value);
}
@JS()
@anonymous
class AnonInterface$418{
  external factory AnonInterface$418({required RTCDTMFSender prototype});
}
extension AnonInterface$418Extension on AnonInterface$418 {
  external RTCDTMFSender get prototype;
  external set prototype(RTCDTMFSender value);
}
@JS()
@anonymous
class AnonInterface$419{
  external factory AnonInterface$419({required RTCDTMFToneChangeEvent prototype});
}
extension AnonInterface$419Extension on AnonInterface$419 {
  external RTCDTMFToneChangeEvent get prototype;
  external set prototype(RTCDTMFToneChangeEvent value);
}
@JS()
@anonymous
class AnonInterface$420{
  external factory AnonInterface$420({required RTCDataChannel prototype});
}
extension AnonInterface$420Extension on AnonInterface$420 {
  external RTCDataChannel get prototype;
  external set prototype(RTCDataChannel value);
}
@JS()
@anonymous
class AnonInterface$421{
  external factory AnonInterface$421({required RTCDataChannelEvent prototype});
}
extension AnonInterface$421Extension on AnonInterface$421 {
  external RTCDataChannelEvent get prototype;
  external set prototype(RTCDataChannelEvent value);
}
@JS()
@anonymous
class AnonInterface$422{
  external factory AnonInterface$422({required RTCDtlsTransport prototype});
}
extension AnonInterface$422Extension on AnonInterface$422 {
  external RTCDtlsTransport get prototype;
  external set prototype(RTCDtlsTransport value);
}
@JS()
@anonymous
class AnonInterface$423{
  external factory AnonInterface$423({required RTCEncodedAudioFrame prototype});
}
extension AnonInterface$423Extension on AnonInterface$423 {
  external RTCEncodedAudioFrame get prototype;
  external set prototype(RTCEncodedAudioFrame value);
}
@JS()
@anonymous
class AnonInterface$424{
  external factory AnonInterface$424({required RTCEncodedVideoFrame prototype});
}
extension AnonInterface$424Extension on AnonInterface$424 {
  external RTCEncodedVideoFrame get prototype;
  external set prototype(RTCEncodedVideoFrame value);
}
@JS()
@anonymous
class AnonInterface$425{
  external factory AnonInterface$425({required RTCError prototype});
}
extension AnonInterface$425Extension on AnonInterface$425 {
  external RTCError get prototype;
  external set prototype(RTCError value);
}
@JS()
@anonymous
class AnonInterface$426{
  external factory AnonInterface$426({required RTCErrorEvent prototype});
}
extension AnonInterface$426Extension on AnonInterface$426 {
  external RTCErrorEvent get prototype;
  external set prototype(RTCErrorEvent value);
}
@JS()
@anonymous
class AnonInterface$427{
  external factory AnonInterface$427({required RTCIceCandidate prototype});
}
extension AnonInterface$427Extension on AnonInterface$427 {
  external RTCIceCandidate get prototype;
  external set prototype(RTCIceCandidate value);
}
@JS()
@anonymous
class AnonInterface$428{
  external factory AnonInterface$428({required RTCIceTransport prototype});
}
extension AnonInterface$428Extension on AnonInterface$428 {
  external RTCIceTransport get prototype;
  external set prototype(RTCIceTransport value);
}
@JS()
@anonymous
class AnonInterface$429{
  external factory AnonInterface$429({required RTCPeerConnection prototype});
}
extension AnonInterface$429Extension on AnonInterface$429 {
  external RTCPeerConnection get prototype;
  external set prototype(RTCPeerConnection value);
  @JS("generateCertificate")
  external Future<RTCCertificate> generateCertificate(AlgorithmIdentifier keygenAlgorithm);
}
@JS()
@anonymous
class AnonInterface$430{
  external factory AnonInterface$430({required RTCPeerConnectionIceErrorEvent prototype});
}
extension AnonInterface$430Extension on AnonInterface$430 {
  external RTCPeerConnectionIceErrorEvent get prototype;
  external set prototype(RTCPeerConnectionIceErrorEvent value);
}
@JS()
@anonymous
class AnonInterface$431{
  external factory AnonInterface$431({required RTCPeerConnectionIceEvent prototype});
}
extension AnonInterface$431Extension on AnonInterface$431 {
  external RTCPeerConnectionIceEvent get prototype;
  external set prototype(RTCPeerConnectionIceEvent value);
}
@JS()
@anonymous
class AnonInterface$432{
  external factory AnonInterface$432({required RTCRtpReceiver prototype});
}
extension AnonInterface$432Extension on AnonInterface$432 {
  external RTCRtpReceiver get prototype;
  external set prototype(RTCRtpReceiver value);
  @JS("getCapabilities")
  external RTCRtpCapabilities? getCapabilities(String kind);
}
@JS()
@anonymous
class AnonInterface$433{
  external factory AnonInterface$433({required RTCRtpScriptTransform prototype});
}
extension AnonInterface$433Extension on AnonInterface$433 {
  external RTCRtpScriptTransform get prototype;
  external set prototype(RTCRtpScriptTransform value);
}
@JS()
@anonymous
class AnonInterface$434{
  external factory AnonInterface$434({required RTCRtpSender prototype});
}
extension AnonInterface$434Extension on AnonInterface$434 {
  external RTCRtpSender get prototype;
  external set prototype(RTCRtpSender value);
  @JS("getCapabilities")
  external RTCRtpCapabilities? getCapabilities(String kind);
}
@JS()
@anonymous
class AnonInterface$435{
  external factory AnonInterface$435({required RTCRtpTransceiver prototype});
}
extension AnonInterface$435Extension on AnonInterface$435 {
  external RTCRtpTransceiver get prototype;
  external set prototype(RTCRtpTransceiver value);
}
@JS()
@anonymous
class AnonInterface$436{
  external factory AnonInterface$436({required RTCSctpTransport prototype});
}
extension AnonInterface$436Extension on AnonInterface$436 {
  external RTCSctpTransport get prototype;
  external set prototype(RTCSctpTransport value);
}
@JS()
@anonymous
class AnonInterface$437{
  external factory AnonInterface$437({required RTCSessionDescription prototype});
}
extension AnonInterface$437Extension on AnonInterface$437 {
  external RTCSessionDescription get prototype;
  external set prototype(RTCSessionDescription value);
}
@JS()
@anonymous
class AnonInterface$438{
  external factory AnonInterface$438({required RTCStatsReport prototype});
}
extension AnonInterface$438Extension on AnonInterface$438 {
  external RTCStatsReport get prototype;
  external set prototype(RTCStatsReport value);
}
@JS()
@anonymous
class AnonInterface$439{
  external factory AnonInterface$439({required RTCTrackEvent prototype});
}
extension AnonInterface$439Extension on AnonInterface$439 {
  external RTCTrackEvent get prototype;
  external set prototype(RTCTrackEvent value);
}
@JS()
@anonymous
class AnonInterface$440{
  external factory AnonInterface$440({required RadioNodeList prototype});
}
extension AnonInterface$440Extension on AnonInterface$440 {
  external RadioNodeList get prototype;
  external set prototype(RadioNodeList value);
}
@JS()
@anonymous
class AnonInterface$441{
  external factory AnonInterface$441({required Range prototype, required num START_TO_START, required num START_TO_END, required num END_TO_END, required num END_TO_START});
}
extension AnonInterface$441Extension on AnonInterface$441 {
  external Range get prototype;
  external set prototype(Range value);
  external num get START_TO_START;
  external num get START_TO_END;
  external num get END_TO_END;
  external num get END_TO_START;
}
@JS()
@anonymous
class AnonInterface$442{
  external factory AnonInterface$442({required ReadableByteStreamController prototype});
}
extension AnonInterface$442Extension on AnonInterface$442 {
  external ReadableByteStreamController get prototype;
  external set prototype(ReadableByteStreamController value);
}
@JS()
@anonymous
class AnonInterface$445{
  external factory AnonInterface$445({required ReadableStream prototype});
}
extension AnonInterface$445Extension on AnonInterface$445 {
  external ReadableStream get prototype;
  external set prototype(ReadableStream value);
}
@JS()
@anonymous
class AnonInterface$446{
  external factory AnonInterface$446({required ReadableStreamBYOBReader prototype});
}
extension AnonInterface$446Extension on AnonInterface$446 {
  external ReadableStreamBYOBReader get prototype;
  external set prototype(ReadableStreamBYOBReader value);
}
@JS()
@anonymous
class AnonInterface$447{
  external factory AnonInterface$447({required ReadableStreamBYOBRequest prototype});
}
extension AnonInterface$447Extension on AnonInterface$447 {
  external ReadableStreamBYOBRequest get prototype;
  external set prototype(ReadableStreamBYOBRequest value);
}
@JS()
@anonymous
class AnonInterface$448{
  external factory AnonInterface$448({required ReadableStreamDefaultController prototype});
}
extension AnonInterface$448Extension on AnonInterface$448 {
  external ReadableStreamDefaultController get prototype;
  external set prototype(ReadableStreamDefaultController value);
}
@JS()
@anonymous
class AnonInterface$449{
  external factory AnonInterface$449({required ReadableStreamDefaultReader prototype});
}
extension AnonInterface$449Extension on AnonInterface$449 {
  external ReadableStreamDefaultReader get prototype;
  external set prototype(ReadableStreamDefaultReader value);
}
@JS()
@anonymous
class AnonInterface$450{
  external factory AnonInterface$450({required RemotePlayback prototype});
}
extension AnonInterface$450Extension on AnonInterface$450 {
  external RemotePlayback get prototype;
  external set prototype(RemotePlayback value);
}
@JS()
@anonymous
class AnonInterface$451{
  external factory AnonInterface$451({required Report prototype});
}
extension AnonInterface$451Extension on AnonInterface$451 {
  external Report get prototype;
  external set prototype(Report value);
}
@JS()
@anonymous
class AnonInterface$452{
  external factory AnonInterface$452({required ReportBody prototype});
}
extension AnonInterface$452Extension on AnonInterface$452 {
  external ReportBody get prototype;
  external set prototype(ReportBody value);
}
@JS()
@anonymous
class AnonInterface$453{
  external factory AnonInterface$453({required ReportingObserver prototype});
}
extension AnonInterface$453Extension on AnonInterface$453 {
  external ReportingObserver get prototype;
  external set prototype(ReportingObserver value);
}
@JS()
@anonymous
class AnonInterface$454{
  external factory AnonInterface$454({required Request prototype});
}
extension AnonInterface$454Extension on AnonInterface$454 {
  external Request get prototype;
  external set prototype(Request value);
}
@JS()
@anonymous
class AnonInterface$455{
  external factory AnonInterface$455({required ResizeObserver prototype});
}
extension AnonInterface$455Extension on AnonInterface$455 {
  external ResizeObserver get prototype;
  external set prototype(ResizeObserver value);
}
@JS()
@anonymous
class AnonInterface$456{
  external factory AnonInterface$456({required ResizeObserverEntry prototype});
}
extension AnonInterface$456Extension on AnonInterface$456 {
  external ResizeObserverEntry get prototype;
  external set prototype(ResizeObserverEntry value);
}
@JS()
@anonymous
class AnonInterface$457{
  external factory AnonInterface$457({required ResizeObserverSize prototype});
}
extension AnonInterface$457Extension on AnonInterface$457 {
  external ResizeObserverSize get prototype;
  external set prototype(ResizeObserverSize value);
}
@JS()
@anonymous
class AnonInterface$458{
  external factory AnonInterface$458({required Response prototype});
}
extension AnonInterface$458Extension on AnonInterface$458 {
  external Response get prototype;
  external set prototype(Response value);
  @JS("error")
  external Response error();
  @JS("json")
  external Response json(dynamic data, [ResponseInit init]);
  @JS("redirect")
  external Response redirect(dynamic /* String|URL */ url, [num status]);
}
@JS()
@anonymous
class AnonInterface$459{
  external factory AnonInterface$459({required SVGAElement prototype});
}
extension AnonInterface$459Extension on AnonInterface$459 {
  external SVGAElement get prototype;
  external set prototype(SVGAElement value);
}
@JS()
@anonymous
class AnonInterface$460{
  external factory AnonInterface$460({required SVGAngle prototype, required num SVG_ANGLETYPE_UNKNOWN, required num SVG_ANGLETYPE_UNSPECIFIED, required num SVG_ANGLETYPE_DEG, required num SVG_ANGLETYPE_RAD, required num SVG_ANGLETYPE_GRAD});
}
extension AnonInterface$460Extension on AnonInterface$460 {
  external SVGAngle get prototype;
  external set prototype(SVGAngle value);
  external num get SVG_ANGLETYPE_UNKNOWN;
  external num get SVG_ANGLETYPE_UNSPECIFIED;
  external num get SVG_ANGLETYPE_DEG;
  external num get SVG_ANGLETYPE_RAD;
  external num get SVG_ANGLETYPE_GRAD;
}
@JS()
@anonymous
class AnonInterface$461{
  external factory AnonInterface$461({required SVGAnimateElement prototype});
}
extension AnonInterface$461Extension on AnonInterface$461 {
  external SVGAnimateElement get prototype;
  external set prototype(SVGAnimateElement value);
}
@JS()
@anonymous
class AnonInterface$462{
  external factory AnonInterface$462({required SVGAnimateMotionElement prototype});
}
extension AnonInterface$462Extension on AnonInterface$462 {
  external SVGAnimateMotionElement get prototype;
  external set prototype(SVGAnimateMotionElement value);
}
@JS()
@anonymous
class AnonInterface$463{
  external factory AnonInterface$463({required SVGAnimateTransformElement prototype});
}
extension AnonInterface$463Extension on AnonInterface$463 {
  external SVGAnimateTransformElement get prototype;
  external set prototype(SVGAnimateTransformElement value);
}
@JS()
@anonymous
class AnonInterface$464{
  external factory AnonInterface$464({required SVGAnimatedAngle prototype});
}
extension AnonInterface$464Extension on AnonInterface$464 {
  external SVGAnimatedAngle get prototype;
  external set prototype(SVGAnimatedAngle value);
}
@JS()
@anonymous
class AnonInterface$465{
  external factory AnonInterface$465({required SVGAnimatedBoolean prototype});
}
extension AnonInterface$465Extension on AnonInterface$465 {
  external SVGAnimatedBoolean get prototype;
  external set prototype(SVGAnimatedBoolean value);
}
@JS()
@anonymous
class AnonInterface$466{
  external factory AnonInterface$466({required SVGAnimatedEnumeration prototype});
}
extension AnonInterface$466Extension on AnonInterface$466 {
  external SVGAnimatedEnumeration get prototype;
  external set prototype(SVGAnimatedEnumeration value);
}
@JS()
@anonymous
class AnonInterface$467{
  external factory AnonInterface$467({required SVGAnimatedInteger prototype});
}
extension AnonInterface$467Extension on AnonInterface$467 {
  external SVGAnimatedInteger get prototype;
  external set prototype(SVGAnimatedInteger value);
}
@JS()
@anonymous
class AnonInterface$468{
  external factory AnonInterface$468({required SVGAnimatedLength prototype});
}
extension AnonInterface$468Extension on AnonInterface$468 {
  external SVGAnimatedLength get prototype;
  external set prototype(SVGAnimatedLength value);
}
@JS()
@anonymous
class AnonInterface$469{
  external factory AnonInterface$469({required SVGAnimatedLengthList prototype});
}
extension AnonInterface$469Extension on AnonInterface$469 {
  external SVGAnimatedLengthList get prototype;
  external set prototype(SVGAnimatedLengthList value);
}
@JS()
@anonymous
class AnonInterface$470{
  external factory AnonInterface$470({required SVGAnimatedNumber prototype});
}
extension AnonInterface$470Extension on AnonInterface$470 {
  external SVGAnimatedNumber get prototype;
  external set prototype(SVGAnimatedNumber value);
}
@JS()
@anonymous
class AnonInterface$471{
  external factory AnonInterface$471({required SVGAnimatedNumberList prototype});
}
extension AnonInterface$471Extension on AnonInterface$471 {
  external SVGAnimatedNumberList get prototype;
  external set prototype(SVGAnimatedNumberList value);
}
@JS()
@anonymous
class AnonInterface$472{
  external factory AnonInterface$472({required SVGAnimatedPreserveAspectRatio prototype});
}
extension AnonInterface$472Extension on AnonInterface$472 {
  external SVGAnimatedPreserveAspectRatio get prototype;
  external set prototype(SVGAnimatedPreserveAspectRatio value);
}
@JS()
@anonymous
class AnonInterface$473{
  external factory AnonInterface$473({required SVGAnimatedRect prototype});
}
extension AnonInterface$473Extension on AnonInterface$473 {
  external SVGAnimatedRect get prototype;
  external set prototype(SVGAnimatedRect value);
}
@JS()
@anonymous
class AnonInterface$474{
  external factory AnonInterface$474({required SVGAnimatedString prototype});
}
extension AnonInterface$474Extension on AnonInterface$474 {
  external SVGAnimatedString get prototype;
  external set prototype(SVGAnimatedString value);
}
@JS()
@anonymous
class AnonInterface$475{
  external factory AnonInterface$475({required SVGAnimatedTransformList prototype});
}
extension AnonInterface$475Extension on AnonInterface$475 {
  external SVGAnimatedTransformList get prototype;
  external set prototype(SVGAnimatedTransformList value);
}
@JS()
@anonymous
class AnonInterface$476{
  external factory AnonInterface$476({required SVGAnimationElement prototype});
}
extension AnonInterface$476Extension on AnonInterface$476 {
  external SVGAnimationElement get prototype;
  external set prototype(SVGAnimationElement value);
}
@JS()
@anonymous
class AnonInterface$477{
  external factory AnonInterface$477({required SVGCircleElement prototype});
}
extension AnonInterface$477Extension on AnonInterface$477 {
  external SVGCircleElement get prototype;
  external set prototype(SVGCircleElement value);
}
@JS()
@anonymous
class AnonInterface$478{
  external factory AnonInterface$478({required SVGClipPathElement prototype});
}
extension AnonInterface$478Extension on AnonInterface$478 {
  external SVGClipPathElement get prototype;
  external set prototype(SVGClipPathElement value);
}
@JS()
@anonymous
class AnonInterface$479{
  external factory AnonInterface$479({required SVGComponentTransferFunctionElement prototype, required num SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN, required num SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY, required num SVG_FECOMPONENTTRANSFER_TYPE_TABLE, required num SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE, required num SVG_FECOMPONENTTRANSFER_TYPE_LINEAR, required num SVG_FECOMPONENTTRANSFER_TYPE_GAMMA});
}
extension AnonInterface$479Extension on AnonInterface$479 {
  external SVGComponentTransferFunctionElement get prototype;
  external set prototype(SVGComponentTransferFunctionElement value);
  external num get SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN;
  external num get SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY;
  external num get SVG_FECOMPONENTTRANSFER_TYPE_TABLE;
  external num get SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE;
  external num get SVG_FECOMPONENTTRANSFER_TYPE_LINEAR;
  external num get SVG_FECOMPONENTTRANSFER_TYPE_GAMMA;
}
@JS()
@anonymous
class AnonInterface$480{
  external factory AnonInterface$480({required SVGDefsElement prototype});
}
extension AnonInterface$480Extension on AnonInterface$480 {
  external SVGDefsElement get prototype;
  external set prototype(SVGDefsElement value);
}
@JS()
@anonymous
class AnonInterface$481{
  external factory AnonInterface$481({required SVGDescElement prototype});
}
extension AnonInterface$481Extension on AnonInterface$481 {
  external SVGDescElement get prototype;
  external set prototype(SVGDescElement value);
}
@JS()
@anonymous
class AnonInterface$482{
  external factory AnonInterface$482({required SVGElement prototype});
}
extension AnonInterface$482Extension on AnonInterface$482 {
  external SVGElement get prototype;
  external set prototype(SVGElement value);
}
@JS()
@anonymous
class AnonInterface$483{
  external factory AnonInterface$483({required SVGEllipseElement prototype});
}
extension AnonInterface$483Extension on AnonInterface$483 {
  external SVGEllipseElement get prototype;
  external set prototype(SVGEllipseElement value);
}
@JS()
@anonymous
class AnonInterface$484{
  external factory AnonInterface$484({required SVGFEBlendElement prototype, required num SVG_FEBLEND_MODE_UNKNOWN, required num SVG_FEBLEND_MODE_NORMAL, required num SVG_FEBLEND_MODE_MULTIPLY, required num SVG_FEBLEND_MODE_SCREEN, required num SVG_FEBLEND_MODE_DARKEN, required num SVG_FEBLEND_MODE_LIGHTEN, required num SVG_FEBLEND_MODE_OVERLAY, required num SVG_FEBLEND_MODE_COLOR_DODGE, required num SVG_FEBLEND_MODE_COLOR_BURN, required num SVG_FEBLEND_MODE_HARD_LIGHT, required num SVG_FEBLEND_MODE_SOFT_LIGHT, required num SVG_FEBLEND_MODE_DIFFERENCE, required num SVG_FEBLEND_MODE_EXCLUSION, required num SVG_FEBLEND_MODE_HUE, required num SVG_FEBLEND_MODE_SATURATION, required num SVG_FEBLEND_MODE_COLOR, required num SVG_FEBLEND_MODE_LUMINOSITY});
}
extension AnonInterface$484Extension on AnonInterface$484 {
  external SVGFEBlendElement get prototype;
  external set prototype(SVGFEBlendElement value);
  external num get SVG_FEBLEND_MODE_UNKNOWN;
  external num get SVG_FEBLEND_MODE_NORMAL;
  external num get SVG_FEBLEND_MODE_MULTIPLY;
  external num get SVG_FEBLEND_MODE_SCREEN;
  external num get SVG_FEBLEND_MODE_DARKEN;
  external num get SVG_FEBLEND_MODE_LIGHTEN;
  external num get SVG_FEBLEND_MODE_OVERLAY;
  external num get SVG_FEBLEND_MODE_COLOR_DODGE;
  external num get SVG_FEBLEND_MODE_COLOR_BURN;
  external num get SVG_FEBLEND_MODE_HARD_LIGHT;
  external num get SVG_FEBLEND_MODE_SOFT_LIGHT;
  external num get SVG_FEBLEND_MODE_DIFFERENCE;
  external num get SVG_FEBLEND_MODE_EXCLUSION;
  external num get SVG_FEBLEND_MODE_HUE;
  external num get SVG_FEBLEND_MODE_SATURATION;
  external num get SVG_FEBLEND_MODE_COLOR;
  external num get SVG_FEBLEND_MODE_LUMINOSITY;
}
@JS()
@anonymous
class AnonInterface$485{
  external factory AnonInterface$485({required SVGFEColorMatrixElement prototype, required num SVG_FECOLORMATRIX_TYPE_UNKNOWN, required num SVG_FECOLORMATRIX_TYPE_MATRIX, required num SVG_FECOLORMATRIX_TYPE_SATURATE, required num SVG_FECOLORMATRIX_TYPE_HUEROTATE, required num SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA});
}
extension AnonInterface$485Extension on AnonInterface$485 {
  external SVGFEColorMatrixElement get prototype;
  external set prototype(SVGFEColorMatrixElement value);
  external num get SVG_FECOLORMATRIX_TYPE_UNKNOWN;
  external num get SVG_FECOLORMATRIX_TYPE_MATRIX;
  external num get SVG_FECOLORMATRIX_TYPE_SATURATE;
  external num get SVG_FECOLORMATRIX_TYPE_HUEROTATE;
  external num get SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA;
}
@JS()
@anonymous
class AnonInterface$486{
  external factory AnonInterface$486({required SVGFEComponentTransferElement prototype});
}
extension AnonInterface$486Extension on AnonInterface$486 {
  external SVGFEComponentTransferElement get prototype;
  external set prototype(SVGFEComponentTransferElement value);
}
@JS()
@anonymous
class AnonInterface$487{
  external factory AnonInterface$487({required SVGFECompositeElement prototype, required num SVG_FECOMPOSITE_OPERATOR_UNKNOWN, required num SVG_FECOMPOSITE_OPERATOR_OVER, required num SVG_FECOMPOSITE_OPERATOR_IN, required num SVG_FECOMPOSITE_OPERATOR_OUT, required num SVG_FECOMPOSITE_OPERATOR_ATOP, required num SVG_FECOMPOSITE_OPERATOR_XOR, required num SVG_FECOMPOSITE_OPERATOR_ARITHMETIC});
}
extension AnonInterface$487Extension on AnonInterface$487 {
  external SVGFECompositeElement get prototype;
  external set prototype(SVGFECompositeElement value);
  external num get SVG_FECOMPOSITE_OPERATOR_UNKNOWN;
  external num get SVG_FECOMPOSITE_OPERATOR_OVER;
  external num get SVG_FECOMPOSITE_OPERATOR_IN;
  external num get SVG_FECOMPOSITE_OPERATOR_OUT;
  external num get SVG_FECOMPOSITE_OPERATOR_ATOP;
  external num get SVG_FECOMPOSITE_OPERATOR_XOR;
  external num get SVG_FECOMPOSITE_OPERATOR_ARITHMETIC;
}
@JS()
@anonymous
class AnonInterface$488{
  external factory AnonInterface$488({required SVGFEConvolveMatrixElement prototype, required num SVG_EDGEMODE_UNKNOWN, required num SVG_EDGEMODE_DUPLICATE, required num SVG_EDGEMODE_WRAP, required num SVG_EDGEMODE_NONE});
}
extension AnonInterface$488Extension on AnonInterface$488 {
  external SVGFEConvolveMatrixElement get prototype;
  external set prototype(SVGFEConvolveMatrixElement value);
  external num get SVG_EDGEMODE_UNKNOWN;
  external num get SVG_EDGEMODE_DUPLICATE;
  external num get SVG_EDGEMODE_WRAP;
  external num get SVG_EDGEMODE_NONE;
}
@JS()
@anonymous
class AnonInterface$489{
  external factory AnonInterface$489({required SVGFEDiffuseLightingElement prototype});
}
extension AnonInterface$489Extension on AnonInterface$489 {
  external SVGFEDiffuseLightingElement get prototype;
  external set prototype(SVGFEDiffuseLightingElement value);
}
@JS()
@anonymous
class AnonInterface$490{
  external factory AnonInterface$490({required SVGFEDisplacementMapElement prototype, required num SVG_CHANNEL_UNKNOWN, required num SVG_CHANNEL_R, required num SVG_CHANNEL_G, required num SVG_CHANNEL_B, required num SVG_CHANNEL_A});
}
extension AnonInterface$490Extension on AnonInterface$490 {
  external SVGFEDisplacementMapElement get prototype;
  external set prototype(SVGFEDisplacementMapElement value);
  external num get SVG_CHANNEL_UNKNOWN;
  external num get SVG_CHANNEL_R;
  external num get SVG_CHANNEL_G;
  external num get SVG_CHANNEL_B;
  external num get SVG_CHANNEL_A;
}
@JS()
@anonymous
class AnonInterface$491{
  external factory AnonInterface$491({required SVGFEDistantLightElement prototype});
}
extension AnonInterface$491Extension on AnonInterface$491 {
  external SVGFEDistantLightElement get prototype;
  external set prototype(SVGFEDistantLightElement value);
}
@JS()
@anonymous
class AnonInterface$492{
  external factory AnonInterface$492({required SVGFEDropShadowElement prototype});
}
extension AnonInterface$492Extension on AnonInterface$492 {
  external SVGFEDropShadowElement get prototype;
  external set prototype(SVGFEDropShadowElement value);
}
@JS()
@anonymous
class AnonInterface$493{
  external factory AnonInterface$493({required SVGFEFloodElement prototype});
}
extension AnonInterface$493Extension on AnonInterface$493 {
  external SVGFEFloodElement get prototype;
  external set prototype(SVGFEFloodElement value);
}
@JS()
@anonymous
class AnonInterface$494{
  external factory AnonInterface$494({required SVGFEFuncAElement prototype});
}
extension AnonInterface$494Extension on AnonInterface$494 {
  external SVGFEFuncAElement get prototype;
  external set prototype(SVGFEFuncAElement value);
}
@JS()
@anonymous
class AnonInterface$495{
  external factory AnonInterface$495({required SVGFEFuncBElement prototype});
}
extension AnonInterface$495Extension on AnonInterface$495 {
  external SVGFEFuncBElement get prototype;
  external set prototype(SVGFEFuncBElement value);
}
@JS()
@anonymous
class AnonInterface$496{
  external factory AnonInterface$496({required SVGFEFuncGElement prototype});
}
extension AnonInterface$496Extension on AnonInterface$496 {
  external SVGFEFuncGElement get prototype;
  external set prototype(SVGFEFuncGElement value);
}
@JS()
@anonymous
class AnonInterface$497{
  external factory AnonInterface$497({required SVGFEFuncRElement prototype});
}
extension AnonInterface$497Extension on AnonInterface$497 {
  external SVGFEFuncRElement get prototype;
  external set prototype(SVGFEFuncRElement value);
}
@JS()
@anonymous
class AnonInterface$498{
  external factory AnonInterface$498({required SVGFEGaussianBlurElement prototype});
}
extension AnonInterface$498Extension on AnonInterface$498 {
  external SVGFEGaussianBlurElement get prototype;
  external set prototype(SVGFEGaussianBlurElement value);
}
@JS()
@anonymous
class AnonInterface$499{
  external factory AnonInterface$499({required SVGFEImageElement prototype});
}
extension AnonInterface$499Extension on AnonInterface$499 {
  external SVGFEImageElement get prototype;
  external set prototype(SVGFEImageElement value);
}
@JS()
@anonymous
class AnonInterface$500{
  external factory AnonInterface$500({required SVGFEMergeElement prototype});
}
extension AnonInterface$500Extension on AnonInterface$500 {
  external SVGFEMergeElement get prototype;
  external set prototype(SVGFEMergeElement value);
}
@JS()
@anonymous
class AnonInterface$501{
  external factory AnonInterface$501({required SVGFEMergeNodeElement prototype});
}
extension AnonInterface$501Extension on AnonInterface$501 {
  external SVGFEMergeNodeElement get prototype;
  external set prototype(SVGFEMergeNodeElement value);
}
@JS()
@anonymous
class AnonInterface$502{
  external factory AnonInterface$502({required SVGFEMorphologyElement prototype, required num SVG_MORPHOLOGY_OPERATOR_UNKNOWN, required num SVG_MORPHOLOGY_OPERATOR_ERODE, required num SVG_MORPHOLOGY_OPERATOR_DILATE});
}
extension AnonInterface$502Extension on AnonInterface$502 {
  external SVGFEMorphologyElement get prototype;
  external set prototype(SVGFEMorphologyElement value);
  external num get SVG_MORPHOLOGY_OPERATOR_UNKNOWN;
  external num get SVG_MORPHOLOGY_OPERATOR_ERODE;
  external num get SVG_MORPHOLOGY_OPERATOR_DILATE;
}
@JS()
@anonymous
class AnonInterface$503{
  external factory AnonInterface$503({required SVGFEOffsetElement prototype});
}
extension AnonInterface$503Extension on AnonInterface$503 {
  external SVGFEOffsetElement get prototype;
  external set prototype(SVGFEOffsetElement value);
}
@JS()
@anonymous
class AnonInterface$504{
  external factory AnonInterface$504({required SVGFEPointLightElement prototype});
}
extension AnonInterface$504Extension on AnonInterface$504 {
  external SVGFEPointLightElement get prototype;
  external set prototype(SVGFEPointLightElement value);
}
@JS()
@anonymous
class AnonInterface$505{
  external factory AnonInterface$505({required SVGFESpecularLightingElement prototype});
}
extension AnonInterface$505Extension on AnonInterface$505 {
  external SVGFESpecularLightingElement get prototype;
  external set prototype(SVGFESpecularLightingElement value);
}
@JS()
@anonymous
class AnonInterface$506{
  external factory AnonInterface$506({required SVGFESpotLightElement prototype});
}
extension AnonInterface$506Extension on AnonInterface$506 {
  external SVGFESpotLightElement get prototype;
  external set prototype(SVGFESpotLightElement value);
}
@JS()
@anonymous
class AnonInterface$507{
  external factory AnonInterface$507({required SVGFETileElement prototype});
}
extension AnonInterface$507Extension on AnonInterface$507 {
  external SVGFETileElement get prototype;
  external set prototype(SVGFETileElement value);
}
@JS()
@anonymous
class AnonInterface$508{
  external factory AnonInterface$508({required SVGFETurbulenceElement prototype, required num SVG_TURBULENCE_TYPE_UNKNOWN, required num SVG_TURBULENCE_TYPE_FRACTALNOISE, required num SVG_TURBULENCE_TYPE_TURBULENCE, required num SVG_STITCHTYPE_UNKNOWN, required num SVG_STITCHTYPE_STITCH, required num SVG_STITCHTYPE_NOSTITCH});
}
extension AnonInterface$508Extension on AnonInterface$508 {
  external SVGFETurbulenceElement get prototype;
  external set prototype(SVGFETurbulenceElement value);
  external num get SVG_TURBULENCE_TYPE_UNKNOWN;
  external num get SVG_TURBULENCE_TYPE_FRACTALNOISE;
  external num get SVG_TURBULENCE_TYPE_TURBULENCE;
  external num get SVG_STITCHTYPE_UNKNOWN;
  external num get SVG_STITCHTYPE_STITCH;
  external num get SVG_STITCHTYPE_NOSTITCH;
}
@JS()
@anonymous
class AnonInterface$509{
  external factory AnonInterface$509({required SVGFilterElement prototype});
}
extension AnonInterface$509Extension on AnonInterface$509 {
  external SVGFilterElement get prototype;
  external set prototype(SVGFilterElement value);
}
@JS()
@anonymous
class AnonInterface$510{
  external factory AnonInterface$510({required SVGForeignObjectElement prototype});
}
extension AnonInterface$510Extension on AnonInterface$510 {
  external SVGForeignObjectElement get prototype;
  external set prototype(SVGForeignObjectElement value);
}
@JS()
@anonymous
class AnonInterface$511{
  external factory AnonInterface$511({required SVGGElement prototype});
}
extension AnonInterface$511Extension on AnonInterface$511 {
  external SVGGElement get prototype;
  external set prototype(SVGGElement value);
}
@JS()
@anonymous
class AnonInterface$512{
  external factory AnonInterface$512({required SVGGeometryElement prototype});
}
extension AnonInterface$512Extension on AnonInterface$512 {
  external SVGGeometryElement get prototype;
  external set prototype(SVGGeometryElement value);
}
@JS()
@anonymous
class AnonInterface$513{
  external factory AnonInterface$513({required SVGGradientElement prototype, required num SVG_SPREADMETHOD_UNKNOWN, required num SVG_SPREADMETHOD_PAD, required num SVG_SPREADMETHOD_REFLECT, required num SVG_SPREADMETHOD_REPEAT});
}
extension AnonInterface$513Extension on AnonInterface$513 {
  external SVGGradientElement get prototype;
  external set prototype(SVGGradientElement value);
  external num get SVG_SPREADMETHOD_UNKNOWN;
  external num get SVG_SPREADMETHOD_PAD;
  external num get SVG_SPREADMETHOD_REFLECT;
  external num get SVG_SPREADMETHOD_REPEAT;
}
@JS()
@anonymous
class AnonInterface$514{
  external factory AnonInterface$514({required SVGGraphicsElement prototype});
}
extension AnonInterface$514Extension on AnonInterface$514 {
  external SVGGraphicsElement get prototype;
  external set prototype(SVGGraphicsElement value);
}
@JS()
@anonymous
class AnonInterface$515{
  external factory AnonInterface$515({required SVGImageElement prototype});
}
extension AnonInterface$515Extension on AnonInterface$515 {
  external SVGImageElement get prototype;
  external set prototype(SVGImageElement value);
}
@JS()
@anonymous
class AnonInterface$516{
  external factory AnonInterface$516({required SVGLength prototype, required num SVG_LENGTHTYPE_UNKNOWN, required num SVG_LENGTHTYPE_NUMBER, required num SVG_LENGTHTYPE_PERCENTAGE, required num SVG_LENGTHTYPE_EMS, required num SVG_LENGTHTYPE_EXS, required num SVG_LENGTHTYPE_PX, required num SVG_LENGTHTYPE_CM, required num SVG_LENGTHTYPE_MM, required num SVG_LENGTHTYPE_IN, required num SVG_LENGTHTYPE_PT, required num SVG_LENGTHTYPE_PC});
}
extension AnonInterface$516Extension on AnonInterface$516 {
  external SVGLength get prototype;
  external set prototype(SVGLength value);
  external num get SVG_LENGTHTYPE_UNKNOWN;
  external num get SVG_LENGTHTYPE_NUMBER;
  external num get SVG_LENGTHTYPE_PERCENTAGE;
  external num get SVG_LENGTHTYPE_EMS;
  external num get SVG_LENGTHTYPE_EXS;
  external num get SVG_LENGTHTYPE_PX;
  external num get SVG_LENGTHTYPE_CM;
  external num get SVG_LENGTHTYPE_MM;
  external num get SVG_LENGTHTYPE_IN;
  external num get SVG_LENGTHTYPE_PT;
  external num get SVG_LENGTHTYPE_PC;
}
@JS()
@anonymous
class AnonInterface$517{
  external factory AnonInterface$517({required SVGLengthList prototype});
}
extension AnonInterface$517Extension on AnonInterface$517 {
  external SVGLengthList get prototype;
  external set prototype(SVGLengthList value);
}
@JS()
@anonymous
class AnonInterface$518{
  external factory AnonInterface$518({required SVGLineElement prototype});
}
extension AnonInterface$518Extension on AnonInterface$518 {
  external SVGLineElement get prototype;
  external set prototype(SVGLineElement value);
}
@JS()
@anonymous
class AnonInterface$519{
  external factory AnonInterface$519({required SVGLinearGradientElement prototype});
}
extension AnonInterface$519Extension on AnonInterface$519 {
  external SVGLinearGradientElement get prototype;
  external set prototype(SVGLinearGradientElement value);
}
@JS()
@anonymous
class AnonInterface$520{
  external factory AnonInterface$520({required SVGMPathElement prototype});
}
extension AnonInterface$520Extension on AnonInterface$520 {
  external SVGMPathElement get prototype;
  external set prototype(SVGMPathElement value);
}
@JS()
@anonymous
class AnonInterface$521{
  external factory AnonInterface$521({required SVGMarkerElement prototype, required num SVG_MARKERUNITS_UNKNOWN, required num SVG_MARKERUNITS_USERSPACEONUSE, required num SVG_MARKERUNITS_STROKEWIDTH, required num SVG_MARKER_ORIENT_UNKNOWN, required num SVG_MARKER_ORIENT_AUTO, required num SVG_MARKER_ORIENT_ANGLE});
}
extension AnonInterface$521Extension on AnonInterface$521 {
  external SVGMarkerElement get prototype;
  external set prototype(SVGMarkerElement value);
  external num get SVG_MARKERUNITS_UNKNOWN;
  external num get SVG_MARKERUNITS_USERSPACEONUSE;
  external num get SVG_MARKERUNITS_STROKEWIDTH;
  external num get SVG_MARKER_ORIENT_UNKNOWN;
  external num get SVG_MARKER_ORIENT_AUTO;
  external num get SVG_MARKER_ORIENT_ANGLE;
}
@JS()
@anonymous
class AnonInterface$522{
  external factory AnonInterface$522({required SVGMaskElement prototype});
}
extension AnonInterface$522Extension on AnonInterface$522 {
  external SVGMaskElement get prototype;
  external set prototype(SVGMaskElement value);
}
@JS()
@anonymous
class AnonInterface$523{
  external factory AnonInterface$523({required SVGMetadataElement prototype});
}
extension AnonInterface$523Extension on AnonInterface$523 {
  external SVGMetadataElement get prototype;
  external set prototype(SVGMetadataElement value);
}
@JS()
@anonymous
class AnonInterface$524{
  external factory AnonInterface$524({required SVGNumber prototype});
}
extension AnonInterface$524Extension on AnonInterface$524 {
  external SVGNumber get prototype;
  external set prototype(SVGNumber value);
}
@JS()
@anonymous
class AnonInterface$525{
  external factory AnonInterface$525({required SVGNumberList prototype});
}
extension AnonInterface$525Extension on AnonInterface$525 {
  external SVGNumberList get prototype;
  external set prototype(SVGNumberList value);
}
@JS()
@anonymous
class AnonInterface$526{
  external factory AnonInterface$526({required SVGPathElement prototype});
}
extension AnonInterface$526Extension on AnonInterface$526 {
  external SVGPathElement get prototype;
  external set prototype(SVGPathElement value);
}
@JS()
@anonymous
class AnonInterface$527{
  external factory AnonInterface$527({required SVGPatternElement prototype});
}
extension AnonInterface$527Extension on AnonInterface$527 {
  external SVGPatternElement get prototype;
  external set prototype(SVGPatternElement value);
}
@JS()
@anonymous
class AnonInterface$528{
  external factory AnonInterface$528({required SVGPointList prototype});
}
extension AnonInterface$528Extension on AnonInterface$528 {
  external SVGPointList get prototype;
  external set prototype(SVGPointList value);
}
@JS()
@anonymous
class AnonInterface$529{
  external factory AnonInterface$529({required SVGPolygonElement prototype});
}
extension AnonInterface$529Extension on AnonInterface$529 {
  external SVGPolygonElement get prototype;
  external set prototype(SVGPolygonElement value);
}
@JS()
@anonymous
class AnonInterface$530{
  external factory AnonInterface$530({required SVGPolylineElement prototype});
}
extension AnonInterface$530Extension on AnonInterface$530 {
  external SVGPolylineElement get prototype;
  external set prototype(SVGPolylineElement value);
}
@JS()
@anonymous
class AnonInterface$531{
  external factory AnonInterface$531({required SVGPreserveAspectRatio prototype, required num SVG_PRESERVEASPECTRATIO_UNKNOWN, required num SVG_PRESERVEASPECTRATIO_NONE, required num SVG_PRESERVEASPECTRATIO_XMINYMIN, required num SVG_PRESERVEASPECTRATIO_XMIDYMIN, required num SVG_PRESERVEASPECTRATIO_XMAXYMIN, required num SVG_PRESERVEASPECTRATIO_XMINYMID, required num SVG_PRESERVEASPECTRATIO_XMIDYMID, required num SVG_PRESERVEASPECTRATIO_XMAXYMID, required num SVG_PRESERVEASPECTRATIO_XMINYMAX, required num SVG_PRESERVEASPECTRATIO_XMIDYMAX, required num SVG_PRESERVEASPECTRATIO_XMAXYMAX, required num SVG_MEETORSLICE_UNKNOWN, required num SVG_MEETORSLICE_MEET, required num SVG_MEETORSLICE_SLICE});
}
extension AnonInterface$531Extension on AnonInterface$531 {
  external SVGPreserveAspectRatio get prototype;
  external set prototype(SVGPreserveAspectRatio value);
  external num get SVG_PRESERVEASPECTRATIO_UNKNOWN;
  external num get SVG_PRESERVEASPECTRATIO_NONE;
  external num get SVG_PRESERVEASPECTRATIO_XMINYMIN;
  external num get SVG_PRESERVEASPECTRATIO_XMIDYMIN;
  external num get SVG_PRESERVEASPECTRATIO_XMAXYMIN;
  external num get SVG_PRESERVEASPECTRATIO_XMINYMID;
  external num get SVG_PRESERVEASPECTRATIO_XMIDYMID;
  external num get SVG_PRESERVEASPECTRATIO_XMAXYMID;
  external num get SVG_PRESERVEASPECTRATIO_XMINYMAX;
  external num get SVG_PRESERVEASPECTRATIO_XMIDYMAX;
  external num get SVG_PRESERVEASPECTRATIO_XMAXYMAX;
  external num get SVG_MEETORSLICE_UNKNOWN;
  external num get SVG_MEETORSLICE_MEET;
  external num get SVG_MEETORSLICE_SLICE;
}
@JS()
@anonymous
class AnonInterface$532{
  external factory AnonInterface$532({required SVGRadialGradientElement prototype});
}
extension AnonInterface$532Extension on AnonInterface$532 {
  external SVGRadialGradientElement get prototype;
  external set prototype(SVGRadialGradientElement value);
}
@JS()
@anonymous
class AnonInterface$533{
  external factory AnonInterface$533({required SVGRectElement prototype});
}
extension AnonInterface$533Extension on AnonInterface$533 {
  external SVGRectElement get prototype;
  external set prototype(SVGRectElement value);
}
@JS()
@anonymous
class AnonInterface$534{
  external factory AnonInterface$534({required SVGSVGElement prototype});
}
extension AnonInterface$534Extension on AnonInterface$534 {
  external SVGSVGElement get prototype;
  external set prototype(SVGSVGElement value);
}
@JS()
@anonymous
class AnonInterface$535{
  external factory AnonInterface$535({required SVGScriptElement prototype});
}
extension AnonInterface$535Extension on AnonInterface$535 {
  external SVGScriptElement get prototype;
  external set prototype(SVGScriptElement value);
}
@JS()
@anonymous
class AnonInterface$536{
  external factory AnonInterface$536({required SVGSetElement prototype});
}
extension AnonInterface$536Extension on AnonInterface$536 {
  external SVGSetElement get prototype;
  external set prototype(SVGSetElement value);
}
@JS()
@anonymous
class AnonInterface$537{
  external factory AnonInterface$537({required SVGStopElement prototype});
}
extension AnonInterface$537Extension on AnonInterface$537 {
  external SVGStopElement get prototype;
  external set prototype(SVGStopElement value);
}
@JS()
@anonymous
class AnonInterface$538{
  external factory AnonInterface$538({required SVGStringList prototype});
}
extension AnonInterface$538Extension on AnonInterface$538 {
  external SVGStringList get prototype;
  external set prototype(SVGStringList value);
}
@JS()
@anonymous
class AnonInterface$539{
  external factory AnonInterface$539({required SVGStyleElement prototype});
}
extension AnonInterface$539Extension on AnonInterface$539 {
  external SVGStyleElement get prototype;
  external set prototype(SVGStyleElement value);
}
@JS()
@anonymous
class AnonInterface$540{
  external factory AnonInterface$540({required SVGSwitchElement prototype});
}
extension AnonInterface$540Extension on AnonInterface$540 {
  external SVGSwitchElement get prototype;
  external set prototype(SVGSwitchElement value);
}
@JS()
@anonymous
class AnonInterface$541{
  external factory AnonInterface$541({required SVGSymbolElement prototype});
}
extension AnonInterface$541Extension on AnonInterface$541 {
  external SVGSymbolElement get prototype;
  external set prototype(SVGSymbolElement value);
}
@JS()
@anonymous
class AnonInterface$542{
  external factory AnonInterface$542({required SVGTSpanElement prototype});
}
extension AnonInterface$542Extension on AnonInterface$542 {
  external SVGTSpanElement get prototype;
  external set prototype(SVGTSpanElement value);
}
@JS()
@anonymous
class AnonInterface$543{
  external factory AnonInterface$543({required SVGTextContentElement prototype, required num LENGTHADJUST_UNKNOWN, required num LENGTHADJUST_SPACING, required num LENGTHADJUST_SPACINGANDGLYPHS});
}
extension AnonInterface$543Extension on AnonInterface$543 {
  external SVGTextContentElement get prototype;
  external set prototype(SVGTextContentElement value);
  external num get LENGTHADJUST_UNKNOWN;
  external num get LENGTHADJUST_SPACING;
  external num get LENGTHADJUST_SPACINGANDGLYPHS;
}
@JS()
@anonymous
class AnonInterface$544{
  external factory AnonInterface$544({required SVGTextElement prototype});
}
extension AnonInterface$544Extension on AnonInterface$544 {
  external SVGTextElement get prototype;
  external set prototype(SVGTextElement value);
}
@JS()
@anonymous
class AnonInterface$545{
  external factory AnonInterface$545({required SVGTextPathElement prototype, required num TEXTPATH_METHODTYPE_UNKNOWN, required num TEXTPATH_METHODTYPE_ALIGN, required num TEXTPATH_METHODTYPE_STRETCH, required num TEXTPATH_SPACINGTYPE_UNKNOWN, required num TEXTPATH_SPACINGTYPE_AUTO, required num TEXTPATH_SPACINGTYPE_EXACT});
}
extension AnonInterface$545Extension on AnonInterface$545 {
  external SVGTextPathElement get prototype;
  external set prototype(SVGTextPathElement value);
  external num get TEXTPATH_METHODTYPE_UNKNOWN;
  external num get TEXTPATH_METHODTYPE_ALIGN;
  external num get TEXTPATH_METHODTYPE_STRETCH;
  external num get TEXTPATH_SPACINGTYPE_UNKNOWN;
  external num get TEXTPATH_SPACINGTYPE_AUTO;
  external num get TEXTPATH_SPACINGTYPE_EXACT;
}
@JS()
@anonymous
class AnonInterface$546{
  external factory AnonInterface$546({required SVGTextPositioningElement prototype});
}
extension AnonInterface$546Extension on AnonInterface$546 {
  external SVGTextPositioningElement get prototype;
  external set prototype(SVGTextPositioningElement value);
}
@JS()
@anonymous
class AnonInterface$547{
  external factory AnonInterface$547({required SVGTitleElement prototype});
}
extension AnonInterface$547Extension on AnonInterface$547 {
  external SVGTitleElement get prototype;
  external set prototype(SVGTitleElement value);
}
@JS()
@anonymous
class AnonInterface$548{
  external factory AnonInterface$548({required SVGTransform prototype, required num SVG_TRANSFORM_UNKNOWN, required num SVG_TRANSFORM_MATRIX, required num SVG_TRANSFORM_TRANSLATE, required num SVG_TRANSFORM_SCALE, required num SVG_TRANSFORM_ROTATE, required num SVG_TRANSFORM_SKEWX, required num SVG_TRANSFORM_SKEWY});
}
extension AnonInterface$548Extension on AnonInterface$548 {
  external SVGTransform get prototype;
  external set prototype(SVGTransform value);
  external num get SVG_TRANSFORM_UNKNOWN;
  external num get SVG_TRANSFORM_MATRIX;
  external num get SVG_TRANSFORM_TRANSLATE;
  external num get SVG_TRANSFORM_SCALE;
  external num get SVG_TRANSFORM_ROTATE;
  external num get SVG_TRANSFORM_SKEWX;
  external num get SVG_TRANSFORM_SKEWY;
}
@JS()
@anonymous
class AnonInterface$549{
  external factory AnonInterface$549({required SVGTransformList prototype});
}
extension AnonInterface$549Extension on AnonInterface$549 {
  external SVGTransformList get prototype;
  external set prototype(SVGTransformList value);
}
@JS()
@anonymous
class AnonInterface$550{
  external factory AnonInterface$550({required SVGUnitTypes prototype, required num SVG_UNIT_TYPE_UNKNOWN, required num SVG_UNIT_TYPE_USERSPACEONUSE, required num SVG_UNIT_TYPE_OBJECTBOUNDINGBOX});
}
extension AnonInterface$550Extension on AnonInterface$550 {
  external SVGUnitTypes get prototype;
  external set prototype(SVGUnitTypes value);
  external num get SVG_UNIT_TYPE_UNKNOWN;
  external num get SVG_UNIT_TYPE_USERSPACEONUSE;
  external num get SVG_UNIT_TYPE_OBJECTBOUNDINGBOX;
}
@JS()
@anonymous
class AnonInterface$551{
  external factory AnonInterface$551({required SVGUseElement prototype});
}
extension AnonInterface$551Extension on AnonInterface$551 {
  external SVGUseElement get prototype;
  external set prototype(SVGUseElement value);
}
@JS()
@anonymous
class AnonInterface$552{
  external factory AnonInterface$552({required SVGViewElement prototype});
}
extension AnonInterface$552Extension on AnonInterface$552 {
  external SVGViewElement get prototype;
  external set prototype(SVGViewElement value);
}
@JS()
@anonymous
class AnonInterface$553{
  external factory AnonInterface$553({required Screen prototype});
}
extension AnonInterface$553Extension on AnonInterface$553 {
  external Screen get prototype;
  external set prototype(Screen value);
}
@JS()
@anonymous
class AnonInterface$554{
  external factory AnonInterface$554({required ScreenOrientation prototype});
}
extension AnonInterface$554Extension on AnonInterface$554 {
  external ScreenOrientation get prototype;
  external set prototype(ScreenOrientation value);
}
@JS()
@anonymous
class AnonInterface$555{
  external factory AnonInterface$555({required ScriptProcessorNode prototype});
}
extension AnonInterface$555Extension on AnonInterface$555 {
  external ScriptProcessorNode get prototype;
  external set prototype(ScriptProcessorNode value);
}
@JS()
@anonymous
class AnonInterface$556{
  external factory AnonInterface$556({required SecurityPolicyViolationEvent prototype});
}
extension AnonInterface$556Extension on AnonInterface$556 {
  external SecurityPolicyViolationEvent get prototype;
  external set prototype(SecurityPolicyViolationEvent value);
}
@JS()
@anonymous
class AnonInterface$557{
  external factory AnonInterface$557({required Selection prototype});
}
extension AnonInterface$557Extension on AnonInterface$557 {
  external Selection get prototype;
  external set prototype(Selection value);
}
@JS()
@anonymous
class AnonInterface$558{
  external factory AnonInterface$558({required ServiceWorker prototype});
}
extension AnonInterface$558Extension on AnonInterface$558 {
  external ServiceWorker get prototype;
  external set prototype(ServiceWorker value);
}
@JS()
@anonymous
class AnonInterface$559{
  external factory AnonInterface$559({required ServiceWorkerContainer prototype});
}
extension AnonInterface$559Extension on AnonInterface$559 {
  external ServiceWorkerContainer get prototype;
  external set prototype(ServiceWorkerContainer value);
}
@JS()
@anonymous
class AnonInterface$560{
  external factory AnonInterface$560({required ServiceWorkerRegistration prototype});
}
extension AnonInterface$560Extension on AnonInterface$560 {
  external ServiceWorkerRegistration get prototype;
  external set prototype(ServiceWorkerRegistration value);
}
@JS()
@anonymous
class AnonInterface$561{
  external factory AnonInterface$561({required ShadowRoot prototype});
}
extension AnonInterface$561Extension on AnonInterface$561 {
  external ShadowRoot get prototype;
  external set prototype(ShadowRoot value);
}
@JS()
@anonymous
class AnonInterface$562{
  external factory AnonInterface$562({required SharedWorker prototype});
}
extension AnonInterface$562Extension on AnonInterface$562 {
  external SharedWorker get prototype;
  external set prototype(SharedWorker value);
}
@JS()
@anonymous
class AnonInterface$563{
  external factory AnonInterface$563({required SourceBuffer prototype});
}
extension AnonInterface$563Extension on AnonInterface$563 {
  external SourceBuffer get prototype;
  external set prototype(SourceBuffer value);
}
@JS()
@anonymous
class AnonInterface$564{
  external factory AnonInterface$564({required SourceBufferList prototype});
}
extension AnonInterface$564Extension on AnonInterface$564 {
  external SourceBufferList get prototype;
  external set prototype(SourceBufferList value);
}
@JS()
@anonymous
class AnonInterface$565{
  external factory AnonInterface$565({required SpeechRecognitionAlternative prototype});
}
extension AnonInterface$565Extension on AnonInterface$565 {
  external SpeechRecognitionAlternative get prototype;
  external set prototype(SpeechRecognitionAlternative value);
}
@JS()
@anonymous
class AnonInterface$566{
  external factory AnonInterface$566({required SpeechRecognitionResult prototype});
}
extension AnonInterface$566Extension on AnonInterface$566 {
  external SpeechRecognitionResult get prototype;
  external set prototype(SpeechRecognitionResult value);
}
@JS()
@anonymous
class AnonInterface$567{
  external factory AnonInterface$567({required SpeechRecognitionResultList prototype});
}
extension AnonInterface$567Extension on AnonInterface$567 {
  external SpeechRecognitionResultList get prototype;
  external set prototype(SpeechRecognitionResultList value);
}
@JS()
@anonymous
class AnonInterface$568{
  external factory AnonInterface$568({required SpeechSynthesis prototype});
}
extension AnonInterface$568Extension on AnonInterface$568 {
  external SpeechSynthesis get prototype;
  external set prototype(SpeechSynthesis value);
}
@JS()
@anonymous
class AnonInterface$569{
  external factory AnonInterface$569({required SpeechSynthesisErrorEvent prototype});
}
extension AnonInterface$569Extension on AnonInterface$569 {
  external SpeechSynthesisErrorEvent get prototype;
  external set prototype(SpeechSynthesisErrorEvent value);
}
@JS()
@anonymous
class AnonInterface$570{
  external factory AnonInterface$570({required SpeechSynthesisEvent prototype});
}
extension AnonInterface$570Extension on AnonInterface$570 {
  external SpeechSynthesisEvent get prototype;
  external set prototype(SpeechSynthesisEvent value);
}
@JS()
@anonymous
class AnonInterface$571{
  external factory AnonInterface$571({required SpeechSynthesisUtterance prototype});
}
extension AnonInterface$571Extension on AnonInterface$571 {
  external SpeechSynthesisUtterance get prototype;
  external set prototype(SpeechSynthesisUtterance value);
}
@JS()
@anonymous
class AnonInterface$572{
  external factory AnonInterface$572({required SpeechSynthesisVoice prototype});
}
extension AnonInterface$572Extension on AnonInterface$572 {
  external SpeechSynthesisVoice get prototype;
  external set prototype(SpeechSynthesisVoice value);
}
@JS()
@anonymous
class AnonInterface$573{
  external factory AnonInterface$573({required StaticRange prototype});
}
extension AnonInterface$573Extension on AnonInterface$573 {
  external StaticRange get prototype;
  external set prototype(StaticRange value);
}
@JS()
@anonymous
class AnonInterface$574{
  external factory AnonInterface$574({required StereoPannerNode prototype});
}
extension AnonInterface$574Extension on AnonInterface$574 {
  external StereoPannerNode get prototype;
  external set prototype(StereoPannerNode value);
}
@JS()
@anonymous
class AnonInterface$575{
  external factory AnonInterface$575({required Storage prototype});
}
extension AnonInterface$575Extension on AnonInterface$575 {
  external Storage get prototype;
  external set prototype(Storage value);
}
@JS()
@anonymous
class AnonInterface$576{
  external factory AnonInterface$576({required StorageEvent prototype});
}
extension AnonInterface$576Extension on AnonInterface$576 {
  external StorageEvent get prototype;
  external set prototype(StorageEvent value);
}
@JS()
@anonymous
class AnonInterface$577{
  external factory AnonInterface$577({required StorageManager prototype});
}
extension AnonInterface$577Extension on AnonInterface$577 {
  external StorageManager get prototype;
  external set prototype(StorageManager value);
}
@JS()
@anonymous
class AnonInterface$578{
  external factory AnonInterface$578({required StylePropertyMap prototype});
}
extension AnonInterface$578Extension on AnonInterface$578 {
  external StylePropertyMap get prototype;
  external set prototype(StylePropertyMap value);
}
@JS()
@anonymous
class AnonInterface$579{
  external factory AnonInterface$579({required StylePropertyMapReadOnly prototype});
}
extension AnonInterface$579Extension on AnonInterface$579 {
  external StylePropertyMapReadOnly get prototype;
  external set prototype(StylePropertyMapReadOnly value);
}
@JS()
@anonymous
class AnonInterface$580{
  external factory AnonInterface$580({required StyleSheet prototype});
}
extension AnonInterface$580Extension on AnonInterface$580 {
  external StyleSheet get prototype;
  external set prototype(StyleSheet value);
}
@JS()
@anonymous
class AnonInterface$581{
  external factory AnonInterface$581({required StyleSheetList prototype});
}
extension AnonInterface$581Extension on AnonInterface$581 {
  external StyleSheetList get prototype;
  external set prototype(StyleSheetList value);
}
@JS()
@anonymous
class AnonInterface$582{
  external factory AnonInterface$582({required SubmitEvent prototype});
}
extension AnonInterface$582Extension on AnonInterface$582 {
  external SubmitEvent get prototype;
  external set prototype(SubmitEvent value);
}
@JS()
@anonymous
class AnonInterface$584{
  external factory AnonInterface$584({required SubtleCrypto prototype});
}
extension AnonInterface$584Extension on AnonInterface$584 {
  external SubtleCrypto get prototype;
  external set prototype(SubtleCrypto value);
}
@JS()
@anonymous
class AnonInterface$585{
  external factory AnonInterface$585({required Text prototype});
}
extension AnonInterface$585Extension on AnonInterface$585 {
  external Text get prototype;
  external set prototype(Text value);
}
@JS()
@anonymous
class AnonInterface$586{
  external factory AnonInterface$586({required TextDecoder prototype});
}
extension AnonInterface$586Extension on AnonInterface$586 {
  external TextDecoder get prototype;
  external set prototype(TextDecoder value);
}
@JS()
@anonymous
class AnonInterface$587{
  external factory AnonInterface$587({required TextDecoderStream prototype});
}
extension AnonInterface$587Extension on AnonInterface$587 {
  external TextDecoderStream get prototype;
  external set prototype(TextDecoderStream value);
}
@JS()
@anonymous
class AnonInterface$588{
  external factory AnonInterface$588({required TextEncoder prototype});
}
extension AnonInterface$588Extension on AnonInterface$588 {
  external TextEncoder get prototype;
  external set prototype(TextEncoder value);
}
@JS()
@anonymous
class AnonInterface$589{
  external factory AnonInterface$589({required TextEncoderStream prototype});
}
extension AnonInterface$589Extension on AnonInterface$589 {
  external TextEncoderStream get prototype;
  external set prototype(TextEncoderStream value);
}
@JS()
@anonymous
class AnonInterface$590{
  external factory AnonInterface$590({required TextEvent prototype});
}
extension AnonInterface$590Extension on AnonInterface$590 {
  external TextEvent get prototype;
  external set prototype(TextEvent value);
}
@JS()
@anonymous
class AnonInterface$591{
  external factory AnonInterface$591({required TextMetrics prototype});
}
extension AnonInterface$591Extension on AnonInterface$591 {
  external TextMetrics get prototype;
  external set prototype(TextMetrics value);
}
@JS()
@anonymous
class AnonInterface$592{
  external factory AnonInterface$592({required TextTrack prototype});
}
extension AnonInterface$592Extension on AnonInterface$592 {
  external TextTrack get prototype;
  external set prototype(TextTrack value);
}
@JS()
@anonymous
class AnonInterface$593{
  external factory AnonInterface$593({required TextTrackCue prototype});
}
extension AnonInterface$593Extension on AnonInterface$593 {
  external TextTrackCue get prototype;
  external set prototype(TextTrackCue value);
}
@JS()
@anonymous
class AnonInterface$594{
  external factory AnonInterface$594({required TextTrackCueList prototype});
}
extension AnonInterface$594Extension on AnonInterface$594 {
  external TextTrackCueList get prototype;
  external set prototype(TextTrackCueList value);
}
@JS()
@anonymous
class AnonInterface$595{
  external factory AnonInterface$595({required TextTrackList prototype});
}
extension AnonInterface$595Extension on AnonInterface$595 {
  external TextTrackList get prototype;
  external set prototype(TextTrackList value);
}
@JS()
@anonymous
class AnonInterface$596{
  external factory AnonInterface$596({required TimeRanges prototype});
}
extension AnonInterface$596Extension on AnonInterface$596 {
  external TimeRanges get prototype;
  external set prototype(TimeRanges value);
}
@JS()
@anonymous
class AnonInterface$597{
  external factory AnonInterface$597({required ToggleEvent prototype});
}
extension AnonInterface$597Extension on AnonInterface$597 {
  external ToggleEvent get prototype;
  external set prototype(ToggleEvent value);
}
@JS()
@anonymous
class AnonInterface$598{
  external factory AnonInterface$598({required Touch prototype});
}
extension AnonInterface$598Extension on AnonInterface$598 {
  external Touch get prototype;
  external set prototype(Touch value);
}
@JS()
@anonymous
class AnonInterface$599{
  external factory AnonInterface$599({required TouchEvent prototype});
}
extension AnonInterface$599Extension on AnonInterface$599 {
  external TouchEvent get prototype;
  external set prototype(TouchEvent value);
}
@JS()
@anonymous
class AnonInterface$600{
  external factory AnonInterface$600({required TouchList prototype});
}
extension AnonInterface$600Extension on AnonInterface$600 {
  external TouchList get prototype;
  external set prototype(TouchList value);
}
@JS()
@anonymous
class AnonInterface$601{
  external factory AnonInterface$601({required TrackEvent prototype});
}
extension AnonInterface$601Extension on AnonInterface$601 {
  external TrackEvent get prototype;
  external set prototype(TrackEvent value);
}
@JS()
@anonymous
class AnonInterface$602{
  external factory AnonInterface$602({required TransformStream prototype});
}
extension AnonInterface$602Extension on AnonInterface$602 {
  external TransformStream get prototype;
  external set prototype(TransformStream value);
}
@JS()
@anonymous
class AnonInterface$603{
  external factory AnonInterface$603({required TransformStreamDefaultController prototype});
}
extension AnonInterface$603Extension on AnonInterface$603 {
  external TransformStreamDefaultController get prototype;
  external set prototype(TransformStreamDefaultController value);
}
@JS()
@anonymous
class AnonInterface$604{
  external factory AnonInterface$604({required TransitionEvent prototype});
}
extension AnonInterface$604Extension on AnonInterface$604 {
  external TransitionEvent get prototype;
  external set prototype(TransitionEvent value);
}
@JS()
@anonymous
class AnonInterface$605{
  external factory AnonInterface$605({required TreeWalker prototype});
}
extension AnonInterface$605Extension on AnonInterface$605 {
  external TreeWalker get prototype;
  external set prototype(TreeWalker value);
}
@JS()
@anonymous
class AnonInterface$606{
  external factory AnonInterface$606({required UIEvent prototype});
}
extension AnonInterface$606Extension on AnonInterface$606 {
  external UIEvent get prototype;
  external set prototype(UIEvent value);
}
@JS()
@anonymous
class AnonInterface$607{
  external factory AnonInterface$607({required URL prototype});
}
extension AnonInterface$607Extension on AnonInterface$607 {
  external URL get prototype;
  external set prototype(URL value);
  @JS("canParse")
  external bool canParse(dynamic /* String|URL */ url, [dynamic /* String|URL */ base]);
  @JS("createObjectURL")
  external String createObjectURL(dynamic /* Blob|MediaSource */ obj);
  @JS("parse")
  external URL? parse(dynamic /* String|URL */ url, [dynamic /* String|URL */ base]);
  @JS("revokeObjectURL")
  external void revokeObjectURL(String url);
}
@JS()
@anonymous
class AnonInterface$608{
  external factory AnonInterface$608({required URLSearchParams prototype});
}
extension AnonInterface$608Extension on AnonInterface$608 {
  external URLSearchParams get prototype;
  external set prototype(URLSearchParams value);
}
@JS()
@anonymous
class AnonInterface$609{
  external factory AnonInterface$609({required UserActivation prototype});
}
extension AnonInterface$609Extension on AnonInterface$609 {
  external UserActivation get prototype;
  external set prototype(UserActivation value);
}
@JS()
@anonymous
class AnonInterface$610{
  external factory AnonInterface$610({required VTTCue prototype});
}
extension AnonInterface$610Extension on AnonInterface$610 {
  external VTTCue get prototype;
  external set prototype(VTTCue value);
}
@JS()
@anonymous
class AnonInterface$611{
  external factory AnonInterface$611({required VTTRegion prototype});
}
extension AnonInterface$611Extension on AnonInterface$611 {
  external VTTRegion get prototype;
  external set prototype(VTTRegion value);
}
@JS()
@anonymous
class AnonInterface$612{
  external factory AnonInterface$612({required ValidityState prototype});
}
extension AnonInterface$612Extension on AnonInterface$612 {
  external ValidityState get prototype;
  external set prototype(ValidityState value);
}
@JS()
@anonymous
class AnonInterface$613{
  external factory AnonInterface$613({required VideoColorSpace prototype});
}
extension AnonInterface$613Extension on AnonInterface$613 {
  external VideoColorSpace get prototype;
  external set prototype(VideoColorSpace value);
}
@JS()
@anonymous
class AnonInterface$614{
  external factory AnonInterface$614({required VideoDecoder prototype});
}
extension AnonInterface$614Extension on AnonInterface$614 {
  external VideoDecoder get prototype;
  external set prototype(VideoDecoder value);
  @JS("isConfigSupported")
  external Future<VideoDecoderSupport> isConfigSupported(VideoDecoderConfig config);
}
@JS()
@anonymous
class AnonInterface$615{
  external factory AnonInterface$615({required VideoEncoder prototype});
}
extension AnonInterface$615Extension on AnonInterface$615 {
  external VideoEncoder get prototype;
  external set prototype(VideoEncoder value);
  @JS("isConfigSupported")
  external Future<VideoEncoderSupport> isConfigSupported(VideoEncoderConfig config);
}
@JS()
@anonymous
class AnonInterface$616{
  external factory AnonInterface$616({required VideoFrame prototype});
}
extension AnonInterface$616Extension on AnonInterface$616 {
  external VideoFrame get prototype;
  external set prototype(VideoFrame value);
}
@JS()
@anonymous
class AnonInterface$617{
  external factory AnonInterface$617({required VideoPlaybackQuality prototype});
}
extension AnonInterface$617Extension on AnonInterface$617 {
  external VideoPlaybackQuality get prototype;
  external set prototype(VideoPlaybackQuality value);
}
@JS()
@anonymous
class AnonInterface$618{
  external factory AnonInterface$618({required ViewTransition prototype});
}
extension AnonInterface$618Extension on AnonInterface$618 {
  external ViewTransition get prototype;
  external set prototype(ViewTransition value);
}
@JS()
@anonymous
class AnonInterface$619{
  external factory AnonInterface$619({required ViewTransitionTypeSet prototype});
}
extension AnonInterface$619Extension on AnonInterface$619 {
  external ViewTransitionTypeSet get prototype;
  external set prototype(ViewTransitionTypeSet value);
}
@JS()
@anonymous
class AnonInterface$620{
  external factory AnonInterface$620({required VisualViewport prototype});
}
extension AnonInterface$620Extension on AnonInterface$620 {
  external VisualViewport get prototype;
  external set prototype(VisualViewport value);
}
@JS()
@anonymous
class AnonInterface$621{
  external factory AnonInterface$621({required WakeLock prototype});
}
extension AnonInterface$621Extension on AnonInterface$621 {
  external WakeLock get prototype;
  external set prototype(WakeLock value);
}
@JS()
@anonymous
class AnonInterface$622{
  external factory AnonInterface$622({required WakeLockSentinel prototype});
}
extension AnonInterface$622Extension on AnonInterface$622 {
  external WakeLockSentinel get prototype;
  external set prototype(WakeLockSentinel value);
}
@JS()
@anonymous
class AnonInterface$623{
  external factory AnonInterface$623({required WaveShaperNode prototype});
}
extension AnonInterface$623Extension on AnonInterface$623 {
  external WaveShaperNode get prototype;
  external set prototype(WaveShaperNode value);
}
@JS()
@anonymous
class AnonInterface$624{
  external factory AnonInterface$624({required WebGL2RenderingContext prototype, required num READ_BUFFER, required num UNPACK_ROW_LENGTH, required num UNPACK_SKIP_ROWS, required num UNPACK_SKIP_PIXELS, required num PACK_ROW_LENGTH, required num PACK_SKIP_ROWS, required num PACK_SKIP_PIXELS, required num COLOR, required num DEPTH, required num STENCIL, required num RED, required num RGB8, required num RGB10_A2, required num TEXTURE_BINDING_3D, required num UNPACK_SKIP_IMAGES, required num UNPACK_IMAGE_HEIGHT, required num TEXTURE_3D, required num TEXTURE_WRAP_R, required num MAX_3D_TEXTURE_SIZE, required num UNSIGNED_INT_2_10_10_10_REV, required num MAX_ELEMENTS_VERTICES, required num MAX_ELEMENTS_INDICES, required num TEXTURE_MIN_LOD, required num TEXTURE_MAX_LOD, required num TEXTURE_BASE_LEVEL, required num TEXTURE_MAX_LEVEL, required num MIN, required num MAX, required num DEPTH_COMPONENT24, required num MAX_TEXTURE_LOD_BIAS, required num TEXTURE_COMPARE_MODE, required num TEXTURE_COMPARE_FUNC, required num CURRENT_QUERY, required num QUERY_RESULT, required num QUERY_RESULT_AVAILABLE, required num STREAM_READ, required num STREAM_COPY, required num STATIC_READ, required num STATIC_COPY, required num DYNAMIC_READ, required num DYNAMIC_COPY, required num MAX_DRAW_BUFFERS, required num DRAW_BUFFER0, required num DRAW_BUFFER1, required num DRAW_BUFFER2, required num DRAW_BUFFER3, required num DRAW_BUFFER4, required num DRAW_BUFFER5, required num DRAW_BUFFER6, required num DRAW_BUFFER7, required num DRAW_BUFFER8, required num DRAW_BUFFER9, required num DRAW_BUFFER10, required num DRAW_BUFFER11, required num DRAW_BUFFER12, required num DRAW_BUFFER13, required num DRAW_BUFFER14, required num DRAW_BUFFER15, required num MAX_FRAGMENT_UNIFORM_COMPONENTS, required num MAX_VERTEX_UNIFORM_COMPONENTS, required num SAMPLER_3D, required num SAMPLER_2D_SHADOW, required num FRAGMENT_SHADER_DERIVATIVE_HINT, required num PIXEL_PACK_BUFFER, required num PIXEL_UNPACK_BUFFER, required num PIXEL_PACK_BUFFER_BINDING, required num PIXEL_UNPACK_BUFFER_BINDING, required num FLOAT_MAT2x3, required num FLOAT_MAT2x4, required num FLOAT_MAT3x2, required num FLOAT_MAT3x4, required num FLOAT_MAT4x2, required num FLOAT_MAT4x3, required num SRGB, required num SRGB8, required num SRGB8_ALPHA8, required num COMPARE_REF_TO_TEXTURE, required num RGBA32F, required num RGB32F, required num RGBA16F, required num RGB16F, required num VERTEX_ATTRIB_ARRAY_INTEGER, required num MAX_ARRAY_TEXTURE_LAYERS, required num MIN_PROGRAM_TEXEL_OFFSET, required num MAX_PROGRAM_TEXEL_OFFSET, required num MAX_VARYING_COMPONENTS, required num TEXTURE_2D_ARRAY, required num TEXTURE_BINDING_2D_ARRAY, required num R11F_G11F_B10F, required num UNSIGNED_INT_10F_11F_11F_REV, required num RGB9_E5, required num UNSIGNED_INT_5_9_9_9_REV, required num TRANSFORM_FEEDBACK_BUFFER_MODE, required num MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS, required num TRANSFORM_FEEDBACK_VARYINGS, required num TRANSFORM_FEEDBACK_BUFFER_START, required num TRANSFORM_FEEDBACK_BUFFER_SIZE, required num TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, required num RASTERIZER_DISCARD, required num MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS, required num MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS, required num INTERLEAVED_ATTRIBS, required num SEPARATE_ATTRIBS, required num TRANSFORM_FEEDBACK_BUFFER, required num TRANSFORM_FEEDBACK_BUFFER_BINDING, required num RGBA32UI, required num RGB32UI, required num RGBA16UI, required num RGB16UI, required num RGBA8UI, required num RGB8UI, required num RGBA32I, required num RGB32I, required num RGBA16I, required num RGB16I, required num RGBA8I, required num RGB8I, required num RED_INTEGER, required num RGB_INTEGER, required num RGBA_INTEGER, required num SAMPLER_2D_ARRAY, required num SAMPLER_2D_ARRAY_SHADOW, required num SAMPLER_CUBE_SHADOW, required num UNSIGNED_INT_VEC2, required num UNSIGNED_INT_VEC3, required num UNSIGNED_INT_VEC4, required num INT_SAMPLER_2D, required num INT_SAMPLER_3D, required num INT_SAMPLER_CUBE, required num INT_SAMPLER_2D_ARRAY, required num UNSIGNED_INT_SAMPLER_2D, required num UNSIGNED_INT_SAMPLER_3D, required num UNSIGNED_INT_SAMPLER_CUBE, required num UNSIGNED_INT_SAMPLER_2D_ARRAY, required num DEPTH_COMPONENT32F, required num DEPTH32F_STENCIL8, required num FLOAT_32_UNSIGNED_INT_24_8_REV, required num FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, required num FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE, required num FRAMEBUFFER_ATTACHMENT_RED_SIZE, required num FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, required num FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, required num FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, required num FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, required num FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE, required num FRAMEBUFFER_DEFAULT, required num UNSIGNED_INT_24_8, required num DEPTH24_STENCIL8, required num UNSIGNED_NORMALIZED, required num DRAW_FRAMEBUFFER_BINDING, required num READ_FRAMEBUFFER, required num DRAW_FRAMEBUFFER, required num READ_FRAMEBUFFER_BINDING, required num RENDERBUFFER_SAMPLES, required num FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, required num MAX_COLOR_ATTACHMENTS, required num COLOR_ATTACHMENT1, required num COLOR_ATTACHMENT2, required num COLOR_ATTACHMENT3, required num COLOR_ATTACHMENT4, required num COLOR_ATTACHMENT5, required num COLOR_ATTACHMENT6, required num COLOR_ATTACHMENT7, required num COLOR_ATTACHMENT8, required num COLOR_ATTACHMENT9, required num COLOR_ATTACHMENT10, required num COLOR_ATTACHMENT11, required num COLOR_ATTACHMENT12, required num COLOR_ATTACHMENT13, required num COLOR_ATTACHMENT14, required num COLOR_ATTACHMENT15, required num FRAMEBUFFER_INCOMPLETE_MULTISAMPLE, required num MAX_SAMPLES, required num HALF_FLOAT, required num RG, required num RG_INTEGER, required num R8, required num RG8, required num R16F, required num R32F, required num RG16F, required num RG32F, required num R8I, required num R8UI, required num R16I, required num R16UI, required num R32I, required num R32UI, required num RG8I, required num RG8UI, required num RG16I, required num RG16UI, required num RG32I, required num RG32UI, required num VERTEX_ARRAY_BINDING, required num R8_SNORM, required num RG8_SNORM, required num RGB8_SNORM, required num RGBA8_SNORM, required num SIGNED_NORMALIZED, required num COPY_READ_BUFFER, required num COPY_WRITE_BUFFER, required num COPY_READ_BUFFER_BINDING, required num COPY_WRITE_BUFFER_BINDING, required num UNIFORM_BUFFER, required num UNIFORM_BUFFER_BINDING, required num UNIFORM_BUFFER_START, required num UNIFORM_BUFFER_SIZE, required num MAX_VERTEX_UNIFORM_BLOCKS, required num MAX_FRAGMENT_UNIFORM_BLOCKS, required num MAX_COMBINED_UNIFORM_BLOCKS, required num MAX_UNIFORM_BUFFER_BINDINGS, required num MAX_UNIFORM_BLOCK_SIZE, required num MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS, required num MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS, required num UNIFORM_BUFFER_OFFSET_ALIGNMENT, required num ACTIVE_UNIFORM_BLOCKS, required num UNIFORM_TYPE, required num UNIFORM_SIZE, required num UNIFORM_BLOCK_INDEX, required num UNIFORM_OFFSET, required num UNIFORM_ARRAY_STRIDE, required num UNIFORM_MATRIX_STRIDE, required num UNIFORM_IS_ROW_MAJOR, required num UNIFORM_BLOCK_BINDING, required num UNIFORM_BLOCK_DATA_SIZE, required num UNIFORM_BLOCK_ACTIVE_UNIFORMS, required num UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES, required num UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER, required num UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER, required num INVALID_INDEX, required num MAX_VERTEX_OUTPUT_COMPONENTS, required num MAX_FRAGMENT_INPUT_COMPONENTS, required num MAX_SERVER_WAIT_TIMEOUT, required num OBJECT_TYPE, required num SYNC_CONDITION, required num SYNC_STATUS, required num SYNC_FLAGS, required num SYNC_FENCE, required num SYNC_GPU_COMMANDS_COMPLETE, required num UNSIGNALED, required num SIGNALED, required num ALREADY_SIGNALED, required num TIMEOUT_EXPIRED, required num CONDITION_SATISFIED, required num WAIT_FAILED, required num SYNC_FLUSH_COMMANDS_BIT, required num VERTEX_ATTRIB_ARRAY_DIVISOR, required num ANY_SAMPLES_PASSED, required num ANY_SAMPLES_PASSED_CONSERVATIVE, required num SAMPLER_BINDING, required num RGB10_A2UI, required num INT_2_10_10_10_REV, required num TRANSFORM_FEEDBACK, required num TRANSFORM_FEEDBACK_PAUSED, required num TRANSFORM_FEEDBACK_ACTIVE, required num TRANSFORM_FEEDBACK_BINDING, required num TEXTURE_IMMUTABLE_FORMAT, required num MAX_ELEMENT_INDEX, required num TEXTURE_IMMUTABLE_LEVELS, required num TIMEOUT_IGNORED, required num MAX_CLIENT_WAIT_TIMEOUT_WEBGL, required num DEPTH_BUFFER_BIT, required num STENCIL_BUFFER_BIT, required num COLOR_BUFFER_BIT, required num POINTS, required num LINES, required num LINE_LOOP, required num LINE_STRIP, required num TRIANGLES, required num TRIANGLE_STRIP, required num TRIANGLE_FAN, required num ZERO, required num ONE, required num SRC_COLOR, required num ONE_MINUS_SRC_COLOR, required num SRC_ALPHA, required num ONE_MINUS_SRC_ALPHA, required num DST_ALPHA, required num ONE_MINUS_DST_ALPHA, required num DST_COLOR, required num ONE_MINUS_DST_COLOR, required num SRC_ALPHA_SATURATE, required num FUNC_ADD, required num BLEND_EQUATION, required num BLEND_EQUATION_RGB, required num BLEND_EQUATION_ALPHA, required num FUNC_SUBTRACT, required num FUNC_REVERSE_SUBTRACT, required num BLEND_DST_RGB, required num BLEND_SRC_RGB, required num BLEND_DST_ALPHA, required num BLEND_SRC_ALPHA, required num CONSTANT_COLOR, required num ONE_MINUS_CONSTANT_COLOR, required num CONSTANT_ALPHA, required num ONE_MINUS_CONSTANT_ALPHA, required num BLEND_COLOR, required num ARRAY_BUFFER, required num ELEMENT_ARRAY_BUFFER, required num ARRAY_BUFFER_BINDING, required num ELEMENT_ARRAY_BUFFER_BINDING, required num STREAM_DRAW, required num STATIC_DRAW, required num DYNAMIC_DRAW, required num BUFFER_SIZE, required num BUFFER_USAGE, required num CURRENT_VERTEX_ATTRIB, required num FRONT, required num BACK, required num FRONT_AND_BACK, required num CULL_FACE, required num BLEND, required num DITHER, required num STENCIL_TEST, required num DEPTH_TEST, required num SCISSOR_TEST, required num POLYGON_OFFSET_FILL, required num SAMPLE_ALPHA_TO_COVERAGE, required num SAMPLE_COVERAGE, required num NO_ERROR, required num INVALID_ENUM, required num INVALID_VALUE, required num INVALID_OPERATION, required num OUT_OF_MEMORY, required num CW, required num CCW, required num LINE_WIDTH, required num ALIASED_POINT_SIZE_RANGE, required num ALIASED_LINE_WIDTH_RANGE, required num CULL_FACE_MODE, required num FRONT_FACE, required num DEPTH_RANGE, required num DEPTH_WRITEMASK, required num DEPTH_CLEAR_VALUE, required num DEPTH_FUNC, required num STENCIL_CLEAR_VALUE, required num STENCIL_FUNC, required num STENCIL_FAIL, required num STENCIL_PASS_DEPTH_FAIL, required num STENCIL_PASS_DEPTH_PASS, required num STENCIL_REF, required num STENCIL_VALUE_MASK, required num STENCIL_WRITEMASK, required num STENCIL_BACK_FUNC, required num STENCIL_BACK_FAIL, required num STENCIL_BACK_PASS_DEPTH_FAIL, required num STENCIL_BACK_PASS_DEPTH_PASS, required num STENCIL_BACK_REF, required num STENCIL_BACK_VALUE_MASK, required num STENCIL_BACK_WRITEMASK, required num VIEWPORT, required num SCISSOR_BOX, required num COLOR_CLEAR_VALUE, required num COLOR_WRITEMASK, required num UNPACK_ALIGNMENT, required num PACK_ALIGNMENT, required num MAX_TEXTURE_SIZE, required num MAX_VIEWPORT_DIMS, required num SUBPIXEL_BITS, required num RED_BITS, required num GREEN_BITS, required num BLUE_BITS, required num ALPHA_BITS, required num DEPTH_BITS, required num STENCIL_BITS, required num POLYGON_OFFSET_UNITS, required num POLYGON_OFFSET_FACTOR, required num TEXTURE_BINDING_2D, required num SAMPLE_BUFFERS, required num SAMPLES, required num SAMPLE_COVERAGE_VALUE, required num SAMPLE_COVERAGE_INVERT, required num COMPRESSED_TEXTURE_FORMATS, required num DONT_CARE, required num FASTEST, required num NICEST, required num GENERATE_MIPMAP_HINT, required num BYTE, required num UNSIGNED_BYTE, required num SHORT, required num UNSIGNED_SHORT, required num INT, required num UNSIGNED_INT, required num FLOAT, required num DEPTH_COMPONENT, required num ALPHA, required num RGB, required num RGBA, required num LUMINANCE, required num LUMINANCE_ALPHA, required num UNSIGNED_SHORT_4_4_4_4, required num UNSIGNED_SHORT_5_5_5_1, required num UNSIGNED_SHORT_5_6_5, required num FRAGMENT_SHADER, required num VERTEX_SHADER, required num MAX_VERTEX_ATTRIBS, required num MAX_VERTEX_UNIFORM_VECTORS, required num MAX_VARYING_VECTORS, required num MAX_COMBINED_TEXTURE_IMAGE_UNITS, required num MAX_VERTEX_TEXTURE_IMAGE_UNITS, required num MAX_TEXTURE_IMAGE_UNITS, required num MAX_FRAGMENT_UNIFORM_VECTORS, required num SHADER_TYPE, required num DELETE_STATUS, required num LINK_STATUS, required num VALIDATE_STATUS, required num ATTACHED_SHADERS, required num ACTIVE_UNIFORMS, required num ACTIVE_ATTRIBUTES, required num SHADING_LANGUAGE_VERSION, required num CURRENT_PROGRAM, required num NEVER, required num LESS, required num EQUAL, required num LEQUAL, required num GREATER, required num NOTEQUAL, required num GEQUAL, required num ALWAYS, required num KEEP, required num REPLACE, required num INCR, required num DECR, required num INVERT, required num INCR_WRAP, required num DECR_WRAP, required num VENDOR, required num RENDERER, required num VERSION, required num NEAREST, required num LINEAR, required num NEAREST_MIPMAP_NEAREST, required num LINEAR_MIPMAP_NEAREST, required num NEAREST_MIPMAP_LINEAR, required num LINEAR_MIPMAP_LINEAR, required num TEXTURE_MAG_FILTER, required num TEXTURE_MIN_FILTER, required num TEXTURE_WRAP_S, required num TEXTURE_WRAP_T, required num TEXTURE_2D, required num TEXTURE, required num TEXTURE_CUBE_MAP, required num TEXTURE_BINDING_CUBE_MAP, required num TEXTURE_CUBE_MAP_POSITIVE_X, required num TEXTURE_CUBE_MAP_NEGATIVE_X, required num TEXTURE_CUBE_MAP_POSITIVE_Y, required num TEXTURE_CUBE_MAP_NEGATIVE_Y, required num TEXTURE_CUBE_MAP_POSITIVE_Z, required num TEXTURE_CUBE_MAP_NEGATIVE_Z, required num MAX_CUBE_MAP_TEXTURE_SIZE, required num TEXTURE0, required num TEXTURE1, required num TEXTURE2, required num TEXTURE3, required num TEXTURE4, required num TEXTURE5, required num TEXTURE6, required num TEXTURE7, required num TEXTURE8, required num TEXTURE9, required num TEXTURE10, required num TEXTURE11, required num TEXTURE12, required num TEXTURE13, required num TEXTURE14, required num TEXTURE15, required num TEXTURE16, required num TEXTURE17, required num TEXTURE18, required num TEXTURE19, required num TEXTURE20, required num TEXTURE21, required num TEXTURE22, required num TEXTURE23, required num TEXTURE24, required num TEXTURE25, required num TEXTURE26, required num TEXTURE27, required num TEXTURE28, required num TEXTURE29, required num TEXTURE30, required num TEXTURE31, required num ACTIVE_TEXTURE, required num REPEAT, required num CLAMP_TO_EDGE, required num MIRRORED_REPEAT, required num FLOAT_VEC2, required num FLOAT_VEC3, required num FLOAT_VEC4, required num INT_VEC2, required num INT_VEC3, required num INT_VEC4, required num BOOL, required num BOOL_VEC2, required num BOOL_VEC3, required num BOOL_VEC4, required num FLOAT_MAT2, required num FLOAT_MAT3, required num FLOAT_MAT4, required num SAMPLER_2D, required num SAMPLER_CUBE, required num VERTEX_ATTRIB_ARRAY_ENABLED, required num VERTEX_ATTRIB_ARRAY_SIZE, required num VERTEX_ATTRIB_ARRAY_STRIDE, required num VERTEX_ATTRIB_ARRAY_TYPE, required num VERTEX_ATTRIB_ARRAY_NORMALIZED, required num VERTEX_ATTRIB_ARRAY_POINTER, required num VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, required num IMPLEMENTATION_COLOR_READ_TYPE, required num IMPLEMENTATION_COLOR_READ_FORMAT, required num COMPILE_STATUS, required num LOW_FLOAT, required num MEDIUM_FLOAT, required num HIGH_FLOAT, required num LOW_INT, required num MEDIUM_INT, required num HIGH_INT, required num FRAMEBUFFER, required num RENDERBUFFER, required num RGBA4, required num RGB5_A1, required num RGBA8, required num RGB565, required num DEPTH_COMPONENT16, required num STENCIL_INDEX8, required num DEPTH_STENCIL, required num RENDERBUFFER_WIDTH, required num RENDERBUFFER_HEIGHT, required num RENDERBUFFER_INTERNAL_FORMAT, required num RENDERBUFFER_RED_SIZE, required num RENDERBUFFER_GREEN_SIZE, required num RENDERBUFFER_BLUE_SIZE, required num RENDERBUFFER_ALPHA_SIZE, required num RENDERBUFFER_DEPTH_SIZE, required num RENDERBUFFER_STENCIL_SIZE, required num FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, required num FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, required num FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, required num FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, required num COLOR_ATTACHMENT0, required num DEPTH_ATTACHMENT, required num STENCIL_ATTACHMENT, required num DEPTH_STENCIL_ATTACHMENT, required num NONE, required num FRAMEBUFFER_COMPLETE, required num FRAMEBUFFER_INCOMPLETE_ATTACHMENT, required num FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT, required num FRAMEBUFFER_INCOMPLETE_DIMENSIONS, required num FRAMEBUFFER_UNSUPPORTED, required num FRAMEBUFFER_BINDING, required num RENDERBUFFER_BINDING, required num MAX_RENDERBUFFER_SIZE, required num INVALID_FRAMEBUFFER_OPERATION, required num UNPACK_FLIP_Y_WEBGL, required num UNPACK_PREMULTIPLY_ALPHA_WEBGL, required num CONTEXT_LOST_WEBGL, required num UNPACK_COLORSPACE_CONVERSION_WEBGL, required num BROWSER_DEFAULT_WEBGL});
}
extension AnonInterface$624Extension on AnonInterface$624 {
  external WebGL2RenderingContext get prototype;
  external set prototype(WebGL2RenderingContext value);
  external num get READ_BUFFER;
  external num get UNPACK_ROW_LENGTH;
  external num get UNPACK_SKIP_ROWS;
  external num get UNPACK_SKIP_PIXELS;
  external num get PACK_ROW_LENGTH;
  external num get PACK_SKIP_ROWS;
  external num get PACK_SKIP_PIXELS;
  external num get COLOR;
  external num get DEPTH;
  external num get STENCIL;
  external num get RED;
  external num get RGB8;
  external num get RGB10_A2;
  external num get TEXTURE_BINDING_3D;
  external num get UNPACK_SKIP_IMAGES;
  external num get UNPACK_IMAGE_HEIGHT;
  external num get TEXTURE_3D;
  external num get TEXTURE_WRAP_R;
  external num get MAX_3D_TEXTURE_SIZE;
  external num get UNSIGNED_INT_2_10_10_10_REV;
  external num get MAX_ELEMENTS_VERTICES;
  external num get MAX_ELEMENTS_INDICES;
  external num get TEXTURE_MIN_LOD;
  external num get TEXTURE_MAX_LOD;
  external num get TEXTURE_BASE_LEVEL;
  external num get TEXTURE_MAX_LEVEL;
  external num get MIN;
  external num get MAX;
  external num get DEPTH_COMPONENT24;
  external num get MAX_TEXTURE_LOD_BIAS;
  external num get TEXTURE_COMPARE_MODE;
  external num get TEXTURE_COMPARE_FUNC;
  external num get CURRENT_QUERY;
  external num get QUERY_RESULT;
  external num get QUERY_RESULT_AVAILABLE;
  external num get STREAM_READ;
  external num get STREAM_COPY;
  external num get STATIC_READ;
  external num get STATIC_COPY;
  external num get DYNAMIC_READ;
  external num get DYNAMIC_COPY;
  external num get MAX_DRAW_BUFFERS;
  external num get DRAW_BUFFER0;
  external num get DRAW_BUFFER1;
  external num get DRAW_BUFFER2;
  external num get DRAW_BUFFER3;
  external num get DRAW_BUFFER4;
  external num get DRAW_BUFFER5;
  external num get DRAW_BUFFER6;
  external num get DRAW_BUFFER7;
  external num get DRAW_BUFFER8;
  external num get DRAW_BUFFER9;
  external num get DRAW_BUFFER10;
  external num get DRAW_BUFFER11;
  external num get DRAW_BUFFER12;
  external num get DRAW_BUFFER13;
  external num get DRAW_BUFFER14;
  external num get DRAW_BUFFER15;
  external num get MAX_FRAGMENT_UNIFORM_COMPONENTS;
  external num get MAX_VERTEX_UNIFORM_COMPONENTS;
  external num get SAMPLER_3D;
  external num get SAMPLER_2D_SHADOW;
  external num get FRAGMENT_SHADER_DERIVATIVE_HINT;
  external num get PIXEL_PACK_BUFFER;
  external num get PIXEL_UNPACK_BUFFER;
  external num get PIXEL_PACK_BUFFER_BINDING;
  external num get PIXEL_UNPACK_BUFFER_BINDING;
  external num get FLOAT_MAT2x3;
  external num get FLOAT_MAT2x4;
  external num get FLOAT_MAT3x2;
  external num get FLOAT_MAT3x4;
  external num get FLOAT_MAT4x2;
  external num get FLOAT_MAT4x3;
  external num get SRGB;
  external num get SRGB8;
  external num get SRGB8_ALPHA8;
  external num get COMPARE_REF_TO_TEXTURE;
  external num get RGBA32F;
  external num get RGB32F;
  external num get RGBA16F;
  external num get RGB16F;
  external num get VERTEX_ATTRIB_ARRAY_INTEGER;
  external num get MAX_ARRAY_TEXTURE_LAYERS;
  external num get MIN_PROGRAM_TEXEL_OFFSET;
  external num get MAX_PROGRAM_TEXEL_OFFSET;
  external num get MAX_VARYING_COMPONENTS;
  external num get TEXTURE_2D_ARRAY;
  external num get TEXTURE_BINDING_2D_ARRAY;
  external num get R11F_G11F_B10F;
  external num get UNSIGNED_INT_10F_11F_11F_REV;
  external num get RGB9_E5;
  external num get UNSIGNED_INT_5_9_9_9_REV;
  external num get TRANSFORM_FEEDBACK_BUFFER_MODE;
  external num get MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS;
  external num get TRANSFORM_FEEDBACK_VARYINGS;
  external num get TRANSFORM_FEEDBACK_BUFFER_START;
  external num get TRANSFORM_FEEDBACK_BUFFER_SIZE;
  external num get TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN;
  external num get RASTERIZER_DISCARD;
  external num get MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS;
  external num get MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS;
  external num get INTERLEAVED_ATTRIBS;
  external num get SEPARATE_ATTRIBS;
  external num get TRANSFORM_FEEDBACK_BUFFER;
  external num get TRANSFORM_FEEDBACK_BUFFER_BINDING;
  external num get RGBA32UI;
  external num get RGB32UI;
  external num get RGBA16UI;
  external num get RGB16UI;
  external num get RGBA8UI;
  external num get RGB8UI;
  external num get RGBA32I;
  external num get RGB32I;
  external num get RGBA16I;
  external num get RGB16I;
  external num get RGBA8I;
  external num get RGB8I;
  external num get RED_INTEGER;
  external num get RGB_INTEGER;
  external num get RGBA_INTEGER;
  external num get SAMPLER_2D_ARRAY;
  external num get SAMPLER_2D_ARRAY_SHADOW;
  external num get SAMPLER_CUBE_SHADOW;
  external num get UNSIGNED_INT_VEC2;
  external num get UNSIGNED_INT_VEC3;
  external num get UNSIGNED_INT_VEC4;
  external num get INT_SAMPLER_2D;
  external num get INT_SAMPLER_3D;
  external num get INT_SAMPLER_CUBE;
  external num get INT_SAMPLER_2D_ARRAY;
  external num get UNSIGNED_INT_SAMPLER_2D;
  external num get UNSIGNED_INT_SAMPLER_3D;
  external num get UNSIGNED_INT_SAMPLER_CUBE;
  external num get UNSIGNED_INT_SAMPLER_2D_ARRAY;
  external num get DEPTH_COMPONENT32F;
  external num get DEPTH32F_STENCIL8;
  external num get FLOAT_32_UNSIGNED_INT_24_8_REV;
  external num get FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING;
  external num get FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE;
  external num get FRAMEBUFFER_ATTACHMENT_RED_SIZE;
  external num get FRAMEBUFFER_ATTACHMENT_GREEN_SIZE;
  external num get FRAMEBUFFER_ATTACHMENT_BLUE_SIZE;
  external num get FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE;
  external num get FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE;
  external num get FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE;
  external num get FRAMEBUFFER_DEFAULT;
  external num get UNSIGNED_INT_24_8;
  external num get DEPTH24_STENCIL8;
  external num get UNSIGNED_NORMALIZED;
  external num get DRAW_FRAMEBUFFER_BINDING;
  external num get READ_FRAMEBUFFER;
  external num get DRAW_FRAMEBUFFER;
  external num get READ_FRAMEBUFFER_BINDING;
  external num get RENDERBUFFER_SAMPLES;
  external num get FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER;
  external num get MAX_COLOR_ATTACHMENTS;
  external num get COLOR_ATTACHMENT1;
  external num get COLOR_ATTACHMENT2;
  external num get COLOR_ATTACHMENT3;
  external num get COLOR_ATTACHMENT4;
  external num get COLOR_ATTACHMENT5;
  external num get COLOR_ATTACHMENT6;
  external num get COLOR_ATTACHMENT7;
  external num get COLOR_ATTACHMENT8;
  external num get COLOR_ATTACHMENT9;
  external num get COLOR_ATTACHMENT10;
  external num get COLOR_ATTACHMENT11;
  external num get COLOR_ATTACHMENT12;
  external num get COLOR_ATTACHMENT13;
  external num get COLOR_ATTACHMENT14;
  external num get COLOR_ATTACHMENT15;
  external num get FRAMEBUFFER_INCOMPLETE_MULTISAMPLE;
  external num get MAX_SAMPLES;
  external num get HALF_FLOAT;
  external num get RG;
  external num get RG_INTEGER;
  external num get R8;
  external num get RG8;
  external num get R16F;
  external num get R32F;
  external num get RG16F;
  external num get RG32F;
  external num get R8I;
  external num get R8UI;
  external num get R16I;
  external num get R16UI;
  external num get R32I;
  external num get R32UI;
  external num get RG8I;
  external num get RG8UI;
  external num get RG16I;
  external num get RG16UI;
  external num get RG32I;
  external num get RG32UI;
  external num get VERTEX_ARRAY_BINDING;
  external num get R8_SNORM;
  external num get RG8_SNORM;
  external num get RGB8_SNORM;
  external num get RGBA8_SNORM;
  external num get SIGNED_NORMALIZED;
  external num get COPY_READ_BUFFER;
  external num get COPY_WRITE_BUFFER;
  external num get COPY_READ_BUFFER_BINDING;
  external num get COPY_WRITE_BUFFER_BINDING;
  external num get UNIFORM_BUFFER;
  external num get UNIFORM_BUFFER_BINDING;
  external num get UNIFORM_BUFFER_START;
  external num get UNIFORM_BUFFER_SIZE;
  external num get MAX_VERTEX_UNIFORM_BLOCKS;
  external num get MAX_FRAGMENT_UNIFORM_BLOCKS;
  external num get MAX_COMBINED_UNIFORM_BLOCKS;
  external num get MAX_UNIFORM_BUFFER_BINDINGS;
  external num get MAX_UNIFORM_BLOCK_SIZE;
  external num get MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS;
  external num get MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS;
  external num get UNIFORM_BUFFER_OFFSET_ALIGNMENT;
  external num get ACTIVE_UNIFORM_BLOCKS;
  external num get UNIFORM_TYPE;
  external num get UNIFORM_SIZE;
  external num get UNIFORM_BLOCK_INDEX;
  external num get UNIFORM_OFFSET;
  external num get UNIFORM_ARRAY_STRIDE;
  external num get UNIFORM_MATRIX_STRIDE;
  external num get UNIFORM_IS_ROW_MAJOR;
  external num get UNIFORM_BLOCK_BINDING;
  external num get UNIFORM_BLOCK_DATA_SIZE;
  external num get UNIFORM_BLOCK_ACTIVE_UNIFORMS;
  external num get UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES;
  external num get UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER;
  external num get UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER;
  external num get INVALID_INDEX;
  external num get MAX_VERTEX_OUTPUT_COMPONENTS;
  external num get MAX_FRAGMENT_INPUT_COMPONENTS;
  external num get MAX_SERVER_WAIT_TIMEOUT;
  external num get OBJECT_TYPE;
  external num get SYNC_CONDITION;
  external num get SYNC_STATUS;
  external num get SYNC_FLAGS;
  external num get SYNC_FENCE;
  external num get SYNC_GPU_COMMANDS_COMPLETE;
  external num get UNSIGNALED;
  external num get SIGNALED;
  external num get ALREADY_SIGNALED;
  external num get TIMEOUT_EXPIRED;
  external num get CONDITION_SATISFIED;
  external num get WAIT_FAILED;
  external num get SYNC_FLUSH_COMMANDS_BIT;
  external num get VERTEX_ATTRIB_ARRAY_DIVISOR;
  external num get ANY_SAMPLES_PASSED;
  external num get ANY_SAMPLES_PASSED_CONSERVATIVE;
  external num get SAMPLER_BINDING;
  external num get RGB10_A2UI;
  external num get INT_2_10_10_10_REV;
  external num get TRANSFORM_FEEDBACK;
  external num get TRANSFORM_FEEDBACK_PAUSED;
  external num get TRANSFORM_FEEDBACK_ACTIVE;
  external num get TRANSFORM_FEEDBACK_BINDING;
  external num get TEXTURE_IMMUTABLE_FORMAT;
  external num get MAX_ELEMENT_INDEX;
  external num get TEXTURE_IMMUTABLE_LEVELS;
  external num get TIMEOUT_IGNORED;
  external num get MAX_CLIENT_WAIT_TIMEOUT_WEBGL;
  external num get DEPTH_BUFFER_BIT;
  external num get STENCIL_BUFFER_BIT;
  external num get COLOR_BUFFER_BIT;
  external num get POINTS;
  external num get LINES;
  external num get LINE_LOOP;
  external num get LINE_STRIP;
  external num get TRIANGLES;
  external num get TRIANGLE_STRIP;
  external num get TRIANGLE_FAN;
  external num get ZERO;
  external num get ONE;
  external num get SRC_COLOR;
  external num get ONE_MINUS_SRC_COLOR;
  external num get SRC_ALPHA;
  external num get ONE_MINUS_SRC_ALPHA;
  external num get DST_ALPHA;
  external num get ONE_MINUS_DST_ALPHA;
  external num get DST_COLOR;
  external num get ONE_MINUS_DST_COLOR;
  external num get SRC_ALPHA_SATURATE;
  external num get FUNC_ADD;
  external num get BLEND_EQUATION;
  external num get BLEND_EQUATION_RGB;
  external num get BLEND_EQUATION_ALPHA;
  external num get FUNC_SUBTRACT;
  external num get FUNC_REVERSE_SUBTRACT;
  external num get BLEND_DST_RGB;
  external num get BLEND_SRC_RGB;
  external num get BLEND_DST_ALPHA;
  external num get BLEND_SRC_ALPHA;
  external num get CONSTANT_COLOR;
  external num get ONE_MINUS_CONSTANT_COLOR;
  external num get CONSTANT_ALPHA;
  external num get ONE_MINUS_CONSTANT_ALPHA;
  external num get BLEND_COLOR;
  external num get ARRAY_BUFFER;
  external num get ELEMENT_ARRAY_BUFFER;
  external num get ARRAY_BUFFER_BINDING;
  external num get ELEMENT_ARRAY_BUFFER_BINDING;
  external num get STREAM_DRAW;
  external num get STATIC_DRAW;
  external num get DYNAMIC_DRAW;
  external num get BUFFER_SIZE;
  external num get BUFFER_USAGE;
  external num get CURRENT_VERTEX_ATTRIB;
  external num get FRONT;
  external num get BACK;
  external num get FRONT_AND_BACK;
  external num get CULL_FACE;
  external num get BLEND;
  external num get DITHER;
  external num get STENCIL_TEST;
  external num get DEPTH_TEST;
  external num get SCISSOR_TEST;
  external num get POLYGON_OFFSET_FILL;
  external num get SAMPLE_ALPHA_TO_COVERAGE;
  external num get SAMPLE_COVERAGE;
  external num get NO_ERROR;
  external num get INVALID_ENUM;
  external num get INVALID_VALUE;
  external num get INVALID_OPERATION;
  external num get OUT_OF_MEMORY;
  external num get CW;
  external num get CCW;
  external num get LINE_WIDTH;
  external num get ALIASED_POINT_SIZE_RANGE;
  external num get ALIASED_LINE_WIDTH_RANGE;
  external num get CULL_FACE_MODE;
  external num get FRONT_FACE;
  external num get DEPTH_RANGE;
  external num get DEPTH_WRITEMASK;
  external num get DEPTH_CLEAR_VALUE;
  external num get DEPTH_FUNC;
  external num get STENCIL_CLEAR_VALUE;
  external num get STENCIL_FUNC;
  external num get STENCIL_FAIL;
  external num get STENCIL_PASS_DEPTH_FAIL;
  external num get STENCIL_PASS_DEPTH_PASS;
  external num get STENCIL_REF;
  external num get STENCIL_VALUE_MASK;
  external num get STENCIL_WRITEMASK;
  external num get STENCIL_BACK_FUNC;
  external num get STENCIL_BACK_FAIL;
  external num get STENCIL_BACK_PASS_DEPTH_FAIL;
  external num get STENCIL_BACK_PASS_DEPTH_PASS;
  external num get STENCIL_BACK_REF;
  external num get STENCIL_BACK_VALUE_MASK;
  external num get STENCIL_BACK_WRITEMASK;
  external num get VIEWPORT;
  external num get SCISSOR_BOX;
  external num get COLOR_CLEAR_VALUE;
  external num get COLOR_WRITEMASK;
  external num get UNPACK_ALIGNMENT;
  external num get PACK_ALIGNMENT;
  external num get MAX_TEXTURE_SIZE;
  external num get MAX_VIEWPORT_DIMS;
  external num get SUBPIXEL_BITS;
  external num get RED_BITS;
  external num get GREEN_BITS;
  external num get BLUE_BITS;
  external num get ALPHA_BITS;
  external num get DEPTH_BITS;
  external num get STENCIL_BITS;
  external num get POLYGON_OFFSET_UNITS;
  external num get POLYGON_OFFSET_FACTOR;
  external num get TEXTURE_BINDING_2D;
  external num get SAMPLE_BUFFERS;
  external num get SAMPLES;
  external num get SAMPLE_COVERAGE_VALUE;
  external num get SAMPLE_COVERAGE_INVERT;
  external num get COMPRESSED_TEXTURE_FORMATS;
  external num get DONT_CARE;
  external num get FASTEST;
  external num get NICEST;
  external num get GENERATE_MIPMAP_HINT;
  external num get BYTE;
  external num get UNSIGNED_BYTE;
  external num get SHORT;
  external num get UNSIGNED_SHORT;
  external num get INT;
  external num get UNSIGNED_INT;
  external num get FLOAT;
  external num get DEPTH_COMPONENT;
  external num get ALPHA;
  external num get RGB;
  external num get RGBA;
  external num get LUMINANCE;
  external num get LUMINANCE_ALPHA;
  external num get UNSIGNED_SHORT_4_4_4_4;
  external num get UNSIGNED_SHORT_5_5_5_1;
  external num get UNSIGNED_SHORT_5_6_5;
  external num get FRAGMENT_SHADER;
  external num get VERTEX_SHADER;
  external num get MAX_VERTEX_ATTRIBS;
  external num get MAX_VERTEX_UNIFORM_VECTORS;
  external num get MAX_VARYING_VECTORS;
  external num get MAX_COMBINED_TEXTURE_IMAGE_UNITS;
  external num get MAX_VERTEX_TEXTURE_IMAGE_UNITS;
  external num get MAX_TEXTURE_IMAGE_UNITS;
  external num get MAX_FRAGMENT_UNIFORM_VECTORS;
  external num get SHADER_TYPE;
  external num get DELETE_STATUS;
  external num get LINK_STATUS;
  external num get VALIDATE_STATUS;
  external num get ATTACHED_SHADERS;
  external num get ACTIVE_UNIFORMS;
  external num get ACTIVE_ATTRIBUTES;
  external num get SHADING_LANGUAGE_VERSION;
  external num get CURRENT_PROGRAM;
  external num get NEVER;
  external num get LESS;
  external num get EQUAL;
  external num get LEQUAL;
  external num get GREATER;
  external num get NOTEQUAL;
  external num get GEQUAL;
  external num get ALWAYS;
  external num get KEEP;
  external num get REPLACE;
  external num get INCR;
  external num get DECR;
  external num get INVERT;
  external num get INCR_WRAP;
  external num get DECR_WRAP;
  external num get VENDOR;
  external num get RENDERER;
  external num get VERSION;
  external num get NEAREST;
  external num get LINEAR;
  external num get NEAREST_MIPMAP_NEAREST;
  external num get LINEAR_MIPMAP_NEAREST;
  external num get NEAREST_MIPMAP_LINEAR;
  external num get LINEAR_MIPMAP_LINEAR;
  external num get TEXTURE_MAG_FILTER;
  external num get TEXTURE_MIN_FILTER;
  external num get TEXTURE_WRAP_S;
  external num get TEXTURE_WRAP_T;
  external num get TEXTURE_2D;
  external num get TEXTURE;
  external num get TEXTURE_CUBE_MAP;
  external num get TEXTURE_BINDING_CUBE_MAP;
  external num get TEXTURE_CUBE_MAP_POSITIVE_X;
  external num get TEXTURE_CUBE_MAP_NEGATIVE_X;
  external num get TEXTURE_CUBE_MAP_POSITIVE_Y;
  external num get TEXTURE_CUBE_MAP_NEGATIVE_Y;
  external num get TEXTURE_CUBE_MAP_POSITIVE_Z;
  external num get TEXTURE_CUBE_MAP_NEGATIVE_Z;
  external num get MAX_CUBE_MAP_TEXTURE_SIZE;
  external num get TEXTURE0;
  external num get TEXTURE1;
  external num get TEXTURE2;
  external num get TEXTURE3;
  external num get TEXTURE4;
  external num get TEXTURE5;
  external num get TEXTURE6;
  external num get TEXTURE7;
  external num get TEXTURE8;
  external num get TEXTURE9;
  external num get TEXTURE10;
  external num get TEXTURE11;
  external num get TEXTURE12;
  external num get TEXTURE13;
  external num get TEXTURE14;
  external num get TEXTURE15;
  external num get TEXTURE16;
  external num get TEXTURE17;
  external num get TEXTURE18;
  external num get TEXTURE19;
  external num get TEXTURE20;
  external num get TEXTURE21;
  external num get TEXTURE22;
  external num get TEXTURE23;
  external num get TEXTURE24;
  external num get TEXTURE25;
  external num get TEXTURE26;
  external num get TEXTURE27;
  external num get TEXTURE28;
  external num get TEXTURE29;
  external num get TEXTURE30;
  external num get TEXTURE31;
  external num get ACTIVE_TEXTURE;
  external num get REPEAT;
  external num get CLAMP_TO_EDGE;
  external num get MIRRORED_REPEAT;
  external num get FLOAT_VEC2;
  external num get FLOAT_VEC3;
  external num get FLOAT_VEC4;
  external num get INT_VEC2;
  external num get INT_VEC3;
  external num get INT_VEC4;
  external num get BOOL;
  external num get BOOL_VEC2;
  external num get BOOL_VEC3;
  external num get BOOL_VEC4;
  external num get FLOAT_MAT2;
  external num get FLOAT_MAT3;
  external num get FLOAT_MAT4;
  external num get SAMPLER_2D;
  external num get SAMPLER_CUBE;
  external num get VERTEX_ATTRIB_ARRAY_ENABLED;
  external num get VERTEX_ATTRIB_ARRAY_SIZE;
  external num get VERTEX_ATTRIB_ARRAY_STRIDE;
  external num get VERTEX_ATTRIB_ARRAY_TYPE;
  external num get VERTEX_ATTRIB_ARRAY_NORMALIZED;
  external num get VERTEX_ATTRIB_ARRAY_POINTER;
  external num get VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
  external num get IMPLEMENTATION_COLOR_READ_TYPE;
  external num get IMPLEMENTATION_COLOR_READ_FORMAT;
  external num get COMPILE_STATUS;
  external num get LOW_FLOAT;
  external num get MEDIUM_FLOAT;
  external num get HIGH_FLOAT;
  external num get LOW_INT;
  external num get MEDIUM_INT;
  external num get HIGH_INT;
  external num get FRAMEBUFFER;
  external num get RENDERBUFFER;
  external num get RGBA4;
  external num get RGB5_A1;
  external num get RGBA8;
  external num get RGB565;
  external num get DEPTH_COMPONENT16;
  external num get STENCIL_INDEX8;
  external num get DEPTH_STENCIL;
  external num get RENDERBUFFER_WIDTH;
  external num get RENDERBUFFER_HEIGHT;
  external num get RENDERBUFFER_INTERNAL_FORMAT;
  external num get RENDERBUFFER_RED_SIZE;
  external num get RENDERBUFFER_GREEN_SIZE;
  external num get RENDERBUFFER_BLUE_SIZE;
  external num get RENDERBUFFER_ALPHA_SIZE;
  external num get RENDERBUFFER_DEPTH_SIZE;
  external num get RENDERBUFFER_STENCIL_SIZE;
  external num get FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
  external num get FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
  external num get FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
  external num get FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
  external num get COLOR_ATTACHMENT0;
  external num get DEPTH_ATTACHMENT;
  external num get STENCIL_ATTACHMENT;
  external num get DEPTH_STENCIL_ATTACHMENT;
  external num get NONE;
  external num get FRAMEBUFFER_COMPLETE;
  external num get FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
  external num get FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
  external num get FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
  external num get FRAMEBUFFER_UNSUPPORTED;
  external num get FRAMEBUFFER_BINDING;
  external num get RENDERBUFFER_BINDING;
  external num get MAX_RENDERBUFFER_SIZE;
  external num get INVALID_FRAMEBUFFER_OPERATION;
  external num get UNPACK_FLIP_Y_WEBGL;
  external num get UNPACK_PREMULTIPLY_ALPHA_WEBGL;
  external num get CONTEXT_LOST_WEBGL;
  external num get UNPACK_COLORSPACE_CONVERSION_WEBGL;
  external num get BROWSER_DEFAULT_WEBGL;
}
@JS()
@anonymous
class AnonInterface$625{
  external factory AnonInterface$625({required WebGLActiveInfo prototype});
}
extension AnonInterface$625Extension on AnonInterface$625 {
  external WebGLActiveInfo get prototype;
  external set prototype(WebGLActiveInfo value);
}
@JS()
@anonymous
class AnonInterface$626{
  external factory AnonInterface$626({required WebGLBuffer prototype});
}
extension AnonInterface$626Extension on AnonInterface$626 {
  external WebGLBuffer get prototype;
  external set prototype(WebGLBuffer value);
}
@JS()
@anonymous
class AnonInterface$627{
  external factory AnonInterface$627({required WebGLContextEvent prototype});
}
extension AnonInterface$627Extension on AnonInterface$627 {
  external WebGLContextEvent get prototype;
  external set prototype(WebGLContextEvent value);
}
@JS()
@anonymous
class AnonInterface$628{
  external factory AnonInterface$628({required WebGLFramebuffer prototype});
}
extension AnonInterface$628Extension on AnonInterface$628 {
  external WebGLFramebuffer get prototype;
  external set prototype(WebGLFramebuffer value);
}
@JS()
@anonymous
class AnonInterface$629{
  external factory AnonInterface$629({required WebGLProgram prototype});
}
extension AnonInterface$629Extension on AnonInterface$629 {
  external WebGLProgram get prototype;
  external set prototype(WebGLProgram value);
}
@JS()
@anonymous
class AnonInterface$630{
  external factory AnonInterface$630({required WebGLQuery prototype});
}
extension AnonInterface$630Extension on AnonInterface$630 {
  external WebGLQuery get prototype;
  external set prototype(WebGLQuery value);
}
@JS()
@anonymous
class AnonInterface$631{
  external factory AnonInterface$631({required WebGLRenderbuffer prototype});
}
extension AnonInterface$631Extension on AnonInterface$631 {
  external WebGLRenderbuffer get prototype;
  external set prototype(WebGLRenderbuffer value);
}
@JS()
@anonymous
class AnonInterface$632{
  external factory AnonInterface$632({required WebGLRenderingContext prototype, required num DEPTH_BUFFER_BIT, required num STENCIL_BUFFER_BIT, required num COLOR_BUFFER_BIT, required num POINTS, required num LINES, required num LINE_LOOP, required num LINE_STRIP, required num TRIANGLES, required num TRIANGLE_STRIP, required num TRIANGLE_FAN, required num ZERO, required num ONE, required num SRC_COLOR, required num ONE_MINUS_SRC_COLOR, required num SRC_ALPHA, required num ONE_MINUS_SRC_ALPHA, required num DST_ALPHA, required num ONE_MINUS_DST_ALPHA, required num DST_COLOR, required num ONE_MINUS_DST_COLOR, required num SRC_ALPHA_SATURATE, required num FUNC_ADD, required num BLEND_EQUATION, required num BLEND_EQUATION_RGB, required num BLEND_EQUATION_ALPHA, required num FUNC_SUBTRACT, required num FUNC_REVERSE_SUBTRACT, required num BLEND_DST_RGB, required num BLEND_SRC_RGB, required num BLEND_DST_ALPHA, required num BLEND_SRC_ALPHA, required num CONSTANT_COLOR, required num ONE_MINUS_CONSTANT_COLOR, required num CONSTANT_ALPHA, required num ONE_MINUS_CONSTANT_ALPHA, required num BLEND_COLOR, required num ARRAY_BUFFER, required num ELEMENT_ARRAY_BUFFER, required num ARRAY_BUFFER_BINDING, required num ELEMENT_ARRAY_BUFFER_BINDING, required num STREAM_DRAW, required num STATIC_DRAW, required num DYNAMIC_DRAW, required num BUFFER_SIZE, required num BUFFER_USAGE, required num CURRENT_VERTEX_ATTRIB, required num FRONT, required num BACK, required num FRONT_AND_BACK, required num CULL_FACE, required num BLEND, required num DITHER, required num STENCIL_TEST, required num DEPTH_TEST, required num SCISSOR_TEST, required num POLYGON_OFFSET_FILL, required num SAMPLE_ALPHA_TO_COVERAGE, required num SAMPLE_COVERAGE, required num NO_ERROR, required num INVALID_ENUM, required num INVALID_VALUE, required num INVALID_OPERATION, required num OUT_OF_MEMORY, required num CW, required num CCW, required num LINE_WIDTH, required num ALIASED_POINT_SIZE_RANGE, required num ALIASED_LINE_WIDTH_RANGE, required num CULL_FACE_MODE, required num FRONT_FACE, required num DEPTH_RANGE, required num DEPTH_WRITEMASK, required num DEPTH_CLEAR_VALUE, required num DEPTH_FUNC, required num STENCIL_CLEAR_VALUE, required num STENCIL_FUNC, required num STENCIL_FAIL, required num STENCIL_PASS_DEPTH_FAIL, required num STENCIL_PASS_DEPTH_PASS, required num STENCIL_REF, required num STENCIL_VALUE_MASK, required num STENCIL_WRITEMASK, required num STENCIL_BACK_FUNC, required num STENCIL_BACK_FAIL, required num STENCIL_BACK_PASS_DEPTH_FAIL, required num STENCIL_BACK_PASS_DEPTH_PASS, required num STENCIL_BACK_REF, required num STENCIL_BACK_VALUE_MASK, required num STENCIL_BACK_WRITEMASK, required num VIEWPORT, required num SCISSOR_BOX, required num COLOR_CLEAR_VALUE, required num COLOR_WRITEMASK, required num UNPACK_ALIGNMENT, required num PACK_ALIGNMENT, required num MAX_TEXTURE_SIZE, required num MAX_VIEWPORT_DIMS, required num SUBPIXEL_BITS, required num RED_BITS, required num GREEN_BITS, required num BLUE_BITS, required num ALPHA_BITS, required num DEPTH_BITS, required num STENCIL_BITS, required num POLYGON_OFFSET_UNITS, required num POLYGON_OFFSET_FACTOR, required num TEXTURE_BINDING_2D, required num SAMPLE_BUFFERS, required num SAMPLES, required num SAMPLE_COVERAGE_VALUE, required num SAMPLE_COVERAGE_INVERT, required num COMPRESSED_TEXTURE_FORMATS, required num DONT_CARE, required num FASTEST, required num NICEST, required num GENERATE_MIPMAP_HINT, required num BYTE, required num UNSIGNED_BYTE, required num SHORT, required num UNSIGNED_SHORT, required num INT, required num UNSIGNED_INT, required num FLOAT, required num DEPTH_COMPONENT, required num ALPHA, required num RGB, required num RGBA, required num LUMINANCE, required num LUMINANCE_ALPHA, required num UNSIGNED_SHORT_4_4_4_4, required num UNSIGNED_SHORT_5_5_5_1, required num UNSIGNED_SHORT_5_6_5, required num FRAGMENT_SHADER, required num VERTEX_SHADER, required num MAX_VERTEX_ATTRIBS, required num MAX_VERTEX_UNIFORM_VECTORS, required num MAX_VARYING_VECTORS, required num MAX_COMBINED_TEXTURE_IMAGE_UNITS, required num MAX_VERTEX_TEXTURE_IMAGE_UNITS, required num MAX_TEXTURE_IMAGE_UNITS, required num MAX_FRAGMENT_UNIFORM_VECTORS, required num SHADER_TYPE, required num DELETE_STATUS, required num LINK_STATUS, required num VALIDATE_STATUS, required num ATTACHED_SHADERS, required num ACTIVE_UNIFORMS, required num ACTIVE_ATTRIBUTES, required num SHADING_LANGUAGE_VERSION, required num CURRENT_PROGRAM, required num NEVER, required num LESS, required num EQUAL, required num LEQUAL, required num GREATER, required num NOTEQUAL, required num GEQUAL, required num ALWAYS, required num KEEP, required num REPLACE, required num INCR, required num DECR, required num INVERT, required num INCR_WRAP, required num DECR_WRAP, required num VENDOR, required num RENDERER, required num VERSION, required num NEAREST, required num LINEAR, required num NEAREST_MIPMAP_NEAREST, required num LINEAR_MIPMAP_NEAREST, required num NEAREST_MIPMAP_LINEAR, required num LINEAR_MIPMAP_LINEAR, required num TEXTURE_MAG_FILTER, required num TEXTURE_MIN_FILTER, required num TEXTURE_WRAP_S, required num TEXTURE_WRAP_T, required num TEXTURE_2D, required num TEXTURE, required num TEXTURE_CUBE_MAP, required num TEXTURE_BINDING_CUBE_MAP, required num TEXTURE_CUBE_MAP_POSITIVE_X, required num TEXTURE_CUBE_MAP_NEGATIVE_X, required num TEXTURE_CUBE_MAP_POSITIVE_Y, required num TEXTURE_CUBE_MAP_NEGATIVE_Y, required num TEXTURE_CUBE_MAP_POSITIVE_Z, required num TEXTURE_CUBE_MAP_NEGATIVE_Z, required num MAX_CUBE_MAP_TEXTURE_SIZE, required num TEXTURE0, required num TEXTURE1, required num TEXTURE2, required num TEXTURE3, required num TEXTURE4, required num TEXTURE5, required num TEXTURE6, required num TEXTURE7, required num TEXTURE8, required num TEXTURE9, required num TEXTURE10, required num TEXTURE11, required num TEXTURE12, required num TEXTURE13, required num TEXTURE14, required num TEXTURE15, required num TEXTURE16, required num TEXTURE17, required num TEXTURE18, required num TEXTURE19, required num TEXTURE20, required num TEXTURE21, required num TEXTURE22, required num TEXTURE23, required num TEXTURE24, required num TEXTURE25, required num TEXTURE26, required num TEXTURE27, required num TEXTURE28, required num TEXTURE29, required num TEXTURE30, required num TEXTURE31, required num ACTIVE_TEXTURE, required num REPEAT, required num CLAMP_TO_EDGE, required num MIRRORED_REPEAT, required num FLOAT_VEC2, required num FLOAT_VEC3, required num FLOAT_VEC4, required num INT_VEC2, required num INT_VEC3, required num INT_VEC4, required num BOOL, required num BOOL_VEC2, required num BOOL_VEC3, required num BOOL_VEC4, required num FLOAT_MAT2, required num FLOAT_MAT3, required num FLOAT_MAT4, required num SAMPLER_2D, required num SAMPLER_CUBE, required num VERTEX_ATTRIB_ARRAY_ENABLED, required num VERTEX_ATTRIB_ARRAY_SIZE, required num VERTEX_ATTRIB_ARRAY_STRIDE, required num VERTEX_ATTRIB_ARRAY_TYPE, required num VERTEX_ATTRIB_ARRAY_NORMALIZED, required num VERTEX_ATTRIB_ARRAY_POINTER, required num VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, required num IMPLEMENTATION_COLOR_READ_TYPE, required num IMPLEMENTATION_COLOR_READ_FORMAT, required num COMPILE_STATUS, required num LOW_FLOAT, required num MEDIUM_FLOAT, required num HIGH_FLOAT, required num LOW_INT, required num MEDIUM_INT, required num HIGH_INT, required num FRAMEBUFFER, required num RENDERBUFFER, required num RGBA4, required num RGB5_A1, required num RGBA8, required num RGB565, required num DEPTH_COMPONENT16, required num STENCIL_INDEX8, required num DEPTH_STENCIL, required num RENDERBUFFER_WIDTH, required num RENDERBUFFER_HEIGHT, required num RENDERBUFFER_INTERNAL_FORMAT, required num RENDERBUFFER_RED_SIZE, required num RENDERBUFFER_GREEN_SIZE, required num RENDERBUFFER_BLUE_SIZE, required num RENDERBUFFER_ALPHA_SIZE, required num RENDERBUFFER_DEPTH_SIZE, required num RENDERBUFFER_STENCIL_SIZE, required num FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, required num FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, required num FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, required num FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, required num COLOR_ATTACHMENT0, required num DEPTH_ATTACHMENT, required num STENCIL_ATTACHMENT, required num DEPTH_STENCIL_ATTACHMENT, required num NONE, required num FRAMEBUFFER_COMPLETE, required num FRAMEBUFFER_INCOMPLETE_ATTACHMENT, required num FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT, required num FRAMEBUFFER_INCOMPLETE_DIMENSIONS, required num FRAMEBUFFER_UNSUPPORTED, required num FRAMEBUFFER_BINDING, required num RENDERBUFFER_BINDING, required num MAX_RENDERBUFFER_SIZE, required num INVALID_FRAMEBUFFER_OPERATION, required num UNPACK_FLIP_Y_WEBGL, required num UNPACK_PREMULTIPLY_ALPHA_WEBGL, required num CONTEXT_LOST_WEBGL, required num UNPACK_COLORSPACE_CONVERSION_WEBGL, required num BROWSER_DEFAULT_WEBGL});
}
extension AnonInterface$632Extension on AnonInterface$632 {
  external WebGLRenderingContext get prototype;
  external set prototype(WebGLRenderingContext value);
  external num get DEPTH_BUFFER_BIT;
  external num get STENCIL_BUFFER_BIT;
  external num get COLOR_BUFFER_BIT;
  external num get POINTS;
  external num get LINES;
  external num get LINE_LOOP;
  external num get LINE_STRIP;
  external num get TRIANGLES;
  external num get TRIANGLE_STRIP;
  external num get TRIANGLE_FAN;
  external num get ZERO;
  external num get ONE;
  external num get SRC_COLOR;
  external num get ONE_MINUS_SRC_COLOR;
  external num get SRC_ALPHA;
  external num get ONE_MINUS_SRC_ALPHA;
  external num get DST_ALPHA;
  external num get ONE_MINUS_DST_ALPHA;
  external num get DST_COLOR;
  external num get ONE_MINUS_DST_COLOR;
  external num get SRC_ALPHA_SATURATE;
  external num get FUNC_ADD;
  external num get BLEND_EQUATION;
  external num get BLEND_EQUATION_RGB;
  external num get BLEND_EQUATION_ALPHA;
  external num get FUNC_SUBTRACT;
  external num get FUNC_REVERSE_SUBTRACT;
  external num get BLEND_DST_RGB;
  external num get BLEND_SRC_RGB;
  external num get BLEND_DST_ALPHA;
  external num get BLEND_SRC_ALPHA;
  external num get CONSTANT_COLOR;
  external num get ONE_MINUS_CONSTANT_COLOR;
  external num get CONSTANT_ALPHA;
  external num get ONE_MINUS_CONSTANT_ALPHA;
  external num get BLEND_COLOR;
  external num get ARRAY_BUFFER;
  external num get ELEMENT_ARRAY_BUFFER;
  external num get ARRAY_BUFFER_BINDING;
  external num get ELEMENT_ARRAY_BUFFER_BINDING;
  external num get STREAM_DRAW;
  external num get STATIC_DRAW;
  external num get DYNAMIC_DRAW;
  external num get BUFFER_SIZE;
  external num get BUFFER_USAGE;
  external num get CURRENT_VERTEX_ATTRIB;
  external num get FRONT;
  external num get BACK;
  external num get FRONT_AND_BACK;
  external num get CULL_FACE;
  external num get BLEND;
  external num get DITHER;
  external num get STENCIL_TEST;
  external num get DEPTH_TEST;
  external num get SCISSOR_TEST;
  external num get POLYGON_OFFSET_FILL;
  external num get SAMPLE_ALPHA_TO_COVERAGE;
  external num get SAMPLE_COVERAGE;
  external num get NO_ERROR;
  external num get INVALID_ENUM;
  external num get INVALID_VALUE;
  external num get INVALID_OPERATION;
  external num get OUT_OF_MEMORY;
  external num get CW;
  external num get CCW;
  external num get LINE_WIDTH;
  external num get ALIASED_POINT_SIZE_RANGE;
  external num get ALIASED_LINE_WIDTH_RANGE;
  external num get CULL_FACE_MODE;
  external num get FRONT_FACE;
  external num get DEPTH_RANGE;
  external num get DEPTH_WRITEMASK;
  external num get DEPTH_CLEAR_VALUE;
  external num get DEPTH_FUNC;
  external num get STENCIL_CLEAR_VALUE;
  external num get STENCIL_FUNC;
  external num get STENCIL_FAIL;
  external num get STENCIL_PASS_DEPTH_FAIL;
  external num get STENCIL_PASS_DEPTH_PASS;
  external num get STENCIL_REF;
  external num get STENCIL_VALUE_MASK;
  external num get STENCIL_WRITEMASK;
  external num get STENCIL_BACK_FUNC;
  external num get STENCIL_BACK_FAIL;
  external num get STENCIL_BACK_PASS_DEPTH_FAIL;
  external num get STENCIL_BACK_PASS_DEPTH_PASS;
  external num get STENCIL_BACK_REF;
  external num get STENCIL_BACK_VALUE_MASK;
  external num get STENCIL_BACK_WRITEMASK;
  external num get VIEWPORT;
  external num get SCISSOR_BOX;
  external num get COLOR_CLEAR_VALUE;
  external num get COLOR_WRITEMASK;
  external num get UNPACK_ALIGNMENT;
  external num get PACK_ALIGNMENT;
  external num get MAX_TEXTURE_SIZE;
  external num get MAX_VIEWPORT_DIMS;
  external num get SUBPIXEL_BITS;
  external num get RED_BITS;
  external num get GREEN_BITS;
  external num get BLUE_BITS;
  external num get ALPHA_BITS;
  external num get DEPTH_BITS;
  external num get STENCIL_BITS;
  external num get POLYGON_OFFSET_UNITS;
  external num get POLYGON_OFFSET_FACTOR;
  external num get TEXTURE_BINDING_2D;
  external num get SAMPLE_BUFFERS;
  external num get SAMPLES;
  external num get SAMPLE_COVERAGE_VALUE;
  external num get SAMPLE_COVERAGE_INVERT;
  external num get COMPRESSED_TEXTURE_FORMATS;
  external num get DONT_CARE;
  external num get FASTEST;
  external num get NICEST;
  external num get GENERATE_MIPMAP_HINT;
  external num get BYTE;
  external num get UNSIGNED_BYTE;
  external num get SHORT;
  external num get UNSIGNED_SHORT;
  external num get INT;
  external num get UNSIGNED_INT;
  external num get FLOAT;
  external num get DEPTH_COMPONENT;
  external num get ALPHA;
  external num get RGB;
  external num get RGBA;
  external num get LUMINANCE;
  external num get LUMINANCE_ALPHA;
  external num get UNSIGNED_SHORT_4_4_4_4;
  external num get UNSIGNED_SHORT_5_5_5_1;
  external num get UNSIGNED_SHORT_5_6_5;
  external num get FRAGMENT_SHADER;
  external num get VERTEX_SHADER;
  external num get MAX_VERTEX_ATTRIBS;
  external num get MAX_VERTEX_UNIFORM_VECTORS;
  external num get MAX_VARYING_VECTORS;
  external num get MAX_COMBINED_TEXTURE_IMAGE_UNITS;
  external num get MAX_VERTEX_TEXTURE_IMAGE_UNITS;
  external num get MAX_TEXTURE_IMAGE_UNITS;
  external num get MAX_FRAGMENT_UNIFORM_VECTORS;
  external num get SHADER_TYPE;
  external num get DELETE_STATUS;
  external num get LINK_STATUS;
  external num get VALIDATE_STATUS;
  external num get ATTACHED_SHADERS;
  external num get ACTIVE_UNIFORMS;
  external num get ACTIVE_ATTRIBUTES;
  external num get SHADING_LANGUAGE_VERSION;
  external num get CURRENT_PROGRAM;
  external num get NEVER;
  external num get LESS;
  external num get EQUAL;
  external num get LEQUAL;
  external num get GREATER;
  external num get NOTEQUAL;
  external num get GEQUAL;
  external num get ALWAYS;
  external num get KEEP;
  external num get REPLACE;
  external num get INCR;
  external num get DECR;
  external num get INVERT;
  external num get INCR_WRAP;
  external num get DECR_WRAP;
  external num get VENDOR;
  external num get RENDERER;
  external num get VERSION;
  external num get NEAREST;
  external num get LINEAR;
  external num get NEAREST_MIPMAP_NEAREST;
  external num get LINEAR_MIPMAP_NEAREST;
  external num get NEAREST_MIPMAP_LINEAR;
  external num get LINEAR_MIPMAP_LINEAR;
  external num get TEXTURE_MAG_FILTER;
  external num get TEXTURE_MIN_FILTER;
  external num get TEXTURE_WRAP_S;
  external num get TEXTURE_WRAP_T;
  external num get TEXTURE_2D;
  external num get TEXTURE;
  external num get TEXTURE_CUBE_MAP;
  external num get TEXTURE_BINDING_CUBE_MAP;
  external num get TEXTURE_CUBE_MAP_POSITIVE_X;
  external num get TEXTURE_CUBE_MAP_NEGATIVE_X;
  external num get TEXTURE_CUBE_MAP_POSITIVE_Y;
  external num get TEXTURE_CUBE_MAP_NEGATIVE_Y;
  external num get TEXTURE_CUBE_MAP_POSITIVE_Z;
  external num get TEXTURE_CUBE_MAP_NEGATIVE_Z;
  external num get MAX_CUBE_MAP_TEXTURE_SIZE;
  external num get TEXTURE0;
  external num get TEXTURE1;
  external num get TEXTURE2;
  external num get TEXTURE3;
  external num get TEXTURE4;
  external num get TEXTURE5;
  external num get TEXTURE6;
  external num get TEXTURE7;
  external num get TEXTURE8;
  external num get TEXTURE9;
  external num get TEXTURE10;
  external num get TEXTURE11;
  external num get TEXTURE12;
  external num get TEXTURE13;
  external num get TEXTURE14;
  external num get TEXTURE15;
  external num get TEXTURE16;
  external num get TEXTURE17;
  external num get TEXTURE18;
  external num get TEXTURE19;
  external num get TEXTURE20;
  external num get TEXTURE21;
  external num get TEXTURE22;
  external num get TEXTURE23;
  external num get TEXTURE24;
  external num get TEXTURE25;
  external num get TEXTURE26;
  external num get TEXTURE27;
  external num get TEXTURE28;
  external num get TEXTURE29;
  external num get TEXTURE30;
  external num get TEXTURE31;
  external num get ACTIVE_TEXTURE;
  external num get REPEAT;
  external num get CLAMP_TO_EDGE;
  external num get MIRRORED_REPEAT;
  external num get FLOAT_VEC2;
  external num get FLOAT_VEC3;
  external num get FLOAT_VEC4;
  external num get INT_VEC2;
  external num get INT_VEC3;
  external num get INT_VEC4;
  external num get BOOL;
  external num get BOOL_VEC2;
  external num get BOOL_VEC3;
  external num get BOOL_VEC4;
  external num get FLOAT_MAT2;
  external num get FLOAT_MAT3;
  external num get FLOAT_MAT4;
  external num get SAMPLER_2D;
  external num get SAMPLER_CUBE;
  external num get VERTEX_ATTRIB_ARRAY_ENABLED;
  external num get VERTEX_ATTRIB_ARRAY_SIZE;
  external num get VERTEX_ATTRIB_ARRAY_STRIDE;
  external num get VERTEX_ATTRIB_ARRAY_TYPE;
  external num get VERTEX_ATTRIB_ARRAY_NORMALIZED;
  external num get VERTEX_ATTRIB_ARRAY_POINTER;
  external num get VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
  external num get IMPLEMENTATION_COLOR_READ_TYPE;
  external num get IMPLEMENTATION_COLOR_READ_FORMAT;
  external num get COMPILE_STATUS;
  external num get LOW_FLOAT;
  external num get MEDIUM_FLOAT;
  external num get HIGH_FLOAT;
  external num get LOW_INT;
  external num get MEDIUM_INT;
  external num get HIGH_INT;
  external num get FRAMEBUFFER;
  external num get RENDERBUFFER;
  external num get RGBA4;
  external num get RGB5_A1;
  external num get RGBA8;
  external num get RGB565;
  external num get DEPTH_COMPONENT16;
  external num get STENCIL_INDEX8;
  external num get DEPTH_STENCIL;
  external num get RENDERBUFFER_WIDTH;
  external num get RENDERBUFFER_HEIGHT;
  external num get RENDERBUFFER_INTERNAL_FORMAT;
  external num get RENDERBUFFER_RED_SIZE;
  external num get RENDERBUFFER_GREEN_SIZE;
  external num get RENDERBUFFER_BLUE_SIZE;
  external num get RENDERBUFFER_ALPHA_SIZE;
  external num get RENDERBUFFER_DEPTH_SIZE;
  external num get RENDERBUFFER_STENCIL_SIZE;
  external num get FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
  external num get FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
  external num get FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
  external num get FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
  external num get COLOR_ATTACHMENT0;
  external num get DEPTH_ATTACHMENT;
  external num get STENCIL_ATTACHMENT;
  external num get DEPTH_STENCIL_ATTACHMENT;
  external num get NONE;
  external num get FRAMEBUFFER_COMPLETE;
  external num get FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
  external num get FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
  external num get FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
  external num get FRAMEBUFFER_UNSUPPORTED;
  external num get FRAMEBUFFER_BINDING;
  external num get RENDERBUFFER_BINDING;
  external num get MAX_RENDERBUFFER_SIZE;
  external num get INVALID_FRAMEBUFFER_OPERATION;
  external num get UNPACK_FLIP_Y_WEBGL;
  external num get UNPACK_PREMULTIPLY_ALPHA_WEBGL;
  external num get CONTEXT_LOST_WEBGL;
  external num get UNPACK_COLORSPACE_CONVERSION_WEBGL;
  external num get BROWSER_DEFAULT_WEBGL;
}
@JS()
@anonymous
class AnonInterface$633{
  external factory AnonInterface$633({required WebGLSampler prototype});
}
extension AnonInterface$633Extension on AnonInterface$633 {
  external WebGLSampler get prototype;
  external set prototype(WebGLSampler value);
}
@JS()
@anonymous
class AnonInterface$634{
  external factory AnonInterface$634({required WebGLShader prototype});
}
extension AnonInterface$634Extension on AnonInterface$634 {
  external WebGLShader get prototype;
  external set prototype(WebGLShader value);
}
@JS()
@anonymous
class AnonInterface$635{
  external factory AnonInterface$635({required WebGLShaderPrecisionFormat prototype});
}
extension AnonInterface$635Extension on AnonInterface$635 {
  external WebGLShaderPrecisionFormat get prototype;
  external set prototype(WebGLShaderPrecisionFormat value);
}
@JS()
@anonymous
class AnonInterface$636{
  external factory AnonInterface$636({required WebGLSync prototype});
}
extension AnonInterface$636Extension on AnonInterface$636 {
  external WebGLSync get prototype;
  external set prototype(WebGLSync value);
}
@JS()
@anonymous
class AnonInterface$637{
  external factory AnonInterface$637({required WebGLTexture prototype});
}
extension AnonInterface$637Extension on AnonInterface$637 {
  external WebGLTexture get prototype;
  external set prototype(WebGLTexture value);
}
@JS()
@anonymous
class AnonInterface$638{
  external factory AnonInterface$638({required WebGLTransformFeedback prototype});
}
extension AnonInterface$638Extension on AnonInterface$638 {
  external WebGLTransformFeedback get prototype;
  external set prototype(WebGLTransformFeedback value);
}
@JS()
@anonymous
class AnonInterface$639{
  external factory AnonInterface$639({required WebGLUniformLocation prototype});
}
extension AnonInterface$639Extension on AnonInterface$639 {
  external WebGLUniformLocation get prototype;
  external set prototype(WebGLUniformLocation value);
}
@JS()
@anonymous
class AnonInterface$640{
  external factory AnonInterface$640({required WebGLVertexArrayObject prototype});
}
extension AnonInterface$640Extension on AnonInterface$640 {
  external WebGLVertexArrayObject get prototype;
  external set prototype(WebGLVertexArrayObject value);
}
@JS()
@anonymous
class AnonInterface$641{
  external factory AnonInterface$641({required WebSocket prototype, required num CONNECTING, required num OPEN, required num CLOSING, required num CLOSED});
}
extension AnonInterface$641Extension on AnonInterface$641 {
  external WebSocket get prototype;
  external set prototype(WebSocket value);
  external num get CONNECTING;
  external num get OPEN;
  external num get CLOSING;
  external num get CLOSED;
}
@JS()
@anonymous
class AnonInterface$642{
  external factory AnonInterface$642({required WebTransport prototype});
}
extension AnonInterface$642Extension on AnonInterface$642 {
  external WebTransport get prototype;
  external set prototype(WebTransport value);
}
@JS()
@anonymous
class AnonInterface$643{
  external factory AnonInterface$643({required WebTransportBidirectionalStream prototype});
}
extension AnonInterface$643Extension on AnonInterface$643 {
  external WebTransportBidirectionalStream get prototype;
  external set prototype(WebTransportBidirectionalStream value);
}
@JS()
@anonymous
class AnonInterface$644{
  external factory AnonInterface$644({required WebTransportDatagramDuplexStream prototype});
}
extension AnonInterface$644Extension on AnonInterface$644 {
  external WebTransportDatagramDuplexStream get prototype;
  external set prototype(WebTransportDatagramDuplexStream value);
}
@JS()
@anonymous
class AnonInterface$645{
  external factory AnonInterface$645({required WebTransportError prototype});
}
extension AnonInterface$645Extension on AnonInterface$645 {
  external WebTransportError get prototype;
  external set prototype(WebTransportError value);
}
@JS()
@anonymous
class AnonInterface$646{
  external factory AnonInterface$646({required WheelEvent prototype, required num DOM_DELTA_PIXEL, required num DOM_DELTA_LINE, required num DOM_DELTA_PAGE});
}
extension AnonInterface$646Extension on AnonInterface$646 {
  external WheelEvent get prototype;
  external set prototype(WheelEvent value);
  external num get DOM_DELTA_PIXEL;
  external num get DOM_DELTA_LINE;
  external num get DOM_DELTA_PAGE;
}
@JS()
@anonymous
class AnonInterface$647{
  external factory AnonInterface$647({required Window prototype});
}
extension AnonInterface$647Extension on AnonInterface$647 {
  external Window get prototype;
  external set prototype(Window value);
}
@JS()
@anonymous
class AnonInterface$648{
  external factory AnonInterface$648({required Worker prototype});
}
extension AnonInterface$648Extension on AnonInterface$648 {
  external Worker get prototype;
  external set prototype(Worker value);
}
@JS()
@anonymous
class AnonInterface$649{
  external factory AnonInterface$649({required Worklet prototype});
}
extension AnonInterface$649Extension on AnonInterface$649 {
  external Worklet get prototype;
  external set prototype(Worklet value);
}
@JS()
@anonymous
class AnonInterface$650{
  external factory AnonInterface$650({required WritableStream prototype});
}
extension AnonInterface$650Extension on AnonInterface$650 {
  external WritableStream get prototype;
  external set prototype(WritableStream value);
}
@JS()
@anonymous
class AnonInterface$651{
  external factory AnonInterface$651({required WritableStreamDefaultController prototype});
}
extension AnonInterface$651Extension on AnonInterface$651 {
  external WritableStreamDefaultController get prototype;
  external set prototype(WritableStreamDefaultController value);
}
@JS()
@anonymous
class AnonInterface$652{
  external factory AnonInterface$652({required WritableStreamDefaultWriter prototype});
}
extension AnonInterface$652Extension on AnonInterface$652 {
  external WritableStreamDefaultWriter get prototype;
  external set prototype(WritableStreamDefaultWriter value);
}
@JS()
@anonymous
class AnonInterface$653{
  external factory AnonInterface$653({required XMLDocument prototype});
}
extension AnonInterface$653Extension on AnonInterface$653 {
  external XMLDocument get prototype;
  external set prototype(XMLDocument value);
}
@JS()
@anonymous
class AnonInterface$654{
  external factory AnonInterface$654({required XMLHttpRequest prototype, required num UNSENT, required num OPENED, required num HEADERS_RECEIVED, required num LOADING, required num DONE});
}
extension AnonInterface$654Extension on AnonInterface$654 {
  external XMLHttpRequest get prototype;
  external set prototype(XMLHttpRequest value);
  external num get UNSENT;
  external num get OPENED;
  external num get HEADERS_RECEIVED;
  external num get LOADING;
  external num get DONE;
}
@JS()
@anonymous
class AnonInterface$655{
  external factory AnonInterface$655({required XMLHttpRequestEventTarget prototype});
}
extension AnonInterface$655Extension on AnonInterface$655 {
  external XMLHttpRequestEventTarget get prototype;
  external set prototype(XMLHttpRequestEventTarget value);
}
@JS()
@anonymous
class AnonInterface$656{
  external factory AnonInterface$656({required XMLHttpRequestUpload prototype});
}
extension AnonInterface$656Extension on AnonInterface$656 {
  external XMLHttpRequestUpload get prototype;
  external set prototype(XMLHttpRequestUpload value);
}
@JS()
@anonymous
class AnonInterface$657{
  external factory AnonInterface$657({required XMLSerializer prototype});
}
extension AnonInterface$657Extension on AnonInterface$657 {
  external XMLSerializer get prototype;
  external set prototype(XMLSerializer value);
}
@JS()
@anonymous
class AnonInterface$658{
  external factory AnonInterface$658({required XPathEvaluator prototype});
}
extension AnonInterface$658Extension on AnonInterface$658 {
  external XPathEvaluator get prototype;
  external set prototype(XPathEvaluator value);
}
@JS()
@anonymous
class AnonInterface$659{
  external factory AnonInterface$659({required XPathExpression prototype});
}
extension AnonInterface$659Extension on AnonInterface$659 {
  external XPathExpression get prototype;
  external set prototype(XPathExpression value);
}
@JS()
@anonymous
class AnonInterface$660{
  external factory AnonInterface$660({required XPathResult prototype, required num ANY_TYPE, required num NUMBER_TYPE, required num STRING_TYPE, required num BOOLEAN_TYPE, required num UNORDERED_NODE_ITERATOR_TYPE, required num ORDERED_NODE_ITERATOR_TYPE, required num UNORDERED_NODE_SNAPSHOT_TYPE, required num ORDERED_NODE_SNAPSHOT_TYPE, required num ANY_UNORDERED_NODE_TYPE, required num FIRST_ORDERED_NODE_TYPE});
}
extension AnonInterface$660Extension on AnonInterface$660 {
  external XPathResult get prototype;
  external set prototype(XPathResult value);
  external num get ANY_TYPE;
  external num get NUMBER_TYPE;
  external num get STRING_TYPE;
  external num get BOOLEAN_TYPE;
  external num get UNORDERED_NODE_ITERATOR_TYPE;
  external num get ORDERED_NODE_ITERATOR_TYPE;
  external num get UNORDERED_NODE_SNAPSHOT_TYPE;
  external num get ORDERED_NODE_SNAPSHOT_TYPE;
  external num get ANY_UNORDERED_NODE_TYPE;
  external num get FIRST_ORDERED_NODE_TYPE;
}
@JS()
@anonymous
class AnonInterface$661{
  external factory AnonInterface$661({required XSLTProcessor prototype});
}
extension AnonInterface$661Extension on AnonInterface$661 {
  external XSLTProcessor get prototype;
  external set prototype(XSLTProcessor value);
}
@JS()
@anonymous
class AnonInterface$662{
  external factory AnonInterface$662({required CompileError prototype});
}
extension AnonInterface$662Extension on AnonInterface$662 {
  external CompileError get prototype;
  external set prototype(CompileError value);
}
@JS()
@anonymous
class AnonInterface$663{
  external factory AnonInterface$663({required Global prototype});
}
extension AnonInterface$663Extension on AnonInterface$663 {
  external Global get prototype;
  external set prototype(Global value);
}
@JS()
@anonymous
class AnonInterface$664{
  external factory AnonInterface$664({required Instance prototype});
}
extension AnonInterface$664Extension on AnonInterface$664 {
  external Instance get prototype;
  external set prototype(Instance value);
}
@JS()
@anonymous
class AnonInterface$665{
  external factory AnonInterface$665({required LinkError prototype});
}
extension AnonInterface$665Extension on AnonInterface$665 {
  external LinkError get prototype;
  external set prototype(LinkError value);
}
@JS()
@anonymous
class AnonInterface$666{
  external factory AnonInterface$666({required Memory prototype});
}
extension AnonInterface$666Extension on AnonInterface$666 {
  external Memory get prototype;
  external set prototype(Memory value);
}
@JS()
@anonymous
class AnonInterface$667{
  external factory AnonInterface$667({required Module prototype});
}
extension AnonInterface$667Extension on AnonInterface$667 {
  external Module get prototype;
  external set prototype(Module value);
  @JS("customSections")
  external List<ArrayBuffer> customSections(Module moduleObject, String sectionName);
  @JS("exports")
  external List<ModuleExportDescriptor> exports(Module moduleObject);
  @JS("imports")
  external List<ModuleImportDescriptor> imports(Module moduleObject);
}
@JS()
@anonymous
class AnonInterface$668{
  external factory AnonInterface$668({required RuntimeError prototype});
}
extension AnonInterface$668Extension on AnonInterface$668 {
  external RuntimeError get prototype;
  external set prototype(RuntimeError value);
}
@JS()
@anonymous
class AnonInterface$669{
  external factory AnonInterface$669({required Table prototype});
}
extension AnonInterface$669Extension on AnonInterface$669 {
  external Table get prototype;
  external set prototype(Table value);
}
@JS()
@anonymous
class AnonInterface$670{
  external factory AnonInterface$670();
}
extension AnonInterface$670Extension on AnonInterface$670 {
}
@JS()
@anonymous
class AnonInterface$671{
  external factory AnonInterface$671();
}
extension AnonInterface$671Extension on AnonInterface$671 {
}
@JS()
@anonymous
class AnonInterface$672{
  external factory AnonInterface$672();
}
extension AnonInterface$672Extension on AnonInterface$672 {
}"
`;

exports[`TypeScript Definition Files Snapshot Tests > should transpile types.d.ts correctly > types.dart 1`] = `
"// Generated from types.d.ts
// Do not edit directly

@JS()
library types;
import 'package:js/js.dart';


@JS("testString")
external String testString;
@JS("testNumber")
external num testNumber;
@JS("testBoolean")
external bool testBoolean;
@JS("testVoid")
external void testVoid;
@JS("testAny")
external dynamic testAny;
@JS("testUnknown")
external dynamic testUnknown;
@JS("nullableString")
external String? nullableString;
@JS("undefinedString")
external String? undefinedString;
@JS("bothNullable")
external String? bothNullable;
@JS("stringArray")
external List<String> stringArray;
@JS("numberList")
external List<num> numberList;
@JS("booleanArray")
external List<bool> booleanArray;
@JS("mixedArray")
external List<dynamic /* String|num */> mixedArray;
@JS("simpleTuple")
external List<dynamic> simpleTuple;
@JS("singleTypeTuple")
external List<String> singleTypeTuple;
@JS("tupleWithOptional")
external List<dynamic> tupleWithOptional;
@JS("tupleWithRest")
external List<dynamic> tupleWithRest;
@JS("emptyTuple")
external List<dynamic> emptyTuple;
@JS("userObject")
external User userObject;
@JS("htmlElement")
external HTMLElement htmlElement;
@JS("dateObject")
external DateTime dateObject;
@JS("errorObject")
external Error errorObject;
@JS("stringPromise")
external Future<String> stringPromise;
@JS("numberMap")
external Map<String, num> numberMap;
@JS("userRecord")
external Record<String, User> userRecord;
@JS("arrayPromise")
external Future<List<String>> arrayPromise;
@JS("successStatus")
external String successStatus;
@JS("httpCode")
external num httpCode;
@JS("enabledFlag")
external bool enabledFlag;
@JS("failStatus")
external String failStatus;
@JS("stringOrNumber")
external dynamic /* String|num */ stringOrNumber;
@JS("statusLiteral")
external String statusLiteral;
@JS("optionalValue")
external String? optionalValue;
@JS("nullableValue")
external num? nullableValue;
@JS("simpleCallback")
external void Function(String) simpleCallback;
@JS("eventHandler")
external bool Function(Event, [dynamic]) eventHandler;
@JS("varArgsFunction")
external num Function([List<String>]) varArgsFunction;
@JS("noParamFunction")
external String Function() noParamFunction;
@JS("configObject")
external AnonInterface$674 configObject;
@JS("pointObject")
external AnonInterface$17 pointObject;
@JS("complexObject")
external AnonInterface$675 complexObject;
@JS("weirdObject")
external AnonInterface$676 weirdObject;
@JS("discriminatedUnion")
external dynamic discriminatedUnion;
@JS("complexUnion")
external dynamic /* String|num|dynamic */ complexUnion;
@JS("nestedPromise")
external Future<List<User>> nestedPromise;
@JS("complexMapping")
external Map<String, Future<List<User>>> complexMapping;
@JS("deepNesting")
external Future<Map<String, List<User>>> deepNesting;
@JS("tripleNested")
external Future<List<Map<String, num>>> tripleNested;
@JS("overloadedFunc")
external String overloadedFunc_1(String x);
@JS("overloadedFunc")
external num overloadedFunc_2(num x);
@JS("overloadedFunc")
external dynamic /* String|num */ overloadedFunc_3(dynamic /* String|num */ x);
@JS("createElement")
external HTMLDivElement createElement_1(String tag);
@JS("createElement")
external HTMLSpanElement createElement_2(String tag);
@JS("createElement")
external HTMLElement createElement_3(String tag);
typedef StringOrNumber = dynamic;
@JS("conditionalResult")
external StringOrNumber<String> conditionalResult;
@JS("conditionalResult2")
external StringOrNumber<DateTime> conditionalResult2;
typedef ElementType = dynamic;
@JS("inferResult")
external ElementType<List<String>> inferResult;
@JS("inferResult2")
external ElementType<List<User>> inferResult2;
@JS("builtinConditional")
external NonNullable<String?> builtinConditional;
@JS("returnTypeConditional")
external ReturnType<bool Function()> returnTypeConditional;
@JS("mappedType")
external dynamic mappedType;
@JS("indexedType")
external dynamic indexedType;
@JS("templateLiteral")
external dynamic templateLiteral;
@JS("cssVariable")
external dynamic cssVariable;
@JS("eventName")
external dynamic eventName;
@JS("partialUser")
external Partial<User> partialUser;
@JS("requiredUser")
external Required<User> requiredUser;
@JS("pickedUser")
external Pick<User, String> pickedUser;
@JS("omittedUser")
external Omit<User, String> omittedUser;
@JS("userKeys")
external dynamic userKeys;
@JS("userValues")
external dynamic userValues;
@JS("weirdUnion")
external dynamic /* String|dynamic */ weirdUnion;
@JS("intersectionType")
external dynamic intersectionType;
@JS("parenthesized")
external dynamic /* String|num */ parenthesized;
@JS("arrayOfUnions")
external List<dynamic /* String|num */> arrayOfUnions;
@JS("unionOfArrays")
external dynamic /* List<String>|List<num> */ unionOfArrays;
@JS("recursiveType")
external AnonInterface$681 recursiveType;
@JS("superOptional")
external String? superOptional;
@JS("optionalArray")
external List<String?>? optionalArray;
@JS()
@anonymous
abstract class User{}
extension UserExtension on User {
  external String get name;
  external set name(String value);
  external String get email;
  external set email(String value);
  external num get age;
  external set age(num value);
  external List<String> get tags;
  external set tags(List<String> value);
}
@JS()
@anonymous
class AnonInterface$674{
  external factory AnonInterface$674({required String name, num port, required String version});
}
extension AnonInterface$674Extension on AnonInterface$674 {
  external String get name;
  external set name(String value);
  external num get port;
  external set port(num value);
  external String get version;
}
@JS()
@anonymous
class AnonInterface$17{
  external factory AnonInterface$17({required num x, required num y});
}
extension AnonInterface$17Extension on AnonInterface$17 {
  external num get x;
  external set x(num value);
  external num get y;
  external set y(num value);
}
@JS()
@anonymous
class AnonInterface$675{
  external factory AnonInterface$675({required String id, User user, required List<String> tags, required void Function(dynamic) callback});
}
extension AnonInterface$675Extension on AnonInterface$675 {
  external String get id;
  external set id(String value);
  external User get user;
  external set user(User value);
  external List<String> get tags;
  external set tags(List<String> value);
  external void Function(dynamic) get callback;
  external set callback(void Function(dynamic) value);
}
@JS()
@anonymous
class AnonInterface$676{
  external factory AnonInterface$676({required String name, num age, required void Function(String) log});
}
extension AnonInterface$676Extension on AnonInterface$676 {
  external String get name;
  external set name(String value);
  external num get age;
  external void Function(String) get log;
  external set log(void Function(String) value);
  @JS("greet")
  external void greet(String message);
  @JS("genericMethod")
  external T genericMethod(T input);
  @JS("restMethod")
  external void restMethod([/* rest */ List<dynamic> args]);
  external dynamic operator [](Object key);
  external void operator []=(Object key, dynamic value);
}
@JS()
@anonymous
class AnonInterface$681{
  external factory AnonInterface$681({required String value, List<dynamic> children});
}
extension AnonInterface$681Extension on AnonInterface$681 {
  external String get value;
  external set value(String value);
  external List<dynamic> get children;
  external set children(List<dynamic> value);
}"
`;
